

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Mon Apr 25 16:20:53 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  0031FA                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _leftWheelCommandedPW
    58  0031FA  02DF               	dw	735
    59                           
    60                           ;initializer for _rightWheelCommandedPW
    61  0031FC  02D5               	dw	725
    62                           
    63                           	psect	idataBANK0
    64  0031F2                     __pidataBANK0:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _control_ms
    68  0031F2  0064               	dw	100
    69                           
    70                           ;initializer for excerciseControl@leftIntegral
    71  0031F4  0008               	dw	8
    72                           
    73                           ;initializer for excerciseControl@leftWheelCommandedSpeed
    74  0031F6  001E               	dw	30
    75                           
    76                           ;initializer for excerciseControl@rightWheelCommandedSpeed
    77  0031F8  0019               	dw	25
    78                           
    79                           	psect	smallconst
    80  001000                     __psmallconst:
    81                           	opt stack 0
    82  001000  00                 	db	0
    83  001001                     _dpowers:
    84                           	opt stack 0
    85  001001  0001               	dw	1
    86  001003  000A               	dw	10
    87  001005  0064               	dw	100
    88  001007  03E8               	dw	1000
    89  001009  2710               	dw	10000
    90  00100B                     __end_of_dpowers:
    91                           	opt stack 0
    92  0000                     _CCPR3	set	3934
    93  0000                     _TMR5	set	3919
    94  0000                     _ANSELBbits	set	3897
    95  0000                     _ANSELD	set	3899
    96  0000                     _CCP3CON	set	3933
    97  0000                     _CCP3CONbits	set	3933
    98  0000                     _CCPTMRS0bits	set	3913
    99  0000                     _T5CON	set	3918
   100  0000                     _T5CONbits	set	3918
   101  0000                     _VREFCON0bits	set	3906
   102  0000                     _TMR5ON	set	31344
   103  0000                     _CCPR2	set	3943
   104  0000                     _TMR1	set	4046
   105  0000                     _CCP2CON	set	3942
   106  0000                     _CCP2CONbits	set	3942
   107  0000                     _CM1CON0	set	3961
   108  0000                     _CM1CON0bits	set	3961
   109  0000                     _CM2CON0	set	3960
   110  0000                     _CM2CON0bits	set	3960
   111  0000                     _CM2CON1bits	set	3959
   112  0000                     _INTCONbits	set	4082
   113  0000                     _LATA	set	3977
   114  0000                     _LATDbits	set	3980
   115  0000                     _LATEbits	set	3981
   116  0000                     _OSCCONbits	set	4051
   117  0000                     _PIE1bits	set	3997
   118  0000                     _PIE2bits	set	4000
   119  0000                     _PIR1bits	set	3998
   120  0000                     _PIR2bits	set	4001
   121  0000                     _PORTAbits	set	3968
   122  0000                     _PR2	set	4027
   123  0000                     _T1CON	set	4045
   124  0000                     _T1CONbits	set	4045
   125  0000                     _T2CON	set	4026
   126  0000                     _T2CONbits	set	4026
   127  0000                     _TRISA	set	3986
   128  0000                     _TRISAbits	set	3986
   129  0000                     _TRISBbits	set	3987
   130  0000                     _TRISDbits	set	3989
   131  0000                     _TRISEbits	set	3990
   132  0000                     _C1IE	set	32006
   133  0000                     _C1IF	set	32014
   134  0000                     _C2IE	set	32005
   135  0000                     _C2IF	set	32013
   136  0000                     _CCP2IE	set	32000
   137  0000                     _CCP2IF	set	32008
   138  0000                     _CCP3IE	set	31696
   139  0000                     _CCP3IF	set	31704
   140  0000                     _TMR1ON	set	32360
   141  0000                     _TMR2IE	set	31977
   142  0000                     _TMR2IF	set	31985
   143  00100B                     STR_1:
   144  00100B  45                 	db	69	;'E'
   145  00100C  76                 	db	118	;'v'
   146  00100D  65                 	db	101	;'e'
   147  00100E  6E                 	db	110	;'n'
   148  00100F  74                 	db	116	;'t'
   149  001010  3A                 	db	58	;':'
   150  001011  20                 	db	32
   151  001012  25                 	db	37
   152  001013  33                 	db	51	;'3'
   153  001014  64                 	db	100	;'d'
   154  001015  00                 	db	0
   155  001016                     STR_3:
   156  001016  52                 	db	82	;'R'
   157  001017  69                 	db	105	;'i'
   158  001018  67                 	db	103	;'g'
   159  001019  68                 	db	104	;'h'
   160  00101A  74                 	db	116	;'t'
   161  00101B  3A                 	db	58	;':'
   162  00101C  20                 	db	32
   163  00101D  25                 	db	37
   164  00101E  64                 	db	100	;'d'
   165  00101F  00                 	db	0
   166  001020                     STR_2:
   167  001020  4C                 	db	76	;'L'
   168  001021  65                 	db	101	;'e'
   169  001022  66                 	db	102	;'f'
   170  001023  74                 	db	116	;'t'
   171  001024  3A                 	db	58	;':'
   172  001025  20                 	db	32
   173  001026  25                 	db	37
   174  001027  64                 	db	100	;'d'
   175  001028  00                 	db	0
   176                           
   177                           ; #config settings
   178  001029  00                 	db	0	; dummy byte at the end
   179  0000                     
   180                           	psect	cinit
   181  002F04                     __pcinit:
   182                           	opt stack 0
   183  002F04                     start_initialization:
   184                           	opt stack 0
   185  002F04                     __initialization:
   186                           	opt stack 0
   187                           
   188                           ; Clear objects allocated to BANK0 (23 bytes)
   189  002F04  EE00  F0C6         	lfsr	0,__pbssBANK0
   190  002F08  0E17               	movlw	23
   191  002F0A                     clear_0:
   192  002F0A  6AEE               	clrf	postinc0,c
   193  002F0C  06E8               	decf	wreg,f,c
   194  002F0E  E1FD               	bnz	clear_0
   195                           
   196                           ; Clear objects allocated to COMRAM (2 bytes)
   197  002F10  6A4C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   198  002F12  6A4B               	clrf	__pbssCOMRAM& (0+255),c
   199                           
   200                           ; Initialize objects allocated to BANK0 (8 bytes)
   201                           ; load TBLPTR registers with __pidataBANK0
   202  002F14  0EF2               	movlw	low __pidataBANK0
   203  002F16  6EF6               	movwf	tblptrl,c
   204  002F18  0E31               	movlw	high __pidataBANK0
   205  002F1A  6EF7               	movwf	tblptrh,c
   206  002F1C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   207  002F1E  6EF8               	movwf	tblptru,c
   208  002F20  EE00  F0DD         	lfsr	0,__pdataBANK0
   209  002F24  EE10 F008          	lfsr	1,8
   210  002F28                     copy_data0:
   211  002F28  0009               	tblrd		*+
   212  002F2A  CFF5 FFEE          	movff	tablat,postinc0
   213  002F2E  50E5               	movf	postdec1,w,c
   214  002F30  50E1               	movf	fsr1l,w,c
   215  002F32  E1FA               	bnz	copy_data0
   216                           
   217                           ; Initialize objects allocated to COMRAM (4 bytes)
   218                           ; load TBLPTR registers with __pidataCOMRAM
   219  002F34  0EFA               	movlw	low __pidataCOMRAM
   220  002F36  6EF6               	movwf	tblptrl,c
   221  002F38  0E31               	movlw	high __pidataCOMRAM
   222  002F3A  6EF7               	movwf	tblptrh,c
   223  002F3C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   224  002F3E  6EF8               	movwf	tblptru,c
   225  002F40  EE00  F047         	lfsr	0,__pdataCOMRAM
   226  002F44  EE10 F004          	lfsr	1,4
   227  002F48                     copy_data1:
   228  002F48  0009               	tblrd		*+
   229  002F4A  CFF5 FFEE          	movff	tablat,postinc0
   230  002F4E  50E5               	movf	postdec1,w,c
   231  002F50  50E1               	movf	fsr1l,w,c
   232  002F52  E1FA               	bnz	copy_data1
   233  002F54                     end_of_initialization:
   234                           	opt stack 0
   235  002F54                     __end_of__initialization:
   236                           	opt stack 0
   237  002F54  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   238  002F56  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   239  002F58  0E00               	movlw	low (__Lmediumconst shr (0+16))
   240  002F5A  6EF8               	movwf	tblptru,c
   241  002F5C  0100               	movlb	0
   242  002F5E  EFDC  F00D         	goto	_main	;jump to C main() function
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           postdec1	equ	0xFE5
   250                           fsr1l	equ	0xFE1
   251                           
   252                           	psect	bssCOMRAM
   253  00004B                     __pbssCOMRAM:
   254                           	opt stack 0
   255  00004B                     _errno:
   256                           	opt stack 0
   257  00004B                     	ds	2
   258                           tblptru	equ	0xFF8
   259                           tblptrh	equ	0xFF7
   260                           tblptrl	equ	0xFF6
   261                           tablat	equ	0xFF5
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           postdec1	equ	0xFE5
   265                           fsr1l	equ	0xFE1
   266                           
   267                           	psect	dataCOMRAM
   268  000047                     __pdataCOMRAM:
   269                           	opt stack 0
   270  000047                     _leftWheelCommandedPW:
   271                           	opt stack 0
   272  000047                     	ds	2
   273  000049                     _rightWheelCommandedPW:
   274                           	opt stack 0
   275  000049                     	ds	2
   276                           tblptru	equ	0xFF8
   277                           tblptrh	equ	0xFF7
   278                           tblptrl	equ	0xFF6
   279                           tablat	equ	0xFF5
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           postdec1	equ	0xFE5
   283                           fsr1l	equ	0xFE1
   284                           
   285                           	psect	bssBANK0
   286  0000C6                     __pbssBANK0:
   287                           	opt stack 0
   288  0000C6                     _elapsedMillis:
   289                           	opt stack 0
   290  0000C6                     	ds	4
   291  0000CA                     _leftWheelCount:
   292                           	opt stack 0
   293  0000CA                     	ds	4
   294  0000CE                     _rightWheelCount:
   295                           	opt stack 0
   296  0000CE                     	ds	4
   297  0000D2                     excerciseControl@startCircleMillis:
   298                           	opt stack 0
   299  0000D2                     	ds	4
   300  0000D6                     _leftWheelMeasuredSpeed:
   301                           	opt stack 0
   302  0000D6                     	ds	2
   303  0000D8                     _rightWheelMeasuredSpeed:
   304                           	opt stack 0
   305  0000D8                     	ds	2
   306  0000DA                     _event:
   307                           	opt stack 0
   308  0000DA                     	ds	1
   309  0000DB                     _speedCompensation:
   310                           	opt stack 0
   311  0000DB                     	ds	2
   312                           tblptru	equ	0xFF8
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           postinc0	equ	0xFEE
   317                           wreg	equ	0xFE8
   318                           postdec1	equ	0xFE5
   319                           fsr1l	equ	0xFE1
   320                           
   321                           	psect	dataBANK0
   322  0000DD                     __pdataBANK0:
   323                           	opt stack 0
   324  0000DD                     _control_ms:
   325                           	opt stack 0
   326  0000DD                     	ds	2
   327  0000DF                     excerciseControl@leftIntegral:
   328                           	opt stack 0
   329  0000DF                     	ds	2
   330  0000E1                     excerciseControl@leftWheelCommandedSpeed:
   331                           	opt stack 0
   332  0000E1                     	ds	2
   333  0000E3                     excerciseControl@rightWheelCommandedSpeed:
   334                           	opt stack 0
   335  0000E3                     	ds	2
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           postdec1	equ	0xFE5
   343                           fsr1l	equ	0xFE1
   344                           
   345                           	psect	cstackBANK0
   346  000060                     __pcstackBANK0:
   347                           	opt stack 0
   348  000060                     ?_sqrt:
   349                           	opt stack 0
   350  000060                     ?___ftneg:
   351                           	opt stack 0
   352  000060                     ___ftneg@f1:
   353                           	opt stack 0
   354  000060                     sqrt@a:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x0
   358  000060                     	ds	3
   359  000063                     ??_sqrt:
   360                           
   361                           ; 1 bytes @ 0x3
   362  000063                     	ds	3
   363  000066                     sqrt@og:
   364                           	opt stack 0
   365                           
   366                           ; 3 bytes @ 0x6
   367  000066                     	ds	3
   368  000069                     sqrt@z:
   369                           	opt stack 0
   370                           
   371                           ; 3 bytes @ 0x9
   372  000069                     	ds	3
   373  00006C                     sqrt@i:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0xC
   377  00006C                     	ds	1
   378  00006D                     sqrt@q:
   379                           	opt stack 0
   380                           
   381                           ; 3 bytes @ 0xD
   382  00006D                     	ds	3
   383  000070                     sqrt@x:
   384                           	opt stack 0
   385                           
   386                           ; 3 bytes @ 0x10
   387  000070                     	ds	3
   388  000073                     ?___fttol:
   389                           	opt stack 0
   390  000073                     ___fttol@f1:
   391                           	opt stack 0
   392                           
   393                           ; 3 bytes @ 0x13
   394  000073                     	ds	4
   395  000077                     ??___fttol:
   396                           
   397                           ; 1 bytes @ 0x17
   398  000077                     	ds	5
   399  00007C                     ___fttol@sign1:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x1C
   403  00007C                     	ds	1
   404  00007D                     ___fttol@lval:
   405                           	opt stack 0
   406                           
   407                           ; 4 bytes @ 0x1D
   408  00007D                     	ds	4
   409  000081                     ___fttol@exp1:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x21
   413  000081                     	ds	1
   414  000082                     ?___altoft:
   415                           	opt stack 0
   416  000082                     wheelVelocity@speed:
   417                           	opt stack 0
   418  000082                     ___altoft@c:
   419                           	opt stack 0
   420                           
   421                           ; 4 bytes @ 0x22
   422  000082                     	ds	2
   423  000084                     wheelVelocity@speedCompensation:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x24
   427  000084                     	ds	2
   428  000086                     ??___altoft:
   429  000086                     _wheelVelocity$2066:
   430                           	opt stack 0
   431                           
   432                           ; 3 bytes @ 0x26
   433  000086                     	ds	3
   434  000089                     wheelVelocity@wheel:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x29
   438  000089                     	ds	1
   439  00008A                     ?_trunc:
   440                           	opt stack 0
   441  00008A                     trunc@x:
   442                           	opt stack 0
   443                           
   444                           ; 3 bytes @ 0x2A
   445  00008A                     	ds	3
   446  00008D                     trunc@i:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x2D
   450  00008D                     	ds	3
   451  000090                     trunc@expon:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x30
   455  000090                     	ds	2
   456  000092                     ?_round:
   457                           	opt stack 0
   458  000092                     round@x:
   459                           	opt stack 0
   460                           
   461                           ; 3 bytes @ 0x32
   462  000092                     	ds	3
   463  000095                     round@f:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0x35
   467  000095                     	ds	3
   468  000098                     ??_excerciseControl:
   469                           
   470                           ; 1 bytes @ 0x38
   471  000098                     	ds	4
   472  00009C                     excerciseControl@temp:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x3C
   476  00009C                     	ds	2
   477  00009E                     _excerciseControl$2070:
   478                           	opt stack 0
   479                           
   480                           ; 3 bytes @ 0x3E
   481  00009E                     	ds	3
   482  0000A1                     _excerciseControl$2067:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x41
   486  0000A1                     	ds	3
   487  0000A4                     _excerciseControl$2068:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x44
   491  0000A4                     	ds	3
   492  0000A7                     _excerciseControl$2069:
   493                           	opt stack 0
   494                           
   495                           ; 3 bytes @ 0x47
   496  0000A7                     	ds	3
   497  0000AA                     excerciseControl@i:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x4A
   501  0000AA                     	ds	2
   502  0000AC                     excerciseControl@i_1035:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x4C
   506  0000AC                     	ds	2
   507  0000AE                     ??_main:
   508                           
   509                           ; 1 bytes @ 0x4E
   510  0000AE                     	ds	8
   511  0000B6                     main@controlLastMillis:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0x56
   515  0000B6                     	ds	4
   516  0000BA                     main@lcdLastMillis:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x5A
   520  0000BA                     	ds	4
   521  0000BE                     main@leftCountTracker:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x5E
   525  0000BE                     	ds	2
   526  0000C0                     main@rightCountTracker:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x60
   530  0000C0                     	ds	2
   531  0000C2                     main@speedLastMillis:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x62
   535  0000C2                     	ds	4
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1l	equ	0xFE1
   544                           
   545                           	psect	cstackCOMRAM
   546  000001                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000001                     ??_ISR:
   549  000001                     
   550                           ; 1 bytes @ 0x0
   551  000001                     	ds	16
   552  000011                     ISR@dummy:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x10
   556  000011                     	ds	1
   557  000012                     ISR@dummy_1019:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x11
   561  000012                     	ds	1
   562  000013                     ??_isdigit:
   563  000013                     ?___wmul:
   564                           	opt stack 0
   565  000013                     ?___lwdiv:
   566                           	opt stack 0
   567  000013                     ?___ftpack:
   568                           	opt stack 0
   569  000013                     LCDcmd@command:
   570                           	opt stack 0
   571  000013                     limitWheelSpeeds@leftWheelSpeed:
   572                           	opt stack 0
   573  000013                     ___wmul@multiplier:
   574                           	opt stack 0
   575  000013                     ___lwdiv@dividend:
   576                           	opt stack 0
   577  000013                     ___ftpack@arg:
   578                           	opt stack 0
   579  000013                     frexp@value:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x12
   583  000013                     	ds	1
   584  000014                     ??_LCDinit:
   585  000014                     LCDwrite@input:
   586                           	opt stack 0
   587  000014                     _isdigit$1679:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x13
   591  000014                     	ds	1
   592  000015                     putch@data:
   593                           	opt stack 0
   594  000015                     isdigit@c:
   595                           	opt stack 0
   596  000015                     limitWheelSpeeds@rightWheelSpeed:
   597                           	opt stack 0
   598  000015                     ___wmul@multiplicand:
   599                           	opt stack 0
   600  000015                     ___lwdiv@divisor:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x14
   604  000015                     	ds	1
   605  000016                     ___ftpack@exp:
   606                           	opt stack 0
   607  000016                     frexp@eptr:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x15
   611  000016                     	ds	1
   612  000017                     ___ftpack@sign:
   613                           	opt stack 0
   614  000017                     limitWheelSpeeds@speedCompensation:
   615                           	opt stack 0
   616  000017                     ___wmul@product:
   617                           	opt stack 0
   618  000017                     ___lwdiv@quotient:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x16
   622  000017                     	ds	1
   623  000018                     ??___ftpack:
   624  000018                     ??_frexp:
   625                           
   626                           ; 1 bytes @ 0x17
   627  000018                     	ds	1
   628  000019                     ___lwdiv@counter:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x18
   632  000019                     	ds	1
   633  00001A                     ?___lwmod:
   634                           	opt stack 0
   635  00001A                     ___lwmod@dividend:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x19
   639  00001A                     	ds	1
   640  00001B                     ?___awtoft:
   641                           	opt stack 0
   642  00001B                     ?___lltoft:
   643                           	opt stack 0
   644  00001B                     ___awtoft@c:
   645                           	opt stack 0
   646  00001B                     ___lltoft@c:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x1A
   650  00001B                     	ds	1
   651  00001C                     ___lwmod@divisor:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x1B
   655  00001C                     	ds	2
   656  00001E                     ___awtoft@sign:
   657                           	opt stack 0
   658  00001E                     ___lwmod@counter:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x1D
   662  00001E                     	ds	1
   663  00001F                     ??___lltoft:
   664  00001F                     ?_printf:
   665                           	opt stack 0
   666  00001F                     printf@f:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x1E
   670  00001F                     	ds	4
   671  000023                     ___lltoft@exp:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x22
   675  000023                     	ds	1
   676  000024                     ?___ftmul:
   677                           	opt stack 0
   678  000024                     ___ftmul@f1:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x23
   682  000024                     	ds	1
   683  000025                     ??_printf:
   684                           
   685                           ; 1 bytes @ 0x24
   686  000025                     	ds	2
   687  000027                     ___ftmul@f2:
   688                           	opt stack 0
   689                           
   690                           ; 3 bytes @ 0x26
   691  000027                     	ds	2
   692  000029                     printf@ap:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x28
   696  000029                     	ds	1
   697  00002A                     ??___ftmul:
   698                           
   699                           ; 1 bytes @ 0x29
   700  00002A                     	ds	1
   701  00002B                     printf@prec:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x2A
   705  00002B                     	ds	1
   706  00002C                     printf@flag:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x2B
   710  00002C                     	ds	1
   711  00002D                     ___ftmul@exp:
   712                           	opt stack 0
   713  00002D                     printf@val:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x2C
   717  00002D                     	ds	1
   718  00002E                     ___ftmul@f3_as_product:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x2D
   722  00002E                     	ds	1
   723  00002F                     printf@width:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x2E
   727  00002F                     	ds	2
   728  000031                     printf@c:
   729                           	opt stack 0
   730  000031                     ___ftmul@cntr:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x30
   734  000031                     	ds	1
   735  000032                     ___ftmul@sign:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x31
   739  000032                     	ds	1
   740  000033                     ?___ftadd:
   741                           	opt stack 0
   742  000033                     ?___ftdiv:
   743                           	opt stack 0
   744  000033                     ___ftadd@f1:
   745                           	opt stack 0
   746  000033                     ___ftdiv@f1:
   747                           	opt stack 0
   748  000033                     ___ftge@ff1:
   749                           	opt stack 0
   750                           
   751                           ; 3 bytes @ 0x32
   752  000033                     	ds	3
   753  000036                     ___ftadd@f2:
   754                           	opt stack 0
   755  000036                     ___ftdiv@f2:
   756                           	opt stack 0
   757  000036                     ___ftge@ff2:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0x35
   761  000036                     	ds	3
   762  000039                     ??___ftadd:
   763  000039                     ??___ftdiv:
   764  000039                     ??___ftge:
   765                           
   766                           ; 1 bytes @ 0x38
   767  000039                     	ds	3
   768  00003C                     ___ftadd@sign:
   769                           	opt stack 0
   770  00003C                     ___ftdiv@cntr:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x3B
   774  00003C                     	ds	1
   775  00003D                     ___ftadd@exp2:
   776                           	opt stack 0
   777  00003D                     ___ftdiv@f3:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x3C
   781  00003D                     	ds	1
   782  00003E                     ___ftadd@exp1:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x3D
   786  00003E                     	ds	1
   787  00003F                     ?___ftsub:
   788                           	opt stack 0
   789  00003F                     ___ftsub@f1:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x3E
   793  00003F                     	ds	1
   794  000040                     ___ftdiv@exp:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x3F
   798  000040                     	ds	1
   799  000041                     ___ftdiv@sign:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x40
   803  000041                     	ds	1
   804  000042                     ___ftsub@f2:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x41
   808  000042                     	ds	3
   809  000045                     ___altoft@exp:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x44
   813  000045                     	ds	1
   814  000046                     ___altoft@sign:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x45
   818  000046                     	ds	1
   819  000047                     tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postdec1	equ	0xFE5
   826                           fsr1l	equ	0xFE1
   827                           
   828                           ; 1 bytes @ 0x46
   829 ;;
   830 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   831 ;;
   832 ;; *************** function _main *****************
   833 ;; Defined at:
   834 ;;		line 146 in file "main.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;		None
   837 ;; Auto vars:     Size  Location     Type
   838 ;;  speedLastMil    4   98[BANK0 ] unsigned long 
   839 ;;  lcdLastMilli    4   90[BANK0 ] unsigned long 
   840 ;;  controlLastM    4   86[BANK0 ] unsigned long 
   841 ;;  rightCountTr    2   96[BANK0 ] int 
   842 ;;  leftCountTra    2   94[BANK0 ] int 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   856 ;;Total ram usage:       24 bytes
   857 ;; Hardware stack levels required when called:    6
   858 ;; This function calls:
   859 ;;		_LCDclear
   860 ;;		_LCDgotoLineTwo
   861 ;;		_LCDinit
   862 ;;		___ftdiv
   863 ;;		___ftmul
   864 ;;		___fttol
   865 ;;		___lltoft
   866 ;;		_configureComparators
   867 ;;		_configureTimers
   868 ;;		_excerciseControl
   869 ;;		_printf
   870 ;; This function is called by:
   871 ;;		Startup code after reset
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text0
   876  001BB8                     __ptext0:
   877                           	opt stack 0
   878  001BB8                     _main:
   879                           	opt stack 25
   880                           
   881                           ;main.c: 148: OSCCONbits.IRCF = 0b110;
   882                           
   883                           ;incstack = 0
   884  001BB8  50D3               	movf	4051,w,c	;volatile
   885  001BBA  0B8F               	andlw	-113
   886  001BBC  0960               	iorlw	96
   887  001BBE  6ED3               	movwf	4051,c	;volatile
   888                           
   889                           ;main.c: 151: configureComparators();
   890  001BC0  ECDF  F017         	call	_configureComparators	;wreg free
   891                           
   892                           ;main.c: 152: configureTimers();
   893  001BC4  ECD1  F015         	call	_configureTimers	;wreg free
   894                           
   895                           ;main.c: 154: TRISBbits.TRISB4 = 1;
   896  001BC8  8893               	bsf	3987,4,c	;volatile
   897                           
   898                           ;main.c: 155: ANSELBbits.ANSB4 = 0;
   899  001BCA  010F               	movlb	15	; () banked
   900  001BCC  9939               	bcf	57,4,b	;volatile
   901                           
   902                           ;main.c: 159: unsigned long controlLastMillis = 0;
   903  001BCE  0E00               	movlw	0
   904  001BD0  0100               	movlb	0	; () banked
   905  001BD2  6FB6               	movwf	main@controlLastMillis& (0+255),b
   906  001BD4  0E00               	movlw	0
   907  001BD6  6FB7               	movwf	(main@controlLastMillis+1)& (0+255),b
   908  001BD8  0E00               	movlw	0
   909  001BDA  6FB8               	movwf	(main@controlLastMillis+2)& (0+255),b
   910  001BDC  0E00               	movlw	0
   911  001BDE  6FB9               	movwf	(main@controlLastMillis+3)& (0+255),b
   912                           
   913                           ;main.c: 160: unsigned long lcdLastMillis = 0;
   914  001BE0  0E00               	movlw	0
   915  001BE2  0100               	movlb	0	; () banked
   916  001BE4  6FBA               	movwf	main@lcdLastMillis& (0+255),b
   917  001BE6  0E00               	movlw	0
   918  001BE8  6FBB               	movwf	(main@lcdLastMillis+1)& (0+255),b
   919  001BEA  0E00               	movlw	0
   920  001BEC  6FBC               	movwf	(main@lcdLastMillis+2)& (0+255),b
   921  001BEE  0E00               	movlw	0
   922  001BF0  6FBD               	movwf	(main@lcdLastMillis+3)& (0+255),b
   923                           
   924                           ;main.c: 161: unsigned long speedLastMillis = 0;
   925  001BF2  0E00               	movlw	0
   926  001BF4  0100               	movlb	0	; () banked
   927  001BF6  6FC2               	movwf	main@speedLastMillis& (0+255),b
   928  001BF8  0E00               	movlw	0
   929  001BFA  6FC3               	movwf	(main@speedLastMillis+1)& (0+255),b
   930  001BFC  0E00               	movlw	0
   931  001BFE  6FC4               	movwf	(main@speedLastMillis+2)& (0+255),b
   932  001C00  0E00               	movlw	0
   933  001C02  6FC5               	movwf	(main@speedLastMillis+3)& (0+255),b
   934                           
   935                           ;main.c: 162: int leftCountTracker = 0;
   936  001C04  0E00               	movlw	0
   937  001C06  0100               	movlb	0	; () banked
   938  001C08  6FBF               	movwf	(main@leftCountTracker+1)& (0+255),b
   939  001C0A  0E00               	movlw	0
   940  001C0C  6FBE               	movwf	main@leftCountTracker& (0+255),b
   941                           
   942                           ;main.c: 163: int rightCountTracker = 0;
   943  001C0E  0E00               	movlw	0
   944  001C10  0100               	movlb	0	; () banked
   945  001C12  6FC1               	movwf	(main@rightCountTracker+1)& (0+255),b
   946  001C14  0E00               	movlw	0
   947  001C16  6FC0               	movwf	main@rightCountTracker& (0+255),b
   948                           
   949                           ; BSR set to: 0
   950                           ;main.c: 166: LCDinit();
   951  001C18  EC17  F015         	call	_LCDinit	;wreg free
   952                           
   953                           ;main.c: 167: printf("Event: %3d", event);
   954  001C1C  0E0B               	movlw	low STR_1
   955  001C1E  6E1F               	movwf	printf@f,c
   956  001C20  0E10               	movlw	high STR_1
   957  001C22  6E20               	movwf	printf@f+1,c
   958  001C24  C0DA  F021         	movff	_event,?_printf+2
   959  001C28  6A22               	clrf	?_printf+3,c
   960  001C2A  ECCE  F00F         	call	_printf	;wreg free
   961  001C2E                     l3378:
   962                           
   963                           ;main.c: 172: {
   964                           ;main.c: 177: if(lcdLastMillis + 500 < elapsedMillis)
   965  001C2E  0EF4               	movlw	244
   966  001C30  0100               	movlb	0	; () banked
   967  001C32  25BA               	addwf	main@lcdLastMillis& (0+255),w,b
   968  001C34  0100               	movlb	0	; () banked
   969  001C36  6FAE               	movwf	??_main& (0+255),b
   970  001C38  0E01               	movlw	1
   971  001C3A  0100               	movlb	0	; () banked
   972  001C3C  21BB               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
   973  001C3E  0100               	movlb	0	; () banked
   974  001C40  6FAF               	movwf	(??_main+1)& (0+255),b
   975  001C42  0E00               	movlw	0
   976  001C44  0100               	movlb	0	; () banked
   977  001C46  21BC               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
   978  001C48  0100               	movlb	0	; () banked
   979  001C4A  6FB0               	movwf	(??_main+2)& (0+255),b
   980  001C4C  0E00               	movlw	0
   981  001C4E  0100               	movlb	0	; () banked
   982  001C50  21BD               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
   983  001C52  0100               	movlb	0	; () banked
   984  001C54  6FB1               	movwf	(??_main+3)& (0+255),b
   985  001C56  0100               	movlb	0	; () banked
   986  001C58  51C6               	movf	_elapsedMillis& (0+255),w,b
   987  001C5A  0100               	movlb	0	; () banked
   988  001C5C  5DAE               	subwf	??_main& (0+255),w,b
   989  001C5E  0100               	movlb	0	; () banked
   990  001C60  51C7               	movf	(_elapsedMillis+1)& (0+255),w,b
   991  001C62  0100               	movlb	0	; () banked
   992  001C64  59AF               	subwfb	(??_main+1)& (0+255),w,b
   993  001C66  0100               	movlb	0	; () banked
   994  001C68  51C8               	movf	(_elapsedMillis+2)& (0+255),w,b
   995  001C6A  0100               	movlb	0	; () banked
   996  001C6C  59B0               	subwfb	(??_main+2)& (0+255),w,b
   997  001C6E  0100               	movlb	0	; () banked
   998  001C70  51C9               	movf	(_elapsedMillis+3)& (0+255),w,b
   999  001C72  0100               	movlb	0	; () banked
  1000  001C74  59B1               	subwfb	(??_main+3)& (0+255),w,b
  1001  001C76  B0D8               	btfsc	status,0,c
  1002  001C78  D028               	goto	l3388
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;main.c: 178: {
  1006                           ;main.c: 179: LCDclear();
  1007  001C7A  ECE6  F018         	call	_LCDclear	;wreg free
  1008                           
  1009                           ;main.c: 180: lcdLastMillis = elapsedMillis;
  1010  001C7E  C0C6  F0BA         	movff	_elapsedMillis,main@lcdLastMillis
  1011  001C82  C0C7  F0BB         	movff	_elapsedMillis+1,main@lcdLastMillis+1
  1012  001C86  C0C8  F0BC         	movff	_elapsedMillis+2,main@lcdLastMillis+2
  1013  001C8A  C0C9  F0BD         	movff	_elapsedMillis+3,main@lcdLastMillis+3
  1014                           
  1015                           ;main.c: 181: printf("Left: %d", leftWheelCount);
  1016  001C8E  0E20               	movlw	low STR_2
  1017  001C90  6E1F               	movwf	printf@f,c
  1018  001C92  0E10               	movlw	high STR_2
  1019  001C94  6E20               	movwf	printf@f+1,c
  1020  001C96  C0CA  F021         	movff	_leftWheelCount,?_printf+2
  1021  001C9A  C0CB  F022         	movff	_leftWheelCount+1,?_printf+3
  1022  001C9E  C0CC  F023         	movff	_leftWheelCount+2,?_printf+4
  1023  001CA2  C0CD  F024         	movff	_leftWheelCount+3,?_printf+5
  1024  001CA6  ECCE  F00F         	call	_printf	;wreg free
  1025                           
  1026                           ;main.c: 182: LCDgotoLineTwo();
  1027  001CAA  ECDE  F018         	call	_LCDgotoLineTwo	;wreg free
  1028                           
  1029                           ;main.c: 183: printf("Right: %d", rightWheelCount);
  1030  001CAE  0E16               	movlw	low STR_3
  1031  001CB0  6E1F               	movwf	printf@f,c
  1032  001CB2  0E10               	movlw	high STR_3
  1033  001CB4  6E20               	movwf	printf@f+1,c
  1034  001CB6  C0CE  F021         	movff	_rightWheelCount,?_printf+2
  1035  001CBA  C0CF  F022         	movff	_rightWheelCount+1,?_printf+3
  1036  001CBE  C0D0  F023         	movff	_rightWheelCount+2,?_printf+4
  1037  001CC2  C0D1  F024         	movff	_rightWheelCount+3,?_printf+5
  1038  001CC6  ECCE  F00F         	call	_printf	;wreg free
  1039  001CCA                     l3388:
  1040                           
  1041                           ;main.c: 186: }
  1042                           ;main.c: 190: if(controlLastMillis + control_ms < elapsedMillis)
  1043  001CCA  C0DD  F0AE         	movff	_control_ms,??_main
  1044  001CCE  C0DE  F0AF         	movff	_control_ms+1,??_main+1
  1045  001CD2  0E00               	movlw	0
  1046  001CD4  0100               	movlb	0	; () banked
  1047  001CD6  BFAF               	btfsc	(??_main+1)& (0+255),7,b
  1048  001CD8  0EFF               	movlw	255
  1049  001CDA  6FB0               	movwf	(??_main+2)& (0+255),b
  1050  001CDC  6FB1               	movwf	(??_main+3)& (0+255),b
  1051  001CDE  0100               	movlb	0	; () banked
  1052  001CE0  51B6               	movf	main@controlLastMillis& (0+255),w,b
  1053  001CE2  0100               	movlb	0	; () banked
  1054  001CE4  25AE               	addwf	??_main& (0+255),w,b
  1055  001CE6  0100               	movlb	0	; () banked
  1056  001CE8  6FB2               	movwf	(??_main+4)& (0+255),b
  1057  001CEA  0100               	movlb	0	; () banked
  1058  001CEC  51B7               	movf	(main@controlLastMillis+1)& (0+255),w,b
  1059  001CEE  0100               	movlb	0	; () banked
  1060  001CF0  21AF               	addwfc	(??_main+1)& (0+255),w,b
  1061  001CF2  0100               	movlb	0	; () banked
  1062  001CF4  6FB3               	movwf	(??_main+5)& (0+255),b
  1063  001CF6  0100               	movlb	0	; () banked
  1064  001CF8  51B8               	movf	(main@controlLastMillis+2)& (0+255),w,b
  1065  001CFA  0100               	movlb	0	; () banked
  1066  001CFC  21B0               	addwfc	(??_main+2)& (0+255),w,b
  1067  001CFE  0100               	movlb	0	; () banked
  1068  001D00  6FB4               	movwf	(??_main+6)& (0+255),b
  1069  001D02  0100               	movlb	0	; () banked
  1070  001D04  51B9               	movf	(main@controlLastMillis+3)& (0+255),w,b
  1071  001D06  0100               	movlb	0	; () banked
  1072  001D08  21B1               	addwfc	(??_main+3)& (0+255),w,b
  1073  001D0A  0100               	movlb	0	; () banked
  1074  001D0C  6FB5               	movwf	(??_main+7)& (0+255),b
  1075  001D0E  0100               	movlb	0	; () banked
  1076  001D10  51C6               	movf	_elapsedMillis& (0+255),w,b
  1077  001D12  0100               	movlb	0	; () banked
  1078  001D14  5DB2               	subwf	(??_main+4)& (0+255),w,b
  1079  001D16  0100               	movlb	0	; () banked
  1080  001D18  51C7               	movf	(_elapsedMillis+1)& (0+255),w,b
  1081  001D1A  0100               	movlb	0	; () banked
  1082  001D1C  59B3               	subwfb	(??_main+5)& (0+255),w,b
  1083  001D1E  0100               	movlb	0	; () banked
  1084  001D20  51C8               	movf	(_elapsedMillis+2)& (0+255),w,b
  1085  001D22  0100               	movlb	0	; () banked
  1086  001D24  59B4               	subwfb	(??_main+6)& (0+255),w,b
  1087  001D26  0100               	movlb	0	; () banked
  1088  001D28  51C9               	movf	(_elapsedMillis+3)& (0+255),w,b
  1089  001D2A  0100               	movlb	0	; () banked
  1090  001D2C  59B5               	subwfb	(??_main+7)& (0+255),w,b
  1091  001D2E  B0D8               	btfsc	status,0,c
  1092  001D30  D00A               	goto	l3394
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;main.c: 191: {
  1096                           ;main.c: 192: controlLastMillis = elapsedMillis;
  1097  001D32  C0C6  F0B6         	movff	_elapsedMillis,main@controlLastMillis
  1098  001D36  C0C7  F0B7         	movff	_elapsedMillis+1,main@controlLastMillis+1
  1099  001D3A  C0C8  F0B8         	movff	_elapsedMillis+2,main@controlLastMillis+2
  1100  001D3E  C0C9  F0B9         	movff	_elapsedMillis+3,main@controlLastMillis+3
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;main.c: 193: excerciseControl();
  1104  001D42  EC15  F008         	call	_excerciseControl	;wreg free
  1105  001D46                     l3394:
  1106                           
  1107                           ;main.c: 194: }
  1108                           ;main.c: 197: if(speedLastMillis + 500 < elapsedMillis)
  1109  001D46  0EF4               	movlw	244
  1110  001D48  0100               	movlb	0	; () banked
  1111  001D4A  25C2               	addwf	main@speedLastMillis& (0+255),w,b
  1112  001D4C  0100               	movlb	0	; () banked
  1113  001D4E  6FAE               	movwf	??_main& (0+255),b
  1114  001D50  0E01               	movlw	1
  1115  001D52  0100               	movlb	0	; () banked
  1116  001D54  21C3               	addwfc	(main@speedLastMillis+1)& (0+255),w,b
  1117  001D56  0100               	movlb	0	; () banked
  1118  001D58  6FAF               	movwf	(??_main+1)& (0+255),b
  1119  001D5A  0E00               	movlw	0
  1120  001D5C  0100               	movlb	0	; () banked
  1121  001D5E  21C4               	addwfc	(main@speedLastMillis+2)& (0+255),w,b
  1122  001D60  0100               	movlb	0	; () banked
  1123  001D62  6FB0               	movwf	(??_main+2)& (0+255),b
  1124  001D64  0E00               	movlw	0
  1125  001D66  0100               	movlb	0	; () banked
  1126  001D68  21C5               	addwfc	(main@speedLastMillis+3)& (0+255),w,b
  1127  001D6A  0100               	movlb	0	; () banked
  1128  001D6C  6FB1               	movwf	(??_main+3)& (0+255),b
  1129  001D6E  0100               	movlb	0	; () banked
  1130  001D70  51C6               	movf	_elapsedMillis& (0+255),w,b
  1131  001D72  0100               	movlb	0	; () banked
  1132  001D74  5DAE               	subwf	??_main& (0+255),w,b
  1133  001D76  0100               	movlb	0	; () banked
  1134  001D78  51C7               	movf	(_elapsedMillis+1)& (0+255),w,b
  1135  001D7A  0100               	movlb	0	; () banked
  1136  001D7C  59AF               	subwfb	(??_main+1)& (0+255),w,b
  1137  001D7E  0100               	movlb	0	; () banked
  1138  001D80  51C8               	movf	(_elapsedMillis+2)& (0+255),w,b
  1139  001D82  0100               	movlb	0	; () banked
  1140  001D84  59B0               	subwfb	(??_main+2)& (0+255),w,b
  1141  001D86  0100               	movlb	0	; () banked
  1142  001D88  51C9               	movf	(_elapsedMillis+3)& (0+255),w,b
  1143  001D8A  0100               	movlb	0	; () banked
  1144  001D8C  59B1               	subwfb	(??_main+3)& (0+255),w,b
  1145  001D8E  B0D8               	btfsc	status,0,c
  1146  001D90  D74E               	goto	l3378
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;main.c: 198: {
  1150                           ;main.c: 203: rightWheelMeasuredSpeed = (int) ((rightWheelCount - rightCountTracker) * (
      +                          5.4 * 500 ) / (elapsedMillis - speedLastMillis));
  1151  001D92  C0C2  F0AE         	movff	main@speedLastMillis,??_main
  1152  001D96  C0C3  F0AF         	movff	main@speedLastMillis+1,??_main+1
  1153  001D9A  C0C4  F0B0         	movff	main@speedLastMillis+2,??_main+2
  1154  001D9E  C0C5  F0B1         	movff	main@speedLastMillis+3,??_main+3
  1155  001DA2  0100               	movlb	0	; () banked
  1156  001DA4  1FAE               	comf	??_main& (0+255),f,b
  1157  001DA6  1FAF               	comf	(??_main+1)& (0+255),f,b
  1158  001DA8  1FB0               	comf	(??_main+2)& (0+255),f,b
  1159  001DAA  1FB1               	comf	(??_main+3)& (0+255),f,b
  1160  001DAC  2BAE               	incf	??_main& (0+255),f,b
  1161  001DAE  0E00               	movlw	0
  1162  001DB0  23AF               	addwfc	(??_main+1)& (0+255),f,b
  1163  001DB2  23B0               	addwfc	(??_main+2)& (0+255),f,b
  1164  001DB4  23B1               	addwfc	(??_main+3)& (0+255),f,b
  1165  001DB6  0100               	movlb	0	; () banked
  1166  001DB8  51C6               	movf	_elapsedMillis& (0+255),w,b
  1167  001DBA  0100               	movlb	0	; () banked
  1168  001DBC  25AE               	addwf	??_main& (0+255),w,b
  1169  001DBE  6E1B               	movwf	___lltoft@c,c
  1170  001DC0  0100               	movlb	0	; () banked
  1171  001DC2  51C7               	movf	(_elapsedMillis+1)& (0+255),w,b
  1172  001DC4  0100               	movlb	0	; () banked
  1173  001DC6  21AF               	addwfc	(??_main+1)& (0+255),w,b
  1174  001DC8  6E1C               	movwf	___lltoft@c+1,c
  1175  001DCA  0100               	movlb	0	; () banked
  1176  001DCC  51C8               	movf	(_elapsedMillis+2)& (0+255),w,b
  1177  001DCE  0100               	movlb	0	; () banked
  1178  001DD0  21B0               	addwfc	(??_main+2)& (0+255),w,b
  1179  001DD2  6E1D               	movwf	___lltoft@c+2,c
  1180  001DD4  0100               	movlb	0	; () banked
  1181  001DD6  51C9               	movf	(_elapsedMillis+3)& (0+255),w,b
  1182  001DD8  0100               	movlb	0	; () banked
  1183  001DDA  21B1               	addwfc	(??_main+3)& (0+255),w,b
  1184  001DDC  6E1E               	movwf	___lltoft@c+3,c
  1185  001DDE  ECB1  F017         	call	___lltoft	;wreg free
  1186  001DE2  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1187  001DE6  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1188  001DEA  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1189  001DEE  0EC0               	movlw	192
  1190  001DF0  6E27               	movwf	___ftmul@f2,c
  1191  001DF2  0E28               	movlw	40
  1192  001DF4  6E28               	movwf	___ftmul@f2+1,c
  1193  001DF6  0E45               	movlw	69
  1194  001DF8  6E29               	movwf	___ftmul@f2+2,c
  1195  001DFA  C0C0  F0B2         	movff	main@rightCountTracker,??_main+4
  1196  001DFE  C0C1  F0B3         	movff	main@rightCountTracker+1,??_main+5
  1197  001E02  0E00               	movlw	0
  1198  001E04  0100               	movlb	0	; () banked
  1199  001E06  BFB3               	btfsc	(??_main+5)& (0+255),7,b
  1200  001E08  0EFF               	movlw	255
  1201  001E0A  6FB4               	movwf	(??_main+6)& (0+255),b
  1202  001E0C  6FB5               	movwf	(??_main+7)& (0+255),b
  1203  001E0E  0100               	movlb	0	; () banked
  1204  001E10  1FB2               	comf	(??_main+4)& (0+255),f,b
  1205  001E12  1FB3               	comf	(??_main+5)& (0+255),f,b
  1206  001E14  1FB4               	comf	(??_main+6)& (0+255),f,b
  1207  001E16  1FB5               	comf	(??_main+7)& (0+255),f,b
  1208  001E18  2BB2               	incf	(??_main+4)& (0+255),f,b
  1209  001E1A  0E00               	movlw	0
  1210  001E1C  23B3               	addwfc	(??_main+5)& (0+255),f,b
  1211  001E1E  23B4               	addwfc	(??_main+6)& (0+255),f,b
  1212  001E20  23B5               	addwfc	(??_main+7)& (0+255),f,b
  1213  001E22  0100               	movlb	0	; () banked
  1214  001E24  51CE               	movf	_rightWheelCount& (0+255),w,b
  1215  001E26  0100               	movlb	0	; () banked
  1216  001E28  25B2               	addwf	(??_main+4)& (0+255),w,b
  1217  001E2A  6E1B               	movwf	___lltoft@c,c
  1218  001E2C  0100               	movlb	0	; () banked
  1219  001E2E  51CF               	movf	(_rightWheelCount+1)& (0+255),w,b
  1220  001E30  0100               	movlb	0	; () banked
  1221  001E32  21B3               	addwfc	(??_main+5)& (0+255),w,b
  1222  001E34  6E1C               	movwf	___lltoft@c+1,c
  1223  001E36  0100               	movlb	0	; () banked
  1224  001E38  51D0               	movf	(_rightWheelCount+2)& (0+255),w,b
  1225  001E3A  0100               	movlb	0	; () banked
  1226  001E3C  21B4               	addwfc	(??_main+6)& (0+255),w,b
  1227  001E3E  6E1D               	movwf	___lltoft@c+2,c
  1228  001E40  0100               	movlb	0	; () banked
  1229  001E42  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  1230  001E44  0100               	movlb	0	; () banked
  1231  001E46  21B5               	addwfc	(??_main+7)& (0+255),w,b
  1232  001E48  6E1E               	movwf	___lltoft@c+3,c
  1233  001E4A  ECB1  F017         	call	___lltoft	;wreg free
  1234  001E4E  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1235  001E52  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1236  001E56  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1237  001E5A  EC2A  F014         	call	___ftmul	;wreg free
  1238  001E5E  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1239  001E62  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1240  001E66  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1241  001E6A  ECA4  F014         	call	___ftdiv	;wreg free
  1242  001E6E  C033  F073         	movff	?___ftdiv,___fttol@f1
  1243  001E72  C034  F074         	movff	?___ftdiv+1,___fttol@f1+1
  1244  001E76  C035  F075         	movff	?___ftdiv+2,___fttol@f1+2
  1245  001E7A  EC7B  F012         	call	___fttol	;wreg free
  1246  001E7E  C073  F0D8         	movff	?___fttol,_rightWheelMeasuredSpeed
  1247  001E82  C074  F0D9         	movff	?___fttol+1,_rightWheelMeasuredSpeed+1
  1248                           
  1249                           ;main.c: 205: leftWheelMeasuredSpeed = (int) ((leftWheelCount - leftCountTracker) * (5.4
      +                           * 500) / (elapsedMillis - speedLastMillis));
  1250  001E86  C0C2  F0AE         	movff	main@speedLastMillis,??_main
  1251  001E8A  C0C3  F0AF         	movff	main@speedLastMillis+1,??_main+1
  1252  001E8E  C0C4  F0B0         	movff	main@speedLastMillis+2,??_main+2
  1253  001E92  C0C5  F0B1         	movff	main@speedLastMillis+3,??_main+3
  1254  001E96  0100               	movlb	0	; () banked
  1255  001E98  1FAE               	comf	??_main& (0+255),f,b
  1256  001E9A  1FAF               	comf	(??_main+1)& (0+255),f,b
  1257  001E9C  1FB0               	comf	(??_main+2)& (0+255),f,b
  1258  001E9E  1FB1               	comf	(??_main+3)& (0+255),f,b
  1259  001EA0  2BAE               	incf	??_main& (0+255),f,b
  1260  001EA2  0E00               	movlw	0
  1261  001EA4  23AF               	addwfc	(??_main+1)& (0+255),f,b
  1262  001EA6  23B0               	addwfc	(??_main+2)& (0+255),f,b
  1263  001EA8  23B1               	addwfc	(??_main+3)& (0+255),f,b
  1264  001EAA  0100               	movlb	0	; () banked
  1265  001EAC  51C6               	movf	_elapsedMillis& (0+255),w,b
  1266  001EAE  0100               	movlb	0	; () banked
  1267  001EB0  25AE               	addwf	??_main& (0+255),w,b
  1268  001EB2  6E1B               	movwf	___lltoft@c,c
  1269  001EB4  0100               	movlb	0	; () banked
  1270  001EB6  51C7               	movf	(_elapsedMillis+1)& (0+255),w,b
  1271  001EB8  0100               	movlb	0	; () banked
  1272  001EBA  21AF               	addwfc	(??_main+1)& (0+255),w,b
  1273  001EBC  6E1C               	movwf	___lltoft@c+1,c
  1274  001EBE  0100               	movlb	0	; () banked
  1275  001EC0  51C8               	movf	(_elapsedMillis+2)& (0+255),w,b
  1276  001EC2  0100               	movlb	0	; () banked
  1277  001EC4  21B0               	addwfc	(??_main+2)& (0+255),w,b
  1278  001EC6  6E1D               	movwf	___lltoft@c+2,c
  1279  001EC8  0100               	movlb	0	; () banked
  1280  001ECA  51C9               	movf	(_elapsedMillis+3)& (0+255),w,b
  1281  001ECC  0100               	movlb	0	; () banked
  1282  001ECE  21B1               	addwfc	(??_main+3)& (0+255),w,b
  1283  001ED0  6E1E               	movwf	___lltoft@c+3,c
  1284  001ED2  ECB1  F017         	call	___lltoft	;wreg free
  1285  001ED6  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1286  001EDA  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1287  001EDE  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1288  001EE2  0EC0               	movlw	192
  1289  001EE4  6E27               	movwf	___ftmul@f2,c
  1290  001EE6  0E28               	movlw	40
  1291  001EE8  6E28               	movwf	___ftmul@f2+1,c
  1292  001EEA  0E45               	movlw	69
  1293  001EEC  6E29               	movwf	___ftmul@f2+2,c
  1294  001EEE  C0BE  F0B2         	movff	main@leftCountTracker,??_main+4
  1295  001EF2  C0BF  F0B3         	movff	main@leftCountTracker+1,??_main+5
  1296  001EF6  0E00               	movlw	0
  1297  001EF8  0100               	movlb	0	; () banked
  1298  001EFA  BFB3               	btfsc	(??_main+5)& (0+255),7,b
  1299  001EFC  0EFF               	movlw	255
  1300  001EFE  6FB4               	movwf	(??_main+6)& (0+255),b
  1301  001F00  6FB5               	movwf	(??_main+7)& (0+255),b
  1302  001F02  0100               	movlb	0	; () banked
  1303  001F04  1FB2               	comf	(??_main+4)& (0+255),f,b
  1304  001F06  1FB3               	comf	(??_main+5)& (0+255),f,b
  1305  001F08  1FB4               	comf	(??_main+6)& (0+255),f,b
  1306  001F0A  1FB5               	comf	(??_main+7)& (0+255),f,b
  1307  001F0C  2BB2               	incf	(??_main+4)& (0+255),f,b
  1308  001F0E  0E00               	movlw	0
  1309  001F10  23B3               	addwfc	(??_main+5)& (0+255),f,b
  1310  001F12  23B4               	addwfc	(??_main+6)& (0+255),f,b
  1311  001F14  23B5               	addwfc	(??_main+7)& (0+255),f,b
  1312  001F16  0100               	movlb	0	; () banked
  1313  001F18  51CA               	movf	_leftWheelCount& (0+255),w,b
  1314  001F1A  0100               	movlb	0	; () banked
  1315  001F1C  25B2               	addwf	(??_main+4)& (0+255),w,b
  1316  001F1E  6E1B               	movwf	___lltoft@c,c
  1317  001F20  0100               	movlb	0	; () banked
  1318  001F22  51CB               	movf	(_leftWheelCount+1)& (0+255),w,b
  1319  001F24  0100               	movlb	0	; () banked
  1320  001F26  21B3               	addwfc	(??_main+5)& (0+255),w,b
  1321  001F28  6E1C               	movwf	___lltoft@c+1,c
  1322  001F2A  0100               	movlb	0	; () banked
  1323  001F2C  51CC               	movf	(_leftWheelCount+2)& (0+255),w,b
  1324  001F2E  0100               	movlb	0	; () banked
  1325  001F30  21B4               	addwfc	(??_main+6)& (0+255),w,b
  1326  001F32  6E1D               	movwf	___lltoft@c+2,c
  1327  001F34  0100               	movlb	0	; () banked
  1328  001F36  51CD               	movf	(_leftWheelCount+3)& (0+255),w,b
  1329  001F38  0100               	movlb	0	; () banked
  1330  001F3A  21B5               	addwfc	(??_main+7)& (0+255),w,b
  1331  001F3C  6E1E               	movwf	___lltoft@c+3,c
  1332  001F3E  ECB1  F017         	call	___lltoft	;wreg free
  1333  001F42  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1334  001F46  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1335  001F4A  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1336  001F4E  EC2A  F014         	call	___ftmul	;wreg free
  1337  001F52  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1338  001F56  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1339  001F5A  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1340  001F5E  ECA4  F014         	call	___ftdiv	;wreg free
  1341  001F62  C033  F073         	movff	?___ftdiv,___fttol@f1
  1342  001F66  C034  F074         	movff	?___ftdiv+1,___fttol@f1+1
  1343  001F6A  C035  F075         	movff	?___ftdiv+2,___fttol@f1+2
  1344  001F6E  EC7B  F012         	call	___fttol	;wreg free
  1345  001F72  C073  F0D6         	movff	?___fttol,_leftWheelMeasuredSpeed
  1346  001F76  C074  F0D7         	movff	?___fttol+1,_leftWheelMeasuredSpeed+1
  1347                           
  1348                           ;main.c: 207: speedLastMillis = elapsedMillis;
  1349  001F7A  C0C6  F0C2         	movff	_elapsedMillis,main@speedLastMillis
  1350  001F7E  C0C7  F0C3         	movff	_elapsedMillis+1,main@speedLastMillis+1
  1351  001F82  C0C8  F0C4         	movff	_elapsedMillis+2,main@speedLastMillis+2
  1352  001F86  C0C9  F0C5         	movff	_elapsedMillis+3,main@speedLastMillis+3
  1353                           
  1354                           ;main.c: 209: rightCountTracker = rightWheelCount;
  1355  001F8A  C0CE  F0C0         	movff	_rightWheelCount,main@rightCountTracker
  1356  001F8E  C0CF  F0C1         	movff	_rightWheelCount+1,main@rightCountTracker+1
  1357                           
  1358                           ;main.c: 211: leftCountTracker = leftWheelCount;
  1359  001F92  C0CA  F0BE         	movff	_leftWheelCount,main@leftCountTracker
  1360  001F96  C0CB  F0BF         	movff	_leftWheelCount+1,main@leftCountTracker+1
  1361  001F9A  D649               	goto	l3378
  1362  001F9C                     __end_of_main:
  1363                           	opt stack 0
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1l	equ	0xFE1
  1372                           status	equ	0xFD8
  1373                           
  1374 ;; *************** function _printf *****************
  1375 ;; Defined at:
  1376 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1379 ;;		 -> STR_3(10), STR_2(9), STR_1(11), 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  tmpval          4    0        struct .
  1382 ;;  cp              3    0        PTR const unsigned char 
  1383 ;;  width           2   46[COMRAM] int 
  1384 ;;  val             2   44[COMRAM] unsigned int 
  1385 ;;  ap              2   40[COMRAM] PTR void [1]
  1386 ;;		 -> ?_printf(2), 
  1387 ;;  len             2    0        unsigned int 
  1388 ;;  c               1   48[COMRAM] char 
  1389 ;;  flag            1   43[COMRAM] unsigned char 
  1390 ;;  prec            1   42[COMRAM] char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  2   30[COMRAM] int 
  1393 ;; Registers used:
  1394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1400 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;Total ram usage:       19 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    4
  1407 ;; This function calls:
  1408 ;;		___lwdiv
  1409 ;;		___lwmod
  1410 ;;		___wmul
  1411 ;;		_isdigit
  1412 ;;		_putch
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text1
  1419  001F9C                     __ptext1:
  1420                           	opt stack 0
  1421  001F9C                     _printf:
  1422                           	opt stack 26
  1423                           
  1424                           ;doprnt.c: 466: va_list ap;
  1425                           ;doprnt.c: 499: signed char c;
  1426                           ;doprnt.c: 501: int width;
  1427                           ;doprnt.c: 506: signed char prec;
  1428                           ;doprnt.c: 508: unsigned char flag;
  1429                           ;doprnt.c: 523: union {
  1430                           ;doprnt.c: 524: unsigned long vd;
  1431                           ;doprnt.c: 525: double integ;
  1432                           ;doprnt.c: 526: } tmpval;
  1433                           ;doprnt.c: 528: unsigned int val;
  1434                           ;doprnt.c: 529: unsigned len;
  1435                           ;doprnt.c: 530: const char * cp;
  1436                           ;doprnt.c: 533: *ap = __va_start();
  1437                           
  1438                           ;incstack = 0
  1439  001F9C  0E21               	movlw	low (?_printf+2)
  1440  001F9E  6E29               	movwf	printf@ap,c
  1441  001FA0  0E00               	movlw	high (?_printf+2)
  1442  001FA2  6E2A               	movwf	printf@ap+1,c
  1443                           
  1444                           ;doprnt.c: 536: while(c = *f++) {
  1445  001FA4  D0EE               	goto	l2642
  1446  001FA6                     l2566:
  1447                           
  1448                           ;doprnt.c: 538: if(c != '%')
  1449  001FA6  0E25               	movlw	37
  1450  001FA8  1831               	xorwf	printf@c,w,c
  1451  001FAA  B4D8               	btfsc	status,2,c
  1452  001FAC  D004               	goto	l2570
  1453                           
  1454                           ;doprnt.c: 540: {
  1455                           ;doprnt.c: 541: (putch(c) );
  1456  001FAE  5031               	movf	printf@c,w,c
  1457  001FB0  ECF4  F018         	call	_putch
  1458                           
  1459                           ;doprnt.c: 542: continue;
  1460  001FB4  D0E6               	goto	l2642
  1461  001FB6                     l2570:
  1462                           
  1463                           ;doprnt.c: 543: }
  1464                           ;doprnt.c: 546: width = 0;
  1465  001FB6  0E00               	movlw	0
  1466  001FB8  6E30               	movwf	printf@width+1,c
  1467  001FBA  0E00               	movlw	0
  1468  001FBC  6E2F               	movwf	printf@width,c
  1469                           
  1470                           ;doprnt.c: 548: flag = 0;
  1471  001FBE  0E00               	movlw	0
  1472  001FC0  6E2C               	movwf	printf@flag,c
  1473                           
  1474                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1475  001FC2  C01F  FFF6         	movff	printf@f,tblptrl
  1476  001FC6  C020  FFF7         	movff	printf@f+1,tblptrh
  1477  001FCA                     	if	0	;tblptru may be non-zero
  1478  001FCA                     	endif
  1479  001FCA                     	if	0	;tblptru may be non-zero
  1480  001FCA                     	endif
  1481  001FCA  0008               	tblrd		*
  1482  001FCC  50F5               	movf	tablat,w,c
  1483  001FCE  ECBC  F018         	call	_isdigit
  1484  001FD2  A0D8               	btfss	status,0,c
  1485  001FD4  D032               	goto	l2586
  1486                           
  1487                           ;doprnt.c: 598: width = 0;
  1488  001FD6  0E00               	movlw	0
  1489  001FD8  6E30               	movwf	printf@width+1,c
  1490  001FDA  0E00               	movlw	0
  1491  001FDC  6E2F               	movwf	printf@width,c
  1492  001FDE                     l2576:
  1493                           
  1494                           ;doprnt.c: 600: width *= 10;
  1495  001FDE  C02F  F013         	movff	printf@width,___wmul@multiplier
  1496  001FE2  C030  F014         	movff	printf@width+1,___wmul@multiplier+1
  1497  001FE6  0E00               	movlw	0
  1498  001FE8  6E16               	movwf	___wmul@multiplicand+1,c
  1499  001FEA  0E0A               	movlw	10
  1500  001FEC  6E15               	movwf	___wmul@multiplicand,c
  1501  001FEE  ECA9  F018         	call	___wmul	;wreg free
  1502  001FF2  C013  F02F         	movff	?___wmul,printf@width
  1503  001FF6  C014  F030         	movff	?___wmul+1,printf@width+1
  1504                           
  1505                           ;doprnt.c: 601: width += *f++ - '0';
  1506  001FFA  0ED0               	movlw	208
  1507  001FFC  6E25               	movwf	??_printf& (0+255),c
  1508  001FFE  0EFF               	movlw	255
  1509  002000  6E26               	movwf	(??_printf+1)& (0+255),c
  1510  002002  C01F  FFF6         	movff	printf@f,tblptrl
  1511  002006  C020  FFF7         	movff	printf@f+1,tblptrh
  1512  00200A                     	if	0	;tblptru may be non-zero
  1513  00200A                     	endif
  1514  00200A                     	if	0	;tblptru may be non-zero
  1515  00200A                     	endif
  1516  00200A  0008               	tblrd		*
  1517  00200C  50F5               	movf	tablat,w,c
  1518  00200E  6E27               	movwf	(??_printf+2)& (0+255),c
  1519  002010  6A28               	clrf	(??_printf+3)& (0+255),c
  1520  002012  5025               	movf	??_printf,w,c
  1521  002014  2627               	addwf	??_printf+2,f,c
  1522  002016  5026               	movf	??_printf+1,w,c
  1523  002018  2228               	addwfc	??_printf+3,f,c
  1524  00201A  5027               	movf	??_printf+2,w,c
  1525  00201C  262F               	addwf	printf@width,f,c
  1526  00201E  5028               	movf	??_printf+3,w,c
  1527  002020  2230               	addwfc	printf@width+1,f,c
  1528  002022  4A1F               	infsnz	printf@f,f,c
  1529  002024  2A20               	incf	printf@f+1,f,c
  1530                           
  1531                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1532  002026  C01F  FFF6         	movff	printf@f,tblptrl
  1533  00202A  C020  FFF7         	movff	printf@f+1,tblptrh
  1534  00202E                     	if	0	;tblptru may be non-zero
  1535  00202E                     	endif
  1536  00202E                     	if	0	;tblptru may be non-zero
  1537  00202E                     	endif
  1538  00202E  0008               	tblrd		*
  1539  002030  50F5               	movf	tablat,w,c
  1540  002032  ECBC  F018         	call	_isdigit
  1541  002036  B0D8               	btfsc	status,0,c
  1542  002038  D7D2               	goto	l2576
  1543  00203A                     l2586:
  1544  00203A  C01F  FFF6         	movff	printf@f,tblptrl
  1545  00203E  C020  FFF7         	movff	printf@f+1,tblptrh
  1546  002042  4A1F               	infsnz	printf@f,f,c
  1547  002044  2A20               	incf	printf@f+1,f,c
  1548  002046                     	if	0	;tblptru may be non-zero
  1549  002046                     	endif
  1550  002046                     	if	0	;tblptru may be non-zero
  1551  002046                     	endif
  1552  002046  0008               	tblrd		*
  1553  002048  CFF5 F031          	movff	tablat,printf@c
  1554  00204C  5031               	movf	printf@c,w,c
  1555                           
  1556                           ; Switch size 1, requested type "space"
  1557                           ; Number of cases is 3, Range of values is 0 to 105
  1558                           ; switch strategies available:
  1559                           ; Name         Instructions Cycles
  1560                           ; simple_byte           10     6 (average)
  1561                           ;	Chosen strategy is simple_byte
  1562  00204E  0A00               	xorlw	0	; case 0
  1563  002050  B4D8               	btfsc	status,2,c
  1564  002052  0012               	return	
  1565  002054  0A64               	xorlw	100	; case 100
  1566  002056  B4D8               	btfsc	status,2,c
  1567  002058  D003               	goto	l2588
  1568  00205A  0A0D               	xorlw	13	; case 105
  1569  00205C  A4D8               	btfss	status,2,c
  1570  00205E  D091               	goto	l2642
  1571  002060                     l2588:
  1572                           
  1573                           ;doprnt.c: 1253: {
  1574                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1575  002060  C029  FFD9         	movff	printf@ap,fsr2l
  1576  002064  C02A  FFDA         	movff	printf@ap+1,fsr2h
  1577  002068  CFDE F02D          	movff	postinc2,printf@val
  1578  00206C  CFDD F02E          	movff	postdec2,printf@val+1
  1579  002070  0E02               	movlw	2
  1580  002072  2629               	addwf	printf@ap,f,c
  1581  002074  0E00               	movlw	0
  1582  002076  222A               	addwfc	printf@ap+1,f,c
  1583                           
  1584                           ;doprnt.c: 1261: if((int)val < 0) {
  1585  002078  AE2E               	btfss	printf@val+1,7,c
  1586  00207A  D006               	goto	l2598
  1587                           
  1588                           ;doprnt.c: 1262: flag |= 0x03;
  1589  00207C  0E03               	movlw	3
  1590  00207E  122C               	iorwf	printf@flag,f,c
  1591                           
  1592                           ;doprnt.c: 1263: val = -val;
  1593  002080  6C2D               	negf	printf@val,c
  1594  002082  1E2E               	comf	printf@val+1,f,c
  1595  002084  B0D8               	btfsc	status,0,c
  1596  002086  2A2E               	incf	printf@val+1,f,c
  1597  002088                     l2598:
  1598                           
  1599                           ;doprnt.c: 1264: }
  1600                           ;doprnt.c: 1266: }
  1601                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1602  002088  0E01               	movlw	1
  1603  00208A  6E31               	movwf	printf@c,c
  1604  00208C                     l2600:
  1605  00208C  0E05               	movlw	5
  1606  00208E  1831               	xorwf	printf@c,w,c
  1607  002090  B4D8               	btfsc	status,2,c
  1608  002092  D012               	goto	l2612
  1609                           
  1610                           ;doprnt.c: 1306: if(val < dpowers[c])
  1611  002094  5031               	movf	printf@c,w,c
  1612  002096  0D02               	mullw	2
  1613  002098  0E01               	movlw	low _dpowers
  1614  00209A  24F3               	addwf	prodl,w,c
  1615  00209C  6EF6               	movwf	tblptrl,c
  1616  00209E  0E10               	movlw	high _dpowers
  1617  0020A0  20F4               	addwfc	prodh,w,c
  1618  0020A2  6EF7               	movwf	tblptrh,c
  1619  0020A4                     	if	0	;There are less than 3 active tblptr bytes
  1620  0020A4                     	endif
  1621  0020A4  0009               	tblrd		*+
  1622  0020A6  50F5               	movf	tablat,w,c
  1623  0020A8  5C2D               	subwf	printf@val,w,c
  1624  0020AA  0009               	tblrd		*+
  1625  0020AC  50F5               	movf	tablat,w,c
  1626  0020AE  582E               	subwfb	printf@val+1,w,c
  1627  0020B0  A0D8               	btfss	status,0,c
  1628  0020B2  D002               	goto	l2612
  1629                           
  1630                           ;doprnt.c: 1307: break;
  1631  0020B4  2A31               	incf	printf@c,f,c
  1632  0020B6  D7EA               	goto	l2600
  1633  0020B8                     l2612:
  1634                           
  1635                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1636  0020B8  502F               	movf	printf@width,w,c
  1637  0020BA  1030               	iorwf	printf@width+1,w,c
  1638  0020BC  B4D8               	btfsc	status,2,c
  1639  0020BE  D009               	goto	l2618
  1640  0020C0  C02C  F025         	movff	printf@flag,??_printf
  1641  0020C4  0E03               	movlw	3
  1642  0020C6  1625               	andwf	??_printf,f,c
  1643  0020C8  B4D8               	btfsc	status,2,c
  1644  0020CA  D003               	goto	l2618
  1645                           
  1646                           ;doprnt.c: 1346: width--;
  1647  0020CC  062F               	decf	printf@width,f,c
  1648  0020CE  A0D8               	btfss	status,0,c
  1649  0020D0  0630               	decf	printf@width+1,f,c
  1650  0020D2                     l2618:
  1651                           
  1652                           ;doprnt.c: 1381: if(width > c)
  1653  0020D2  0E80               	movlw	128
  1654  0020D4  BE31               	btfsc	printf@c,7,c
  1655  0020D6  0E7F               	movlw	127
  1656  0020D8  6E25               	movwf	??_printf& (0+255),c
  1657  0020DA  502F               	movf	printf@width,w,c
  1658  0020DC  5C31               	subwf	printf@c,w,c
  1659  0020DE  5030               	movf	printf@width+1,w,c
  1660  0020E0  0A80               	xorlw	128
  1661  0020E2  5825               	subwfb	??_printf& (0+255),w,c
  1662  0020E4  B0D8               	btfsc	status,0,c
  1663  0020E6  D007               	goto	l2622
  1664                           
  1665                           ;doprnt.c: 1382: width -= c;
  1666  0020E8  5031               	movf	printf@c,w,c
  1667  0020EA  5E2F               	subwf	printf@width,f,c
  1668  0020EC  0E00               	movlw	0
  1669  0020EE  BE31               	btfsc	printf@c,7,c
  1670  0020F0  0EFF               	movlw	255
  1671  0020F2  5A30               	subwfb	printf@width+1,f,c
  1672  0020F4  D004               	goto	l2624
  1673  0020F6                     l2622:
  1674                           
  1675                           ;doprnt.c: 1383: else
  1676                           ;doprnt.c: 1384: width = 0;
  1677  0020F6  0E00               	movlw	0
  1678  0020F8  6E30               	movwf	printf@width+1,c
  1679  0020FA  0E00               	movlw	0
  1680  0020FC  6E2F               	movwf	printf@width,c
  1681  0020FE                     l2624:
  1682                           
  1683                           ;doprnt.c: 1422: {
  1684                           ;doprnt.c: 1424: if(width
  1685                           ;doprnt.c: 1428: )
  1686  0020FE  502F               	movf	printf@width,w,c
  1687  002100  1030               	iorwf	printf@width+1,w,c
  1688  002102  B4D8               	btfsc	status,2,c
  1689  002104  D00A               	goto	l2630
  1690  002106                     l2626:
  1691                           
  1692                           ;doprnt.c: 1430: (putch(' ') );
  1693  002106  0E20               	movlw	32
  1694  002108  ECF4  F018         	call	_putch
  1695                           
  1696                           ;doprnt.c: 1431: while(--width);
  1697  00210C  062F               	decf	printf@width,f,c
  1698  00210E  A0D8               	btfss	status,0,c
  1699  002110  0630               	decf	printf@width+1,f,c
  1700  002112  502F               	movf	printf@width,w,c
  1701  002114  1030               	iorwf	printf@width+1,w,c
  1702  002116  A4D8               	btfss	status,2,c
  1703  002118  D7F6               	goto	l2626
  1704  00211A                     l2630:
  1705                           
  1706                           ;doprnt.c: 1438: if(flag & 0x03)
  1707  00211A  C02C  F025         	movff	printf@flag,??_printf
  1708  00211E  0E03               	movlw	3
  1709  002120  1625               	andwf	??_printf,f,c
  1710  002122  B4D8               	btfsc	status,2,c
  1711  002124  D003               	goto	l2634
  1712                           
  1713                           ;doprnt.c: 1439: (putch('-') );
  1714  002126  0E2D               	movlw	45
  1715  002128  ECF4  F018         	call	_putch
  1716  00212C                     l2634:
  1717                           
  1718                           ;doprnt.c: 1469: }
  1719                           ;doprnt.c: 1472: prec = c;
  1720  00212C  C031  F02B         	movff	printf@c,printf@prec
  1721                           
  1722                           ;doprnt.c: 1474: while(prec--) {
  1723  002130  D024               	goto	l2640
  1724  002132                     l2636:
  1725                           
  1726                           ;doprnt.c: 1478: {
  1727                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1728  002132  502B               	movf	printf@prec,w,c
  1729  002134  0D02               	mullw	2
  1730  002136  0E01               	movlw	low _dpowers
  1731  002138  24F3               	addwf	prodl,w,c
  1732  00213A  6EF6               	movwf	tblptrl,c
  1733  00213C  0E10               	movlw	high _dpowers
  1734  00213E  20F4               	addwfc	prodh,w,c
  1735  002140  6EF7               	movwf	tblptrh,c
  1736  002142                     	if	0	;There are less than 3 active tblptr bytes
  1737  002142                     	endif
  1738  002142  0009               	tblrd		*+
  1739  002144  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1740  002148  000A               	tblrd		*-
  1741  00214A  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1742  00214E  C02D  F013         	movff	printf@val,___lwdiv@dividend
  1743  002152  C02E  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1744  002156  EC0B  F018         	call	___lwdiv	;wreg free
  1745  00215A  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1746  00215E  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1747  002162  0E00               	movlw	0
  1748  002164  6E1D               	movwf	___lwmod@divisor+1,c
  1749  002166  0E0A               	movlw	10
  1750  002168  6E1C               	movwf	___lwmod@divisor,c
  1751  00216A  EC34  F018         	call	___lwmod	;wreg free
  1752  00216E  501A               	movf	?___lwmod,w,c
  1753  002170  0F30               	addlw	48
  1754  002172  6E31               	movwf	printf@c,c
  1755                           
  1756                           ;doprnt.c: 1523: }
  1757                           ;doprnt.c: 1524: (putch(c) );
  1758  002174  5031               	movf	printf@c,w,c
  1759  002176  ECF4  F018         	call	_putch
  1760  00217A                     l2640:
  1761  00217A  062B               	decf	printf@prec,f,c
  1762  00217C  282B               	incf	printf@prec,w,c
  1763  00217E  A4D8               	btfss	status,2,c
  1764  002180  D7D8               	goto	l2636
  1765  002182                     l2642:
  1766  002182  C01F  FFF6         	movff	printf@f,tblptrl
  1767  002186  C020  FFF7         	movff	printf@f+1,tblptrh
  1768  00218A  4A1F               	infsnz	printf@f,f,c
  1769  00218C  2A20               	incf	printf@f+1,f,c
  1770  00218E                     	if	0	;tblptru may be non-zero
  1771  00218E                     	endif
  1772  00218E                     	if	0	;tblptru may be non-zero
  1773  00218E                     	endif
  1774  00218E  0008               	tblrd		*
  1775  002190  CFF5 F031          	movff	tablat,printf@c
  1776  002194  5031               	movf	printf@c,w,c
  1777  002196  B4D8               	btfsc	status,2,c
  1778  002198  0012               	return	
  1779  00219A  D705               	goto	l2566
  1780  00219C                     __end_of_printf:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           prodh	equ	0xFF4
  1787                           prodl	equ	0xFF3
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1l	equ	0xFE1
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _putch *****************
  1799 ;; Defined at:
  1800 ;;		line 12 in file "printfLib.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  data            1    wreg     unsigned char 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  data            1   20[COMRAM] unsigned char 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;Total ram usage:        1 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    3
  1821 ;; This function calls:
  1822 ;;		_LCDwrite
  1823 ;; This function is called by:
  1824 ;;		_printf
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text2
  1829  0031E8                     __ptext2:
  1830                           	opt stack 0
  1831  0031E8                     _putch:
  1832                           	opt stack 26
  1833                           
  1834                           ;incstack = 0
  1835                           ;putch@data stored from wreg
  1836  0031E8  6E15               	movwf	putch@data,c
  1837                           
  1838                           ;printfLib.c: 13: LCDwrite(data);
  1839  0031EA  5015               	movf	putch@data,w,c
  1840  0031EC  ECD5  F018         	call	_LCDwrite
  1841  0031F0  0012               	return		;funcret
  1842  0031F2                     __end_of_putch:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           prodh	equ	0xFF4
  1849                           prodl	equ	0xFF3
  1850                           postinc0	equ	0xFEE
  1851                           wreg	equ	0xFE8
  1852                           postdec1	equ	0xFE5
  1853                           fsr1l	equ	0xFE1
  1854                           postinc2	equ	0xFDE
  1855                           postdec2	equ	0xFDD
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _LCDwrite *****************
  1861 ;; Defined at:
  1862 ;;		line 118 in file "lcd.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  input           1    wreg     unsigned char 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  input           1   19[COMRAM] unsigned char 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;Total ram usage:        1 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    2
  1883 ;; This function calls:
  1884 ;;		_LCDcheckBF
  1885 ;;		_LCDcmd
  1886 ;; This function is called by:
  1887 ;;		_putch
  1888 ;;		_LCDputs
  1889 ;;		_LCDwriteLineOne
  1890 ;;		_LCDwriteLineTwo
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text3
  1895  0031AA                     __ptext3:
  1896                           	opt stack 0
  1897  0031AA                     _LCDwrite:
  1898                           	opt stack 26
  1899                           
  1900                           ;incstack = 0
  1901                           ;LCDwrite@input stored from wreg
  1902  0031AA  6E14               	movwf	LCDwrite@input,c
  1903                           
  1904                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  1905  0031AC  808D               	bsf	3981,0,c	;volatile
  1906                           
  1907                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  1908  0031AE  928D               	bcf	3981,1,c	;volatile
  1909                           
  1910                           ;lcd.c: 122: LCDcmd(input);
  1911  0031B0  5014               	movf	LCDwrite@input,w,c
  1912  0031B2  ECEE  F018         	call	_LCDcmd
  1913                           
  1914                           ;lcd.c: 123: LCDcheckBF();
  1915  0031B6  ECCB  F018         	call	_LCDcheckBF	;wreg free
  1916  0031BA  0012               	return		;funcret
  1917  0031BC                     __end_of_LCDwrite:
  1918                           	opt stack 0
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           prodh	equ	0xFF4
  1924                           prodl	equ	0xFF3
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           postdec1	equ	0xFE5
  1928                           fsr1l	equ	0xFE1
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           fsr2h	equ	0xFDA
  1932                           fsr2l	equ	0xFD9
  1933                           status	equ	0xFD8
  1934                           
  1935 ;; *************** function _isdigit *****************
  1936 ;; Defined at:
  1937 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  c               1    wreg     unsigned char 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  c               1   20[COMRAM] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;Total ram usage:        3 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    1
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_printf
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text4
  1966  003178                     __ptext4:
  1967                           	opt stack 0
  1968  003178                     _isdigit:
  1969                           	opt stack 28
  1970                           
  1971                           ;incstack = 0
  1972                           ;isdigit@c stored from wreg
  1973  003178  6E15               	movwf	isdigit@c,c
  1974  00317A  0E00               	movlw	0
  1975  00317C  6E14               	movwf	_isdigit$1679,c
  1976  00317E  0E3A               	movlw	58
  1977  003180  6015               	cpfslt	isdigit@c,c
  1978  003182  D005               	goto	l2376
  1979  003184  0E2F               	movlw	47
  1980  003186  6415               	cpfsgt	isdigit@c,c
  1981  003188  D002               	goto	l2376
  1982  00318A  0E01               	movlw	1
  1983  00318C  6E14               	movwf	_isdigit$1679,c
  1984  00318E                     l2376:
  1985  00318E  C014  F013         	movff	_isdigit$1679,??_isdigit
  1986  003192  3013               	rrcf	??_isdigit,w,c
  1987  003194  0012               	return	
  1988  003196                     __end_of_isdigit:
  1989                           	opt stack 0
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1l	equ	0xFE1
  2000                           postinc2	equ	0xFDE
  2001                           postdec2	equ	0xFDD
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function ___wmul *****************
  2007 ;; Defined at:
  2008 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  multiplier      2   18[COMRAM] unsigned int 
  2011 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  product         2   22[COMRAM] unsigned int 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  2   18[COMRAM] unsigned int 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2, status,0, prodl, prodh
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2023 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;Total ram usage:        6 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    1
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_printf
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text5
  2038  003152                     __ptext5:
  2039                           	opt stack 0
  2040  003152                     ___wmul:
  2041                           	opt stack 28
  2042                           
  2043                           ;incstack = 0
  2044  003152  5013               	movf	___wmul@multiplier,w,c
  2045  003154  0215               	mulwf	___wmul@multiplicand,c
  2046  003156  CFF3 F017          	movff	prodl,___wmul@product
  2047  00315A  CFF4 F018          	movff	prodh,___wmul@product+1
  2048  00315E  5013               	movf	___wmul@multiplier,w,c
  2049  003160  0216               	mulwf	___wmul@multiplicand+1,c
  2050  003162  50F3               	movf	prodl,w,c
  2051  003164  2618               	addwf	___wmul@product+1,f,c
  2052  003166  5014               	movf	___wmul@multiplier+1,w,c
  2053  003168  0215               	mulwf	___wmul@multiplicand,c
  2054  00316A  50F3               	movf	prodl,w,c
  2055  00316C  2618               	addwf	___wmul@product+1,f,c
  2056  00316E  C017  F013         	movff	___wmul@product,?___wmul
  2057  003172  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2058  003176  0012               	return	
  2059  003178                     __end_of___wmul:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           prodh	equ	0xFF4
  2066                           prodl	equ	0xFF3
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postdec1	equ	0xFE5
  2070                           fsr1l	equ	0xFE1
  2071                           postinc2	equ	0xFDE
  2072                           postdec2	equ	0xFDD
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function ___lwmod *****************
  2078 ;; Defined at:
  2079 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  dividend        2   25[COMRAM] unsigned int 
  2082 ;;  divisor         2   27[COMRAM] unsigned int 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  counter         1   29[COMRAM] unsigned char 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  2   25[COMRAM] unsigned int 
  2087 ;; Registers used:
  2088 ;;		wreg, status,2, status,0
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;Total ram usage:        5 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    1
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_printf
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text6
  2109  003068                     __ptext6:
  2110                           	opt stack 0
  2111  003068                     ___lwmod:
  2112                           	opt stack 28
  2113                           
  2114                           ;incstack = 0
  2115  003068  501C               	movf	___lwmod@divisor,w,c
  2116  00306A  101D               	iorwf	___lwmod@divisor+1,w,c
  2117  00306C  B4D8               	btfsc	status,2,c
  2118  00306E  D018               	goto	l734
  2119  003070  0E01               	movlw	1
  2120  003072  6E1E               	movwf	___lwmod@counter,c
  2121  003074  D004               	goto	l2424
  2122  003076                     l2422:
  2123  003076  90D8               	bcf	status,0,c
  2124  003078  361C               	rlcf	___lwmod@divisor,f,c
  2125  00307A  361D               	rlcf	___lwmod@divisor+1,f,c
  2126  00307C  2A1E               	incf	___lwmod@counter,f,c
  2127  00307E                     l2424:
  2128  00307E  AE1D               	btfss	___lwmod@divisor+1,7,c
  2129  003080  D7FA               	goto	l2422
  2130  003082                     l2426:
  2131  003082  501C               	movf	___lwmod@divisor,w,c
  2132  003084  5C1A               	subwf	___lwmod@dividend,w,c
  2133  003086  501D               	movf	___lwmod@divisor+1,w,c
  2134  003088  581B               	subwfb	___lwmod@dividend+1,w,c
  2135  00308A  A0D8               	btfss	status,0,c
  2136  00308C  D004               	goto	l2430
  2137  00308E  501C               	movf	___lwmod@divisor,w,c
  2138  003090  5E1A               	subwf	___lwmod@dividend,f,c
  2139  003092  501D               	movf	___lwmod@divisor+1,w,c
  2140  003094  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2141  003096                     l2430:
  2142  003096  90D8               	bcf	status,0,c
  2143  003098  321D               	rrcf	___lwmod@divisor+1,f,c
  2144  00309A  321C               	rrcf	___lwmod@divisor,f,c
  2145  00309C  2E1E               	decfsz	___lwmod@counter,f,c
  2146  00309E  D7F1               	goto	l2426
  2147  0030A0                     l734:
  2148  0030A0  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2149  0030A4  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2150  0030A8  0012               	return		;funcret
  2151  0030AA                     __end_of___lwmod:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           prodh	equ	0xFF4
  2158                           prodl	equ	0xFF3
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           postdec1	equ	0xFE5
  2162                           fsr1l	equ	0xFE1
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function ___lwdiv *****************
  2170 ;; Defined at:
  2171 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  dividend        2   18[COMRAM] unsigned int 
  2174 ;;  divisor         2   20[COMRAM] unsigned int 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  quotient        2   22[COMRAM] unsigned int 
  2177 ;;  counter         1   24[COMRAM] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  2   18[COMRAM] unsigned int 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2, status,0
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;Total ram usage:        7 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    1
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_printf
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text7
  2202  003016                     __ptext7:
  2203                           	opt stack 0
  2204  003016                     ___lwdiv:
  2205                           	opt stack 28
  2206                           
  2207                           ;incstack = 0
  2208  003016  0E00               	movlw	0
  2209  003018  6E18               	movwf	___lwdiv@quotient+1,c
  2210  00301A  0E00               	movlw	0
  2211  00301C  6E17               	movwf	___lwdiv@quotient,c
  2212  00301E  5015               	movf	___lwdiv@divisor,w,c
  2213  003020  1016               	iorwf	___lwdiv@divisor+1,w,c
  2214  003022  B4D8               	btfsc	status,2,c
  2215  003024  D01C               	goto	l724
  2216  003026  0E01               	movlw	1
  2217  003028  6E19               	movwf	___lwdiv@counter,c
  2218  00302A  D004               	goto	l2404
  2219  00302C                     l2402:
  2220  00302C  90D8               	bcf	status,0,c
  2221  00302E  3615               	rlcf	___lwdiv@divisor,f,c
  2222  003030  3616               	rlcf	___lwdiv@divisor+1,f,c
  2223  003032  2A19               	incf	___lwdiv@counter,f,c
  2224  003034                     l2404:
  2225  003034  AE16               	btfss	___lwdiv@divisor+1,7,c
  2226  003036  D7FA               	goto	l2402
  2227  003038                     l2406:
  2228  003038  90D8               	bcf	status,0,c
  2229  00303A  3617               	rlcf	___lwdiv@quotient,f,c
  2230  00303C  3618               	rlcf	___lwdiv@quotient+1,f,c
  2231  00303E  5015               	movf	___lwdiv@divisor,w,c
  2232  003040  5C13               	subwf	___lwdiv@dividend,w,c
  2233  003042  5016               	movf	___lwdiv@divisor+1,w,c
  2234  003044  5814               	subwfb	___lwdiv@dividend+1,w,c
  2235  003046  A0D8               	btfss	status,0,c
  2236  003048  D005               	goto	l2414
  2237  00304A  5015               	movf	___lwdiv@divisor,w,c
  2238  00304C  5E13               	subwf	___lwdiv@dividend,f,c
  2239  00304E  5016               	movf	___lwdiv@divisor+1,w,c
  2240  003050  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2241  003052  8017               	bsf	___lwdiv@quotient,0,c
  2242  003054                     l2414:
  2243  003054  90D8               	bcf	status,0,c
  2244  003056  3216               	rrcf	___lwdiv@divisor+1,f,c
  2245  003058  3215               	rrcf	___lwdiv@divisor,f,c
  2246  00305A  2E19               	decfsz	___lwdiv@counter,f,c
  2247  00305C  D7ED               	goto	l2406
  2248  00305E                     l724:
  2249  00305E  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2250  003062  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2251  003066  0012               	return		;funcret
  2252  003068                     __end_of___lwdiv:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           prodh	equ	0xFF4
  2259                           prodl	equ	0xFF3
  2260                           postinc0	equ	0xFEE
  2261                           wreg	equ	0xFE8
  2262                           postdec1	equ	0xFE5
  2263                           fsr1l	equ	0xFE1
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _excerciseControl *****************
  2271 ;; Defined at:
  2272 ;;		line 345 in file "main.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  i               2   76[BANK0 ] int 
  2277 ;;  i               2   74[BANK0 ] int 
  2278 ;;  temp            2   60[BANK0 ] int 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;Total ram usage:       22 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    5
  2295 ;; This function calls:
  2296 ;;		___awtoft
  2297 ;;		___ftadd
  2298 ;;		___ftge
  2299 ;;		___ftmul
  2300 ;;		___ftsub
  2301 ;;		___fttol
  2302 ;;		___lltoft
  2303 ;;		_limitWheelSpeeds
  2304 ;;		_round
  2305 ;;		_sqrt
  2306 ;;		_wheelVelocity
  2307 ;; This function is called by:
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text8
  2313  00102A                     __ptext8:
  2314                           	opt stack 0
  2315  00102A                     _excerciseControl:
  2316                           	opt stack 25
  2317                           
  2318                           ;main.c: 347: static int leftWheelCommandedSpeed = 30;
  2319                           ;main.c: 348: static int rightWheelCommandedSpeed = 25;
  2320                           ;main.c: 349: static unsigned long startCircleMillis = 0;
  2321                           ;main.c: 350: static int leftIntegral = 8;
  2322                           ;main.c: 352: switch(event){
  2323                           
  2324                           ;incstack = 0
  2325  00102A  EFCF  F00D         	goto	l3362
  2326  00102E                     l3222:
  2327                           
  2328                           ;main.c: 357: if(rightWheelMeasuredSpeed < 50)
  2329  00102E  0100               	movlb	0	; () banked
  2330  001030  BFD9               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2331  001032  D008               	goto	l3224
  2332  001034  0100               	movlb	0	; () banked
  2333  001036  51D9               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2334  001038  E121               	bnz	l3230
  2335  00103A  0E32               	movlw	50
  2336  00103C  0100               	movlb	0	; () banked
  2337  00103E  5DD8               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2338  001040  B0D8               	btfsc	status,0,c
  2339  001042  D01C               	goto	l3230
  2340  001044                     l3224:
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 358: {
  2344                           ;main.c: 359: rightWheelCommandedSpeed += 1;
  2345  001044  0100               	movlb	0	; () banked
  2346  001046  4BE3               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2347  001048  2BE4               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2348                           
  2349                           ;main.c: 360: leftWheelCommandedSpeed += 1;
  2350  00104A  0100               	movlb	0	; () banked
  2351  00104C  4BE1               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2352  00104E  2BE2               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 361: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2356  001050  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2357  001054  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2358  001058  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2359  00105C  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2360  001060  0E72               	movlw	114
  2361  001062  EC1D  F013         	call	_wheelVelocity
  2362                           
  2363                           ;main.c: 362: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2364  001066  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2365  00106A  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2366  00106E  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2367  001072  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2368  001076  0E6C               	movlw	108
  2369  001078  EC1D  F013         	call	_wheelVelocity
  2370  00107C                     l3230:
  2371                           
  2372                           ;main.c: 363: }
  2373                           ;main.c: 364: if(rightWheelMeasuredSpeed > 120)
  2374  00107C  0100               	movlb	0	; () banked
  2375  00107E  BFD9               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2376  001080  D02E               	goto	l3238
  2377  001082  0100               	movlb	0	; () banked
  2378  001084  51D9               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2379  001086  E105               	bnz	u2980
  2380  001088  0E79               	movlw	121
  2381  00108A  0100               	movlb	0	; () banked
  2382  00108C  5DD8               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2383  00108E  A0D8               	btfss	status,0,c
  2384  001090  D026               	goto	l3238
  2385  001092                     u2980:
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;main.c: 365: {
  2389                           ;main.c: 366: rightWheelCommandedSpeed -= 1;
  2390  001092  0100               	movlb	0	; () banked
  2391  001094  07E3               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2392  001096  A0D8               	btfss	status,0,c
  2393  001098  07E4               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2394                           
  2395                           ;main.c: 367: leftWheelCommandedSpeed -= 1;
  2396  00109A  0100               	movlb	0	; () banked
  2397  00109C  07E1               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2398  00109E  A0D8               	btfss	status,0,c
  2399  0010A0  07E2               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 368: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2403  0010A2  0100               	movlb	0	; () banked
  2404  0010A4  07E3               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2405  0010A6  A0D8               	btfss	status,0,c
  2406  0010A8  07E4               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2407  0010AA  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2408  0010AE  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2409  0010B2  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2410  0010B6  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2411  0010BA  0E72               	movlw	114
  2412  0010BC  EC1D  F013         	call	_wheelVelocity
  2413                           
  2414                           ;main.c: 369: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2415  0010C0  0100               	movlb	0	; () banked
  2416  0010C2  07E1               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2417  0010C4  A0D8               	btfss	status,0,c
  2418  0010C6  07E2               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2419  0010C8  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2420  0010CC  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2421  0010D0  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2422  0010D4  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2423  0010D8  0E6C               	movlw	108
  2424  0010DA  EC1D  F013         	call	_wheelVelocity
  2425  0010DE                     l3238:
  2426                           
  2427                           ;main.c: 370: }
  2428                           ;main.c: 371: if(leftWheelCount > rightWheelCount + 1)
  2429  0010DE  0E01               	movlw	1
  2430  0010E0  0100               	movlb	0	; () banked
  2431  0010E2  25CE               	addwf	_rightWheelCount& (0+255),w,b
  2432  0010E4  0100               	movlb	0	; () banked
  2433  0010E6  6F98               	movwf	??_excerciseControl& (0+255),b
  2434  0010E8  0E00               	movlw	0
  2435  0010EA  0100               	movlb	0	; () banked
  2436  0010EC  21CF               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2437  0010EE  0100               	movlb	0	; () banked
  2438  0010F0  6F99               	movwf	(??_excerciseControl+1)& (0+255),b
  2439  0010F2  0E00               	movlw	0
  2440  0010F4  0100               	movlb	0	; () banked
  2441  0010F6  21D0               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2442  0010F8  0100               	movlb	0	; () banked
  2443  0010FA  6F9A               	movwf	(??_excerciseControl+2)& (0+255),b
  2444  0010FC  0E00               	movlw	0
  2445  0010FE  0100               	movlb	0	; () banked
  2446  001100  21D1               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2447  001102  0100               	movlb	0	; () banked
  2448  001104  6F9B               	movwf	(??_excerciseControl+3)& (0+255),b
  2449  001106  0100               	movlb	0	; () banked
  2450  001108  51CA               	movf	_leftWheelCount& (0+255),w,b
  2451  00110A  0100               	movlb	0	; () banked
  2452  00110C  5D98               	subwf	??_excerciseControl& (0+255),w,b
  2453  00110E  0100               	movlb	0	; () banked
  2454  001110  51CB               	movf	(_leftWheelCount+1)& (0+255),w,b
  2455  001112  0100               	movlb	0	; () banked
  2456  001114  5999               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2457  001116  0100               	movlb	0	; () banked
  2458  001118  51CC               	movf	(_leftWheelCount+2)& (0+255),w,b
  2459  00111A  0100               	movlb	0	; () banked
  2460  00111C  599A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2461  00111E  0100               	movlb	0	; () banked
  2462  001120  51CD               	movf	(_leftWheelCount+3)& (0+255),w,b
  2463  001122  0100               	movlb	0	; () banked
  2464  001124  599B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2465  001126  B0D8               	btfsc	status,0,c
  2466  001128  D061               	goto	l3242
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 373: {
  2470                           ;main.c: 374: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  2471  00112A  C0CE  F098         	movff	_rightWheelCount,??_excerciseControl
  2472  00112E  C0CF  F099         	movff	_rightWheelCount+1,??_excerciseControl+1
  2473  001132  C0D0  F09A         	movff	_rightWheelCount+2,??_excerciseControl+2
  2474  001136  C0D1  F09B         	movff	_rightWheelCount+3,??_excerciseControl+3
  2475  00113A  0100               	movlb	0	; () banked
  2476  00113C  1F98               	comf	??_excerciseControl& (0+255),f,b
  2477  00113E  1F99               	comf	(??_excerciseControl+1)& (0+255),f,b
  2478  001140  1F9A               	comf	(??_excerciseControl+2)& (0+255),f,b
  2479  001142  1F9B               	comf	(??_excerciseControl+3)& (0+255),f,b
  2480  001144  2B98               	incf	??_excerciseControl& (0+255),f,b
  2481  001146  0E00               	movlw	0
  2482  001148  2399               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2483  00114A  239A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2484  00114C  239B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2485  00114E  0100               	movlb	0	; () banked
  2486  001150  51CA               	movf	_leftWheelCount& (0+255),w,b
  2487  001152  0100               	movlb	0	; () banked
  2488  001154  2598               	addwf	??_excerciseControl& (0+255),w,b
  2489  001156  6E1B               	movwf	___lltoft@c,c
  2490  001158  0100               	movlb	0	; () banked
  2491  00115A  51CB               	movf	(_leftWheelCount+1)& (0+255),w,b
  2492  00115C  0100               	movlb	0	; () banked
  2493  00115E  2199               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2494  001160  6E1C               	movwf	___lltoft@c+1,c
  2495  001162  0100               	movlb	0	; () banked
  2496  001164  51CC               	movf	(_leftWheelCount+2)& (0+255),w,b
  2497  001166  0100               	movlb	0	; () banked
  2498  001168  219A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2499  00116A  6E1D               	movwf	___lltoft@c+2,c
  2500  00116C  0100               	movlb	0	; () banked
  2501  00116E  51CD               	movf	(_leftWheelCount+3)& (0+255),w,b
  2502  001170  0100               	movlb	0	; () banked
  2503  001172  219B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2504  001174  6E1E               	movwf	___lltoft@c+3,c
  2505  001176  ECB1  F017         	call	___lltoft	;wreg free
  2506  00117A  C01B  F060         	movff	?___lltoft,sqrt@a
  2507  00117E  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  2508  001182  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  2509  001186  ECCE  F010         	call	_sqrt	;wreg free
  2510  00118A  C060  F0A1         	movff	?_sqrt,_excerciseControl$2067
  2511  00118E  C061  F0A2         	movff	?_sqrt+1,_excerciseControl$2067+1
  2512  001192  C062  F0A3         	movff	?_sqrt+2,_excerciseControl$2067+2
  2513                           
  2514                           ;main.c: 373: {
  2515                           ;main.c: 374: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  2516  001196  C0A1  F042         	movff	_excerciseControl$2067,___ftsub@f2
  2517  00119A  C0A2  F043         	movff	_excerciseControl$2067+1,___ftsub@f2+1
  2518  00119E  C0A3  F044         	movff	_excerciseControl$2067+2,___ftsub@f2+2
  2519  0011A2  C0DB  F01B         	movff	_speedCompensation,___awtoft@c
  2520  0011A6  C0DC  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  2521  0011AA  EC75  F018         	call	___awtoft	;wreg free
  2522  0011AE  C01B  F03F         	movff	?___awtoft,___ftsub@f1
  2523  0011B2  C01C  F040         	movff	?___awtoft+1,___ftsub@f1+1
  2524  0011B6  C01D  F041         	movff	?___awtoft+2,___ftsub@f1+2
  2525  0011BA  EC55  F018         	call	___ftsub	;wreg free
  2526  0011BE  C03F  F073         	movff	?___ftsub,___fttol@f1
  2527  0011C2  C040  F074         	movff	?___ftsub+1,___fttol@f1+1
  2528  0011C6  C041  F075         	movff	?___ftsub+2,___fttol@f1+2
  2529  0011CA  EC7B  F012         	call	___fttol	;wreg free
  2530  0011CE  C073  F0DB         	movff	?___fttol,_speedCompensation
  2531  0011D2  C074  F0DC         	movff	?___fttol+1,_speedCompensation+1
  2532                           
  2533                           ;main.c: 375: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2534  0011D6  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2535  0011DA  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2536  0011DE  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2537  0011E2  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2538  0011E6  0E6C               	movlw	108
  2539  0011E8  EC1D  F013         	call	_wheelVelocity
  2540  0011EC                     l3242:
  2541                           
  2542                           ;main.c: 376: }
  2543                           ;main.c: 377: if(rightWheelCount > (leftWheelCount + 1) )
  2544  0011EC  0E01               	movlw	1
  2545  0011EE  0100               	movlb	0	; () banked
  2546  0011F0  25CA               	addwf	_leftWheelCount& (0+255),w,b
  2547  0011F2  0100               	movlb	0	; () banked
  2548  0011F4  6F98               	movwf	??_excerciseControl& (0+255),b
  2549  0011F6  0E00               	movlw	0
  2550  0011F8  0100               	movlb	0	; () banked
  2551  0011FA  21CB               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2552  0011FC  0100               	movlb	0	; () banked
  2553  0011FE  6F99               	movwf	(??_excerciseControl+1)& (0+255),b
  2554  001200  0E00               	movlw	0
  2555  001202  0100               	movlb	0	; () banked
  2556  001204  21CC               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2557  001206  0100               	movlb	0	; () banked
  2558  001208  6F9A               	movwf	(??_excerciseControl+2)& (0+255),b
  2559  00120A  0E00               	movlw	0
  2560  00120C  0100               	movlb	0	; () banked
  2561  00120E  21CD               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2562  001210  0100               	movlb	0	; () banked
  2563  001212  6F9B               	movwf	(??_excerciseControl+3)& (0+255),b
  2564  001214  0100               	movlb	0	; () banked
  2565  001216  51CE               	movf	_rightWheelCount& (0+255),w,b
  2566  001218  0100               	movlb	0	; () banked
  2567  00121A  5D98               	subwf	??_excerciseControl& (0+255),w,b
  2568  00121C  0100               	movlb	0	; () banked
  2569  00121E  51CF               	movf	(_rightWheelCount+1)& (0+255),w,b
  2570  001220  0100               	movlb	0	; () banked
  2571  001222  5999               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2572  001224  0100               	movlb	0	; () banked
  2573  001226  51D0               	movf	(_rightWheelCount+2)& (0+255),w,b
  2574  001228  0100               	movlb	0	; () banked
  2575  00122A  599A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2576  00122C  0100               	movlb	0	; () banked
  2577  00122E  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  2578  001230  0100               	movlb	0	; () banked
  2579  001232  599B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2580  001234  B0D8               	btfsc	status,0,c
  2581  001236  D075               	goto	l3246
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 379: {
  2585                           ;main.c: 380: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2586  001238  C0CA  F098         	movff	_leftWheelCount,??_excerciseControl
  2587  00123C  C0CB  F099         	movff	_leftWheelCount+1,??_excerciseControl+1
  2588  001240  C0CC  F09A         	movff	_leftWheelCount+2,??_excerciseControl+2
  2589  001244  C0CD  F09B         	movff	_leftWheelCount+3,??_excerciseControl+3
  2590  001248  0100               	movlb	0	; () banked
  2591  00124A  1F98               	comf	??_excerciseControl& (0+255),f,b
  2592  00124C  1F99               	comf	(??_excerciseControl+1)& (0+255),f,b
  2593  00124E  1F9A               	comf	(??_excerciseControl+2)& (0+255),f,b
  2594  001250  1F9B               	comf	(??_excerciseControl+3)& (0+255),f,b
  2595  001252  2B98               	incf	??_excerciseControl& (0+255),f,b
  2596  001254  0E00               	movlw	0
  2597  001256  2399               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2598  001258  239A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2599  00125A  239B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2600  00125C  0100               	movlb	0	; () banked
  2601  00125E  51CE               	movf	_rightWheelCount& (0+255),w,b
  2602  001260  0100               	movlb	0	; () banked
  2603  001262  2598               	addwf	??_excerciseControl& (0+255),w,b
  2604  001264  6E1B               	movwf	___lltoft@c,c
  2605  001266  0100               	movlb	0	; () banked
  2606  001268  51CF               	movf	(_rightWheelCount+1)& (0+255),w,b
  2607  00126A  0100               	movlb	0	; () banked
  2608  00126C  2199               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2609  00126E  6E1C               	movwf	___lltoft@c+1,c
  2610  001270  0100               	movlb	0	; () banked
  2611  001272  51D0               	movf	(_rightWheelCount+2)& (0+255),w,b
  2612  001274  0100               	movlb	0	; () banked
  2613  001276  219A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2614  001278  6E1D               	movwf	___lltoft@c+2,c
  2615  00127A  0100               	movlb	0	; () banked
  2616  00127C  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  2617  00127E  0100               	movlb	0	; () banked
  2618  001280  219B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2619  001282  6E1E               	movwf	___lltoft@c+3,c
  2620  001284  ECB1  F017         	call	___lltoft	;wreg free
  2621  001288  C01B  F060         	movff	?___lltoft,sqrt@a
  2622  00128C  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  2623  001290  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  2624  001294  ECCE  F010         	call	_sqrt	;wreg free
  2625  001298  C060  F0A4         	movff	?_sqrt,_excerciseControl$2068
  2626  00129C  C061  F0A5         	movff	?_sqrt+1,_excerciseControl$2068+1
  2627  0012A0  C062  F0A6         	movff	?_sqrt+2,_excerciseControl$2068+2
  2628                           
  2629                           ;main.c: 379: {
  2630                           ;main.c: 380: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2631  0012A4  0E00               	movlw	0
  2632  0012A6  6E36               	movwf	___ftadd@f2,c
  2633  0012A8  0EA0               	movlw	160
  2634  0012AA  6E37               	movwf	___ftadd@f2+1,c
  2635  0012AC  0E40               	movlw	64
  2636  0012AE  6E38               	movwf	___ftadd@f2+2,c
  2637  0012B0  C0A4  F033         	movff	_excerciseControl$2068,___ftadd@f1
  2638  0012B4  C0A5  F034         	movff	_excerciseControl$2068+1,___ftadd@f1+1
  2639  0012B8  C0A6  F035         	movff	_excerciseControl$2068+2,___ftadd@f1+2
  2640  0012BC  ECA5  F011         	call	___ftadd	;wreg free
  2641  0012C0  C033  F0A7         	movff	?___ftadd,_excerciseControl$2069
  2642  0012C4  C034  F0A8         	movff	?___ftadd+1,_excerciseControl$2069+1
  2643  0012C8  C035  F0A9         	movff	?___ftadd+2,_excerciseControl$2069+2
  2644                           
  2645                           ;main.c: 379: {
  2646                           ;main.c: 380: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2647  0012CC  C0A7  F036         	movff	_excerciseControl$2069,___ftadd@f2
  2648  0012D0  C0A8  F037         	movff	_excerciseControl$2069+1,___ftadd@f2+1
  2649  0012D4  C0A9  F038         	movff	_excerciseControl$2069+2,___ftadd@f2+2
  2650  0012D8  C0DB  F01B         	movff	_speedCompensation,___awtoft@c
  2651  0012DC  C0DC  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  2652  0012E0  EC75  F018         	call	___awtoft	;wreg free
  2653  0012E4  C01B  F033         	movff	?___awtoft,___ftadd@f1
  2654  0012E8  C01C  F034         	movff	?___awtoft+1,___ftadd@f1+1
  2655  0012EC  C01D  F035         	movff	?___awtoft+2,___ftadd@f1+2
  2656  0012F0  ECA5  F011         	call	___ftadd	;wreg free
  2657  0012F4  C033  F073         	movff	?___ftadd,___fttol@f1
  2658  0012F8  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  2659  0012FC  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  2660  001300  EC7B  F012         	call	___fttol	;wreg free
  2661  001304  C073  F0DB         	movff	?___fttol,_speedCompensation
  2662  001308  C074  F0DC         	movff	?___fttol+1,_speedCompensation+1
  2663                           
  2664                           ;main.c: 381: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2665  00130C  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2666  001310  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2667  001314  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2668  001318  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2669  00131C  0E6C               	movlw	108
  2670  00131E  EC1D  F013         	call	_wheelVelocity
  2671  001322                     l3246:
  2672                           
  2673                           ;main.c: 382: }
  2674                           ;main.c: 384: if(rightWheelCount >= 113)
  2675  001322  0100               	movlb	0	; () banked
  2676  001324  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  2677  001326  0100               	movlb	0	; () banked
  2678  001328  11D0               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2679  00132A  0100               	movlb	0	; () banked
  2680  00132C  11CF               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  2681  00132E  E105               	bnz	u3010
  2682  001330  0E71               	movlw	113
  2683  001332  0100               	movlb	0	; () banked
  2684  001334  5DCE               	subwf	_rightWheelCount& (0+255),w,b
  2685  001336  A0D8               	btfss	status,0,c
  2686  001338  D091               	goto	l3276
  2687  00133A                     u3010:
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 385: {
  2691                           ;main.c: 386: if(leftWheelCount >= 113)
  2692  00133A  0100               	movlb	0	; () banked
  2693  00133C  51CD               	movf	(_leftWheelCount+3)& (0+255),w,b
  2694  00133E  0100               	movlb	0	; () banked
  2695  001340  11CC               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  2696  001342  0100               	movlb	0	; () banked
  2697  001344  11CB               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  2698  001346  E105               	bnz	u3020
  2699  001348  0E71               	movlw	113
  2700  00134A  0100               	movlb	0	; () banked
  2701  00134C  5DCA               	subwf	_leftWheelCount& (0+255),w,b
  2702  00134E  A0D8               	btfss	status,0,c
  2703  001350  D060               	goto	l3270
  2704  001352                     u3020:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 387: {
  2708                           ;main.c: 388: rightWheelCount = 0;
  2709  001352  0E00               	movlw	0
  2710  001354  0100               	movlb	0	; () banked
  2711  001356  6FCE               	movwf	_rightWheelCount& (0+255),b
  2712  001358  0E00               	movlw	0
  2713  00135A  6FCF               	movwf	(_rightWheelCount+1)& (0+255),b
  2714  00135C  0E00               	movlw	0
  2715  00135E  6FD0               	movwf	(_rightWheelCount+2)& (0+255),b
  2716  001360  0E00               	movlw	0
  2717  001362  6FD1               	movwf	(_rightWheelCount+3)& (0+255),b
  2718                           
  2719                           ;main.c: 389: leftWheelCount = 0;
  2720  001364  0E00               	movlw	0
  2721  001366  0100               	movlb	0	; () banked
  2722  001368  6FCA               	movwf	_leftWheelCount& (0+255),b
  2723  00136A  0E00               	movlw	0
  2724  00136C  6FCB               	movwf	(_leftWheelCount+1)& (0+255),b
  2725  00136E  0E00               	movlw	0
  2726  001370  6FCC               	movwf	(_leftWheelCount+2)& (0+255),b
  2727  001372  0E00               	movlw	0
  2728  001374  6FCD               	movwf	(_leftWheelCount+3)& (0+255),b
  2729                           
  2730                           ;main.c: 390: leftWheelCommandedSpeed = 0;
  2731  001376  0E00               	movlw	0
  2732  001378  0100               	movlb	0	; () banked
  2733  00137A  6FE2               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2734  00137C  0E00               	movlw	0
  2735  00137E  6FE1               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2736                           
  2737                           ;main.c: 391: rightWheelCommandedSpeed = 0;
  2738  001380  0E00               	movlw	0
  2739  001382  0100               	movlb	0	; () banked
  2740  001384  6FE4               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2741  001386  0E00               	movlw	0
  2742  001388  6FE3               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2743                           
  2744                           ;main.c: 392: speedCompensation = 0;
  2745  00138A  0E00               	movlw	0
  2746  00138C  0100               	movlb	0	; () banked
  2747  00138E  6FDC               	movwf	(_speedCompensation+1)& (0+255),b
  2748  001390  0E00               	movlw	0
  2749  001392  6FDB               	movwf	_speedCompensation& (0+255),b
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 394: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2753  001394  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2754  001398  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2755  00139C  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2756  0013A0  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2757  0013A4  0E72               	movlw	114
  2758  0013A6  EC1D  F013         	call	_wheelVelocity
  2759                           
  2760                           ;main.c: 395: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2761  0013AA  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2762  0013AE  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2763  0013B2  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2764  0013B6  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2765  0013BA  0E6C               	movlw	108
  2766  0013BC  EC1D  F013         	call	_wheelVelocity
  2767                           
  2768                           ;main.c: 396: for(int i = 0; i<20 ; i++)
  2769  0013C0  0E00               	movlw	0
  2770  0013C2  0100               	movlb	0	; () banked
  2771  0013C4  6FAB               	movwf	(excerciseControl@i+1)& (0+255),b
  2772  0013C6  0E00               	movlw	0
  2773  0013C8  6FAA               	movwf	excerciseControl@i& (0+255),b
  2774  0013CA                     l3256:
  2775                           
  2776                           ; BSR set to: 0
  2777  0013CA  0100               	movlb	0	; () banked
  2778  0013CC  BFAB               	btfsc	(excerciseControl@i+1)& (0+255),7,b
  2779  0013CE  D008               	goto	l3260
  2780  0013D0  0100               	movlb	0	; () banked
  2781  0013D2  51AB               	movf	(excerciseControl@i+1)& (0+255),w,b
  2782  0013D4  E111               	bnz	l3264
  2783  0013D6  0E14               	movlw	20
  2784  0013D8  0100               	movlb	0	; () banked
  2785  0013DA  5DAA               	subwf	excerciseControl@i& (0+255),w,b
  2786  0013DC  B0D8               	btfsc	status,0,c
  2787  0013DE  D00C               	goto	l3264
  2788  0013E0                     l3260:
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;main.c: 397: {
  2792                           ;main.c: 398: _delay((unsigned long)((50)*(8000000/4000.0)));
  2793  0013E0  0E82               	movlw	130
  2794  0013E2  0100               	movlb	0	; () banked
  2795  0013E4  6F98               	movwf	??_excerciseControl& (0+255),b
  2796  0013E6  0EDE               	movlw	222
  2797  0013E8                     u3207:
  2798  0013E8  2EE8               	decfsz	wreg,f,c
  2799  0013EA  D7FE               	goto	u3207
  2800  0013EC  2F98               	decfsz	??_excerciseControl& (0+255),f,b
  2801  0013EE  D7FC               	goto	u3207
  2802  0013F0  0100               	movlb	0	; () banked
  2803  0013F2  4BAA               	infsnz	excerciseControl@i& (0+255),f,b
  2804  0013F4  2BAB               	incf	(excerciseControl@i+1)& (0+255),f,b
  2805  0013F6  D7E9               	goto	l3256
  2806  0013F8                     l3264:
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;main.c: 399: }
  2810                           ;main.c: 400: event += 1;
  2811  0013F8  0100               	movlb	0	; () banked
  2812  0013FA  2BDA               	incf	_event& (0+255),f,b
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;main.c: 402: rightWheelCommandedSpeed = 25;
  2816  0013FC  0E00               	movlw	0
  2817  0013FE  0100               	movlb	0	; () banked
  2818  001400  6FE4               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2819  001402  0E19               	movlw	25
  2820  001404  6FE3               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 403: leftWheelCommandedSpeed = -30;
  2824  001406  0EFF               	movlw	255
  2825  001408  0100               	movlb	0	; () banked
  2826  00140A  6FE2               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2827  00140C  0EE2               	movlw	226
  2828  00140E  6FE1               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2829                           
  2830                           ;main.c: 404: }
  2831  001410  D025               	goto	l3276
  2832  001412                     l3270:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 405: else
  2836                           ;main.c: 406: {
  2837                           ;main.c: 407: rightWheelCommandedSpeed = 0;
  2838  001412  0E00               	movlw	0
  2839  001414  0100               	movlb	0	; () banked
  2840  001416  6FE4               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2841  001418  0E00               	movlw	0
  2842  00141A  6FE3               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2843                           
  2844                           ;main.c: 408: leftWheelCommandedSpeed = 30;
  2845  00141C  0E00               	movlw	0
  2846  00141E  0100               	movlb	0	; () banked
  2847  001420  6FE2               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2848  001422  0E1E               	movlw	30
  2849  001424  6FE1               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2850                           
  2851                           ;main.c: 409: speedCompensation = 0;
  2852  001426  0E00               	movlw	0
  2853  001428  0100               	movlb	0	; () banked
  2854  00142A  6FDC               	movwf	(_speedCompensation+1)& (0+255),b
  2855  00142C  0E00               	movlw	0
  2856  00142E  6FDB               	movwf	_speedCompensation& (0+255),b
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;main.c: 410: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2860  001430  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2861  001434  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2862  001438  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2863  00143C  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2864  001440  0E72               	movlw	114
  2865  001442  EC1D  F013         	call	_wheelVelocity
  2866                           
  2867                           ;main.c: 411: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2868  001446  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2869  00144A  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2870  00144E  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2871  001452  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2872  001456  0E72               	movlw	114
  2873  001458  EC1D  F013         	call	_wheelVelocity
  2874  00145C                     l3276:
  2875                           
  2876                           ;main.c: 412: }
  2877                           ;main.c: 415: }
  2878                           ;main.c: 417: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2879  00145C  0EE1               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2880  00145E  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2881  001460  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  2882  001462  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  2883  001464  0EE3               	movlw	low excerciseControl@rightWheelCommandedSpeed
  2884  001466  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  2885  001468  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  2886  00146A  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  2887  00146C  0EDB               	movlw	low _speedCompensation
  2888  00146E  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  2889  001470  0E00               	movlw	high _speedCompensation
  2890  001472  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  2891  001474  ECA8  F013         	call	_limitWheelSpeeds	;wreg free
  2892                           
  2893                           ;main.c: 418: break;
  2894  001478  0012               	return	
  2895  00147A                     l3278:
  2896                           
  2897                           ;main.c: 425: if(rightWheelMeasuredSpeed < 40)
  2898  00147A  0100               	movlb	0	; () banked
  2899  00147C  BFD9               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2900  00147E  D008               	goto	l3280
  2901  001480  0100               	movlb	0	; () banked
  2902  001482  51D9               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2903  001484  E122               	bnz	l3282
  2904  001486  0E28               	movlw	40
  2905  001488  0100               	movlb	0	; () banked
  2906  00148A  5DD8               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2907  00148C  B0D8               	btfsc	status,0,c
  2908  00148E  D01D               	goto	l3282
  2909  001490                     l3280:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 426: {
  2913                           ;main.c: 427: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  2914  001490  0100               	movlb	0	; () banked
  2915  001492  4BE3               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2916  001494  2BE4               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2917  001496  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2918  00149A  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2919  00149E  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2920  0014A2  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2921  0014A6  0E72               	movlw	114
  2922  0014A8  EC1D  F013         	call	_wheelVelocity
  2923                           
  2924                           ;main.c: 428: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2925  0014AC  0100               	movlb	0	; () banked
  2926  0014AE  07E1               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2927  0014B0  A0D8               	btfss	status,0,c
  2928  0014B2  07E2               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2929  0014B4  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2930  0014B8  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2931  0014BC  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2932  0014C0  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2933  0014C4  0E6C               	movlw	108
  2934  0014C6  EC1D  F013         	call	_wheelVelocity
  2935  0014CA                     l3282:
  2936                           
  2937                           ;main.c: 429: }
  2938                           ;main.c: 430: if(rightWheelMeasuredSpeed > 80)
  2939  0014CA  0100               	movlb	0	; () banked
  2940  0014CC  BFD9               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2941  0014CE  D025               	goto	l3286
  2942  0014D0  0100               	movlb	0	; () banked
  2943  0014D2  51D9               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2944  0014D4  E105               	bnz	u3060
  2945  0014D6  0E51               	movlw	81
  2946  0014D8  0100               	movlb	0	; () banked
  2947  0014DA  5DD8               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2948  0014DC  A0D8               	btfss	status,0,c
  2949  0014DE  D01D               	goto	l3286
  2950  0014E0                     u3060:
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 431: {
  2954                           ;main.c: 432: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2955  0014E0  0100               	movlb	0	; () banked
  2956  0014E2  07E3               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2957  0014E4  A0D8               	btfss	status,0,c
  2958  0014E6  07E4               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2959  0014E8  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2960  0014EC  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2961  0014F0  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2962  0014F4  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2963  0014F8  0E72               	movlw	114
  2964  0014FA  EC1D  F013         	call	_wheelVelocity
  2965                           
  2966                           ;main.c: 433: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  2967  0014FE  0100               	movlb	0	; () banked
  2968  001500  4BE1               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2969  001502  2BE2               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2970  001504  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2971  001508  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2972  00150C  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2973  001510  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2974  001514  0E6C               	movlw	108
  2975  001516  EC1D  F013         	call	_wheelVelocity
  2976  00151A                     l3286:
  2977                           
  2978                           ;main.c: 434: }
  2979                           ;main.c: 435: if(leftWheelCount > (rightWheelCount + 1))
  2980  00151A  0E01               	movlw	1
  2981  00151C  0100               	movlb	0	; () banked
  2982  00151E  25CE               	addwf	_rightWheelCount& (0+255),w,b
  2983  001520  0100               	movlb	0	; () banked
  2984  001522  6F98               	movwf	??_excerciseControl& (0+255),b
  2985  001524  0E00               	movlw	0
  2986  001526  0100               	movlb	0	; () banked
  2987  001528  21CF               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2988  00152A  0100               	movlb	0	; () banked
  2989  00152C  6F99               	movwf	(??_excerciseControl+1)& (0+255),b
  2990  00152E  0E00               	movlw	0
  2991  001530  0100               	movlb	0	; () banked
  2992  001532  21D0               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2993  001534  0100               	movlb	0	; () banked
  2994  001536  6F9A               	movwf	(??_excerciseControl+2)& (0+255),b
  2995  001538  0E00               	movlw	0
  2996  00153A  0100               	movlb	0	; () banked
  2997  00153C  21D1               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2998  00153E  0100               	movlb	0	; () banked
  2999  001540  6F9B               	movwf	(??_excerciseControl+3)& (0+255),b
  3000  001542  0100               	movlb	0	; () banked
  3001  001544  51CA               	movf	_leftWheelCount& (0+255),w,b
  3002  001546  0100               	movlb	0	; () banked
  3003  001548  5D98               	subwf	??_excerciseControl& (0+255),w,b
  3004  00154A  0100               	movlb	0	; () banked
  3005  00154C  51CB               	movf	(_leftWheelCount+1)& (0+255),w,b
  3006  00154E  0100               	movlb	0	; () banked
  3007  001550  5999               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  3008  001552  0100               	movlb	0	; () banked
  3009  001554  51CC               	movf	(_leftWheelCount+2)& (0+255),w,b
  3010  001556  0100               	movlb	0	; () banked
  3011  001558  599A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  3012  00155A  0100               	movlb	0	; () banked
  3013  00155C  51CD               	movf	(_leftWheelCount+3)& (0+255),w,b
  3014  00155E  0100               	movlb	0	; () banked
  3015  001560  599B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  3016  001562  B0D8               	btfsc	status,0,c
  3017  001564  D061               	goto	l3290
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;main.c: 437: {
  3021                           ;main.c: 438: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount));
  3022  001566  C0CE  F098         	movff	_rightWheelCount,??_excerciseControl
  3023  00156A  C0CF  F099         	movff	_rightWheelCount+1,??_excerciseControl+1
  3024  00156E  C0D0  F09A         	movff	_rightWheelCount+2,??_excerciseControl+2
  3025  001572  C0D1  F09B         	movff	_rightWheelCount+3,??_excerciseControl+3
  3026  001576  0100               	movlb	0	; () banked
  3027  001578  1F98               	comf	??_excerciseControl& (0+255),f,b
  3028  00157A  1F99               	comf	(??_excerciseControl+1)& (0+255),f,b
  3029  00157C  1F9A               	comf	(??_excerciseControl+2)& (0+255),f,b
  3030  00157E  1F9B               	comf	(??_excerciseControl+3)& (0+255),f,b
  3031  001580  2B98               	incf	??_excerciseControl& (0+255),f,b
  3032  001582  0E00               	movlw	0
  3033  001584  2399               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3034  001586  239A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3035  001588  239B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3036  00158A  0100               	movlb	0	; () banked
  3037  00158C  51CA               	movf	_leftWheelCount& (0+255),w,b
  3038  00158E  0100               	movlb	0	; () banked
  3039  001590  2598               	addwf	??_excerciseControl& (0+255),w,b
  3040  001592  6E1B               	movwf	___lltoft@c,c
  3041  001594  0100               	movlb	0	; () banked
  3042  001596  51CB               	movf	(_leftWheelCount+1)& (0+255),w,b
  3043  001598  0100               	movlb	0	; () banked
  3044  00159A  2199               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3045  00159C  6E1C               	movwf	___lltoft@c+1,c
  3046  00159E  0100               	movlb	0	; () banked
  3047  0015A0  51CC               	movf	(_leftWheelCount+2)& (0+255),w,b
  3048  0015A2  0100               	movlb	0	; () banked
  3049  0015A4  219A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3050  0015A6  6E1D               	movwf	___lltoft@c+2,c
  3051  0015A8  0100               	movlb	0	; () banked
  3052  0015AA  51CD               	movf	(_leftWheelCount+3)& (0+255),w,b
  3053  0015AC  0100               	movlb	0	; () banked
  3054  0015AE  219B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3055  0015B0  6E1E               	movwf	___lltoft@c+3,c
  3056  0015B2  ECB1  F017         	call	___lltoft	;wreg free
  3057  0015B6  C01B  F060         	movff	?___lltoft,sqrt@a
  3058  0015BA  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  3059  0015BE  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  3060  0015C2  ECCE  F010         	call	_sqrt	;wreg free
  3061  0015C6  C060  F0A1         	movff	?_sqrt,_excerciseControl$2067
  3062  0015CA  C061  F0A2         	movff	?_sqrt+1,_excerciseControl$2067+1
  3063  0015CE  C062  F0A3         	movff	?_sqrt+2,_excerciseControl$2067+2
  3064                           
  3065                           ;main.c: 437: {
  3066                           ;main.c: 438: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount));
  3067  0015D2  C0A1  F042         	movff	_excerciseControl$2067,___ftsub@f2
  3068  0015D6  C0A2  F043         	movff	_excerciseControl$2067+1,___ftsub@f2+1
  3069  0015DA  C0A3  F044         	movff	_excerciseControl$2067+2,___ftsub@f2+2
  3070  0015DE  C0DB  F01B         	movff	_speedCompensation,___awtoft@c
  3071  0015E2  C0DC  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3072  0015E6  EC75  F018         	call	___awtoft	;wreg free
  3073  0015EA  C01B  F03F         	movff	?___awtoft,___ftsub@f1
  3074  0015EE  C01C  F040         	movff	?___awtoft+1,___ftsub@f1+1
  3075  0015F2  C01D  F041         	movff	?___awtoft+2,___ftsub@f1+2
  3076  0015F6  EC55  F018         	call	___ftsub	;wreg free
  3077  0015FA  C03F  F073         	movff	?___ftsub,___fttol@f1
  3078  0015FE  C040  F074         	movff	?___ftsub+1,___fttol@f1+1
  3079  001602  C041  F075         	movff	?___ftsub+2,___fttol@f1+2
  3080  001606  EC7B  F012         	call	___fttol	;wreg free
  3081  00160A  C073  F0DB         	movff	?___fttol,_speedCompensation
  3082  00160E  C074  F0DC         	movff	?___fttol+1,_speedCompensation+1
  3083                           
  3084                           ;main.c: 439: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3085  001612  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3086  001616  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3087  00161A  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3088  00161E  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3089  001622  0E6C               	movlw	108
  3090  001624  EC1D  F013         	call	_wheelVelocity
  3091  001628                     l3290:
  3092                           
  3093                           ;main.c: 440: }
  3094                           ;main.c: 441: if(rightWheelCount > leftWheelCount + 1)
  3095  001628  0E01               	movlw	1
  3096  00162A  0100               	movlb	0	; () banked
  3097  00162C  25CA               	addwf	_leftWheelCount& (0+255),w,b
  3098  00162E  0100               	movlb	0	; () banked
  3099  001630  6F98               	movwf	??_excerciseControl& (0+255),b
  3100  001632  0E00               	movlw	0
  3101  001634  0100               	movlb	0	; () banked
  3102  001636  21CB               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  3103  001638  0100               	movlb	0	; () banked
  3104  00163A  6F99               	movwf	(??_excerciseControl+1)& (0+255),b
  3105  00163C  0E00               	movlw	0
  3106  00163E  0100               	movlb	0	; () banked
  3107  001640  21CC               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  3108  001642  0100               	movlb	0	; () banked
  3109  001644  6F9A               	movwf	(??_excerciseControl+2)& (0+255),b
  3110  001646  0E00               	movlw	0
  3111  001648  0100               	movlb	0	; () banked
  3112  00164A  21CD               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  3113  00164C  0100               	movlb	0	; () banked
  3114  00164E  6F9B               	movwf	(??_excerciseControl+3)& (0+255),b
  3115  001650  0100               	movlb	0	; () banked
  3116  001652  51CE               	movf	_rightWheelCount& (0+255),w,b
  3117  001654  0100               	movlb	0	; () banked
  3118  001656  5D98               	subwf	??_excerciseControl& (0+255),w,b
  3119  001658  0100               	movlb	0	; () banked
  3120  00165A  51CF               	movf	(_rightWheelCount+1)& (0+255),w,b
  3121  00165C  0100               	movlb	0	; () banked
  3122  00165E  5999               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  3123  001660  0100               	movlb	0	; () banked
  3124  001662  51D0               	movf	(_rightWheelCount+2)& (0+255),w,b
  3125  001664  0100               	movlb	0	; () banked
  3126  001666  599A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  3127  001668  0100               	movlb	0	; () banked
  3128  00166A  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  3129  00166C  0100               	movlb	0	; () banked
  3130  00166E  599B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  3131  001670  B0D8               	btfsc	status,0,c
  3132  001672  D075               	goto	l3294
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;main.c: 443: {
  3136                           ;main.c: 444: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3137  001674  C0CA  F098         	movff	_leftWheelCount,??_excerciseControl
  3138  001678  C0CB  F099         	movff	_leftWheelCount+1,??_excerciseControl+1
  3139  00167C  C0CC  F09A         	movff	_leftWheelCount+2,??_excerciseControl+2
  3140  001680  C0CD  F09B         	movff	_leftWheelCount+3,??_excerciseControl+3
  3141  001684  0100               	movlb	0	; () banked
  3142  001686  1F98               	comf	??_excerciseControl& (0+255),f,b
  3143  001688  1F99               	comf	(??_excerciseControl+1)& (0+255),f,b
  3144  00168A  1F9A               	comf	(??_excerciseControl+2)& (0+255),f,b
  3145  00168C  1F9B               	comf	(??_excerciseControl+3)& (0+255),f,b
  3146  00168E  2B98               	incf	??_excerciseControl& (0+255),f,b
  3147  001690  0E00               	movlw	0
  3148  001692  2399               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3149  001694  239A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3150  001696  239B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3151  001698  0100               	movlb	0	; () banked
  3152  00169A  51CE               	movf	_rightWheelCount& (0+255),w,b
  3153  00169C  0100               	movlb	0	; () banked
  3154  00169E  2598               	addwf	??_excerciseControl& (0+255),w,b
  3155  0016A0  6E1B               	movwf	___lltoft@c,c
  3156  0016A2  0100               	movlb	0	; () banked
  3157  0016A4  51CF               	movf	(_rightWheelCount+1)& (0+255),w,b
  3158  0016A6  0100               	movlb	0	; () banked
  3159  0016A8  2199               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3160  0016AA  6E1C               	movwf	___lltoft@c+1,c
  3161  0016AC  0100               	movlb	0	; () banked
  3162  0016AE  51D0               	movf	(_rightWheelCount+2)& (0+255),w,b
  3163  0016B0  0100               	movlb	0	; () banked
  3164  0016B2  219A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3165  0016B4  6E1D               	movwf	___lltoft@c+2,c
  3166  0016B6  0100               	movlb	0	; () banked
  3167  0016B8  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  3168  0016BA  0100               	movlb	0	; () banked
  3169  0016BC  219B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3170  0016BE  6E1E               	movwf	___lltoft@c+3,c
  3171  0016C0  ECB1  F017         	call	___lltoft	;wreg free
  3172  0016C4  C01B  F060         	movff	?___lltoft,sqrt@a
  3173  0016C8  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  3174  0016CC  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  3175  0016D0  ECCE  F010         	call	_sqrt	;wreg free
  3176  0016D4  C060  F0A4         	movff	?_sqrt,_excerciseControl$2068
  3177  0016D8  C061  F0A5         	movff	?_sqrt+1,_excerciseControl$2068+1
  3178  0016DC  C062  F0A6         	movff	?_sqrt+2,_excerciseControl$2068+2
  3179                           
  3180                           ;main.c: 443: {
  3181                           ;main.c: 444: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3182  0016E0  0E00               	movlw	0
  3183  0016E2  6E36               	movwf	___ftadd@f2,c
  3184  0016E4  0EA0               	movlw	160
  3185  0016E6  6E37               	movwf	___ftadd@f2+1,c
  3186  0016E8  0E40               	movlw	64
  3187  0016EA  6E38               	movwf	___ftadd@f2+2,c
  3188  0016EC  C0A4  F033         	movff	_excerciseControl$2068,___ftadd@f1
  3189  0016F0  C0A5  F034         	movff	_excerciseControl$2068+1,___ftadd@f1+1
  3190  0016F4  C0A6  F035         	movff	_excerciseControl$2068+2,___ftadd@f1+2
  3191  0016F8  ECA5  F011         	call	___ftadd	;wreg free
  3192  0016FC  C033  F0A7         	movff	?___ftadd,_excerciseControl$2069
  3193  001700  C034  F0A8         	movff	?___ftadd+1,_excerciseControl$2069+1
  3194  001704  C035  F0A9         	movff	?___ftadd+2,_excerciseControl$2069+2
  3195                           
  3196                           ;main.c: 443: {
  3197                           ;main.c: 444: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3198  001708  C0A7  F036         	movff	_excerciseControl$2069,___ftadd@f2
  3199  00170C  C0A8  F037         	movff	_excerciseControl$2069+1,___ftadd@f2+1
  3200  001710  C0A9  F038         	movff	_excerciseControl$2069+2,___ftadd@f2+2
  3201  001714  C0DB  F01B         	movff	_speedCompensation,___awtoft@c
  3202  001718  C0DC  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3203  00171C  EC75  F018         	call	___awtoft	;wreg free
  3204  001720  C01B  F033         	movff	?___awtoft,___ftadd@f1
  3205  001724  C01C  F034         	movff	?___awtoft+1,___ftadd@f1+1
  3206  001728  C01D  F035         	movff	?___awtoft+2,___ftadd@f1+2
  3207  00172C  ECA5  F011         	call	___ftadd	;wreg free
  3208  001730  C033  F073         	movff	?___ftadd,___fttol@f1
  3209  001734  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  3210  001738  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  3211  00173C  EC7B  F012         	call	___fttol	;wreg free
  3212  001740  C073  F0DB         	movff	?___fttol,_speedCompensation
  3213  001744  C074  F0DC         	movff	?___fttol+1,_speedCompensation+1
  3214                           
  3215                           ;main.c: 445: wheelVelocity('l', leftWheelCommandedSpeed,speedCompensation);
  3216  001748  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3217  00174C  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3218  001750  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3219  001754  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3220  001758  0E6C               	movlw	108
  3221  00175A  EC1D  F013         	call	_wheelVelocity
  3222  00175E                     l3294:
  3223                           
  3224                           ;main.c: 446: }
  3225                           ;main.c: 448: if(rightWheelCount >= 23)
  3226  00175E  0100               	movlb	0	; () banked
  3227  001760  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  3228  001762  0100               	movlb	0	; () banked
  3229  001764  11D0               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3230  001766  0100               	movlb	0	; () banked
  3231  001768  11CF               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  3232  00176A  E105               	bnz	u3090
  3233  00176C  0E17               	movlw	23
  3234  00176E  0100               	movlb	0	; () banked
  3235  001770  5DCE               	subwf	_rightWheelCount& (0+255),w,b
  3236  001772  A0D8               	btfss	status,0,c
  3237  001774  D09F               	goto	l3322
  3238  001776                     u3090:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 449: {
  3242                           ;main.c: 450: if(leftWheelCount >= 23)
  3243  001776  0100               	movlb	0	; () banked
  3244  001778  51CD               	movf	(_leftWheelCount+3)& (0+255),w,b
  3245  00177A  0100               	movlb	0	; () banked
  3246  00177C  11CC               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  3247  00177E  0100               	movlb	0	; () banked
  3248  001780  11CB               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  3249  001782  E105               	bnz	u3100
  3250  001784  0E17               	movlw	23
  3251  001786  0100               	movlb	0	; () banked
  3252  001788  5DCA               	subwf	_leftWheelCount& (0+255),w,b
  3253  00178A  A0D8               	btfss	status,0,c
  3254  00178C  D06E               	goto	l3316
  3255  00178E                     u3100:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 451: {
  3259                           ;main.c: 452: rightWheelCount = 0;
  3260  00178E  0E00               	movlw	0
  3261  001790  0100               	movlb	0	; () banked
  3262  001792  6FCE               	movwf	_rightWheelCount& (0+255),b
  3263  001794  0E00               	movlw	0
  3264  001796  6FCF               	movwf	(_rightWheelCount+1)& (0+255),b
  3265  001798  0E00               	movlw	0
  3266  00179A  6FD0               	movwf	(_rightWheelCount+2)& (0+255),b
  3267  00179C  0E00               	movlw	0
  3268  00179E  6FD1               	movwf	(_rightWheelCount+3)& (0+255),b
  3269                           
  3270                           ;main.c: 453: leftWheelCount = 0;
  3271  0017A0  0E00               	movlw	0
  3272  0017A2  0100               	movlb	0	; () banked
  3273  0017A4  6FCA               	movwf	_leftWheelCount& (0+255),b
  3274  0017A6  0E00               	movlw	0
  3275  0017A8  6FCB               	movwf	(_leftWheelCount+1)& (0+255),b
  3276  0017AA  0E00               	movlw	0
  3277  0017AC  6FCC               	movwf	(_leftWheelCount+2)& (0+255),b
  3278  0017AE  0E00               	movlw	0
  3279  0017B0  6FCD               	movwf	(_leftWheelCount+3)& (0+255),b
  3280                           
  3281                           ;main.c: 454: leftWheelCommandedSpeed = 0;
  3282  0017B2  0E00               	movlw	0
  3283  0017B4  0100               	movlb	0	; () banked
  3284  0017B6  6FE2               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3285  0017B8  0E00               	movlw	0
  3286  0017BA  6FE1               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3287                           
  3288                           ;main.c: 455: rightWheelCommandedSpeed = 0;
  3289  0017BC  0E00               	movlw	0
  3290  0017BE  0100               	movlb	0	; () banked
  3291  0017C0  6FE4               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3292  0017C2  0E00               	movlw	0
  3293  0017C4  6FE3               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3294                           
  3295                           ;main.c: 456: speedCompensation = 0;
  3296  0017C6  0E00               	movlw	0
  3297  0017C8  0100               	movlb	0	; () banked
  3298  0017CA  6FDC               	movwf	(_speedCompensation+1)& (0+255),b
  3299  0017CC  0E00               	movlw	0
  3300  0017CE  6FDB               	movwf	_speedCompensation& (0+255),b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 457: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3304  0017D0  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3305  0017D4  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3306  0017D8  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3307  0017DC  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3308  0017E0  0E72               	movlw	114
  3309  0017E2  EC1D  F013         	call	_wheelVelocity
  3310                           
  3311                           ;main.c: 458: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3312  0017E6  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3313  0017EA  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3314  0017EE  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3315  0017F2  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3316  0017F6  0E6C               	movlw	108
  3317  0017F8  EC1D  F013         	call	_wheelVelocity
  3318                           
  3319                           ;main.c: 459: leftWheelCommandedSpeed = 35;
  3320  0017FC  0E00               	movlw	0
  3321  0017FE  0100               	movlb	0	; () banked
  3322  001800  6FE2               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3323  001802  0E23               	movlw	35
  3324  001804  6FE1               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3325                           
  3326                           ;main.c: 460: rightWheelCommandedSpeed = 30;
  3327  001806  0E00               	movlw	0
  3328  001808  0100               	movlb	0	; () banked
  3329  00180A  6FE4               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3330  00180C  0E1E               	movlw	30
  3331  00180E  6FE3               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;main.c: 462: event++;
  3335  001810  0100               	movlb	0	; () banked
  3336  001812  2BDA               	incf	_event& (0+255),f,b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 463: for(int i = 0; i<20 ; i++)
  3340  001814  0E00               	movlw	0
  3341  001816  0100               	movlb	0	; () banked
  3342  001818  6FAD               	movwf	(excerciseControl@i_1035+1)& (0+255),b
  3343  00181A  0E00               	movlw	0
  3344  00181C  6FAC               	movwf	excerciseControl@i_1035& (0+255),b
  3345                           
  3346                           ; BSR set to: 0
  3347  00181E  0100               	movlb	0	; () banked
  3348  001820  BFAD               	btfsc	(excerciseControl@i_1035+1)& (0+255),7,b
  3349  001822  D008               	goto	l3312
  3350  001824  0100               	movlb	0	; () banked
  3351  001826  51AD               	movf	(excerciseControl@i_1035+1)& (0+255),w,b
  3352  001828  E117               	bnz	l196
  3353  00182A  0E14               	movlw	20
  3354  00182C  0100               	movlb	0	; () banked
  3355  00182E  5DAC               	subwf	excerciseControl@i_1035& (0+255),w,b
  3356  001830  B0D8               	btfsc	status,0,c
  3357  001832  D012               	goto	l196
  3358  001834                     l3312:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 464: {
  3362                           ;main.c: 465: _delay((unsigned long)((50)*(8000000/4000.0)));
  3363  001834  0E82               	movlw	130
  3364  001836  0100               	movlb	0	; () banked
  3365  001838  6F98               	movwf	??_excerciseControl& (0+255),b
  3366  00183A  0EDE               	movlw	222
  3367  00183C                     u3217:
  3368  00183C  2EE8               	decfsz	wreg,f,c
  3369  00183E  D7FE               	goto	u3217
  3370  001840  2F98               	decfsz	??_excerciseControl& (0+255),f,b
  3371  001842  D7FC               	goto	u3217
  3372  001844  0100               	movlb	0	; () banked
  3373  001846  4BAC               	infsnz	excerciseControl@i_1035& (0+255),f,b
  3374  001848  2BAD               	incf	(excerciseControl@i_1035+1)& (0+255),f,b
  3375  00184A  0100               	movlb	0	; () banked
  3376  00184C  BFAD               	btfsc	(excerciseControl@i_1035+1)& (0+255),7,b
  3377  00184E  D7F2               	goto	l3312
  3378  001850  0100               	movlb	0	; () banked
  3379  001852  51AD               	movf	(excerciseControl@i_1035+1)& (0+255),w,b
  3380  001854  E101               	bnz	u3120
  3381  001856  D7E9               	goto	L1
  3382  001858                     u3120:
  3383  001858                     l196:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;main.c: 466: }
  3387                           ;main.c: 467: startCircleMillis = elapsedMillis;
  3388  001858  C0C6  F0D2         	movff	_elapsedMillis,excerciseControl@startCircleMillis
  3389  00185C  C0C7  F0D3         	movff	_elapsedMillis+1,excerciseControl@startCircleMillis+1
  3390  001860  C0C8  F0D4         	movff	_elapsedMillis+2,excerciseControl@startCircleMillis+2
  3391  001864  C0C9  F0D5         	movff	_elapsedMillis+3,excerciseControl@startCircleMillis+3
  3392                           
  3393                           ;main.c: 468: }
  3394  001868  D025               	goto	l3322
  3395  00186A                     l3316:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;main.c: 469: else
  3399                           ;main.c: 470: {
  3400                           ;main.c: 471: rightWheelCommandedSpeed = 0;
  3401  00186A  0E00               	movlw	0
  3402  00186C  0100               	movlb	0	; () banked
  3403  00186E  6FE4               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3404  001870  0E00               	movlw	0
  3405  001872  6FE3               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3406                           
  3407                           ;main.c: 472: leftWheelCommandedSpeed = -40;
  3408  001874  0EFF               	movlw	255
  3409  001876  0100               	movlb	0	; () banked
  3410  001878  6FE2               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3411  00187A  0ED8               	movlw	216
  3412  00187C  6FE1               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3413                           
  3414                           ;main.c: 473: speedCompensation = 0;
  3415  00187E  0E00               	movlw	0
  3416  001880  0100               	movlb	0	; () banked
  3417  001882  6FDC               	movwf	(_speedCompensation+1)& (0+255),b
  3418  001884  0E00               	movlw	0
  3419  001886  6FDB               	movwf	_speedCompensation& (0+255),b
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;main.c: 474: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3423  001888  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3424  00188C  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3425  001890  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3426  001894  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3427  001898  0E72               	movlw	114
  3428  00189A  EC1D  F013         	call	_wheelVelocity
  3429                           
  3430                           ;main.c: 475: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3431  00189E  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3432  0018A2  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3433  0018A6  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3434  0018AA  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3435  0018AE  0E72               	movlw	114
  3436  0018B0  EC1D  F013         	call	_wheelVelocity
  3437  0018B4                     l3322:
  3438                           
  3439                           ;main.c: 476: }
  3440                           ;main.c: 478: }
  3441                           ;main.c: 480: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3442  0018B4  0EE1               	movlw	low excerciseControl@leftWheelCommandedSpeed
  3443  0018B6  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3444  0018B8  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3445  0018BA  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3446  0018BC  0EE3               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3447  0018BE  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3448  0018C0  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3449  0018C2  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3450  0018C4  0EDB               	movlw	low _speedCompensation
  3451  0018C6  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3452  0018C8  0E00               	movlw	high _speedCompensation
  3453  0018CA  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3454  0018CC  ECA8  F013         	call	_limitWheelSpeeds	;wreg free
  3455                           
  3456                           ;main.c: 481: break;
  3457  0018D0  0012               	return	
  3458  0018D2                     l3324:
  3459                           
  3460                           ;main.c: 497: control_ms = 100;
  3461  0018D2  0E00               	movlw	0
  3462  0018D4  0100               	movlb	0	; () banked
  3463  0018D6  6FDE               	movwf	(_control_ms+1)& (0+255),b
  3464  0018D8  0E64               	movlw	100
  3465  0018DA  6FDD               	movwf	_control_ms& (0+255),b
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;main.c: 526: if(rightWheelMeasuredSpeed < 10)
  3469  0018DC  0100               	movlb	0	; () banked
  3470  0018DE  BFD9               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  3471  0018E0  D008               	goto	l3328
  3472  0018E2  0100               	movlb	0	; () banked
  3473  0018E4  51D9               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  3474  0018E6  E121               	bnz	l3330
  3475  0018E8  0E0A               	movlw	10
  3476  0018EA  0100               	movlb	0	; () banked
  3477  0018EC  5DD8               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  3478  0018EE  B0D8               	btfsc	status,0,c
  3479  0018F0  D01C               	goto	l3330
  3480  0018F2                     l3328:
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;main.c: 527: {
  3484                           ;main.c: 528: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  3485  0018F2  0100               	movlb	0	; () banked
  3486  0018F4  4BE3               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  3487  0018F6  2BE4               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  3488  0018F8  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3489  0018FC  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3490  001900  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3491  001904  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3492  001908  0E72               	movlw	114
  3493  00190A  EC1D  F013         	call	_wheelVelocity
  3494                           
  3495                           ;main.c: 529: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  3496  00190E  0100               	movlb	0	; () banked
  3497  001910  4BE1               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  3498  001912  2BE2               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  3499  001914  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3500  001918  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3501  00191C  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3502  001920  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3503  001924  0E6C               	movlw	108
  3504  001926  EC1D  F013         	call	_wheelVelocity
  3505  00192A                     l3330:
  3506                           
  3507                           ;main.c: 530: }
  3508                           ;main.c: 531: int temp = round(1.25 * (leftWheelCount));
  3509  00192A  0E00               	movlw	0
  3510  00192C  6E27               	movwf	___ftmul@f2,c
  3511  00192E  0EA0               	movlw	160
  3512  001930  6E28               	movwf	___ftmul@f2+1,c
  3513  001932  0E3F               	movlw	63
  3514  001934  6E29               	movwf	___ftmul@f2+2,c
  3515  001936  C0CA  F01B         	movff	_leftWheelCount,___lltoft@c
  3516  00193A  C0CB  F01C         	movff	_leftWheelCount+1,___lltoft@c+1
  3517  00193E  C0CC  F01D         	movff	_leftWheelCount+2,___lltoft@c+2
  3518  001942  C0CD  F01E         	movff	_leftWheelCount+3,___lltoft@c+3
  3519  001946  ECB1  F017         	call	___lltoft	;wreg free
  3520  00194A  C01B  F024         	movff	?___lltoft,___ftmul@f1
  3521  00194E  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  3522  001952  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  3523  001956  EC2A  F014         	call	___ftmul	;wreg free
  3524  00195A  C024  F092         	movff	?___ftmul,round@x
  3525  00195E  C025  F093         	movff	?___ftmul+1,round@x+1
  3526  001962  C026  F094         	movff	?___ftmul+2,round@x+2
  3527  001966  ECB8  F016         	call	_round	;wreg free
  3528  00196A  C092  F09E         	movff	?_round,_excerciseControl$2070
  3529  00196E  C093  F09F         	movff	?_round+1,_excerciseControl$2070+1
  3530  001972  C094  F0A0         	movff	?_round+2,_excerciseControl$2070+2
  3531                           
  3532                           ;main.c: 530: }
  3533                           ;main.c: 531: int temp = round(1.25 * (leftWheelCount));
  3534  001976  C09E  F073         	movff	_excerciseControl$2070,___fttol@f1
  3535  00197A  C09F  F074         	movff	_excerciseControl$2070+1,___fttol@f1+1
  3536  00197E  C0A0  F075         	movff	_excerciseControl$2070+2,___fttol@f1+2
  3537  001982  EC7B  F012         	call	___fttol	;wreg free
  3538  001986  C073  F09C         	movff	?___fttol,excerciseControl@temp
  3539  00198A  C074  F09D         	movff	?___fttol+1,excerciseControl@temp+1
  3540                           
  3541                           ;main.c: 532: temp = (rightWheelCount + 1);
  3542  00198E  0E01               	movlw	1
  3543  001990  0100               	movlb	0	; () banked
  3544  001992  25CE               	addwf	_rightWheelCount& (0+255),w,b
  3545  001994  0100               	movlb	0	; () banked
  3546  001996  6F9C               	movwf	excerciseControl@temp& (0+255),b
  3547  001998  0E00               	movlw	0
  3548  00199A  0100               	movlb	0	; () banked
  3549  00199C  21CF               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  3550  00199E  0100               	movlb	0	; () banked
  3551  0019A0  6F9D               	movwf	(excerciseControl@temp+1)& (0+255),b
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;main.c: 533: if(round(1.25 * (leftWheelCount)) > (rightWheelCount) )
  3555  0019A2  C0CE  F01B         	movff	_rightWheelCount,___lltoft@c
  3556  0019A6  C0CF  F01C         	movff	_rightWheelCount+1,___lltoft@c+1
  3557  0019AA  C0D0  F01D         	movff	_rightWheelCount+2,___lltoft@c+2
  3558  0019AE  C0D1  F01E         	movff	_rightWheelCount+3,___lltoft@c+3
  3559  0019B2  ECB1  F017         	call	___lltoft	;wreg free
  3560  0019B6  C01B  F033         	movff	?___lltoft,___ftge@ff1
  3561  0019BA  C01C  F034         	movff	?___lltoft+1,___ftge@ff1+1
  3562  0019BE  C01D  F035         	movff	?___lltoft+2,___ftge@ff1+2
  3563  0019C2  0E00               	movlw	0
  3564  0019C4  6E27               	movwf	___ftmul@f2,c
  3565  0019C6  0EA0               	movlw	160
  3566  0019C8  6E28               	movwf	___ftmul@f2+1,c
  3567  0019CA  0E3F               	movlw	63
  3568  0019CC  6E29               	movwf	___ftmul@f2+2,c
  3569  0019CE  C0CA  F01B         	movff	_leftWheelCount,___lltoft@c
  3570  0019D2  C0CB  F01C         	movff	_leftWheelCount+1,___lltoft@c+1
  3571  0019D6  C0CC  F01D         	movff	_leftWheelCount+2,___lltoft@c+2
  3572  0019DA  C0CD  F01E         	movff	_leftWheelCount+3,___lltoft@c+3
  3573  0019DE  ECB1  F017         	call	___lltoft	;wreg free
  3574  0019E2  C01B  F024         	movff	?___lltoft,___ftmul@f1
  3575  0019E6  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  3576  0019EA  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  3577  0019EE  EC2A  F014         	call	___ftmul	;wreg free
  3578  0019F2  C024  F092         	movff	?___ftmul,round@x
  3579  0019F6  C025  F093         	movff	?___ftmul+1,round@x+1
  3580  0019FA  C026  F094         	movff	?___ftmul+2,round@x+2
  3581  0019FE  ECB8  F016         	call	_round	;wreg free
  3582  001A02  C092  F036         	movff	?_round,___ftge@ff2
  3583  001A06  C093  F037         	movff	?_round+1,___ftge@ff2+1
  3584  001A0A  C094  F038         	movff	?_round+2,___ftge@ff2+2
  3585  001A0E  EC70  F016         	call	___ftge	;wreg free
  3586  001A12  B0D8               	btfsc	status,0,c
  3587  001A14  D018               	goto	l3342
  3588                           
  3589                           ;main.c: 535: {
  3590                           ;main.c: 536: speedCompensation -= 5;
  3591  001A16  0100               	movlb	0	; () banked
  3592  001A18  0EFB               	movlw	251
  3593  001A1A  27DB               	addwf	_speedCompensation& (0+255),f,b
  3594  001A1C  0EFF               	movlw	255
  3595  001A1E  23DC               	addwfc	(_speedCompensation+1)& (0+255),f,b
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 537: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation + leftIntegr
      +                          al);
  3599  001A20  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3600  001A24  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3601  001A28  0100               	movlb	0	; () banked
  3602  001A2A  51DF               	movf	excerciseControl@leftIntegral& (0+255),w,b
  3603  001A2C  0100               	movlb	0	; () banked
  3604  001A2E  25DB               	addwf	_speedCompensation& (0+255),w,b
  3605  001A30  0100               	movlb	0	; () banked
  3606  001A32  6F84               	movwf	wheelVelocity@speedCompensation& (0+255),b
  3607  001A34  0100               	movlb	0	; () banked
  3608  001A36  51E0               	movf	(excerciseControl@leftIntegral+1)& (0+255),w,b
  3609  001A38  0100               	movlb	0	; () banked
  3610  001A3A  21DC               	addwfc	(_speedCompensation+1)& (0+255),w,b
  3611  001A3C  0100               	movlb	0	; () banked
  3612  001A3E  6F85               	movwf	(wheelVelocity@speedCompensation+1)& (0+255),b
  3613  001A40  0E6C               	movlw	108
  3614  001A42  EC1D  F013         	call	_wheelVelocity
  3615  001A46                     l3342:
  3616                           
  3617                           ;main.c: 538: }
  3618                           ;main.c: 539: if(round(1.25 * (leftWheelCount)) < rightWheelCount)
  3619  001A46  0E00               	movlw	0
  3620  001A48  6E27               	movwf	___ftmul@f2,c
  3621  001A4A  0EA0               	movlw	160
  3622  001A4C  6E28               	movwf	___ftmul@f2+1,c
  3623  001A4E  0E3F               	movlw	63
  3624  001A50  6E29               	movwf	___ftmul@f2+2,c
  3625  001A52  C0CA  F01B         	movff	_leftWheelCount,___lltoft@c
  3626  001A56  C0CB  F01C         	movff	_leftWheelCount+1,___lltoft@c+1
  3627  001A5A  C0CC  F01D         	movff	_leftWheelCount+2,___lltoft@c+2
  3628  001A5E  C0CD  F01E         	movff	_leftWheelCount+3,___lltoft@c+3
  3629  001A62  ECB1  F017         	call	___lltoft	;wreg free
  3630  001A66  C01B  F024         	movff	?___lltoft,___ftmul@f1
  3631  001A6A  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  3632  001A6E  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  3633  001A72  EC2A  F014         	call	___ftmul	;wreg free
  3634  001A76  C024  F092         	movff	?___ftmul,round@x
  3635  001A7A  C025  F093         	movff	?___ftmul+1,round@x+1
  3636  001A7E  C026  F094         	movff	?___ftmul+2,round@x+2
  3637  001A82  ECB8  F016         	call	_round	;wreg free
  3638  001A86  C092  F033         	movff	?_round,___ftge@ff1
  3639  001A8A  C093  F034         	movff	?_round+1,___ftge@ff1+1
  3640  001A8E  C094  F035         	movff	?_round+2,___ftge@ff1+2
  3641  001A92  C0CE  F01B         	movff	_rightWheelCount,___lltoft@c
  3642  001A96  C0CF  F01C         	movff	_rightWheelCount+1,___lltoft@c+1
  3643  001A9A  C0D0  F01D         	movff	_rightWheelCount+2,___lltoft@c+2
  3644  001A9E  C0D1  F01E         	movff	_rightWheelCount+3,___lltoft@c+3
  3645  001AA2  ECB1  F017         	call	___lltoft	;wreg free
  3646  001AA6  C01B  F036         	movff	?___lltoft,___ftge@ff2
  3647  001AAA  C01C  F037         	movff	?___lltoft+1,___ftge@ff2+1
  3648  001AAE  C01D  F038         	movff	?___lltoft+2,___ftge@ff2+2
  3649  001AB2  EC70  F016         	call	___ftge	;wreg free
  3650  001AB6  B0D8               	btfsc	status,0,c
  3651  001AB8  D01D               	goto	l3348
  3652                           
  3653                           ;main.c: 541: {
  3654                           ;main.c: 542: leftIntegral += 2;
  3655  001ABA  0E02               	movlw	2
  3656  001ABC  0100               	movlb	0	; () banked
  3657  001ABE  27DF               	addwf	excerciseControl@leftIntegral& (0+255),f,b
  3658  001AC0  0E00               	movlw	0
  3659  001AC2  23E0               	addwfc	(excerciseControl@leftIntegral+1)& (0+255),f,b
  3660                           
  3661                           ;main.c: 543: speedCompensation += 5;
  3662  001AC4  0E05               	movlw	5
  3663  001AC6  0100               	movlb	0	; () banked
  3664  001AC8  27DB               	addwf	_speedCompensation& (0+255),f,b
  3665  001ACA  0E00               	movlw	0
  3666  001ACC  23DC               	addwfc	(_speedCompensation+1)& (0+255),f,b
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;main.c: 544: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation + leftIntegr
      +                          al);
  3670  001ACE  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3671  001AD2  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3672  001AD6  0100               	movlb	0	; () banked
  3673  001AD8  51DF               	movf	excerciseControl@leftIntegral& (0+255),w,b
  3674  001ADA  0100               	movlb	0	; () banked
  3675  001ADC  25DB               	addwf	_speedCompensation& (0+255),w,b
  3676  001ADE  0100               	movlb	0	; () banked
  3677  001AE0  6F84               	movwf	wheelVelocity@speedCompensation& (0+255),b
  3678  001AE2  0100               	movlb	0	; () banked
  3679  001AE4  51E0               	movf	(excerciseControl@leftIntegral+1)& (0+255),w,b
  3680  001AE6  0100               	movlb	0	; () banked
  3681  001AE8  21DC               	addwfc	(_speedCompensation+1)& (0+255),w,b
  3682  001AEA  0100               	movlb	0	; () banked
  3683  001AEC  6F85               	movwf	(wheelVelocity@speedCompensation+1)& (0+255),b
  3684  001AEE  0E6C               	movlw	108
  3685  001AF0  EC1D  F013         	call	_wheelVelocity
  3686  001AF4                     l3348:
  3687                           
  3688                           ;main.c: 545: }
  3689                           ;main.c: 548: if(rightWheelCount >= 1000)
  3690  001AF4  0100               	movlb	0	; () banked
  3691  001AF6  51D1               	movf	(_rightWheelCount+3)& (0+255),w,b
  3692  001AF8  0100               	movlb	0	; () banked
  3693  001AFA  11D0               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3694  001AFC  E108               	bnz	u3160
  3695  001AFE  0EE8               	movlw	232
  3696  001B00  0100               	movlb	0	; () banked
  3697  001B02  5DCE               	subwf	_rightWheelCount& (0+255),w,b
  3698  001B04  0E03               	movlw	3
  3699  001B06  0100               	movlb	0	; () banked
  3700  001B08  59CF               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  3701  001B0A  A0D8               	btfss	status,0,c
  3702  001B0C  D039               	goto	l3358
  3703  001B0E                     u3160:
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;main.c: 549: {
  3707                           ;main.c: 550: rightWheelCount = 0;
  3708  001B0E  0E00               	movlw	0
  3709  001B10  0100               	movlb	0	; () banked
  3710  001B12  6FCE               	movwf	_rightWheelCount& (0+255),b
  3711  001B14  0E00               	movlw	0
  3712  001B16  6FCF               	movwf	(_rightWheelCount+1)& (0+255),b
  3713  001B18  0E00               	movlw	0
  3714  001B1A  6FD0               	movwf	(_rightWheelCount+2)& (0+255),b
  3715  001B1C  0E00               	movlw	0
  3716  001B1E  6FD1               	movwf	(_rightWheelCount+3)& (0+255),b
  3717                           
  3718                           ;main.c: 551: leftWheelCount = 0;
  3719  001B20  0E00               	movlw	0
  3720  001B22  0100               	movlb	0	; () banked
  3721  001B24  6FCA               	movwf	_leftWheelCount& (0+255),b
  3722  001B26  0E00               	movlw	0
  3723  001B28  6FCB               	movwf	(_leftWheelCount+1)& (0+255),b
  3724  001B2A  0E00               	movlw	0
  3725  001B2C  6FCC               	movwf	(_leftWheelCount+2)& (0+255),b
  3726  001B2E  0E00               	movlw	0
  3727  001B30  6FCD               	movwf	(_leftWheelCount+3)& (0+255),b
  3728                           
  3729                           ;main.c: 552: leftWheelCommandedSpeed = 0;
  3730  001B32  0E00               	movlw	0
  3731  001B34  0100               	movlb	0	; () banked
  3732  001B36  6FE2               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3733  001B38  0E00               	movlw	0
  3734  001B3A  6FE1               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3735                           
  3736                           ;main.c: 553: rightWheelCommandedSpeed = 0;
  3737  001B3C  0E00               	movlw	0
  3738  001B3E  0100               	movlb	0	; () banked
  3739  001B40  6FE4               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3740  001B42  0E00               	movlw	0
  3741  001B44  6FE3               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3742                           
  3743                           ;main.c: 554: speedCompensation = 0;
  3744  001B46  0E00               	movlw	0
  3745  001B48  0100               	movlb	0	; () banked
  3746  001B4A  6FDC               	movwf	(_speedCompensation+1)& (0+255),b
  3747  001B4C  0E00               	movlw	0
  3748  001B4E  6FDB               	movwf	_speedCompensation& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;main.c: 556: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3752  001B50  C0E3  F082         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3753  001B54  C0E4  F083         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3754  001B58  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3755  001B5C  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3756  001B60  0E72               	movlw	114
  3757  001B62  EC1D  F013         	call	_wheelVelocity
  3758                           
  3759                           ;main.c: 557: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3760  001B66  C0E1  F082         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3761  001B6A  C0E2  F083         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3762  001B6E  C0DB  F084         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3763  001B72  C0DC  F085         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3764  001B76  0E6C               	movlw	108
  3765  001B78  EC1D  F013         	call	_wheelVelocity
  3766                           
  3767                           ;main.c: 559: event++;
  3768  001B7C  0100               	movlb	0	; () banked
  3769  001B7E  2BDA               	incf	_event& (0+255),f,b
  3770  001B80                     l3358:
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;main.c: 560: }
  3774                           ;main.c: 562: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3775  001B80  0EE1               	movlw	low excerciseControl@leftWheelCommandedSpeed
  3776  001B82  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3777  001B84  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3778  001B86  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3779  001B88  0EE3               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3780  001B8A  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3781  001B8C  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3782  001B8E  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3783  001B90  0EDB               	movlw	low _speedCompensation
  3784  001B92  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3785  001B94  0E00               	movlw	high _speedCompensation
  3786  001B96  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3787  001B98  ECA8  F013         	call	_limitWheelSpeeds	;wreg free
  3788                           
  3789                           ;main.c: 566: }
  3790                           
  3791                           ;main.c: 563: break;
  3792  001B9C  0012               	return	
  3793  001B9E                     l3362:
  3794  001B9E  0100               	movlb	0	; () banked
  3795  001BA0  51DA               	movf	_event& (0+255),w,b
  3796                           
  3797                           ; Switch size 1, requested type "space"
  3798                           ; Number of cases is 3, Range of values is 0 to 2
  3799                           ; switch strategies available:
  3800                           ; Name         Instructions Cycles
  3801                           ; simple_byte           10     6 (average)
  3802                           ;	Chosen strategy is simple_byte
  3803  001BA2  0A00               	xorlw	0	; case 0
  3804  001BA4  B4D8               	btfsc	status,2,c
  3805  001BA6  EF17  F008         	goto	l3222
  3806  001BAA  0A01               	xorlw	1	; case 1
  3807  001BAC  B4D8               	btfsc	status,2,c
  3808  001BAE  D465               	goto	l3278
  3809  001BB0  0A03               	xorlw	3	; case 2
  3810  001BB2  A4D8               	btfss	status,2,c
  3811  001BB4  0012               	return	
  3812  001BB6  D68D               	goto	l3324
  3813  001BB8                     __end_of_excerciseControl:
  3814                           	opt stack 0
  3815                           tblptru	equ	0xFF8
  3816                           tblptrh	equ	0xFF7
  3817                           tblptrl	equ	0xFF6
  3818                           tablat	equ	0xFF5
  3819                           prodh	equ	0xFF4
  3820                           prodl	equ	0xFF3
  3821                           postinc0	equ	0xFEE
  3822                           wreg	equ	0xFE8
  3823                           postdec1	equ	0xFE5
  3824                           fsr1l	equ	0xFE1
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           fsr2h	equ	0xFDA
  3828                           fsr2l	equ	0xFD9
  3829                           status	equ	0xFD8
  3830                           
  3831 ;; *************** function _wheelVelocity *****************
  3832 ;; Defined at:
  3833 ;;		line 253 in file "main.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;  wheel           1    wreg     unsigned char 
  3836 ;;  speed           2   34[BANK0 ] int 
  3837 ;;  speedCompens    2   36[BANK0 ] int 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  wheel           1   41[BANK0 ] unsigned char 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      void 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3849 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;Total ram usage:        8 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    3
  3856 ;; This function calls:
  3857 ;;		___awtoft
  3858 ;;		___ftadd
  3859 ;;		___ftmul
  3860 ;;		___ftneg
  3861 ;;		___fttol
  3862 ;; This function is called by:
  3863 ;;		_excerciseControl
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text9
  3868  00263A                     __ptext9:
  3869                           	opt stack 0
  3870  00263A                     _wheelVelocity:
  3871                           	opt stack 26
  3872                           
  3873                           ;incstack = 0
  3874                           ;wheelVelocity@wheel stored from wreg
  3875  00263A  0100               	movlb	0	; () banked
  3876  00263C  6F89               	movwf	wheelVelocity@wheel& (0+255),b
  3877                           
  3878                           ;main.c: 255: if(wheel == 'r')
  3879  00263E  0E72               	movlw	114
  3880  002640  0100               	movlb	0	; () banked
  3881  002642  1989               	xorwf	wheelVelocity@wheel& (0+255),w,b
  3882  002644  A4D8               	btfss	status,2,c
  3883  002646  D02E               	goto	l3208
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;main.c: 256: {
  3887                           ;main.c: 259: rightWheelCommandedPW = (int) (725 + speed * 1.25);
  3888  002648  0E40               	movlw	64
  3889  00264A  6E36               	movwf	___ftadd@f2,c
  3890  00264C  0E35               	movlw	53
  3891  00264E  6E37               	movwf	___ftadd@f2+1,c
  3892  002650  0E44               	movlw	68
  3893  002652  6E38               	movwf	___ftadd@f2+2,c
  3894  002654  0E00               	movlw	0
  3895  002656  6E27               	movwf	___ftmul@f2,c
  3896  002658  0EA0               	movlw	160
  3897  00265A  6E28               	movwf	___ftmul@f2+1,c
  3898  00265C  0E3F               	movlw	63
  3899  00265E  6E29               	movwf	___ftmul@f2+2,c
  3900  002660  C082  F01B         	movff	wheelVelocity@speed,___awtoft@c
  3901  002664  C083  F01C         	movff	wheelVelocity@speed+1,___awtoft@c+1
  3902  002668  EC75  F018         	call	___awtoft	;wreg free
  3903  00266C  C01B  F024         	movff	?___awtoft,___ftmul@f1
  3904  002670  C01C  F025         	movff	?___awtoft+1,___ftmul@f1+1
  3905  002674  C01D  F026         	movff	?___awtoft+2,___ftmul@f1+2
  3906  002678  EC2A  F014         	call	___ftmul	;wreg free
  3907  00267C  C024  F033         	movff	?___ftmul,___ftadd@f1
  3908  002680  C025  F034         	movff	?___ftmul+1,___ftadd@f1+1
  3909  002684  C026  F035         	movff	?___ftmul+2,___ftadd@f1+2
  3910  002688  ECA5  F011         	call	___ftadd	;wreg free
  3911  00268C  C033  F073         	movff	?___ftadd,___fttol@f1
  3912  002690  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  3913  002694  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  3914  002698  EC7B  F012         	call	___fttol	;wreg free
  3915  00269C  C073  F049         	movff	?___fttol,_rightWheelCommandedPW
  3916  0026A0  C074  F04A         	movff	?___fttol+1,_rightWheelCommandedPW+1
  3917  0026A4                     l3208:
  3918                           
  3919                           ;main.c: 260: }
  3920                           ;main.c: 262: if(wheel == 'l')
  3921  0026A4  0E6C               	movlw	108
  3922  0026A6  0100               	movlb	0	; () banked
  3923  0026A8  1989               	xorwf	wheelVelocity@wheel& (0+255),w,b
  3924  0026AA  A4D8               	btfss	status,2,c
  3925  0026AC  0012               	return	
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;main.c: 263: {
  3929                           ;main.c: 266: leftWheelCommandedPW = (int) (735 - (speedCompensation + speed * 1.25));
  3930  0026AE  0E00               	movlw	0
  3931  0026B0  6E27               	movwf	___ftmul@f2,c
  3932  0026B2  0EA0               	movlw	160
  3933  0026B4  6E28               	movwf	___ftmul@f2+1,c
  3934  0026B6  0E3F               	movlw	63
  3935  0026B8  6E29               	movwf	___ftmul@f2+2,c
  3936  0026BA  C082  F01B         	movff	wheelVelocity@speed,___awtoft@c
  3937  0026BE  C083  F01C         	movff	wheelVelocity@speed+1,___awtoft@c+1
  3938  0026C2  EC75  F018         	call	___awtoft	;wreg free
  3939  0026C6  C01B  F024         	movff	?___awtoft,___ftmul@f1
  3940  0026CA  C01C  F025         	movff	?___awtoft+1,___ftmul@f1+1
  3941  0026CE  C01D  F026         	movff	?___awtoft+2,___ftmul@f1+2
  3942  0026D2  EC2A  F014         	call	___ftmul	;wreg free
  3943  0026D6  C024  F036         	movff	?___ftmul,___ftadd@f2
  3944  0026DA  C025  F037         	movff	?___ftmul+1,___ftadd@f2+1
  3945  0026DE  C026  F038         	movff	?___ftmul+2,___ftadd@f2+2
  3946  0026E2  C084  F01B         	movff	wheelVelocity@speedCompensation,___awtoft@c
  3947  0026E6  C085  F01C         	movff	wheelVelocity@speedCompensation+1,___awtoft@c+1
  3948  0026EA  EC75  F018         	call	___awtoft	;wreg free
  3949  0026EE  C01B  F033         	movff	?___awtoft,___ftadd@f1
  3950  0026F2  C01C  F034         	movff	?___awtoft+1,___ftadd@f1+1
  3951  0026F6  C01D  F035         	movff	?___awtoft+2,___ftadd@f1+2
  3952  0026FA  ECA5  F011         	call	___ftadd	;wreg free
  3953  0026FE  C033  F060         	movff	?___ftadd,___ftneg@f1
  3954  002702  C034  F061         	movff	?___ftadd+1,___ftneg@f1+1
  3955  002706  C035  F062         	movff	?___ftadd+2,___ftneg@f1+2
  3956  00270A  EC91  F018         	call	___ftneg	;wreg free
  3957  00270E  C060  F086         	movff	?___ftneg,_wheelVelocity$2066
  3958  002712  C061  F087         	movff	?___ftneg+1,_wheelVelocity$2066+1
  3959  002716  C062  F088         	movff	?___ftneg+2,_wheelVelocity$2066+2
  3960                           
  3961                           ;main.c: 263: {
  3962                           ;main.c: 266: leftWheelCommandedPW = (int) (735 - (speedCompensation + speed * 1.25));
  3963  00271A  0EC0               	movlw	192
  3964  00271C  6E36               	movwf	___ftadd@f2,c
  3965  00271E  0E37               	movlw	55
  3966  002720  6E37               	movwf	___ftadd@f2+1,c
  3967  002722  0E44               	movlw	68
  3968  002724  6E38               	movwf	___ftadd@f2+2,c
  3969  002726  C086  F033         	movff	_wheelVelocity$2066,___ftadd@f1
  3970  00272A  C087  F034         	movff	_wheelVelocity$2066+1,___ftadd@f1+1
  3971  00272E  C088  F035         	movff	_wheelVelocity$2066+2,___ftadd@f1+2
  3972  002732  ECA5  F011         	call	___ftadd	;wreg free
  3973  002736  C033  F073         	movff	?___ftadd,___fttol@f1
  3974  00273A  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  3975  00273E  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  3976  002742  EC7B  F012         	call	___fttol	;wreg free
  3977  002746  C073  F047         	movff	?___fttol,_leftWheelCommandedPW
  3978  00274A  C074  F048         	movff	?___fttol+1,_leftWheelCommandedPW+1
  3979  00274E  0012               	return	
  3980  002750                     __end_of_wheelVelocity:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           tblptrh	equ	0xFF7
  3984                           tblptrl	equ	0xFF6
  3985                           tablat	equ	0xFF5
  3986                           prodh	equ	0xFF4
  3987                           prodl	equ	0xFF3
  3988                           postinc0	equ	0xFEE
  3989                           wreg	equ	0xFE8
  3990                           postdec1	equ	0xFE5
  3991                           fsr1l	equ	0xFE1
  3992                           postinc2	equ	0xFDE
  3993                           postdec2	equ	0xFDD
  3994                           fsr2h	equ	0xFDA
  3995                           fsr2l	equ	0xFD9
  3996                           status	equ	0xFD8
  3997                           
  3998 ;; *************** function ___awtoft *****************
  3999 ;; Defined at:
  4000 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  c               2   26[COMRAM] int 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  sign            1   29[COMRAM] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  3   26[COMRAM] float 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4014 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;Total ram usage:        4 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    2
  4021 ;; This function calls:
  4022 ;;		___ftpack
  4023 ;; This function is called by:
  4024 ;;		_wheelVelocity
  4025 ;;		_excerciseControl
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           	psect	text10
  4030  0030EA                     __ptext10:
  4031                           	opt stack 0
  4032  0030EA                     ___awtoft:
  4033                           	opt stack 26
  4034                           
  4035                           ;incstack = 0
  4036  0030EA  0E00               	movlw	0
  4037  0030EC  6E1E               	movwf	___awtoft@sign,c
  4038  0030EE  AE1C               	btfss	___awtoft@c+1,7,c
  4039  0030F0  D006               	goto	l2248
  4040  0030F2  6C1B               	negf	___awtoft@c,c
  4041  0030F4  1E1C               	comf	___awtoft@c+1,f,c
  4042  0030F6  B0D8               	btfsc	status,0,c
  4043  0030F8  2A1C               	incf	___awtoft@c+1,f,c
  4044  0030FA  0E01               	movlw	1
  4045  0030FC  6E1E               	movwf	___awtoft@sign,c
  4046  0030FE                     l2248:
  4047  0030FE  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  4048  003102  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  4049  003106  6A15               	clrf	___ftpack@arg+2,c
  4050  003108  0E8E               	movlw	142
  4051  00310A  6E16               	movwf	___ftpack@exp,c
  4052  00310C  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  4053  003110  EC7A  F015         	call	___ftpack	;wreg free
  4054  003114  C013  F01B         	movff	?___ftpack,?___awtoft
  4055  003118  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  4056  00311C  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  4057  003120  0012               	return	
  4058  003122                     __end_of___awtoft:
  4059                           	opt stack 0
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           postinc0	equ	0xFEE
  4067                           wreg	equ	0xFE8
  4068                           postdec1	equ	0xFE5
  4069                           fsr1l	equ	0xFE1
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function _sqrt *****************
  4077 ;; Defined at:
  4078 ;;		line 9 in file "/Applications/microchip/xc8/v1.36/sources/common/sprcsqrt.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  a               3    0[BANK0 ] float 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  x               3   16[BANK0 ] float 
  4083 ;;  q               3   13[BANK0 ] float 
  4084 ;;  z               3    9[BANK0 ] float 
  4085 ;;  og              3    6[BANK0 ] float 
  4086 ;;  i               1   12[BANK0 ] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  3    0[BANK0 ] unsigned char 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4096 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;Total ram usage:       19 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    4
  4103 ;; This function calls:
  4104 ;;		___ftge
  4105 ;;		___ftmul
  4106 ;;		___ftsub
  4107 ;; This function is called by:
  4108 ;;		_excerciseControl
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text11
  4113  00219C                     __ptext11:
  4114                           	opt stack 0
  4115  00219C                     _sqrt:
  4116                           	opt stack 25
  4117                           
  4118                           ;incstack = 0
  4119  00219C  0E00               	movlw	0
  4120  00219E  6E33               	movwf	___ftge@ff1,c
  4121  0021A0  0E00               	movlw	0
  4122  0021A2  6E34               	movwf	___ftge@ff1+1,c
  4123  0021A4  0E00               	movlw	0
  4124  0021A6  6E35               	movwf	___ftge@ff1+2,c
  4125  0021A8  C060  F036         	movff	sqrt@a,___ftge@ff2
  4126  0021AC  C061  F037         	movff	sqrt@a+1,___ftge@ff2+1
  4127  0021B0  C062  F038         	movff	sqrt@a+2,___ftge@ff2+2
  4128  0021B4  EC70  F016         	call	___ftge	;wreg free
  4129  0021B8  A0D8               	btfss	status,0,c
  4130  0021BA  D011               	goto	l876
  4131  0021BC  0100               	movlb	0	; () banked
  4132  0021BE  AF62               	btfss	(sqrt@a+2)& (0+255),7,b
  4133  0021C0  D004               	goto	l877
  4134                           
  4135                           ; BSR set to: 0
  4136  0021C2  0E00               	movlw	0
  4137  0021C4  6E4C               	movwf	_errno+1,c
  4138  0021C6  0E21               	movlw	33
  4139  0021C8  6E4B               	movwf	_errno,c
  4140  0021CA                     l877:
  4141                           
  4142                           ; BSR set to: 0
  4143  0021CA  0E00               	movlw	0
  4144  0021CC  0100               	movlb	0	; () banked
  4145  0021CE  6F60               	movwf	?_sqrt& (0+255),b
  4146  0021D0  0E00               	movlw	0
  4147  0021D2  0100               	movlb	0	; () banked
  4148  0021D4  6F61               	movwf	(?_sqrt+1)& (0+255),b
  4149  0021D6  0E00               	movlw	0
  4150  0021D8  0100               	movlb	0	; () banked
  4151  0021DA  6F62               	movwf	(?_sqrt+2)& (0+255),b
  4152                           
  4153                           ; BSR set to: 0
  4154  0021DC  0012               	return	
  4155  0021DE                     l876:
  4156  0021DE  C060  F069         	movff	sqrt@a,sqrt@z
  4157  0021E2  C061  F06A         	movff	sqrt@a+1,sqrt@z+1
  4158  0021E6  C062  F06B         	movff	sqrt@a+2,sqrt@z+2
  4159  0021EA  C060  F063         	movff	sqrt@a,??_sqrt
  4160  0021EE  C061  F064         	movff	sqrt@a+1,??_sqrt+1
  4161  0021F2  C062  F065         	movff	sqrt@a+2,??_sqrt+2
  4162  0021F6  0100               	movlb	0	; () banked
  4163  0021F8  1F63               	comf	??_sqrt& (0+255),f,b
  4164  0021FA  1F64               	comf	(??_sqrt+1)& (0+255),f,b
  4165  0021FC  1F65               	comf	(??_sqrt+2)& (0+255),f,b
  4166  0021FE  2B63               	incf	??_sqrt& (0+255),f,b
  4167  002200  0E00               	movlw	0
  4168  002202  2364               	addwfc	(??_sqrt+1)& (0+255),f,b
  4169  002204  2365               	addwfc	(??_sqrt+2)& (0+255),f,b
  4170  002206  0EC8               	movlw	200
  4171  002208  0100               	movlb	0	; () banked
  4172  00220A  2563               	addwf	??_sqrt& (0+255),w,b
  4173  00220C  0100               	movlb	0	; () banked
  4174  00220E  6F70               	movwf	sqrt@x& (0+255),b
  4175  002210  0E6E               	movlw	110
  4176  002212  0100               	movlb	0	; () banked
  4177  002214  2164               	addwfc	(??_sqrt+1)& (0+255),w,b
  4178  002216  0100               	movlb	0	; () banked
  4179  002218  6F71               	movwf	(sqrt@x+1)& (0+255),b
  4180  00221A  0EBE               	movlw	190
  4181  00221C  0100               	movlb	0	; () banked
  4182  00221E  2165               	addwfc	(??_sqrt+2)& (0+255),w,b
  4183  002220  0100               	movlb	0	; () banked
  4184  002222  6F72               	movwf	(sqrt@x+2)& (0+255),b
  4185                           
  4186                           ; BSR set to: 0
  4187  002224  0100               	movlb	0	; () banked
  4188  002226  90D8               	bcf	status,0,c
  4189  002228  3372               	rrcf	(sqrt@x+2)& (0+255),f,b
  4190  00222A  3371               	rrcf	(sqrt@x+1)& (0+255),f,b
  4191  00222C  3370               	rrcf	sqrt@x& (0+255),f,b
  4192                           
  4193                           ; BSR set to: 0
  4194  00222E  0E00               	movlw	0
  4195  002230  0100               	movlb	0	; () banked
  4196  002232  5F69               	subwf	sqrt@z& (0+255),f,b
  4197  002234  0E80               	movlw	128
  4198  002236  0100               	movlb	0	; () banked
  4199  002238  5B6A               	subwfb	(sqrt@z+1)& (0+255),f,b
  4200  00223A  0E00               	movlw	0
  4201  00223C  0100               	movlb	0	; () banked
  4202  00223E  5B6B               	subwfb	(sqrt@z+2)& (0+255),f,b
  4203                           
  4204                           ; BSR set to: 0
  4205  002240  0E04               	movlw	4
  4206  002242  0100               	movlb	0	; () banked
  4207  002244  6F6C               	movwf	sqrt@i& (0+255),b
  4208  002246                     l2998:
  4209                           
  4210                           ; BSR set to: 0
  4211  002246  C070  F066         	movff	sqrt@x,sqrt@og
  4212  00224A  C071  F067         	movff	sqrt@x+1,sqrt@og+1
  4213  00224E  C072  F068         	movff	sqrt@x+2,sqrt@og+2
  4214                           
  4215                           ; BSR set to: 0
  4216  002252  C070  F024         	movff	sqrt@x,___ftmul@f1
  4217  002256  C071  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4218  00225A  C072  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4219  00225E  C069  F027         	movff	sqrt@z,___ftmul@f2
  4220  002262  C06A  F028         	movff	sqrt@z+1,___ftmul@f2+1
  4221  002266  C06B  F029         	movff	sqrt@z+2,___ftmul@f2+2
  4222  00226A  EC2A  F014         	call	___ftmul	;wreg free
  4223  00226E  C024  F06D         	movff	?___ftmul,sqrt@q
  4224  002272  C025  F06E         	movff	?___ftmul+1,sqrt@q+1
  4225  002276  C026  F06F         	movff	?___ftmul+2,sqrt@q+2
  4226  00227A  C06D  F024         	movff	sqrt@q,___ftmul@f1
  4227  00227E  C06E  F025         	movff	sqrt@q+1,___ftmul@f1+1
  4228  002282  C06F  F026         	movff	sqrt@q+2,___ftmul@f1+2
  4229  002286  C070  F027         	movff	sqrt@x,___ftmul@f2
  4230  00228A  C071  F028         	movff	sqrt@x+1,___ftmul@f2+1
  4231  00228E  C072  F029         	movff	sqrt@x+2,___ftmul@f2+2
  4232  002292  EC2A  F014         	call	___ftmul	;wreg free
  4233  002296  C024  F06D         	movff	?___ftmul,sqrt@q
  4234  00229A  C025  F06E         	movff	?___ftmul+1,sqrt@q+1
  4235  00229E  C026  F06F         	movff	?___ftmul+2,sqrt@q+2
  4236  0022A2  C06D  F024         	movff	sqrt@q,___ftmul@f1
  4237  0022A6  C06E  F025         	movff	sqrt@q+1,___ftmul@f1+1
  4238  0022AA  C06F  F026         	movff	sqrt@q+2,___ftmul@f1+2
  4239  0022AE  C070  F027         	movff	sqrt@x,___ftmul@f2
  4240  0022B2  C071  F028         	movff	sqrt@x+1,___ftmul@f2+1
  4241  0022B6  C072  F029         	movff	sqrt@x+2,___ftmul@f2+2
  4242  0022BA  EC2A  F014         	call	___ftmul	;wreg free
  4243  0022BE  C024  F06D         	movff	?___ftmul,sqrt@q
  4244  0022C2  C025  F06E         	movff	?___ftmul+1,sqrt@q+1
  4245  0022C6  C026  F06F         	movff	?___ftmul+2,sqrt@q+2
  4246  0022CA  C070  F024         	movff	sqrt@x,___ftmul@f1
  4247  0022CE  C071  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4248  0022D2  C072  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4249  0022D6  0E00               	movlw	0
  4250  0022D8  6E27               	movwf	___ftmul@f2,c
  4251  0022DA  0EC0               	movlw	192
  4252  0022DC  6E28               	movwf	___ftmul@f2+1,c
  4253  0022DE  0E3F               	movlw	63
  4254  0022E0  6E29               	movwf	___ftmul@f2+2,c
  4255  0022E2  EC2A  F014         	call	___ftmul	;wreg free
  4256  0022E6  C024  F070         	movff	?___ftmul,sqrt@x
  4257  0022EA  C025  F071         	movff	?___ftmul+1,sqrt@x+1
  4258  0022EE  C026  F072         	movff	?___ftmul+2,sqrt@x+2
  4259  0022F2  C070  F03F         	movff	sqrt@x,___ftsub@f1
  4260  0022F6  C071  F040         	movff	sqrt@x+1,___ftsub@f1+1
  4261  0022FA  C072  F041         	movff	sqrt@x+2,___ftsub@f1+2
  4262  0022FE  C06D  F042         	movff	sqrt@q,___ftsub@f2
  4263  002302  C06E  F043         	movff	sqrt@q+1,___ftsub@f2+1
  4264  002306  C06F  F044         	movff	sqrt@q+2,___ftsub@f2+2
  4265  00230A  EC55  F018         	call	___ftsub	;wreg free
  4266  00230E  C03F  F070         	movff	?___ftsub,sqrt@x
  4267  002312  C040  F071         	movff	?___ftsub+1,sqrt@x+1
  4268  002316  C041  F072         	movff	?___ftsub+2,sqrt@x+2
  4269  00231A  0100               	movlb	0	; () banked
  4270  00231C  2F6C               	decfsz	sqrt@i& (0+255),f,b
  4271  00231E  D793               	goto	l2998
  4272                           
  4273                           ; BSR set to: 0
  4274                           
  4275                           ; BSR set to: 0
  4276  002320  C070  F024         	movff	sqrt@x,___ftmul@f1
  4277  002324  C071  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4278  002328  C072  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4279  00232C  C060  F027         	movff	sqrt@a,___ftmul@f2
  4280  002330  C061  F028         	movff	sqrt@a+1,___ftmul@f2+1
  4281  002334  C062  F029         	movff	sqrt@a+2,___ftmul@f2+2
  4282  002338  EC2A  F014         	call	___ftmul	;wreg free
  4283  00233C  C024  F060         	movff	?___ftmul,?_sqrt
  4284  002340  C025  F061         	movff	?___ftmul+1,?_sqrt+1
  4285  002344  C026  F062         	movff	?___ftmul+2,?_sqrt+2
  4286  002348  0012               	return	
  4287  00234A                     __end_of_sqrt:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           postdec1	equ	0xFE5
  4298                           fsr1l	equ	0xFE1
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function ___ftsub *****************
  4306 ;; Defined at:
  4307 ;;		line 20 in file "/Applications/microchip/xc8/v1.36/sources/common/ftsub.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  f1              3   62[COMRAM] float 
  4310 ;;  f2              3   65[COMRAM] float 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  3   62[COMRAM] float 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        6 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    3
  4329 ;; This function calls:
  4330 ;;		___ftadd
  4331 ;; This function is called by:
  4332 ;;		_excerciseControl
  4333 ;;		_sqrt
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text12
  4338  0030AA                     __ptext12:
  4339                           	opt stack 0
  4340  0030AA                     ___ftsub:
  4341                           	opt stack 25
  4342                           
  4343                           ;incstack = 0
  4344  0030AA  5042               	movf	___ftsub@f2,w,c
  4345  0030AC  1043               	iorwf	___ftsub@f2+1,w,c
  4346  0030AE  1044               	iorwf	___ftsub@f2+2,w,c
  4347  0030B0  B4D8               	btfsc	status,2,c
  4348  0030B2  D006               	goto	l2236
  4349  0030B4  0E00               	movlw	0
  4350  0030B6  1A42               	xorwf	___ftsub@f2,f,c
  4351  0030B8  0E00               	movlw	0
  4352  0030BA  1A43               	xorwf	___ftsub@f2+1,f,c
  4353  0030BC  0E80               	movlw	128
  4354  0030BE  1A44               	xorwf	___ftsub@f2+2,f,c
  4355  0030C0                     l2236:
  4356  0030C0  C03F  F033         	movff	___ftsub@f1,___ftadd@f1
  4357  0030C4  C040  F034         	movff	___ftsub@f1+1,___ftadd@f1+1
  4358  0030C8  C041  F035         	movff	___ftsub@f1+2,___ftadd@f1+2
  4359  0030CC  C042  F036         	movff	___ftsub@f2,___ftadd@f2
  4360  0030D0  C043  F037         	movff	___ftsub@f2+1,___ftadd@f2+1
  4361  0030D4  C044  F038         	movff	___ftsub@f2+2,___ftadd@f2+2
  4362  0030D8  ECA5  F011         	call	___ftadd	;wreg free
  4363  0030DC  C033  F03F         	movff	?___ftadd,?___ftsub
  4364  0030E0  C034  F040         	movff	?___ftadd+1,?___ftsub+1
  4365  0030E4  C035  F041         	movff	?___ftadd+2,?___ftsub+2
  4366  0030E8  0012               	return	
  4367  0030EA                     __end_of___ftsub:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           postinc0	equ	0xFEE
  4376                           wreg	equ	0xFE8
  4377                           postdec1	equ	0xFE5
  4378                           fsr1l	equ	0xFE1
  4379                           postinc2	equ	0xFDE
  4380                           postdec2	equ	0xFDD
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function ___ftmul *****************
  4386 ;; Defined at:
  4387 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  f1              3   35[COMRAM] float 
  4390 ;;  f2              3   38[COMRAM] float 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  4393 ;;  sign            1   49[COMRAM] unsigned char 
  4394 ;;  cntr            1   48[COMRAM] unsigned char 
  4395 ;;  exp             1   44[COMRAM] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  3   35[COMRAM] float 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4405 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;Total ram usage:       15 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    2
  4412 ;; This function calls:
  4413 ;;		___ftpack
  4414 ;; This function is called by:
  4415 ;;		_main
  4416 ;;		_wheelVelocity
  4417 ;;		_excerciseControl
  4418 ;;		_sqrt
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text13
  4423  002854                     __ptext13:
  4424                           	opt stack 0
  4425  002854                     ___ftmul:
  4426                           	opt stack 26
  4427                           
  4428                           ;incstack = 0
  4429  002854  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  4430  002858  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4431  00285A  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4432  00285C  3425               	rlcf	___ftmul@f1+1,w,c
  4433  00285E  362A               	rlcf	??___ftmul& (0+255),f,c
  4434  002860  E301               	bnc	u1771
  4435  002862  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4436  002864                     u1771:
  4437  002864  502A               	movf	??___ftmul,w,c
  4438  002866  6E2D               	movwf	___ftmul@exp,c
  4439  002868  502D               	movf	___ftmul@exp,w,c
  4440  00286A  A4D8               	btfss	status,2,c
  4441  00286C  D007               	goto	l2190
  4442  00286E  0E00               	movlw	0
  4443  002870  6E24               	movwf	?___ftmul,c
  4444  002872  0E00               	movlw	0
  4445  002874  6E25               	movwf	?___ftmul+1,c
  4446  002876  0E00               	movlw	0
  4447  002878  6E26               	movwf	?___ftmul+2,c
  4448  00287A  0012               	return	
  4449  00287C                     l2190:
  4450  00287C  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  4451  002880  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4452  002882  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4453  002884  3428               	rlcf	___ftmul@f2+1,w,c
  4454  002886  362A               	rlcf	??___ftmul& (0+255),f,c
  4455  002888  E301               	bnc	u1791
  4456  00288A  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4457  00288C                     u1791:
  4458  00288C  502A               	movf	??___ftmul,w,c
  4459  00288E  6E32               	movwf	___ftmul@sign,c
  4460  002890  5032               	movf	___ftmul@sign,w,c
  4461  002892  A4D8               	btfss	status,2,c
  4462  002894  D007               	goto	l2196
  4463  002896  0E00               	movlw	0
  4464  002898  6E24               	movwf	?___ftmul,c
  4465  00289A  0E00               	movlw	0
  4466  00289C  6E25               	movwf	?___ftmul+1,c
  4467  00289E  0E00               	movlw	0
  4468  0028A0  6E26               	movwf	?___ftmul+2,c
  4469  0028A2  0012               	return	
  4470  0028A4                     l2196:
  4471  0028A4  5032               	movf	___ftmul@sign,w,c
  4472  0028A6  0F7B               	addlw	123
  4473  0028A8  262D               	addwf	___ftmul@exp,f,c
  4474  0028AA  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  4475  0028AE  5029               	movf	___ftmul@f2+2,w,c
  4476  0028B0  1A32               	xorwf	___ftmul@sign,f,c
  4477  0028B2  0E80               	movlw	128
  4478  0028B4  1632               	andwf	___ftmul@sign,f,c
  4479  0028B6  8E25               	bsf	___ftmul@f1+1,7,c
  4480  0028B8  8E28               	bsf	___ftmul@f2+1,7,c
  4481  0028BA  0EFF               	movlw	255
  4482  0028BC  1627               	andwf	___ftmul@f2,f,c
  4483  0028BE  0EFF               	movlw	255
  4484  0028C0  1628               	andwf	___ftmul@f2+1,f,c
  4485  0028C2  0E00               	movlw	0
  4486  0028C4  1629               	andwf	___ftmul@f2+2,f,c
  4487  0028C6  0E00               	movlw	0
  4488  0028C8  6E2E               	movwf	___ftmul@f3_as_product,c
  4489  0028CA  0E00               	movlw	0
  4490  0028CC  6E2F               	movwf	___ftmul@f3_as_product+1,c
  4491  0028CE  0E00               	movlw	0
  4492  0028D0  6E30               	movwf	___ftmul@f3_as_product+2,c
  4493  0028D2  0E07               	movlw	7
  4494  0028D4  6E31               	movwf	___ftmul@cntr,c
  4495  0028D6                     l2210:
  4496  0028D6  A024               	btfss	___ftmul@f1,0,c
  4497  0028D8  D006               	goto	l2214
  4498  0028DA  5027               	movf	___ftmul@f2,w,c
  4499  0028DC  262E               	addwf	___ftmul@f3_as_product,f,c
  4500  0028DE  5028               	movf	___ftmul@f2+1,w,c
  4501  0028E0  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4502  0028E2  5029               	movf	___ftmul@f2+2,w,c
  4503  0028E4  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4504  0028E6                     l2214:
  4505  0028E6  90D8               	bcf	status,0,c
  4506  0028E8  3226               	rrcf	___ftmul@f1+2,f,c
  4507  0028EA  3225               	rrcf	___ftmul@f1+1,f,c
  4508  0028EC  3224               	rrcf	___ftmul@f1,f,c
  4509  0028EE  90D8               	bcf	status,0,c
  4510  0028F0  3627               	rlcf	___ftmul@f2,f,c
  4511  0028F2  3628               	rlcf	___ftmul@f2+1,f,c
  4512  0028F4  3629               	rlcf	___ftmul@f2+2,f,c
  4513  0028F6  2E31               	decfsz	___ftmul@cntr,f,c
  4514  0028F8  D7EE               	goto	l2210
  4515  0028FA  0E09               	movlw	9
  4516  0028FC  6E31               	movwf	___ftmul@cntr,c
  4517  0028FE                     l2220:
  4518  0028FE  A024               	btfss	___ftmul@f1,0,c
  4519  002900  D006               	goto	l2224
  4520  002902  5027               	movf	___ftmul@f2,w,c
  4521  002904  262E               	addwf	___ftmul@f3_as_product,f,c
  4522  002906  5028               	movf	___ftmul@f2+1,w,c
  4523  002908  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4524  00290A  5029               	movf	___ftmul@f2+2,w,c
  4525  00290C  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4526  00290E                     l2224:
  4527  00290E  90D8               	bcf	status,0,c
  4528  002910  3226               	rrcf	___ftmul@f1+2,f,c
  4529  002912  3225               	rrcf	___ftmul@f1+1,f,c
  4530  002914  3224               	rrcf	___ftmul@f1,f,c
  4531  002916  90D8               	bcf	status,0,c
  4532  002918  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  4533  00291A  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  4534  00291C  322E               	rrcf	___ftmul@f3_as_product,f,c
  4535  00291E  2E31               	decfsz	___ftmul@cntr,f,c
  4536  002920  D7EE               	goto	l2220
  4537  002922  C02E  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  4538  002926  C02F  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4539  00292A  C030  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4540  00292E  C02D  F016         	movff	___ftmul@exp,___ftpack@exp
  4541  002932  C032  F017         	movff	___ftmul@sign,___ftpack@sign
  4542  002936  EC7A  F015         	call	___ftpack	;wreg free
  4543  00293A  C013  F024         	movff	?___ftpack,?___ftmul
  4544  00293E  C014  F025         	movff	?___ftpack+1,?___ftmul+1
  4545  002942  C015  F026         	movff	?___ftpack+2,?___ftmul+2
  4546  002946  0012               	return	
  4547  002948                     __end_of___ftmul:
  4548                           	opt stack 0
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           prodh	equ	0xFF4
  4554                           prodl	equ	0xFF3
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           postdec1	equ	0xFE5
  4558                           fsr1l	equ	0xFE1
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function ___ftge *****************
  4566 ;; Defined at:
  4567 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  ff1             3   50[COMRAM] float 
  4570 ;;  ff2             3   53[COMRAM] float 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;		None
  4573 ;; Return value:  Size  Location     Type
  4574 ;;		None               void
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4582 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;Total ram usage:        9 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    1
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_excerciseControl
  4593 ;;		_sqrt
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text14
  4598  002CE0                     __ptext14:
  4599                           	opt stack 0
  4600  002CE0                     ___ftge:
  4601                           	opt stack 27
  4602                           
  4603                           ;incstack = 0
  4604  002CE0  AE35               	btfss	___ftge@ff1+2,7,c
  4605  002CE2  D016               	goto	l2256
  4606  002CE4  C033  F039         	movff	___ftge@ff1,??___ftge
  4607  002CE8  C034  F03A         	movff	___ftge@ff1+1,??___ftge+1
  4608  002CEC  C035  F03B         	movff	___ftge@ff1+2,??___ftge+2
  4609  002CF0  1E39               	comf	??___ftge,f,c
  4610  002CF2  1E3A               	comf	??___ftge+1,f,c
  4611  002CF4  1E3B               	comf	??___ftge+2,f,c
  4612  002CF6  2A39               	incf	??___ftge,f,c
  4613  002CF8  0E00               	movlw	0
  4614  002CFA  223A               	addwfc	??___ftge+1,f,c
  4615  002CFC  223B               	addwfc	??___ftge+2,f,c
  4616  002CFE  0E00               	movlw	0
  4617  002D00  2439               	addwf	??___ftge,w,c
  4618  002D02  6E33               	movwf	___ftge@ff1,c
  4619  002D04  0E00               	movlw	0
  4620  002D06  203A               	addwfc	??___ftge+1,w,c
  4621  002D08  6E34               	movwf	___ftge@ff1+1,c
  4622  002D0A  0E80               	movlw	128
  4623  002D0C  203B               	addwfc	??___ftge+2,w,c
  4624  002D0E  6E35               	movwf	___ftge@ff1+2,c
  4625  002D10                     l2256:
  4626  002D10  AE38               	btfss	___ftge@ff2+2,7,c
  4627  002D12  D016               	goto	l2260
  4628  002D14  C036  F039         	movff	___ftge@ff2,??___ftge
  4629  002D18  C037  F03A         	movff	___ftge@ff2+1,??___ftge+1
  4630  002D1C  C038  F03B         	movff	___ftge@ff2+2,??___ftge+2
  4631  002D20  1E39               	comf	??___ftge,f,c
  4632  002D22  1E3A               	comf	??___ftge+1,f,c
  4633  002D24  1E3B               	comf	??___ftge+2,f,c
  4634  002D26  2A39               	incf	??___ftge,f,c
  4635  002D28  0E00               	movlw	0
  4636  002D2A  223A               	addwfc	??___ftge+1,f,c
  4637  002D2C  223B               	addwfc	??___ftge+2,f,c
  4638  002D2E  0E00               	movlw	0
  4639  002D30  2439               	addwf	??___ftge,w,c
  4640  002D32  6E36               	movwf	___ftge@ff2,c
  4641  002D34  0E00               	movlw	0
  4642  002D36  203A               	addwfc	??___ftge+1,w,c
  4643  002D38  6E37               	movwf	___ftge@ff2+1,c
  4644  002D3A  0E80               	movlw	128
  4645  002D3C  203B               	addwfc	??___ftge+2,w,c
  4646  002D3E  6E38               	movwf	___ftge@ff2+2,c
  4647  002D40                     l2260:
  4648  002D40  0E00               	movlw	0
  4649  002D42  1A33               	xorwf	___ftge@ff1,f,c
  4650  002D44  0E00               	movlw	0
  4651  002D46  1A34               	xorwf	___ftge@ff1+1,f,c
  4652  002D48  0E80               	movlw	128
  4653  002D4A  1A35               	xorwf	___ftge@ff1+2,f,c
  4654  002D4C  0E00               	movlw	0
  4655  002D4E  1A36               	xorwf	___ftge@ff2,f,c
  4656  002D50  0E00               	movlw	0
  4657  002D52  1A37               	xorwf	___ftge@ff2+1,f,c
  4658  002D54  0E80               	movlw	128
  4659  002D56  1A38               	xorwf	___ftge@ff2+2,f,c
  4660  002D58  5036               	movf	___ftge@ff2,w,c
  4661  002D5A  5C33               	subwf	___ftge@ff1,w,c
  4662  002D5C  5037               	movf	___ftge@ff2+1,w,c
  4663  002D5E  5834               	subwfb	___ftge@ff1+1,w,c
  4664  002D60  5038               	movf	___ftge@ff2+2,w,c
  4665  002D62  5835               	subwfb	___ftge@ff1+2,w,c
  4666  002D64  B0D8               	btfsc	status,0,c
  4667  002D66  D002               	goto	l2266
  4668  002D68  90D8               	bcf	status,0,c
  4669  002D6A  0012               	return	
  4670  002D6C                     l2266:
  4671  002D6C  80D8               	bsf	status,0,c
  4672  002D6E  0012               	return	
  4673  002D70                     __end_of___ftge:
  4674                           	opt stack 0
  4675                           tblptru	equ	0xFF8
  4676                           tblptrh	equ	0xFF7
  4677                           tblptrl	equ	0xFF6
  4678                           tablat	equ	0xFF5
  4679                           prodh	equ	0xFF4
  4680                           prodl	equ	0xFF3
  4681                           postinc0	equ	0xFEE
  4682                           wreg	equ	0xFE8
  4683                           postdec1	equ	0xFE5
  4684                           fsr1l	equ	0xFE1
  4685                           postinc2	equ	0xFDE
  4686                           postdec2	equ	0xFDD
  4687                           fsr2h	equ	0xFDA
  4688                           fsr2l	equ	0xFD9
  4689                           status	equ	0xFD8
  4690                           
  4691 ;; *************** function _round *****************
  4692 ;; Defined at:
  4693 ;;		line 6 in file "/Applications/microchip/xc8/v1.36/sources/common/round.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  x               3   50[BANK0 ] float 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  f               3   53[BANK0 ] float 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  3   50[BANK0 ] float 
  4700 ;; Registers used:
  4701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4707 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4711 ;;Total ram usage:        6 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    4
  4714 ;; This function calls:
  4715 ;;		___ftadd
  4716 ;;		___ftneg
  4717 ;;		_trunc
  4718 ;; This function is called by:
  4719 ;;		_excerciseControl
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text15
  4724  002D70                     __ptext15:
  4725                           	opt stack 0
  4726  002D70                     _round:
  4727                           	opt stack 25
  4728                           
  4729                           ;incstack = 0
  4730  002D70  C092  F08A         	movff	round@x,trunc@x
  4731  002D74  C093  F08B         	movff	round@x+1,trunc@x+1
  4732  002D78  C094  F08C         	movff	round@x+2,trunc@x+2
  4733  002D7C  ECFF  F016         	call	_trunc	;wreg free
  4734  002D80  C08A  F060         	movff	?_trunc,___ftneg@f1
  4735  002D84  C08B  F061         	movff	?_trunc+1,___ftneg@f1+1
  4736  002D88  C08C  F062         	movff	?_trunc+2,___ftneg@f1+2
  4737  002D8C  EC91  F018         	call	___ftneg	;wreg free
  4738  002D90  C060  F033         	movff	?___ftneg,___ftadd@f1
  4739  002D94  C061  F034         	movff	?___ftneg+1,___ftadd@f1+1
  4740  002D98  C062  F035         	movff	?___ftneg+2,___ftadd@f1+2
  4741  002D9C  C092  F036         	movff	round@x,___ftadd@f2
  4742  002DA0  C093  F037         	movff	round@x+1,___ftadd@f2+1
  4743  002DA4  C094  F038         	movff	round@x+2,___ftadd@f2+2
  4744  002DA8  ECA5  F011         	call	___ftadd	;wreg free
  4745  002DAC  C033  F095         	movff	?___ftadd,round@f
  4746  002DB0  C034  F096         	movff	?___ftadd+1,round@f+1
  4747  002DB4  C035  F097         	movff	?___ftadd+2,round@f+2
  4748  002DB8  C092  F033         	movff	round@x,___ftadd@f1
  4749  002DBC  C093  F034         	movff	round@x+1,___ftadd@f1+1
  4750  002DC0  C094  F035         	movff	round@x+2,___ftadd@f1+2
  4751  002DC4  C095  F036         	movff	round@f,___ftadd@f2
  4752  002DC8  C096  F037         	movff	round@f+1,___ftadd@f2+1
  4753  002DCC  C097  F038         	movff	round@f+2,___ftadd@f2+2
  4754  002DD0  ECA5  F011         	call	___ftadd	;wreg free
  4755  002DD4  C033  F092         	movff	?___ftadd,round@x
  4756  002DD8  C034  F093         	movff	?___ftadd+1,round@x+1
  4757  002DDC  C035  F094         	movff	?___ftadd+2,round@x+2
  4758  002DE0  C092  F08A         	movff	round@x,trunc@x
  4759  002DE4  C093  F08B         	movff	round@x+1,trunc@x+1
  4760  002DE8  C094  F08C         	movff	round@x+2,trunc@x+2
  4761  002DEC  ECFF  F016         	call	_trunc	;wreg free
  4762  002DF0  C08A  F092         	movff	?_trunc,?_round
  4763  002DF4  C08B  F093         	movff	?_trunc+1,?_round+1
  4764  002DF8  C08C  F094         	movff	?_trunc+2,?_round+2
  4765  002DFC  0012               	return	
  4766  002DFE                     __end_of_round:
  4767                           	opt stack 0
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           postinc0	equ	0xFEE
  4775                           wreg	equ	0xFE8
  4776                           postdec1	equ	0xFE5
  4777                           fsr1l	equ	0xFE1
  4778                           postinc2	equ	0xFDE
  4779                           postdec2	equ	0xFDD
  4780                           fsr2h	equ	0xFDA
  4781                           fsr2l	equ	0xFD9
  4782                           status	equ	0xFD8
  4783                           
  4784 ;; *************** function _trunc *****************
  4785 ;; Defined at:
  4786 ;;		line 13 in file "/Applications/microchip/xc8/v1.36/sources/common/trunc.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  x               3   42[BANK0 ] float 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  i               3   45[BANK0 ] float 
  4791 ;;  expon           2   48[BANK0 ] int 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  3   42[BANK0 ] int 
  4794 ;; Registers used:
  4795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4801 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;Total ram usage:        8 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    3
  4808 ;; This function calls:
  4809 ;;		___altoft
  4810 ;;		___fttol
  4811 ;;		_frexp
  4812 ;; This function is called by:
  4813 ;;		_round
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           	psect	text16
  4818  002DFE                     __ptext16:
  4819                           	opt stack 0
  4820  002DFE                     _trunc:
  4821                           	opt stack 25
  4822                           
  4823                           ;incstack = 0
  4824  002DFE  C08A  F013         	movff	trunc@x,frexp@value
  4825  002E02  C08B  F014         	movff	trunc@x+1,frexp@value+1
  4826  002E06  C08C  F015         	movff	trunc@x+2,frexp@value+2
  4827  002E0A  0E90               	movlw	low trunc@expon
  4828  002E0C  6E16               	movwf	frexp@eptr,c
  4829  002E0E  0E00               	movlw	high trunc@expon
  4830  002E10  6E17               	movwf	frexp@eptr+1,c
  4831  002E12  EC46  F017         	call	_frexp	;wreg free
  4832  002E16  0100               	movlb	0	; () banked
  4833  002E18  AF91               	btfss	(trunc@expon+1)& (0+255),7,b
  4834  002E1A  D00A               	goto	l2282
  4835                           
  4836                           ; BSR set to: 0
  4837  002E1C  0E00               	movlw	0
  4838  002E1E  0100               	movlb	0	; () banked
  4839  002E20  6F8A               	movwf	?_trunc& (0+255),b
  4840  002E22  0E00               	movlw	0
  4841  002E24  0100               	movlb	0	; () banked
  4842  002E26  6F8B               	movwf	(?_trunc+1)& (0+255),b
  4843  002E28  0E00               	movlw	0
  4844  002E2A  0100               	movlb	0	; () banked
  4845  002E2C  6F8C               	movwf	(?_trunc+2)& (0+255),b
  4846                           
  4847                           ; BSR set to: 0
  4848  002E2E  0012               	return	
  4849  002E30                     l2282:
  4850                           
  4851                           ; BSR set to: 0
  4852  002E30  0100               	movlb	0	; () banked
  4853  002E32  5191               	movf	(trunc@expon+1)& (0+255),w,b
  4854  002E34  E105               	bnz	u1900
  4855  002E36  0E15               	movlw	21
  4856  002E38  0100               	movlb	0	; () banked
  4857  002E3A  5D90               	subwf	trunc@expon& (0+255),w,b
  4858  002E3C  A0D8               	btfss	status,0,c
  4859  002E3E  D007               	goto	l2286
  4860  002E40                     u1900:
  4861                           
  4862                           ; BSR set to: 0
  4863  002E40  C08A  F08A         	movff	trunc@x,?_trunc
  4864  002E44  C08B  F08B         	movff	trunc@x+1,?_trunc+1
  4865  002E48  C08C  F08C         	movff	trunc@x+2,?_trunc+2
  4866  002E4C  0012               	return	
  4867  002E4E                     l2286:
  4868                           
  4869                           ; BSR set to: 0
  4870  002E4E  C08A  F073         	movff	trunc@x,___fttol@f1
  4871  002E52  C08B  F074         	movff	trunc@x+1,___fttol@f1+1
  4872  002E56  C08C  F075         	movff	trunc@x+2,___fttol@f1+2
  4873  002E5A  EC7B  F012         	call	___fttol	;wreg free
  4874  002E5E  C073  F082         	movff	?___fttol,___altoft@c
  4875  002E62  C074  F083         	movff	?___fttol+1,___altoft@c+1
  4876  002E66  C075  F084         	movff	?___fttol+2,___altoft@c+2
  4877  002E6A  C076  F085         	movff	?___fttol+3,___altoft@c+3
  4878  002E6E  EC25  F016         	call	___altoft	;wreg free
  4879  002E72  C082  F08D         	movff	?___altoft,trunc@i
  4880  002E76  C083  F08E         	movff	?___altoft+1,trunc@i+1
  4881  002E7A  C084  F08F         	movff	?___altoft+2,trunc@i+2
  4882  002E7E  C08D  F08A         	movff	trunc@i,?_trunc
  4883  002E82  C08E  F08B         	movff	trunc@i+1,?_trunc+1
  4884  002E86  C08F  F08C         	movff	trunc@i+2,?_trunc+2
  4885  002E8A  0012               	return	
  4886  002E8C                     __end_of_trunc:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           fsr1l	equ	0xFE1
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           fsr2h	equ	0xFDA
  4901                           fsr2l	equ	0xFD9
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function _frexp *****************
  4905 ;; Defined at:
  4906 ;;		line 254 in file "/Applications/microchip/xc8/v1.36/sources/common/frexp.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  value           3   18[COMRAM] int 
  4909 ;;  eptr            2   21[COMRAM] PTR int 
  4910 ;;		 -> trunc@expon(2), 
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  3   18[COMRAM] PTR int 
  4915 ;; Registers used:
  4916 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4922 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;Total ram usage:        7 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    1
  4929 ;; This function calls:
  4930 ;;		Nothing
  4931 ;; This function is called by:
  4932 ;;		_trunc
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text17
  4937  002E8C                     __ptext17:
  4938                           	opt stack 0
  4939  002E8C                     _frexp:
  4940                           	opt stack 26
  4941                           
  4942                           ;incstack = 0
  4943  002E8C  5013               	movf	frexp@value,w,c
  4944  002E8E  1014               	iorwf	frexp@value+1,w,c
  4945  002E90  1015               	iorwf	frexp@value+2,w,c
  4946  002E92  A4D8               	btfss	status,2,c
  4947  002E94  D009               	goto	l2168
  4948  002E96  C016  FFD9         	movff	frexp@eptr,fsr2l
  4949  002E9A  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4950  002E9E  0E00               	movlw	0
  4951  002EA0  6EDE               	movwf	postinc2,c
  4952  002EA2  0E00               	movlw	0
  4953  002EA4  6EDD               	movwf	postdec2,c
  4954                           
  4955                           ;	Return value of _frexp is never used
  4956  002EA6  0012               	return	
  4957  002EA8                     l2168:
  4958  002EA8  5015               	movf	frexp@value+2,w,c
  4959  002EAA  0B7F               	andlw	127
  4960  002EAC  6E18               	movwf	??_frexp& (0+255),c
  4961  002EAE  6A19               	clrf	(??_frexp+1)& (0+255),c
  4962  002EB0  90D8               	bcf	status,0,c
  4963  002EB2  3618               	rlcf	??_frexp,f,c
  4964  002EB4  3619               	rlcf	??_frexp+1,f,c
  4965  002EB6  C016  FFD9         	movff	frexp@eptr,fsr2l
  4966  002EBA  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4967  002EBE  C018  FFDE         	movff	??_frexp,postinc2
  4968  002EC2  C019  FFDD         	movff	??_frexp+1,postdec2
  4969  002EC6  AE14               	btfss	frexp@value+1,7,c
  4970  002EC8  D003               	goto	u1760
  4971  002ECA  6A18               	clrf	??_frexp& (0+255),c
  4972  002ECC  2A18               	incf	??_frexp& (0+255),f,c
  4973  002ECE  D001               	goto	u1768
  4974  002ED0                     u1760:
  4975  002ED0  6A18               	clrf	??_frexp& (0+255),c
  4976  002ED2                     u1768:
  4977  002ED2  5018               	movf	??_frexp,w,c
  4978  002ED4  C016  FFD9         	movff	frexp@eptr,fsr2l
  4979  002ED8  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4980  002EDC  12DE               	iorwf	postinc2,f,c
  4981  002EDE  0E00               	movlw	0
  4982  002EE0  12DD               	iorwf	postdec2,f,c
  4983  002EE2  C016  FFD9         	movff	frexp@eptr,fsr2l
  4984  002EE6  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4985  002EEA  0E82               	movlw	130
  4986  002EEC  26DE               	addwf	postinc2,f,c
  4987  002EEE  0EFF               	movlw	255
  4988  002EF0  22DD               	addwfc	postdec2,f,c
  4989  002EF2  8015               	bsf	frexp@value+2,0,c
  4990  002EF4  8215               	bsf	frexp@value+2,1,c
  4991  002EF6  8415               	bsf	frexp@value+2,2,c
  4992  002EF8  8615               	bsf	frexp@value+2,3,c
  4993  002EFA  8815               	bsf	frexp@value+2,4,c
  4994  002EFC  8A15               	bsf	frexp@value+2,5,c
  4995  002EFE  9C15               	bcf	frexp@value+2,6,c
  4996  002F00  9E14               	bcf	frexp@value+1,7,c
  4997  002F02  0012               	return	
  4998  002F04                     __end_of_frexp:
  4999                           	opt stack 0
  5000                           tblptru	equ	0xFF8
  5001                           tblptrh	equ	0xFF7
  5002                           tblptrl	equ	0xFF6
  5003                           tablat	equ	0xFF5
  5004                           prodh	equ	0xFF4
  5005                           prodl	equ	0xFF3
  5006                           postinc0	equ	0xFEE
  5007                           wreg	equ	0xFE8
  5008                           postdec1	equ	0xFE5
  5009                           fsr1l	equ	0xFE1
  5010                           postinc2	equ	0xFDE
  5011                           postdec2	equ	0xFDD
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function ___fttol *****************
  5017 ;; Defined at:
  5018 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  f1              3   19[BANK0 ] float 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  lval            4   29[BANK0 ] unsigned long 
  5023 ;;  exp1            1   33[BANK0 ] unsigned char 
  5024 ;;  sign1           1   28[BANK0 ] unsigned char 
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  4   19[BANK0 ] long 
  5027 ;; Registers used:
  5028 ;;		wreg, status,2, status,0
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5034 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;Total ram usage:       15 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; Hardware stack levels required when called:    1
  5041 ;; This function calls:
  5042 ;;		Nothing
  5043 ;; This function is called by:
  5044 ;;		_main
  5045 ;;		_wheelVelocity
  5046 ;;		_excerciseControl
  5047 ;;		_trunc
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           	psect	text18
  5052  0024F6                     __ptext18:
  5053                           	opt stack 0
  5054  0024F6                     ___fttol:
  5055                           	opt stack 27
  5056                           
  5057                           ;incstack = 0
  5058  0024F6  C075  F077         	movff	___fttol@f1+2,??___fttol
  5059  0024FA  0100               	movlb	0	; () banked
  5060  0024FC  6B78               	clrf	(??___fttol+1)& (0+255),b
  5061  0024FE  6B79               	clrf	(??___fttol+2)& (0+255),b
  5062  002500  0100               	movlb	0	; () banked
  5063  002502  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5064  002504  0100               	movlb	0	; () banked
  5065  002506  3777               	rlcf	??___fttol& (0+255),f,b
  5066  002508  E301               	bnc	u1671
  5067  00250A  8178               	bsf	(??___fttol+1)& (0+255),0,b
  5068  00250C                     u1671:
  5069  00250C  0100               	movlb	0	; () banked
  5070  00250E  5177               	movf	??___fttol& (0+255),w,b
  5071  002510  0100               	movlb	0	; () banked
  5072  002512  6F81               	movwf	___fttol@exp1& (0+255),b
  5073  002514  0100               	movlb	0	; () banked
  5074  002516  5181               	movf	___fttol@exp1& (0+255),w,b
  5075  002518  A4D8               	btfss	status,2,c
  5076  00251A  D00A               	goto	l2122
  5077                           
  5078                           ; BSR set to: 0
  5079  00251C  0E00               	movlw	0
  5080  00251E  0100               	movlb	0	; () banked
  5081  002520  6F73               	movwf	?___fttol& (0+255),b
  5082  002522  0E00               	movlw	0
  5083  002524  6F74               	movwf	(?___fttol+1)& (0+255),b
  5084  002526  0E00               	movlw	0
  5085  002528  6F75               	movwf	(?___fttol+2)& (0+255),b
  5086  00252A  0E00               	movlw	0
  5087  00252C  6F76               	movwf	(?___fttol+3)& (0+255),b
  5088                           
  5089                           ; BSR set to: 0
  5090  00252E  0012               	return	
  5091  002530                     l2122:
  5092                           
  5093                           ; BSR set to: 0
  5094  002530  0E17               	movlw	23
  5095  002532  0100               	movlb	0	; () banked
  5096  002534  6F77               	movwf	??___fttol& (0+255),b
  5097  002536  C073  F078         	movff	___fttol@f1,??___fttol+1
  5098  00253A  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  5099  00253E  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  5100  002542  0100               	movlb	0	; () banked
  5101  002544  2977               	incf	??___fttol& (0+255),w,b
  5102  002546  0100               	movlb	0	; () banked
  5103  002548  6F7B               	movwf	(??___fttol+4)& (0+255),b
  5104  00254A  D005               	goto	u1690
  5105  00254C                     u1695:
  5106  00254C  0100               	movlb	0	; () banked
  5107  00254E  90D8               	bcf	status,0,c
  5108  002550  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  5109  002552  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  5110  002554  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  5111  002556                     u1690:
  5112  002556  0100               	movlb	0	; () banked
  5113  002558  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  5114  00255A  D7F8               	goto	u1695
  5115  00255C  0100               	movlb	0	; () banked
  5116  00255E  5178               	movf	(??___fttol+1)& (0+255),w,b
  5117  002560  0100               	movlb	0	; () banked
  5118  002562  6F7C               	movwf	___fttol@sign1& (0+255),b
  5119                           
  5120                           ; BSR set to: 0
  5121  002564  0100               	movlb	0	; () banked
  5122  002566  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  5123                           
  5124                           ; BSR set to: 0
  5125  002568  0EFF               	movlw	255
  5126  00256A  0100               	movlb	0	; () banked
  5127  00256C  1773               	andwf	___fttol@f1& (0+255),f,b
  5128  00256E  0EFF               	movlw	255
  5129  002570  0100               	movlb	0	; () banked
  5130  002572  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  5131  002574  0E00               	movlw	0
  5132  002576  0100               	movlb	0	; () banked
  5133  002578  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  5134                           
  5135                           ; BSR set to: 0
  5136  00257A  0100               	movlb	0	; () banked
  5137  00257C  5173               	movf	___fttol@f1& (0+255),w,b
  5138  00257E  0100               	movlb	0	; () banked
  5139  002580  6F7D               	movwf	___fttol@lval& (0+255),b
  5140  002582  0100               	movlb	0	; () banked
  5141  002584  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  5142  002586  0100               	movlb	0	; () banked
  5143  002588  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  5144  00258A  0100               	movlb	0	; () banked
  5145  00258C  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  5146  00258E  0100               	movlb	0	; () banked
  5147  002590  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  5148  002592  0100               	movlb	0	; () banked
  5149  002594  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  5150                           
  5151                           ; BSR set to: 0
  5152  002596  0E8E               	movlw	142
  5153  002598  0100               	movlb	0	; () banked
  5154  00259A  5F81               	subwf	___fttol@exp1& (0+255),f,b
  5155                           
  5156                           ; BSR set to: 0
  5157  00259C  0100               	movlb	0	; () banked
  5158  00259E  AF81               	btfss	___fttol@exp1& (0+255),7,b
  5159  0025A0  D01A               	goto	l2144
  5160                           
  5161                           ; BSR set to: 0
  5162  0025A2  0100               	movlb	0	; () banked
  5163  0025A4  5181               	movf	___fttol@exp1& (0+255),w,b
  5164  0025A6  0A80               	xorlw	128
  5165  0025A8  0F8F               	addlw	143
  5166  0025AA  B0D8               	btfsc	status,0,c
  5167  0025AC  D00A               	goto	l2140
  5168                           
  5169                           ; BSR set to: 0
  5170  0025AE  0E00               	movlw	0
  5171  0025B0  0100               	movlb	0	; () banked
  5172  0025B2  6F73               	movwf	?___fttol& (0+255),b
  5173  0025B4  0E00               	movlw	0
  5174  0025B6  6F74               	movwf	(?___fttol+1)& (0+255),b
  5175  0025B8  0E00               	movlw	0
  5176  0025BA  6F75               	movwf	(?___fttol+2)& (0+255),b
  5177  0025BC  0E00               	movlw	0
  5178  0025BE  6F76               	movwf	(?___fttol+3)& (0+255),b
  5179                           
  5180                           ; BSR set to: 0
  5181  0025C0  0012               	return	
  5182  0025C2                     l2140:
  5183                           
  5184                           ; BSR set to: 0
  5185  0025C2  0100               	movlb	0	; () banked
  5186  0025C4  90D8               	bcf	status,0,c
  5187  0025C6  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5188  0025C8  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5189  0025CA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5190  0025CC  337D               	rrcf	___fttol@lval& (0+255),f,b
  5191                           
  5192                           ; BSR set to: 0
  5193  0025CE  0100               	movlb	0	; () banked
  5194  0025D0  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  5195  0025D2  D7F7               	goto	l2140
  5196                           
  5197                           ; BSR set to: 0
  5198  0025D4  D01B               	goto	l2154
  5199  0025D6                     l2144:
  5200                           
  5201                           ; BSR set to: 0
  5202  0025D6  0E17               	movlw	23
  5203  0025D8  0100               	movlb	0	; () banked
  5204  0025DA  6581               	cpfsgt	___fttol@exp1& (0+255),b
  5205  0025DC  D012               	goto	l2152
  5206                           
  5207                           ; BSR set to: 0
  5208  0025DE  0E00               	movlw	0
  5209  0025E0  0100               	movlb	0	; () banked
  5210  0025E2  6F73               	movwf	?___fttol& (0+255),b
  5211  0025E4  0E00               	movlw	0
  5212  0025E6  6F74               	movwf	(?___fttol+1)& (0+255),b
  5213  0025E8  0E00               	movlw	0
  5214  0025EA  6F75               	movwf	(?___fttol+2)& (0+255),b
  5215  0025EC  0E00               	movlw	0
  5216  0025EE  6F76               	movwf	(?___fttol+3)& (0+255),b
  5217                           
  5218                           ; BSR set to: 0
  5219  0025F0  0012               	return	
  5220  0025F2                     l2150:
  5221                           
  5222                           ; BSR set to: 0
  5223  0025F2  0100               	movlb	0	; () banked
  5224  0025F4  90D8               	bcf	status,0,c
  5225  0025F6  377D               	rlcf	___fttol@lval& (0+255),f,b
  5226  0025F8  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5227  0025FA  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5228  0025FC  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5229  0025FE  0100               	movlb	0	; () banked
  5230  002600  0781               	decf	___fttol@exp1& (0+255),f,b
  5231  002602                     l2152:
  5232                           
  5233                           ; BSR set to: 0
  5234  002602  0100               	movlb	0	; () banked
  5235  002604  5181               	movf	___fttol@exp1& (0+255),w,b
  5236  002606  0100               	movlb	0	; () banked
  5237  002608  A4D8               	btfss	status,2,c
  5238  00260A  D7F3               	goto	l2150
  5239  00260C                     l2154:
  5240                           
  5241                           ; BSR set to: 0
  5242  00260C  0100               	movlb	0	; () banked
  5243  00260E  517C               	movf	___fttol@sign1& (0+255),w,b
  5244  002610  0100               	movlb	0	; () banked
  5245  002612  B4D8               	btfsc	status,2,c
  5246  002614  D009               	goto	l2158
  5247                           
  5248                           ; BSR set to: 0
  5249  002616  0100               	movlb	0	; () banked
  5250  002618  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  5251  00261A  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  5252  00261C  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  5253  00261E  6D7D               	negf	___fttol@lval& (0+255),b
  5254  002620  0E00               	movlw	0
  5255  002622  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5256  002624  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5257  002626  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5258  002628                     l2158:
  5259                           
  5260                           ; BSR set to: 0
  5261  002628  C07D  F073         	movff	___fttol@lval,?___fttol
  5262  00262C  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  5263  002630  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  5264  002634  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  5265  002638  0012               	return	
  5266  00263A                     __end_of___fttol:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           fsr1l	equ	0xFE1
  5278                           postinc2	equ	0xFDE
  5279                           postdec2	equ	0xFDD
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function ___altoft *****************
  5285 ;; Defined at:
  5286 ;;		line 42 in file "/Applications/microchip/xc8/v1.36/sources/common/altoft.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  c               4   34[BANK0 ] long 
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;  sign            1   69[COMRAM] unsigned char 
  5291 ;;  exp             1   68[COMRAM] unsigned char 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  3   34[BANK0 ] float 
  5294 ;; Registers used:
  5295 ;;		wreg, status,2, status,0, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;Total ram usage:       10 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    2
  5308 ;; This function calls:
  5309 ;;		___ftpack
  5310 ;; This function is called by:
  5311 ;;		_trunc
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text19
  5316  002C4A                     __ptext19:
  5317                           	opt stack 0
  5318  002C4A                     ___altoft:
  5319                           	opt stack 25
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;incstack = 0
  5323  002C4A  0E00               	movlw	0
  5324  002C4C  6E46               	movwf	___altoft@sign,c
  5325  002C4E  0E8E               	movlw	142
  5326  002C50  6E45               	movwf	___altoft@exp,c
  5327  002C52  0100               	movlb	0	; () banked
  5328  002C54  AF85               	btfss	(___altoft@c+3)& (0+255),7,b
  5329  002C56  D013               	goto	l2040
  5330                           
  5331                           ; BSR set to: 0
  5332  002C58  0100               	movlb	0	; () banked
  5333  002C5A  1F85               	comf	(___altoft@c+3)& (0+255),f,b
  5334  002C5C  1F84               	comf	(___altoft@c+2)& (0+255),f,b
  5335  002C5E  1F83               	comf	(___altoft@c+1)& (0+255),f,b
  5336  002C60  6D82               	negf	___altoft@c& (0+255),b
  5337  002C62  0E00               	movlw	0
  5338  002C64  2383               	addwfc	(___altoft@c+1)& (0+255),f,b
  5339  002C66  2384               	addwfc	(___altoft@c+2)& (0+255),f,b
  5340  002C68  2385               	addwfc	(___altoft@c+3)& (0+255),f,b
  5341                           
  5342                           ; BSR set to: 0
  5343  002C6A  0E01               	movlw	1
  5344  002C6C  6E46               	movwf	___altoft@sign,c
  5345                           
  5346                           ; BSR set to: 0
  5347  002C6E  D007               	goto	l2040
  5348  002C70                     l2038:
  5349                           
  5350                           ; BSR set to: 0
  5351  002C70  0100               	movlb	0	; () banked
  5352  002C72  90D8               	bcf	status,0,c
  5353  002C74  3385               	rrcf	(___altoft@c+3)& (0+255),f,b
  5354  002C76  3384               	rrcf	(___altoft@c+2)& (0+255),f,b
  5355  002C78  3383               	rrcf	(___altoft@c+1)& (0+255),f,b
  5356  002C7A  3382               	rrcf	___altoft@c& (0+255),f,b
  5357  002C7C  2A45               	incf	___altoft@exp,f,c
  5358  002C7E                     l2040:
  5359                           
  5360                           ; BSR set to: 0
  5361  002C7E  0E00               	movlw	0
  5362  002C80  0100               	movlb	0	; () banked
  5363  002C82  1582               	andwf	___altoft@c& (0+255),w,b
  5364  002C84  0100               	movlb	0	; () banked
  5365  002C86  6F86               	movwf	??___altoft& (0+255),b
  5366  002C88  0E00               	movlw	0
  5367  002C8A  0100               	movlb	0	; () banked
  5368  002C8C  1583               	andwf	(___altoft@c+1)& (0+255),w,b
  5369  002C8E  0100               	movlb	0	; () banked
  5370  002C90  6F87               	movwf	(??___altoft+1)& (0+255),b
  5371  002C92  0E00               	movlw	0
  5372  002C94  0100               	movlb	0	; () banked
  5373  002C96  1584               	andwf	(___altoft@c+2)& (0+255),w,b
  5374  002C98  0100               	movlb	0	; () banked
  5375  002C9A  6F88               	movwf	(??___altoft+2)& (0+255),b
  5376  002C9C  0EFF               	movlw	255
  5377  002C9E  0100               	movlb	0	; () banked
  5378  002CA0  1585               	andwf	(___altoft@c+3)& (0+255),w,b
  5379  002CA2  0100               	movlb	0	; () banked
  5380  002CA4  6F89               	movwf	(??___altoft+3)& (0+255),b
  5381  002CA6  0100               	movlb	0	; () banked
  5382  002CA8  5186               	movf	??___altoft& (0+255),w,b
  5383  002CAA  0100               	movlb	0	; () banked
  5384  002CAC  1187               	iorwf	(??___altoft+1)& (0+255),w,b
  5385  002CAE  0100               	movlb	0	; () banked
  5386  002CB0  1188               	iorwf	(??___altoft+2)& (0+255),w,b
  5387  002CB2  0100               	movlb	0	; () banked
  5388  002CB4  1189               	iorwf	(??___altoft+3)& (0+255),w,b
  5389  002CB6  A4D8               	btfss	status,2,c
  5390  002CB8  D7DB               	goto	l2038
  5391                           
  5392                           ; BSR set to: 0
  5393                           
  5394                           ; BSR set to: 0
  5395  002CBA  C082  F013         	movff	___altoft@c,___ftpack@arg
  5396  002CBE  C083  F014         	movff	___altoft@c+1,___ftpack@arg+1
  5397  002CC2  C084  F015         	movff	___altoft@c+2,___ftpack@arg+2
  5398  002CC6  C045  F016         	movff	___altoft@exp,___ftpack@exp
  5399  002CCA  C046  F017         	movff	___altoft@sign,___ftpack@sign
  5400  002CCE  EC7A  F015         	call	___ftpack	;wreg free
  5401  002CD2  C013  F082         	movff	?___ftpack,?___altoft
  5402  002CD6  C014  F083         	movff	?___ftpack+1,?___altoft+1
  5403  002CDA  C015  F084         	movff	?___ftpack+2,?___altoft+2
  5404  002CDE  0012               	return	
  5405  002CE0                     __end_of___altoft:
  5406                           	opt stack 0
  5407                           tblptru	equ	0xFF8
  5408                           tblptrh	equ	0xFF7
  5409                           tblptrl	equ	0xFF6
  5410                           tablat	equ	0xFF5
  5411                           prodh	equ	0xFF4
  5412                           prodl	equ	0xFF3
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1l	equ	0xFE1
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function ___ftneg *****************
  5424 ;; Defined at:
  5425 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/ftneg.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  f1              3    0[BANK0 ] float 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  3    0[BANK0 ] float 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2, status,0
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5439 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;Total ram usage:        3 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    1
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_wheelVelocity
  5450 ;;		_round
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           	psect	text20
  5455  003122                     __ptext20:
  5456                           	opt stack 0
  5457  003122                     ___ftneg:
  5458                           	opt stack 27
  5459                           
  5460                           ;incstack = 0
  5461  003122  0100               	movlb	0	; () banked
  5462  003124  5160               	movf	___ftneg@f1& (0+255),w,b
  5463  003126  0100               	movlb	0	; () banked
  5464  003128  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  5465  00312A  0100               	movlb	0	; () banked
  5466  00312C  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  5467  00312E  B4D8               	btfsc	status,2,c
  5468  003130  D009               	goto	l621
  5469                           
  5470                           ; BSR set to: 0
  5471  003132  0E00               	movlw	0
  5472  003134  0100               	movlb	0	; () banked
  5473  003136  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  5474  003138  0E00               	movlw	0
  5475  00313A  0100               	movlb	0	; () banked
  5476  00313C  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  5477  00313E  0E80               	movlw	128
  5478  003140  0100               	movlb	0	; () banked
  5479  003142  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  5480  003144                     l621:
  5481                           
  5482                           ; BSR set to: 0
  5483  003144  C060  F060         	movff	___ftneg@f1,?___ftneg
  5484  003148  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  5485  00314C  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  5486                           
  5487                           ; BSR set to: 0
  5488  003150  0012               	return		;funcret
  5489  003152                     __end_of___ftneg:
  5490                           	opt stack 0
  5491                           tblptru	equ	0xFF8
  5492                           tblptrh	equ	0xFF7
  5493                           tblptrl	equ	0xFF6
  5494                           tablat	equ	0xFF5
  5495                           prodh	equ	0xFF4
  5496                           prodl	equ	0xFF3
  5497                           postinc0	equ	0xFEE
  5498                           wreg	equ	0xFE8
  5499                           postdec1	equ	0xFE5
  5500                           fsr1l	equ	0xFE1
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function ___ftadd *****************
  5508 ;; Defined at:
  5509 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  f1              3   50[COMRAM] float 
  5512 ;;  f2              3   53[COMRAM] float 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  exp1            1   61[COMRAM] unsigned char 
  5515 ;;  exp2            1   60[COMRAM] unsigned char 
  5516 ;;  sign            1   59[COMRAM] unsigned char 
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  3   50[COMRAM] float 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5526 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;Total ram usage:       12 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    2
  5533 ;; This function calls:
  5534 ;;		___ftpack
  5535 ;; This function is called by:
  5536 ;;		_wheelVelocity
  5537 ;;		_excerciseControl
  5538 ;;		___ftsub
  5539 ;;		_round
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           	psect	text21
  5544  00234A                     __ptext21:
  5545                           	opt stack 0
  5546  00234A                     ___ftadd:
  5547                           	opt stack 26
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;incstack = 0
  5551  00234A  C035  F039         	movff	___ftadd@f1+2,??___ftadd
  5552  00234E  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5553  002350  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5554  002352  3434               	rlcf	___ftadd@f1+1,w,c
  5555  002354  3639               	rlcf	??___ftadd& (0+255),f,c
  5556  002356  E301               	bnc	u1461
  5557  002358  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5558  00235A                     u1461:
  5559  00235A  5039               	movf	??___ftadd,w,c
  5560  00235C  6E3E               	movwf	___ftadd@exp1,c
  5561  00235E  C038  F039         	movff	___ftadd@f2+2,??___ftadd
  5562  002362  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5563  002364  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5564  002366  3437               	rlcf	___ftadd@f2+1,w,c
  5565  002368  3639               	rlcf	??___ftadd& (0+255),f,c
  5566  00236A  E301               	bnc	u1471
  5567  00236C  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5568  00236E                     u1471:
  5569  00236E  5039               	movf	??___ftadd,w,c
  5570  002370  6E3D               	movwf	___ftadd@exp2,c
  5571  002372  503E               	movf	___ftadd@exp1,w,c
  5572  002374  B4D8               	btfsc	status,2,c
  5573  002376  D00B               	goto	l564
  5574  002378  503D               	movf	___ftadd@exp2,w,c
  5575  00237A  5C3E               	subwf	___ftadd@exp1,w,c
  5576  00237C  B0D8               	btfsc	status,0,c
  5577  00237E  D00E               	goto	l2054
  5578  002380  503E               	movf	___ftadd@exp1,w,c
  5579  002382  0800               	sublw	0
  5580  002384  243D               	addwf	___ftadd@exp2,w,c
  5581  002386  6E39               	movwf	??___ftadd& (0+255),c
  5582  002388  0E18               	movlw	24
  5583  00238A  6439               	cpfsgt	??___ftadd,c
  5584  00238C  D007               	goto	l2054
  5585  00238E                     l564:
  5586  00238E  C036  F033         	movff	___ftadd@f2,?___ftadd
  5587  002392  C037  F034         	movff	___ftadd@f2+1,?___ftadd+1
  5588  002396  C038  F035         	movff	___ftadd@f2+2,?___ftadd+2
  5589  00239A  0012               	return	
  5590  00239C                     l2054:
  5591  00239C  503D               	movf	___ftadd@exp2,w,c
  5592  00239E  B4D8               	btfsc	status,2,c
  5593  0023A0  D00B               	goto	l568
  5594  0023A2  503E               	movf	___ftadd@exp1,w,c
  5595  0023A4  5C3D               	subwf	___ftadd@exp2,w,c
  5596  0023A6  B0D8               	btfsc	status,0,c
  5597  0023A8  D00E               	goto	l2060
  5598  0023AA  503D               	movf	___ftadd@exp2,w,c
  5599  0023AC  0800               	sublw	0
  5600  0023AE  243E               	addwf	___ftadd@exp1,w,c
  5601  0023B0  6E39               	movwf	??___ftadd& (0+255),c
  5602  0023B2  0E18               	movlw	24
  5603  0023B4  6439               	cpfsgt	??___ftadd,c
  5604  0023B6  D007               	goto	l2060
  5605  0023B8                     l568:
  5606  0023B8  C033  F033         	movff	___ftadd@f1,?___ftadd
  5607  0023BC  C034  F034         	movff	___ftadd@f1+1,?___ftadd+1
  5608  0023C0  C035  F035         	movff	___ftadd@f1+2,?___ftadd+2
  5609  0023C4  0012               	return	
  5610  0023C6                     l2060:
  5611  0023C6  0E06               	movlw	6
  5612  0023C8  6E3C               	movwf	___ftadd@sign,c
  5613  0023CA  BE35               	btfsc	___ftadd@f1+2,7,c
  5614  0023CC  8E3C               	bsf	___ftadd@sign,7,c
  5615  0023CE  BE38               	btfsc	___ftadd@f2+2,7,c
  5616  0023D0  8C3C               	bsf	___ftadd@sign,6,c
  5617  0023D2  8E34               	bsf	___ftadd@f1+1,7,c
  5618  0023D4  0EFF               	movlw	255
  5619  0023D6  1633               	andwf	___ftadd@f1,f,c
  5620  0023D8  0EFF               	movlw	255
  5621  0023DA  1634               	andwf	___ftadd@f1+1,f,c
  5622  0023DC  0E00               	movlw	0
  5623  0023DE  1635               	andwf	___ftadd@f1+2,f,c
  5624  0023E0  8E37               	bsf	___ftadd@f2+1,7,c
  5625  0023E2  0EFF               	movlw	255
  5626  0023E4  1636               	andwf	___ftadd@f2,f,c
  5627  0023E6  0EFF               	movlw	255
  5628  0023E8  1637               	andwf	___ftadd@f2+1,f,c
  5629  0023EA  0E00               	movlw	0
  5630  0023EC  1638               	andwf	___ftadd@f2+2,f,c
  5631  0023EE  503D               	movf	___ftadd@exp2,w,c
  5632  0023F0  5C3E               	subwf	___ftadd@exp1,w,c
  5633  0023F2  B0D8               	btfsc	status,0,c
  5634  0023F4  D01B               	goto	l2086
  5635  0023F6                     l2076:
  5636  0023F6  90D8               	bcf	status,0,c
  5637  0023F8  3636               	rlcf	___ftadd@f2,f,c
  5638  0023FA  3637               	rlcf	___ftadd@f2+1,f,c
  5639  0023FC  3638               	rlcf	___ftadd@f2+2,f,c
  5640  0023FE  063D               	decf	___ftadd@exp2,f,c
  5641  002400  503E               	movf	___ftadd@exp1,w,c
  5642  002402  183D               	xorwf	___ftadd@exp2,w,c
  5643  002404  B4D8               	btfsc	status,2,c
  5644  002406  D00D               	goto	l2084
  5645  002408  063C               	decf	___ftadd@sign,f,c
  5646  00240A  C03C  F039         	movff	___ftadd@sign,??___ftadd
  5647  00240E  0E07               	movlw	7
  5648  002410  1639               	andwf	??___ftadd,f,c
  5649  002412  B4D8               	btfsc	status,2,c
  5650  002414  D006               	goto	l2084
  5651  002416  D7EF               	goto	l2076
  5652  002418                     l2082:
  5653  002418  90D8               	bcf	status,0,c
  5654  00241A  3235               	rrcf	___ftadd@f1+2,f,c
  5655  00241C  3234               	rrcf	___ftadd@f1+1,f,c
  5656  00241E  3233               	rrcf	___ftadd@f1,f,c
  5657  002420  2A3E               	incf	___ftadd@exp1,f,c
  5658  002422                     l2084:
  5659  002422  503D               	movf	___ftadd@exp2,w,c
  5660  002424  183E               	xorwf	___ftadd@exp1,w,c
  5661  002426  B4D8               	btfsc	status,2,c
  5662  002428  D01F               	goto	l579
  5663  00242A  D7F6               	goto	l2082
  5664  00242C                     l2086:
  5665  00242C  503E               	movf	___ftadd@exp1,w,c
  5666  00242E  5C3D               	subwf	___ftadd@exp2,w,c
  5667  002430  B0D8               	btfsc	status,0,c
  5668  002432  D01A               	goto	l579
  5669  002434                     l2088:
  5670  002434  90D8               	bcf	status,0,c
  5671  002436  3633               	rlcf	___ftadd@f1,f,c
  5672  002438  3634               	rlcf	___ftadd@f1+1,f,c
  5673  00243A  3635               	rlcf	___ftadd@f1+2,f,c
  5674  00243C  063E               	decf	___ftadd@exp1,f,c
  5675  00243E  503E               	movf	___ftadd@exp1,w,c
  5676  002440  183D               	xorwf	___ftadd@exp2,w,c
  5677  002442  B4D8               	btfsc	status,2,c
  5678  002444  D00D               	goto	l2096
  5679  002446  063C               	decf	___ftadd@sign,f,c
  5680  002448  C03C  F039         	movff	___ftadd@sign,??___ftadd
  5681  00244C  0E07               	movlw	7
  5682  00244E  1639               	andwf	??___ftadd,f,c
  5683  002450  B4D8               	btfsc	status,2,c
  5684  002452  D006               	goto	l2096
  5685  002454  D7EF               	goto	l2088
  5686  002456                     l2094:
  5687  002456  90D8               	bcf	status,0,c
  5688  002458  3238               	rrcf	___ftadd@f2+2,f,c
  5689  00245A  3237               	rrcf	___ftadd@f2+1,f,c
  5690  00245C  3236               	rrcf	___ftadd@f2,f,c
  5691  00245E  2A3D               	incf	___ftadd@exp2,f,c
  5692  002460                     l2096:
  5693  002460  503D               	movf	___ftadd@exp2,w,c
  5694  002462  183E               	xorwf	___ftadd@exp1,w,c
  5695  002464  A4D8               	btfss	status,2,c
  5696  002466  D7F7               	goto	l2094
  5697  002468                     l579:
  5698  002468  AE3C               	btfss	___ftadd@sign,7,c
  5699  00246A  D00C               	goto	l588
  5700  00246C  0EFF               	movlw	255
  5701  00246E  1A33               	xorwf	___ftadd@f1,f,c
  5702  002470  0EFF               	movlw	255
  5703  002472  1A34               	xorwf	___ftadd@f1+1,f,c
  5704  002474  0EFF               	movlw	255
  5705  002476  1A35               	xorwf	___ftadd@f1+2,f,c
  5706  002478  0E01               	movlw	1
  5707  00247A  2633               	addwf	___ftadd@f1,f,c
  5708  00247C  0E00               	movlw	0
  5709  00247E  2234               	addwfc	___ftadd@f1+1,f,c
  5710  002480  0E00               	movlw	0
  5711  002482  2235               	addwfc	___ftadd@f1+2,f,c
  5712  002484                     l588:
  5713  002484  AC3C               	btfss	___ftadd@sign,6,c
  5714  002486  D00C               	goto	l2102
  5715  002488  0EFF               	movlw	255
  5716  00248A  1A36               	xorwf	___ftadd@f2,f,c
  5717  00248C  0EFF               	movlw	255
  5718  00248E  1A37               	xorwf	___ftadd@f2+1,f,c
  5719  002490  0EFF               	movlw	255
  5720  002492  1A38               	xorwf	___ftadd@f2+2,f,c
  5721  002494  0E01               	movlw	1
  5722  002496  2636               	addwf	___ftadd@f2,f,c
  5723  002498  0E00               	movlw	0
  5724  00249A  2237               	addwfc	___ftadd@f2+1,f,c
  5725  00249C  0E00               	movlw	0
  5726  00249E  2238               	addwfc	___ftadd@f2+2,f,c
  5727  0024A0                     l2102:
  5728  0024A0  0E00               	movlw	0
  5729  0024A2  6E3C               	movwf	___ftadd@sign,c
  5730  0024A4  5033               	movf	___ftadd@f1,w,c
  5731  0024A6  2636               	addwf	___ftadd@f2,f,c
  5732  0024A8  5034               	movf	___ftadd@f1+1,w,c
  5733  0024AA  2237               	addwfc	___ftadd@f2+1,f,c
  5734  0024AC  5035               	movf	___ftadd@f1+2,w,c
  5735  0024AE  2238               	addwfc	___ftadd@f2+2,f,c
  5736  0024B0  AE38               	btfss	___ftadd@f2+2,7,c
  5737  0024B2  D00E               	goto	l2112
  5738  0024B4  0EFF               	movlw	255
  5739  0024B6  1A36               	xorwf	___ftadd@f2,f,c
  5740  0024B8  0EFF               	movlw	255
  5741  0024BA  1A37               	xorwf	___ftadd@f2+1,f,c
  5742  0024BC  0EFF               	movlw	255
  5743  0024BE  1A38               	xorwf	___ftadd@f2+2,f,c
  5744  0024C0  0E01               	movlw	1
  5745  0024C2  2636               	addwf	___ftadd@f2,f,c
  5746  0024C4  0E00               	movlw	0
  5747  0024C6  2237               	addwfc	___ftadd@f2+1,f,c
  5748  0024C8  0E00               	movlw	0
  5749  0024CA  2238               	addwfc	___ftadd@f2+2,f,c
  5750  0024CC  0E01               	movlw	1
  5751  0024CE  6E3C               	movwf	___ftadd@sign,c
  5752  0024D0                     l2112:
  5753  0024D0  C036  F013         	movff	___ftadd@f2,___ftpack@arg
  5754  0024D4  C037  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  5755  0024D8  C038  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  5756  0024DC  C03E  F016         	movff	___ftadd@exp1,___ftpack@exp
  5757  0024E0  C03C  F017         	movff	___ftadd@sign,___ftpack@sign
  5758  0024E4  EC7A  F015         	call	___ftpack	;wreg free
  5759  0024E8  C013  F033         	movff	?___ftpack,?___ftadd
  5760  0024EC  C014  F034         	movff	?___ftpack+1,?___ftadd+1
  5761  0024F0  C015  F035         	movff	?___ftpack+2,?___ftadd+2
  5762  0024F4  0012               	return	
  5763  0024F6                     __end_of___ftadd:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1l	equ	0xFE1
  5775                           postinc2	equ	0xFDE
  5776                           postdec2	equ	0xFDD
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _limitWheelSpeeds *****************
  5782 ;; Defined at:
  5783 ;;		line 221 in file "main.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  leftWheelSpe    2   18[COMRAM] PTR int 
  5786 ;;		 -> excerciseControl@leftWheelCommandedSpeed(2), 
  5787 ;;  rightWheelSp    2   20[COMRAM] PTR int 
  5788 ;;		 -> excerciseControl@rightWheelCommandedSpeed(2), 
  5789 ;;  speedCompens    2   22[COMRAM] PTR int 
  5790 ;;		 -> speedCompensation(2), 
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5802 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;Total ram usage:        8 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    1
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_excerciseControl
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text22
  5817  002750                     __ptext22:
  5818                           	opt stack 0
  5819  002750                     _limitWheelSpeeds:
  5820                           	opt stack 28
  5821                           
  5822                           ;main.c: 226: if (*leftWheelSpeed >= 60)
  5823                           
  5824                           ;incstack = 0
  5825  002750  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5826  002754  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5827  002758  0E01               	movlw	1
  5828  00275A  BEDB               	btfsc	plusw2,7,c
  5829  00275C  D00F               	goto	l2296
  5830  00275E  0E01               	movlw	1
  5831  002760  50DB               	movf	plusw2,w,c
  5832  002762  E104               	bnz	u1910
  5833  002764  0E3C               	movlw	60
  5834  002766  5CDE               	subwf	postinc2,w,c
  5835  002768  A0D8               	btfss	status,0,c
  5836  00276A  D008               	goto	l2296
  5837  00276C                     u1910:
  5838                           
  5839                           ;main.c: 227: {
  5840                           ;main.c: 228: *leftWheelSpeed = 60;
  5841  00276C  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5842  002770  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5843  002774  0E3C               	movlw	60
  5844  002776  6EDE               	movwf	postinc2,c
  5845  002778  0E00               	movlw	0
  5846  00277A  6EDD               	movwf	postdec2,c
  5847  00277C                     l2296:
  5848                           
  5849                           ;main.c: 229: }
  5850                           ;main.c: 230: if (*leftWheelSpeed <= -60)
  5851  00277C  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5852  002780  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5853  002784  0E01               	movlw	1
  5854  002786  AEDB               	btfss	plusw2,7,c
  5855  002788  D00E               	goto	l2300
  5856  00278A  0EC5               	movlw	197
  5857  00278C  5CDE               	subwf	postinc2,w,c
  5858  00278E  0EFF               	movlw	255
  5859  002790  58DE               	subwfb	postinc2,w,c
  5860  002792  B0D8               	btfsc	status,0,c
  5861  002794  D008               	goto	l2300
  5862                           
  5863                           ;main.c: 231: {
  5864                           ;main.c: 232: *leftWheelSpeed = -60;
  5865  002796  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5866  00279A  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5867  00279E  0EC4               	movlw	196
  5868  0027A0  6EDE               	movwf	postinc2,c
  5869  0027A2  0EFF               	movlw	255
  5870  0027A4  6EDD               	movwf	postdec2,c
  5871  0027A6                     l2300:
  5872                           
  5873                           ;main.c: 233: }
  5874                           ;main.c: 235: if (*rightWheelSpeed >= 60)
  5875  0027A6  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5876  0027AA  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5877  0027AE  0E01               	movlw	1
  5878  0027B0  BEDB               	btfsc	plusw2,7,c
  5879  0027B2  D00F               	goto	l2304
  5880  0027B4  0E01               	movlw	1
  5881  0027B6  50DB               	movf	plusw2,w,c
  5882  0027B8  E104               	bnz	u1930
  5883  0027BA  0E3C               	movlw	60
  5884  0027BC  5CDE               	subwf	postinc2,w,c
  5885  0027BE  A0D8               	btfss	status,0,c
  5886  0027C0  D008               	goto	l2304
  5887  0027C2                     u1930:
  5888                           
  5889                           ;main.c: 236: {
  5890                           ;main.c: 237: *rightWheelSpeed = 60;
  5891  0027C2  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5892  0027C6  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5893  0027CA  0E3C               	movlw	60
  5894  0027CC  6EDE               	movwf	postinc2,c
  5895  0027CE  0E00               	movlw	0
  5896  0027D0  6EDD               	movwf	postdec2,c
  5897  0027D2                     l2304:
  5898                           
  5899                           ;main.c: 238: }
  5900                           ;main.c: 239: if (*rightWheelSpeed <= -60)
  5901  0027D2  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5902  0027D6  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5903  0027DA  0E01               	movlw	1
  5904  0027DC  AEDB               	btfss	plusw2,7,c
  5905  0027DE  D00E               	goto	l2308
  5906  0027E0  0EC5               	movlw	197
  5907  0027E2  5CDE               	subwf	postinc2,w,c
  5908  0027E4  0EFF               	movlw	255
  5909  0027E6  58DE               	subwfb	postinc2,w,c
  5910  0027E8  B0D8               	btfsc	status,0,c
  5911  0027EA  D008               	goto	l2308
  5912                           
  5913                           ;main.c: 240: {
  5914                           ;main.c: 241: *rightWheelSpeed = -60;
  5915  0027EC  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5916  0027F0  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5917  0027F4  0EC4               	movlw	196
  5918  0027F6  6EDE               	movwf	postinc2,c
  5919  0027F8  0EFF               	movlw	255
  5920  0027FA  6EDD               	movwf	postdec2,c
  5921  0027FC                     l2308:
  5922                           
  5923                           ;main.c: 242: }
  5924                           ;main.c: 243: if(*speedCompensation > 30)
  5925  0027FC  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5926  002800  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5927  002804  0E01               	movlw	1
  5928  002806  BEDB               	btfsc	plusw2,7,c
  5929  002808  D00F               	goto	l2312
  5930  00280A  0E01               	movlw	1
  5931  00280C  50DB               	movf	plusw2,w,c
  5932  00280E  E104               	bnz	u1950
  5933  002810  0E1F               	movlw	31
  5934  002812  5CDE               	subwf	postinc2,w,c
  5935  002814  A0D8               	btfss	status,0,c
  5936  002816  D008               	goto	l2312
  5937  002818                     u1950:
  5938                           
  5939                           ;main.c: 244: {
  5940                           ;main.c: 245: *speedCompensation = 30;
  5941  002818  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5942  00281C  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5943  002820  0E1E               	movlw	30
  5944  002822  6EDE               	movwf	postinc2,c
  5945  002824  0E00               	movlw	0
  5946  002826  6EDD               	movwf	postdec2,c
  5947  002828                     l2312:
  5948                           
  5949                           ;main.c: 246: }
  5950                           ;main.c: 247: if(*speedCompensation < -30)
  5951  002828  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5952  00282C  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5953  002830  0E01               	movlw	1
  5954  002832  AEDB               	btfss	plusw2,7,c
  5955  002834  0012               	return	
  5956  002836  0EE2               	movlw	226
  5957  002838  5CDE               	subwf	postinc2,w,c
  5958  00283A  0EFF               	movlw	255
  5959  00283C  58DE               	subwfb	postinc2,w,c
  5960  00283E  B0D8               	btfsc	status,0,c
  5961  002840  0012               	return	
  5962                           
  5963                           ;main.c: 248: {
  5964                           ;main.c: 249: *speedCompensation = -30;
  5965  002842  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5966  002846  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5967  00284A  0EE2               	movlw	226
  5968  00284C  6EDE               	movwf	postinc2,c
  5969  00284E  0EFF               	movlw	255
  5970  002850  6EDD               	movwf	postdec2,c
  5971  002852  0012               	return	
  5972  002854                     __end_of_limitWheelSpeeds:
  5973                           	opt stack 0
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           fsr1l	equ	0xFE1
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           plusw2	equ	0xFDB
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function ___lltoft *****************
  5992 ;; Defined at:
  5993 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  c               4   26[COMRAM] unsigned long 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  exp             1   34[COMRAM] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  3   26[COMRAM] float 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6007 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;Total ram usage:        9 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    2
  6014 ;; This function calls:
  6015 ;;		___ftpack
  6016 ;; This function is called by:
  6017 ;;		_main
  6018 ;;		_excerciseControl
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text23
  6023  002F62                     __ptext23:
  6024                           	opt stack 0
  6025  002F62                     ___lltoft:
  6026                           	opt stack 27
  6027                           
  6028                           ;incstack = 0
  6029  002F62  0E8E               	movlw	142
  6030  002F64  6E23               	movwf	___lltoft@exp,c
  6031  002F66  D006               	goto	l2390
  6032  002F68                     l2388:
  6033  002F68  90D8               	bcf	status,0,c
  6034  002F6A  321E               	rrcf	___lltoft@c+3,f,c
  6035  002F6C  321D               	rrcf	___lltoft@c+2,f,c
  6036  002F6E  321C               	rrcf	___lltoft@c+1,f,c
  6037  002F70  321B               	rrcf	___lltoft@c,f,c
  6038  002F72  2A23               	incf	___lltoft@exp,f,c
  6039  002F74                     l2390:
  6040  002F74  0E00               	movlw	0
  6041  002F76  141B               	andwf	___lltoft@c,w,c
  6042  002F78  6E1F               	movwf	??___lltoft& (0+255),c
  6043  002F7A  0E00               	movlw	0
  6044  002F7C  141C               	andwf	___lltoft@c+1,w,c
  6045  002F7E  6E20               	movwf	(??___lltoft+1)& (0+255),c
  6046  002F80  0E00               	movlw	0
  6047  002F82  141D               	andwf	___lltoft@c+2,w,c
  6048  002F84  6E21               	movwf	(??___lltoft+2)& (0+255),c
  6049  002F86  0EFF               	movlw	255
  6050  002F88  141E               	andwf	___lltoft@c+3,w,c
  6051  002F8A  6E22               	movwf	(??___lltoft+3)& (0+255),c
  6052  002F8C  501F               	movf	??___lltoft,w,c
  6053  002F8E  1020               	iorwf	??___lltoft+1,w,c
  6054  002F90  1021               	iorwf	??___lltoft+2,w,c
  6055  002F92  1022               	iorwf	??___lltoft+3,w,c
  6056  002F94  A4D8               	btfss	status,2,c
  6057  002F96  D7E8               	goto	l2388
  6058  002F98  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  6059  002F9C  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  6060  002FA0  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  6061  002FA4  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  6062  002FA8  0E00               	movlw	0
  6063  002FAA  6E17               	movwf	___ftpack@sign,c
  6064  002FAC  EC7A  F015         	call	___ftpack	;wreg free
  6065  002FB0  C013  F01B         	movff	?___ftpack,?___lltoft
  6066  002FB4  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  6067  002FB8  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  6068  002FBC  0012               	return	
  6069  002FBE                     __end_of___lltoft:
  6070                           	opt stack 0
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           postinc0	equ	0xFEE
  6078                           wreg	equ	0xFE8
  6079                           postdec1	equ	0xFE5
  6080                           fsr1l	equ	0xFE1
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           plusw2	equ	0xFDB
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _configureTimers *****************
  6089 ;; Defined at:
  6090 ;;		line 569 in file "main.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;		None
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;		None
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      void 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;Total ram usage:        0 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    1
  6111 ;; This function calls:
  6112 ;;		Nothing
  6113 ;; This function is called by:
  6114 ;;		_main
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text24
  6119  002BA2                     __ptext24:
  6120                           	opt stack 0
  6121  002BA2                     _configureTimers:
  6122                           	opt stack 29
  6123                           
  6124                           ;main.c: 571: (INTCONbits.GIE = 0);
  6125                           
  6126                           ;incstack = 0
  6127  002BA2  9EF2               	bcf	intcon,7,c	;volatile
  6128                           
  6129                           ;main.c: 573: T1CON = 0;
  6130  002BA4  0E00               	movlw	0
  6131  002BA6  6ECD               	movwf	4045,c	;volatile
  6132                           
  6133                           ;main.c: 574: T1CONbits.TMR1CS = 0b00;
  6134  002BA8  0E3F               	movlw	-193
  6135  002BAA  16CD               	andwf	4045,f,c	;volatile
  6136                           
  6137                           ;main.c: 575: T1CONbits.T1CKPS = 0b10;
  6138  002BAC  50CD               	movf	4045,w,c	;volatile
  6139  002BAE  0BCF               	andlw	-49
  6140  002BB0  0920               	iorlw	32
  6141  002BB2  6ECD               	movwf	4045,c	;volatile
  6142                           
  6143                           ;main.c: 576: T5CON = 0;
  6144  002BB4  0E00               	movlw	0
  6145  002BB6  010F               	movlb	15	; () banked
  6146  002BB8  6F4E               	movwf	78,b	;volatile
  6147                           
  6148                           ;main.c: 577: T5CONbits.TMR5CS = 0b00;
  6149  002BBA  0E3F               	movlw	-193
  6150  002BBC  010F               	movlb	15	; () banked
  6151  002BBE  174E               	andwf	78,f,b	;volatile
  6152                           
  6153                           ;main.c: 578: T5CONbits.T5CKPS = 0b10;
  6154  002BC0  010F               	movlb	15	; () banked
  6155  002BC2  514E               	movf	78,w,b	;volatile
  6156  002BC4  0BCF               	andlw	-49
  6157  002BC6  0920               	iorlw	32
  6158  002BC8  6F4E               	movwf	78,b	;volatile
  6159                           
  6160                           ;main.c: 583: CCP3CON = 0;
  6161  002BCA  0E00               	movlw	0
  6162  002BCC  010F               	movlb	15	; () banked
  6163  002BCE  6F5D               	movwf	93,b	;volatile
  6164                           
  6165                           ;main.c: 584: CCP2CON = 0;
  6166  002BD0  0E00               	movlw	0
  6167  002BD2  6E66               	movwf	3942,c	;volatile
  6168                           
  6169                           ;main.c: 585: CCP3CONbits.CCP3M = 0b1010;
  6170  002BD4  010F               	movlb	15	; () banked
  6171  002BD6  515D               	movf	93,w,b	;volatile
  6172  002BD8  0BF0               	andlw	-16
  6173  002BDA  090A               	iorlw	10
  6174  002BDC  6F5D               	movwf	93,b	;volatile
  6175                           
  6176                           ;main.c: 586: CCP2CONbits.CCP2M = 0b1010;
  6177  002BDE  5066               	movf	3942,w,c	;volatile
  6178  002BE0  0BF0               	andlw	-16
  6179  002BE2  090A               	iorlw	10
  6180  002BE4  6E66               	movwf	3942,c	;volatile
  6181                           
  6182                           ;main.c: 593: CCPTMRS0bits.C3TSEL = 0;
  6183  002BE6  0E3F               	movlw	-193
  6184  002BE8  010F               	movlb	15	; () banked
  6185  002BEA  1749               	andwf	73,f,b	;volatile
  6186                           
  6187                           ;main.c: 594: CCPTMRS0bits.C2TSEL = 0b10;
  6188  002BEC  010F               	movlb	15	; () banked
  6189  002BEE  5149               	movf	73,w,b	;volatile
  6190  002BF0  0BE7               	andlw	-25
  6191  002BF2  0910               	iorlw	16
  6192  002BF4  6F49               	movwf	73,b	;volatile
  6193                           
  6194                           ;main.c: 596: CCPR3 = 675;
  6195  002BF6  0E02               	movlw	2
  6196  002BF8  010F               	movlb	15	; () banked
  6197  002BFA  6F5F               	movwf	95,b	;volatile
  6198  002BFC  0EA3               	movlw	163
  6199  002BFE  6F5E               	movwf	94,b	;volatile
  6200                           
  6201                           ;main.c: 597: CCPR2 = 675;
  6202  002C00  0E02               	movlw	2
  6203  002C02  6E68               	movwf	3944,c	;volatile
  6204  002C04  0EA3               	movlw	163
  6205  002C06  6E67               	movwf	3943,c	;volatile
  6206                           
  6207                           ; BSR set to: 15
  6208                           ;main.c: 599: CCP3IE = 1;
  6209  002C08  807A               	bsf	3962,0,c	;volatile
  6210                           
  6211                           ; BSR set to: 15
  6212                           ;main.c: 600: CCP2IE = 1;
  6213  002C0A  80A0               	bsf	4000,0,c	;volatile
  6214                           
  6215                           ; BSR set to: 15
  6216                           ;main.c: 603: PIE1bits.TMR2IE = 1;
  6217  002C0C  829D               	bsf	3997,1,c	;volatile
  6218                           
  6219                           ;main.c: 604: T2CON = 0;
  6220  002C0E  0E00               	movlw	0
  6221  002C10  6EBA               	movwf	4026,c	;volatile
  6222                           
  6223                           ;main.c: 605: T2CONbits.T2CKPS = 0b10;
  6224  002C12  50BA               	movf	4026,w,c	;volatile
  6225  002C14  0BFC               	andlw	-4
  6226  002C16  0902               	iorlw	2
  6227  002C18  6EBA               	movwf	4026,c	;volatile
  6228                           
  6229                           ; BSR set to: 15
  6230                           ;main.c: 606: T2CONbits.TMR2ON = 1;
  6231  002C1A  84BA               	bsf	4026,2,c	;volatile
  6232                           
  6233                           ;main.c: 607: PR2 = 125;
  6234  002C1C  0E7D               	movlw	125
  6235  002C1E  6EBB               	movwf	4027,c	;volatile
  6236                           
  6237                           ; BSR set to: 15
  6238                           ;main.c: 613: INTCONbits.GIE = 1;
  6239  002C20  8EF2               	bsf	intcon,7,c	;volatile
  6240                           
  6241                           ; BSR set to: 15
  6242                           ;main.c: 614: INTCONbits.PEIE = 1;
  6243  002C22  8CF2               	bsf	intcon,6,c	;volatile
  6244                           
  6245                           ;main.c: 616: TMR1 = 0;
  6246  002C24  0E00               	movlw	0
  6247  002C26  6ECF               	movwf	4047,c	;volatile
  6248  002C28  0E00               	movlw	0
  6249  002C2A  6ECE               	movwf	4046,c	;volatile
  6250                           
  6251                           ;main.c: 617: TMR5 = 0;
  6252  002C2C  0E00               	movlw	0
  6253  002C2E  010F               	movlb	15	; () banked
  6254  002C30  6F50               	movwf	80,b	;volatile
  6255  002C32  0E00               	movlw	0
  6256  002C34  6F4F               	movwf	79,b	;volatile
  6257                           
  6258                           ; BSR set to: 15
  6259                           ;main.c: 618: TMR1ON = 1;
  6260  002C36  80CD               	bsf	4045,0,c	;volatile
  6261                           
  6262                           ; BSR set to: 15
  6263                           ;main.c: 619: TMR5ON = 1;
  6264  002C38  010F               	movlb	15	; () banked
  6265  002C3A  814E               	bsf	78,0,b	;volatile
  6266                           
  6267                           ; BSR set to: 15
  6268                           ;main.c: 621: (INTCONbits.GIE = 1);
  6269  002C3C  8EF2               	bsf	intcon,7,c	;volatile
  6270                           
  6271                           ; BSR set to: 15
  6272                           ;main.c: 623: TRISDbits.TRISD0 = 0;
  6273  002C3E  9095               	bcf	3989,0,c	;volatile
  6274                           
  6275                           ; BSR set to: 15
  6276                           ;main.c: 624: TRISDbits.TRISD1 = 0;
  6277  002C40  9295               	bcf	3989,1,c	;volatile
  6278                           
  6279                           ;main.c: 625: ANSELD = 0;
  6280  002C42  0E00               	movlw	0
  6281  002C44  010F               	movlb	15	; () banked
  6282  002C46  6F3B               	movwf	59,b	;volatile
  6283                           
  6284                           ; BSR set to: 15
  6285  002C48  0012               	return		;funcret
  6286  002C4A                     __end_of_configureTimers:
  6287                           	opt stack 0
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           intcon	equ	0xFF2
  6295                           postinc0	equ	0xFEE
  6296                           wreg	equ	0xFE8
  6297                           postdec1	equ	0xFE5
  6298                           fsr1l	equ	0xFE1
  6299                           postinc2	equ	0xFDE
  6300                           postdec2	equ	0xFDD
  6301                           plusw2	equ	0xFDB
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function _configureComparators *****************
  6307 ;; Defined at:
  6308 ;;		line 629 in file "main.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  1    wreg      void 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;Total ram usage:        0 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    1
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text25
  6337  002FBE                     __ptext25:
  6338                           	opt stack 0
  6339  002FBE                     _configureComparators:
  6340                           	opt stack 29
  6341                           
  6342                           ;main.c: 633: VREFCON0bits.FVREN=1;
  6343                           
  6344                           ; BSR set to: 15
  6345                           ;incstack = 0
  6346  002FBE  010F               	movlb	15	; () banked
  6347  002FC0  8F42               	bsf	66,7,b	;volatile
  6348                           
  6349                           ;main.c: 634: VREFCON0bits.FVRST=0;
  6350  002FC2  010F               	movlb	15	; () banked
  6351  002FC4  9D42               	bcf	66,6,b	;volatile
  6352                           
  6353                           ; BSR set to: 15
  6354                           ;main.c: 635: VREFCON0bits.FVRS=0b01;
  6355  002FC6  010F               	movlb	15	; () banked
  6356  002FC8  5142               	movf	66,w,b	;volatile
  6357  002FCA  0BCF               	andlw	-49
  6358  002FCC  0910               	iorlw	16
  6359  002FCE  6F42               	movwf	66,b	;volatile
  6360                           
  6361                           ; BSR set to: 15
  6362                           ;main.c: 637: TRISBbits.TRISB1 = 1;
  6363  002FD0  8293               	bsf	3987,1,c	;volatile
  6364                           
  6365                           ; BSR set to: 15
  6366                           ;main.c: 638: ANSELBbits.ANSB1 = 1;
  6367  002FD2  010F               	movlb	15	; () banked
  6368  002FD4  8339               	bsf	57,1,b	;volatile
  6369                           
  6370                           ; BSR set to: 15
  6371                           ;main.c: 642: CM2CON0bits.C2ON = 1;
  6372  002FD6  8E78               	bsf	3960,7,c	;volatile
  6373                           
  6374                           ; BSR set to: 15
  6375                           ;main.c: 643: CM2CON0bits.C2OUT = 0;
  6376  002FD8  9C78               	bcf	3960,6,c	;volatile
  6377                           
  6378                           ; BSR set to: 15
  6379                           ;main.c: 644: CM2CON0bits.C2OE = 0;
  6380  002FDA  9A78               	bcf	3960,5,c	;volatile
  6381                           
  6382                           ; BSR set to: 15
  6383                           ;main.c: 645: CM2CON0bits.C2POL = 1;
  6384  002FDC  8878               	bsf	3960,4,c	;volatile
  6385                           
  6386                           ; BSR set to: 15
  6387                           ;main.c: 646: CM2CON0bits.C2SP = 1;
  6388  002FDE  8678               	bsf	3960,3,c	;volatile
  6389                           
  6390                           ; BSR set to: 15
  6391                           ;main.c: 647: CM2CON0bits.C2R = 1;
  6392  002FE0  8478               	bsf	3960,2,c	;volatile
  6393                           
  6394                           ;main.c: 648: CM2CON0bits.C2CH = 0b11;
  6395  002FE2  0E03               	movlw	3
  6396  002FE4  1278               	iorwf	3960,f,c	;volatile
  6397                           
  6398                           ; BSR set to: 15
  6399                           ;main.c: 650: CM2CON1bits.C2RSEL = 1;
  6400  002FE6  8877               	bsf	3959,4,c	;volatile
  6401                           
  6402                           ; BSR set to: 15
  6403                           ;main.c: 651: CM2CON1bits.C2HYS = 0;
  6404  002FE8  9477               	bcf	3959,2,c	;volatile
  6405                           
  6406                           ; BSR set to: 15
  6407                           ;main.c: 652: CM2CON1bits.C2SYNC = 0;
  6408  002FEA  9077               	bcf	3959,0,c	;volatile
  6409                           
  6410                           ; BSR set to: 15
  6411                           ;main.c: 658: TRISBbits.TRISB3 = 1;
  6412  002FEC  8693               	bsf	3987,3,c	;volatile
  6413                           
  6414                           ; BSR set to: 15
  6415                           ;main.c: 659: ANSELBbits.ANSB3 = 1;
  6416  002FEE  010F               	movlb	15	; () banked
  6417  002FF0  8739               	bsf	57,3,b	;volatile
  6418                           
  6419                           ; BSR set to: 15
  6420                           ;main.c: 662: CM1CON0bits.C1ON = 1;
  6421  002FF2  8E79               	bsf	3961,7,c	;volatile
  6422                           
  6423                           ; BSR set to: 15
  6424                           ;main.c: 663: CM1CON0bits.C1OUT = 0;
  6425  002FF4  9C79               	bcf	3961,6,c	;volatile
  6426                           
  6427                           ; BSR set to: 15
  6428                           ;main.c: 664: CM1CON0bits.C1OE = 0;
  6429  002FF6  9A79               	bcf	3961,5,c	;volatile
  6430                           
  6431                           ; BSR set to: 15
  6432                           ;main.c: 665: CM1CON0bits.C1POL = 1;
  6433  002FF8  8879               	bsf	3961,4,c	;volatile
  6434                           
  6435                           ; BSR set to: 15
  6436                           ;main.c: 666: CM1CON0bits.C1SP = 1;
  6437  002FFA  8679               	bsf	3961,3,c	;volatile
  6438                           
  6439                           ; BSR set to: 15
  6440                           ;main.c: 667: CM1CON0bits.C1R = 1;
  6441  002FFC  8479               	bsf	3961,2,c	;volatile
  6442                           
  6443                           ;main.c: 668: CM1CON0bits.C1CH = 0b10;
  6444  002FFE  5079               	movf	3961,w,c	;volatile
  6445  003000  0BFC               	andlw	-4
  6446  003002  0902               	iorlw	2
  6447  003004  6E79               	movwf	3961,c	;volatile
  6448                           
  6449                           ; BSR set to: 15
  6450                           ;main.c: 670: CM2CON1bits.C1RSEL = 1;
  6451  003006  8A77               	bsf	3959,5,c	;volatile
  6452                           
  6453                           ; BSR set to: 15
  6454                           ;main.c: 671: CM2CON1bits.C1HYS = 0;
  6455  003008  9677               	bcf	3959,3,c	;volatile
  6456                           
  6457                           ; BSR set to: 15
  6458                           ;main.c: 672: CM2CON1bits.C1SYNC = 0;
  6459  00300A  9277               	bcf	3959,1,c	;volatile
  6460                           
  6461                           ; BSR set to: 15
  6462                           ;main.c: 675: PIR2bits.C1IF = 0;
  6463  00300C  9CA1               	bcf	4001,6,c	;volatile
  6464                           
  6465                           ; BSR set to: 15
  6466                           ;main.c: 676: PIR2bits.C2IF = 0;
  6467  00300E  9AA1               	bcf	4001,5,c	;volatile
  6468                           
  6469                           ; BSR set to: 15
  6470                           ;main.c: 677: PIE2bits.C2IE = 1;
  6471  003010  8AA0               	bsf	4000,5,c	;volatile
  6472                           
  6473                           ; BSR set to: 15
  6474                           ;main.c: 678: PIE2bits.C1IE = 1;
  6475  003012  8CA0               	bsf	4000,6,c	;volatile
  6476                           
  6477                           ; BSR set to: 15
  6478  003014  0012               	return		;funcret
  6479  003016                     __end_of_configureComparators:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           postinc0	equ	0xFEE
  6489                           wreg	equ	0xFE8
  6490                           postdec1	equ	0xFE5
  6491                           fsr1l	equ	0xFE1
  6492                           postinc2	equ	0xFDE
  6493                           postdec2	equ	0xFDD
  6494                           plusw2	equ	0xFDB
  6495                           fsr2h	equ	0xFDA
  6496                           fsr2l	equ	0xFD9
  6497                           status	equ	0xFD8
  6498                           
  6499 ;; *************** function ___ftdiv *****************
  6500 ;; Defined at:
  6501 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  f1              3   50[COMRAM] float 
  6504 ;;  f2              3   53[COMRAM] float 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  f3              3   60[COMRAM] float 
  6507 ;;  sign            1   64[COMRAM] unsigned char 
  6508 ;;  exp             1   63[COMRAM] unsigned char 
  6509 ;;  cntr            1   59[COMRAM] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  3   50[COMRAM] float 
  6512 ;; Registers used:
  6513 ;;		wreg, status,2, status,0, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6519 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;Total ram usage:       15 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    2
  6526 ;; This function calls:
  6527 ;;		___ftpack
  6528 ;; This function is called by:
  6529 ;;		_main
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text26
  6534  002948                     __ptext26:
  6535                           	opt stack 0
  6536  002948                     ___ftdiv:
  6537                           	opt stack 28
  6538                           
  6539                           ; BSR set to: 15
  6540                           ;incstack = 0
  6541  002948  C035  F039         	movff	___ftdiv@f1+2,??___ftdiv
  6542  00294C  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  6543  00294E  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  6544  002950  3434               	rlcf	___ftdiv@f1+1,w,c
  6545  002952  3639               	rlcf	??___ftdiv& (0+255),f,c
  6546  002954  E301               	bnc	u2451
  6547  002956  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  6548  002958                     u2451:
  6549  002958  5039               	movf	??___ftdiv,w,c
  6550  00295A  6E40               	movwf	___ftdiv@exp,c
  6551  00295C  5040               	movf	___ftdiv@exp,w,c
  6552  00295E  A4D8               	btfss	status,2,c
  6553  002960  D007               	goto	l2812
  6554  002962  0E00               	movlw	0
  6555  002964  6E33               	movwf	?___ftdiv,c
  6556  002966  0E00               	movlw	0
  6557  002968  6E34               	movwf	?___ftdiv+1,c
  6558  00296A  0E00               	movlw	0
  6559  00296C  6E35               	movwf	?___ftdiv+2,c
  6560  00296E  0012               	return	
  6561  002970                     l2812:
  6562  002970  C038  F039         	movff	___ftdiv@f2+2,??___ftdiv
  6563  002974  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  6564  002976  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  6565  002978  3437               	rlcf	___ftdiv@f2+1,w,c
  6566  00297A  3639               	rlcf	??___ftdiv& (0+255),f,c
  6567  00297C  E301               	bnc	u2471
  6568  00297E  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  6569  002980                     u2471:
  6570  002980  5039               	movf	??___ftdiv,w,c
  6571  002982  6E41               	movwf	___ftdiv@sign,c
  6572  002984  5041               	movf	___ftdiv@sign,w,c
  6573  002986  A4D8               	btfss	status,2,c
  6574  002988  D007               	goto	l2818
  6575  00298A  0E00               	movlw	0
  6576  00298C  6E33               	movwf	?___ftdiv,c
  6577  00298E  0E00               	movlw	0
  6578  002990  6E34               	movwf	?___ftdiv+1,c
  6579  002992  0E00               	movlw	0
  6580  002994  6E35               	movwf	?___ftdiv+2,c
  6581  002996  0012               	return	
  6582  002998                     l2818:
  6583  002998  0E00               	movlw	0
  6584  00299A  6E3D               	movwf	___ftdiv@f3,c
  6585  00299C  0E00               	movlw	0
  6586  00299E  6E3E               	movwf	___ftdiv@f3+1,c
  6587  0029A0  0E00               	movlw	0
  6588  0029A2  6E3F               	movwf	___ftdiv@f3+2,c
  6589  0029A4  5041               	movf	___ftdiv@sign,w,c
  6590  0029A6  0F89               	addlw	137
  6591  0029A8  5E40               	subwf	___ftdiv@exp,f,c
  6592  0029AA  C035  F041         	movff	___ftdiv@f1+2,___ftdiv@sign
  6593  0029AE  5038               	movf	___ftdiv@f2+2,w,c
  6594  0029B0  1A41               	xorwf	___ftdiv@sign,f,c
  6595  0029B2  0E80               	movlw	128
  6596  0029B4  1641               	andwf	___ftdiv@sign,f,c
  6597  0029B6  8E34               	bsf	___ftdiv@f1+1,7,c
  6598  0029B8  0EFF               	movlw	255
  6599  0029BA  1633               	andwf	___ftdiv@f1,f,c
  6600  0029BC  0EFF               	movlw	255
  6601  0029BE  1634               	andwf	___ftdiv@f1+1,f,c
  6602  0029C0  0E00               	movlw	0
  6603  0029C2  1635               	andwf	___ftdiv@f1+2,f,c
  6604  0029C4  8E37               	bsf	___ftdiv@f2+1,7,c
  6605  0029C6  0EFF               	movlw	255
  6606  0029C8  1636               	andwf	___ftdiv@f2,f,c
  6607  0029CA  0EFF               	movlw	255
  6608  0029CC  1637               	andwf	___ftdiv@f2+1,f,c
  6609  0029CE  0E00               	movlw	0
  6610  0029D0  1638               	andwf	___ftdiv@f2+2,f,c
  6611  0029D2  0E18               	movlw	24
  6612  0029D4  6E3C               	movwf	___ftdiv@cntr,c
  6613  0029D6                     l2838:
  6614  0029D6  90D8               	bcf	status,0,c
  6615  0029D8  363D               	rlcf	___ftdiv@f3,f,c
  6616  0029DA  363E               	rlcf	___ftdiv@f3+1,f,c
  6617  0029DC  363F               	rlcf	___ftdiv@f3+2,f,c
  6618  0029DE  5036               	movf	___ftdiv@f2,w,c
  6619  0029E0  5C33               	subwf	___ftdiv@f1,w,c
  6620  0029E2  5037               	movf	___ftdiv@f2+1,w,c
  6621  0029E4  5834               	subwfb	___ftdiv@f1+1,w,c
  6622  0029E6  5038               	movf	___ftdiv@f2+2,w,c
  6623  0029E8  5835               	subwfb	___ftdiv@f1+2,w,c
  6624  0029EA  A0D8               	btfss	status,0,c
  6625  0029EC  D007               	goto	l599
  6626  0029EE  5036               	movf	___ftdiv@f2,w,c
  6627  0029F0  5E33               	subwf	___ftdiv@f1,f,c
  6628  0029F2  5037               	movf	___ftdiv@f2+1,w,c
  6629  0029F4  5A34               	subwfb	___ftdiv@f1+1,f,c
  6630  0029F6  5038               	movf	___ftdiv@f2+2,w,c
  6631  0029F8  5A35               	subwfb	___ftdiv@f1+2,f,c
  6632  0029FA  803D               	bsf	___ftdiv@f3,0,c
  6633  0029FC                     l599:
  6634  0029FC  90D8               	bcf	status,0,c
  6635  0029FE  3633               	rlcf	___ftdiv@f1,f,c
  6636  002A00  3634               	rlcf	___ftdiv@f1+1,f,c
  6637  002A02  3635               	rlcf	___ftdiv@f1+2,f,c
  6638  002A04  2E3C               	decfsz	___ftdiv@cntr,f,c
  6639  002A06  D7E7               	goto	l2838
  6640  002A08  C03D  F013         	movff	___ftdiv@f3,___ftpack@arg
  6641  002A0C  C03E  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6642  002A10  C03F  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6643  002A14  C040  F016         	movff	___ftdiv@exp,___ftpack@exp
  6644  002A18  C041  F017         	movff	___ftdiv@sign,___ftpack@sign
  6645  002A1C  EC7A  F015         	call	___ftpack	;wreg free
  6646  002A20  C013  F033         	movff	?___ftpack,?___ftdiv
  6647  002A24  C014  F034         	movff	?___ftpack+1,?___ftdiv+1
  6648  002A28  C015  F035         	movff	?___ftpack+2,?___ftdiv+2
  6649  002A2C  0012               	return	
  6650  002A2E                     __end_of___ftdiv:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           postdec1	equ	0xFE5
  6662                           fsr1l	equ	0xFE1
  6663                           postinc2	equ	0xFDE
  6664                           postdec2	equ	0xFDD
  6665                           plusw2	equ	0xFDB
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function ___ftpack *****************
  6671 ;; Defined at:
  6672 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  arg             3   18[COMRAM] unsigned um
  6675 ;;  exp             1   21[COMRAM] unsigned char 
  6676 ;;  sign            1   22[COMRAM] unsigned char 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;		None
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  3   18[COMRAM] float 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6688 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;Total ram usage:        8 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    1
  6695 ;; This function calls:
  6696 ;;		Nothing
  6697 ;; This function is called by:
  6698 ;;		___altoft
  6699 ;;		___awtoft
  6700 ;;		___ftadd
  6701 ;;		___ftdiv
  6702 ;;		___ftmul
  6703 ;;		___lltoft
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text27
  6708  002AF4                     __ptext27:
  6709                           	opt stack 0
  6710  002AF4                     ___ftpack:
  6711                           	opt stack 26
  6712                           
  6713                           ;incstack = 0
  6714  002AF4  5016               	movf	___ftpack@exp,w,c
  6715  002AF6  B4D8               	btfsc	status,2,c
  6716  002AF8  D005               	goto	l1990
  6717  002AFA  5013               	movf	___ftpack@arg,w,c
  6718  002AFC  1014               	iorwf	___ftpack@arg+1,w,c
  6719  002AFE  1015               	iorwf	___ftpack@arg+2,w,c
  6720  002B00  A4D8               	btfss	status,2,c
  6721  002B02  D00C               	goto	l1996
  6722  002B04                     l1990:
  6723  002B04  0E00               	movlw	0
  6724  002B06  6E13               	movwf	?___ftpack,c
  6725  002B08  0E00               	movlw	0
  6726  002B0A  6E14               	movwf	?___ftpack+1,c
  6727  002B0C  0E00               	movlw	0
  6728  002B0E  6E15               	movwf	?___ftpack+2,c
  6729  002B10  0012               	return	
  6730  002B12                     l1994:
  6731  002B12  2A16               	incf	___ftpack@exp,f,c
  6732  002B14  90D8               	bcf	status,0,c
  6733  002B16  3215               	rrcf	___ftpack@arg+2,f,c
  6734  002B18  3214               	rrcf	___ftpack@arg+1,f,c
  6735  002B1A  3213               	rrcf	___ftpack@arg,f,c
  6736  002B1C                     l1996:
  6737  002B1C  0E00               	movlw	0
  6738  002B1E  1413               	andwf	___ftpack@arg,w,c
  6739  002B20  6E18               	movwf	??___ftpack& (0+255),c
  6740  002B22  0E00               	movlw	0
  6741  002B24  1414               	andwf	___ftpack@arg+1,w,c
  6742  002B26  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6743  002B28  0EFE               	movlw	254
  6744  002B2A  1415               	andwf	___ftpack@arg+2,w,c
  6745  002B2C  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6746  002B2E  5018               	movf	??___ftpack,w,c
  6747  002B30  1019               	iorwf	??___ftpack+1,w,c
  6748  002B32  101A               	iorwf	??___ftpack+2,w,c
  6749  002B34  B4D8               	btfsc	status,2,c
  6750  002B36  D00C               	goto	l2002
  6751  002B38  D7EC               	goto	l1994
  6752  002B3A                     l1998:
  6753  002B3A  2A16               	incf	___ftpack@exp,f,c
  6754  002B3C  0E01               	movlw	1
  6755  002B3E  2613               	addwf	___ftpack@arg,f,c
  6756  002B40  0E00               	movlw	0
  6757  002B42  2214               	addwfc	___ftpack@arg+1,f,c
  6758  002B44  0E00               	movlw	0
  6759  002B46  2215               	addwfc	___ftpack@arg+2,f,c
  6760  002B48  90D8               	bcf	status,0,c
  6761  002B4A  3215               	rrcf	___ftpack@arg+2,f,c
  6762  002B4C  3214               	rrcf	___ftpack@arg+1,f,c
  6763  002B4E  3213               	rrcf	___ftpack@arg,f,c
  6764  002B50                     l2002:
  6765  002B50  0E00               	movlw	0
  6766  002B52  1413               	andwf	___ftpack@arg,w,c
  6767  002B54  6E18               	movwf	??___ftpack& (0+255),c
  6768  002B56  0E00               	movlw	0
  6769  002B58  1414               	andwf	___ftpack@arg+1,w,c
  6770  002B5A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6771  002B5C  0EFF               	movlw	255
  6772  002B5E  1415               	andwf	___ftpack@arg+2,w,c
  6773  002B60  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6774  002B62  5018               	movf	??___ftpack,w,c
  6775  002B64  1019               	iorwf	??___ftpack+1,w,c
  6776  002B66  101A               	iorwf	??___ftpack+2,w,c
  6777  002B68  B4D8               	btfsc	status,2,c
  6778  002B6A  D006               	goto	l2006
  6779  002B6C  D7E6               	goto	l1998
  6780  002B6E                     l2004:
  6781  002B6E  0616               	decf	___ftpack@exp,f,c
  6782  002B70  90D8               	bcf	status,0,c
  6783  002B72  3613               	rlcf	___ftpack@arg,f,c
  6784  002B74  3614               	rlcf	___ftpack@arg+1,f,c
  6785  002B76  3615               	rlcf	___ftpack@arg+2,f,c
  6786  002B78                     l2006:
  6787  002B78  BE14               	btfsc	___ftpack@arg+1,7,c
  6788  002B7A  D003               	goto	l541
  6789  002B7C  0E02               	movlw	2
  6790  002B7E  6016               	cpfslt	___ftpack@exp,c
  6791  002B80  D7F6               	goto	l2004
  6792  002B82                     l541:
  6793  002B82  A016               	btfss	___ftpack@exp,0,c
  6794  002B84  9E14               	bcf	___ftpack@arg+1,7,c
  6795  002B86  90D8               	bcf	status,0,c
  6796  002B88  3216               	rrcf	___ftpack@exp,f,c
  6797  002B8A  5016               	movf	___ftpack@exp,w,c
  6798  002B8C  1215               	iorwf	___ftpack@arg+2,f,c
  6799  002B8E  5017               	movf	___ftpack@sign,w,c
  6800  002B90  A4D8               	btfss	status,2,c
  6801  002B92  8E15               	bsf	___ftpack@arg+2,7,c
  6802  002B94  C013  F013         	movff	___ftpack@arg,?___ftpack
  6803  002B98  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  6804  002B9C  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  6805  002BA0  0012               	return	
  6806  002BA2                     __end_of___ftpack:
  6807                           	opt stack 0
  6808                           tblptru	equ	0xFF8
  6809                           tblptrh	equ	0xFF7
  6810                           tblptrl	equ	0xFF6
  6811                           tablat	equ	0xFF5
  6812                           prodh	equ	0xFF4
  6813                           prodl	equ	0xFF3
  6814                           intcon	equ	0xFF2
  6815                           postinc0	equ	0xFEE
  6816                           wreg	equ	0xFE8
  6817                           postdec1	equ	0xFE5
  6818                           fsr1l	equ	0xFE1
  6819                           postinc2	equ	0xFDE
  6820                           postdec2	equ	0xFDD
  6821                           plusw2	equ	0xFDB
  6822                           fsr2h	equ	0xFDA
  6823                           fsr2l	equ	0xFD9
  6824                           status	equ	0xFD8
  6825                           
  6826 ;; *************** function _LCDinit *****************
  6827 ;; Defined at:
  6828 ;;		line 60 in file "lcd.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;		None
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;		None
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  1    wreg      void 
  6835 ;; Registers used:
  6836 ;;		wreg, status,2, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;Total ram usage:        1 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    2
  6849 ;; This function calls:
  6850 ;;		_LCDcheckBF
  6851 ;;		_LCDcmd
  6852 ;; This function is called by:
  6853 ;;		_main
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text28
  6858  002A2E                     __ptext28:
  6859                           	opt stack 0
  6860  002A2E                     _LCDinit:
  6861                           	opt stack 28
  6862                           
  6863                           ;lcd.c: 63: TRISA = 0;
  6864                           
  6865                           ;incstack = 0
  6866  002A2E  0E00               	movlw	0
  6867  002A30  6E92               	movwf	3986,c	;volatile
  6868                           
  6869                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  6870  002A32  9096               	bcf	3990,0,c	;volatile
  6871                           
  6872                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  6873  002A34  9296               	bcf	3990,1,c	;volatile
  6874                           
  6875                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  6876  002A36  9496               	bcf	3990,2,c	;volatile
  6877                           
  6878                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  6879  002A38  908D               	bcf	3981,0,c	;volatile
  6880                           
  6881                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  6882  002A3A  928D               	bcf	3981,1,c	;volatile
  6883                           
  6884                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  6885  002A3C  848D               	bsf	3981,2,c	;volatile
  6886                           
  6887                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  6888  002A3E  0E21               	movlw	33
  6889  002A40  6E14               	movwf	??_LCDinit& (0+255),c
  6890  002A42  0E76               	movlw	118
  6891  002A44                     u3227:
  6892  002A44  2EE8               	decfsz	wreg,f,c
  6893  002A46  D7FE               	goto	u3227
  6894  002A48  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6895  002A4A  D7FC               	goto	u3227
  6896  002A4C  D000               	nop2	
  6897                           
  6898                           ;lcd.c: 74: LCDcmd(0b00110000);
  6899  002A4E  0E30               	movlw	48
  6900  002A50  ECEE  F018         	call	_LCDcmd
  6901                           
  6902                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  6903  002A54  0E27               	movlw	39
  6904  002A56  6E14               	movwf	??_LCDinit& (0+255),c
  6905  002A58  0EF5               	movlw	245
  6906  002A5A                     u3237:
  6907  002A5A  2EE8               	decfsz	wreg,f,c
  6908  002A5C  D7FE               	goto	u3237
  6909  002A5E  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6910  002A60  D7FC               	goto	u3237
  6911  002A62  F000               	nop	
  6912                           
  6913                           ;lcd.c: 76: LCDcmd(0b00110000);
  6914  002A64  0E30               	movlw	48
  6915  002A66  ECEE  F018         	call	_LCDcmd
  6916                           
  6917                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  6918  002A6A  0E27               	movlw	39
  6919  002A6C  6E14               	movwf	??_LCDinit& (0+255),c
  6920  002A6E  0EF5               	movlw	245
  6921  002A70                     u3247:
  6922  002A70  2EE8               	decfsz	wreg,f,c
  6923  002A72  D7FE               	goto	u3247
  6924  002A74  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6925  002A76  D7FC               	goto	u3247
  6926  002A78  F000               	nop	
  6927                           
  6928                           ;lcd.c: 78: LCDcmd(0b00110000);
  6929  002A7A  0E30               	movlw	48
  6930  002A7C  ECEE  F018         	call	_LCDcmd
  6931                           
  6932                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  6933  002A80  0E27               	movlw	39
  6934  002A82  6E14               	movwf	??_LCDinit& (0+255),c
  6935  002A84  0EF5               	movlw	245
  6936  002A86                     u3257:
  6937  002A86  2EE8               	decfsz	wreg,f,c
  6938  002A88  D7FE               	goto	u3257
  6939  002A8A  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6940  002A8C  D7FC               	goto	u3257
  6941  002A8E  F000               	nop	
  6942                           
  6943                           ;lcd.c: 80: LCDcmd(0b00111000);
  6944  002A90  0E38               	movlw	56
  6945  002A92  ECEE  F018         	call	_LCDcmd
  6946                           
  6947                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  6948  002A96  0E27               	movlw	39
  6949  002A98  6E14               	movwf	??_LCDinit& (0+255),c
  6950  002A9A  0EF5               	movlw	245
  6951  002A9C                     u3267:
  6952  002A9C  2EE8               	decfsz	wreg,f,c
  6953  002A9E  D7FE               	goto	u3267
  6954  002AA0  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6955  002AA2  D7FC               	goto	u3267
  6956  002AA4  F000               	nop	
  6957                           
  6958                           ;lcd.c: 82: LCDcmd(0b00001000);
  6959  002AA6  0E08               	movlw	8
  6960  002AA8  ECEE  F018         	call	_LCDcmd
  6961                           
  6962                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  6963  002AAC  0E27               	movlw	39
  6964  002AAE  6E14               	movwf	??_LCDinit& (0+255),c
  6965  002AB0  0EF5               	movlw	245
  6966  002AB2                     u3277:
  6967  002AB2  2EE8               	decfsz	wreg,f,c
  6968  002AB4  D7FE               	goto	u3277
  6969  002AB6  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6970  002AB8  D7FC               	goto	u3277
  6971  002ABA  F000               	nop	
  6972                           
  6973                           ;lcd.c: 84: LCDcmd(0b00000001);
  6974  002ABC  0E01               	movlw	1
  6975  002ABE  ECEE  F018         	call	_LCDcmd
  6976                           
  6977                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  6978  002AC2  0E27               	movlw	39
  6979  002AC4  6E14               	movwf	??_LCDinit& (0+255),c
  6980  002AC6  0EF5               	movlw	245
  6981  002AC8                     u3287:
  6982  002AC8  2EE8               	decfsz	wreg,f,c
  6983  002ACA  D7FE               	goto	u3287
  6984  002ACC  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6985  002ACE  D7FC               	goto	u3287
  6986  002AD0  F000               	nop	
  6987                           
  6988                           ;lcd.c: 86: LCDcmd(0b00000110);
  6989  002AD2  0E06               	movlw	6
  6990  002AD4  ECEE  F018         	call	_LCDcmd
  6991                           
  6992                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  6993  002AD8  0E27               	movlw	39
  6994  002ADA  6E14               	movwf	??_LCDinit& (0+255),c
  6995  002ADC  0EF5               	movlw	245
  6996  002ADE                     u3297:
  6997  002ADE  2EE8               	decfsz	wreg,f,c
  6998  002AE0  D7FE               	goto	u3297
  6999  002AE2  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7000  002AE4  D7FC               	goto	u3297
  7001  002AE6  F000               	nop	
  7002                           
  7003                           ;lcd.c: 90: LCDcmd(0b00001111);
  7004  002AE8  0E0F               	movlw	15
  7005  002AEA  ECEE  F018         	call	_LCDcmd
  7006                           
  7007                           ;lcd.c: 91: LCDcheckBF();
  7008  002AEE  ECCB  F018         	call	_LCDcheckBF	;wreg free
  7009  002AF2  0012               	return		;funcret
  7010  002AF4                     __end_of_LCDinit:
  7011                           	opt stack 0
  7012                           tblptru	equ	0xFF8
  7013                           tblptrh	equ	0xFF7
  7014                           tblptrl	equ	0xFF6
  7015                           tablat	equ	0xFF5
  7016                           prodh	equ	0xFF4
  7017                           prodl	equ	0xFF3
  7018                           intcon	equ	0xFF2
  7019                           postinc0	equ	0xFEE
  7020                           wreg	equ	0xFE8
  7021                           postdec1	equ	0xFE5
  7022                           fsr1l	equ	0xFE1
  7023                           postinc2	equ	0xFDE
  7024                           postdec2	equ	0xFDD
  7025                           plusw2	equ	0xFDB
  7026                           fsr2h	equ	0xFDA
  7027                           fsr2l	equ	0xFD9
  7028                           status	equ	0xFD8
  7029                           
  7030 ;; *************** function _LCDgotoLineTwo *****************
  7031 ;; Defined at:
  7032 ;;		line 142 in file "lcd.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;		None
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;		None
  7037 ;; Return value:  Size  Location     Type
  7038 ;;                  1    wreg      void 
  7039 ;; Registers used:
  7040 ;;		wreg, cstack
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;Total ram usage:        0 bytes
  7051 ;; Hardware stack levels used:    1
  7052 ;; Hardware stack levels required when called:    2
  7053 ;; This function calls:
  7054 ;;		_LCDcheckBF
  7055 ;;		_LCDcmd
  7056 ;; This function is called by:
  7057 ;;		_main
  7058 ;;		_LCDputs
  7059 ;;		_LCDwriteLineTwo
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text29
  7064  0031BC                     __ptext29:
  7065                           	opt stack 0
  7066  0031BC                     _LCDgotoLineTwo:
  7067                           	opt stack 28
  7068                           
  7069                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  7070                           
  7071                           ;incstack = 0
  7072  0031BC  908D               	bcf	3981,0,c	;volatile
  7073                           
  7074                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  7075  0031BE  928D               	bcf	3981,1,c	;volatile
  7076                           
  7077                           ;lcd.c: 146: LCDcmd(0b11000000);
  7078  0031C0  0EC0               	movlw	192
  7079  0031C2  ECEE  F018         	call	_LCDcmd
  7080                           
  7081                           ;lcd.c: 147: LCDcheckBF();
  7082  0031C6  ECCB  F018         	call	_LCDcheckBF	;wreg free
  7083  0031CA  0012               	return		;funcret
  7084  0031CC                     __end_of_LCDgotoLineTwo:
  7085                           	opt stack 0
  7086                           tblptru	equ	0xFF8
  7087                           tblptrh	equ	0xFF7
  7088                           tblptrl	equ	0xFF6
  7089                           tablat	equ	0xFF5
  7090                           prodh	equ	0xFF4
  7091                           prodl	equ	0xFF3
  7092                           intcon	equ	0xFF2
  7093                           postinc0	equ	0xFEE
  7094                           wreg	equ	0xFE8
  7095                           postdec1	equ	0xFE5
  7096                           fsr1l	equ	0xFE1
  7097                           postinc2	equ	0xFDE
  7098                           postdec2	equ	0xFDD
  7099                           plusw2	equ	0xFDB
  7100                           fsr2h	equ	0xFDA
  7101                           fsr2l	equ	0xFD9
  7102                           status	equ	0xFD8
  7103                           
  7104 ;; *************** function _LCDclear *****************
  7105 ;; Defined at:
  7106 ;;		line 126 in file "lcd.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;		None
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;		None
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;Total ram usage:        0 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    2
  7127 ;; This function calls:
  7128 ;;		_LCDcheckBF
  7129 ;;		_LCDcmd
  7130 ;; This function is called by:
  7131 ;;		_main
  7132 ;;		_LCDputs
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text30
  7137  0031CC                     __ptext30:
  7138                           	opt stack 0
  7139  0031CC                     _LCDclear:
  7140                           	opt stack 28
  7141                           
  7142                           ;lcd.c: 128: LATEbits.LATE0 = 0;
  7143                           
  7144                           ;incstack = 0
  7145  0031CC  908D               	bcf	3981,0,c	;volatile
  7146                           
  7147                           ;lcd.c: 129: LATEbits.LATE1 = 0;
  7148  0031CE  928D               	bcf	3981,1,c	;volatile
  7149                           
  7150                           ;lcd.c: 130: LCDcmd(0b00000001);
  7151  0031D0  0E01               	movlw	1
  7152  0031D2  ECEE  F018         	call	_LCDcmd
  7153                           
  7154                           ;lcd.c: 131: LCDcheckBF();
  7155  0031D6  ECCB  F018         	call	_LCDcheckBF	;wreg free
  7156  0031DA  0012               	return		;funcret
  7157  0031DC                     __end_of_LCDclear:
  7158                           	opt stack 0
  7159                           tblptru	equ	0xFF8
  7160                           tblptrh	equ	0xFF7
  7161                           tblptrl	equ	0xFF6
  7162                           tablat	equ	0xFF5
  7163                           prodh	equ	0xFF4
  7164                           prodl	equ	0xFF3
  7165                           intcon	equ	0xFF2
  7166                           postinc0	equ	0xFEE
  7167                           wreg	equ	0xFE8
  7168                           postdec1	equ	0xFE5
  7169                           fsr1l	equ	0xFE1
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           plusw2	equ	0xFDB
  7173                           fsr2h	equ	0xFDA
  7174                           fsr2l	equ	0xFD9
  7175                           status	equ	0xFD8
  7176                           
  7177 ;; *************** function _LCDcmd *****************
  7178 ;; Defined at:
  7179 ;;		line 94 in file "lcd.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;  command         1    wreg     unsigned char 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  command         1   18[COMRAM] unsigned char 
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      void 
  7186 ;; Registers used:
  7187 ;;		wreg
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;Total ram usage:        1 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    1
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_LCDinit
  7204 ;;		_LCDwrite
  7205 ;;		_LCDclear
  7206 ;;		_LCDgotoLineTwo
  7207 ;;		_LCDgotoLineOne
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text31
  7212  0031DC                     __ptext31:
  7213                           	opt stack 0
  7214  0031DC                     _LCDcmd:
  7215                           	opt stack 26
  7216                           
  7217                           ;incstack = 0
  7218                           ;LCDcmd@command stored from wreg
  7219  0031DC  6E13               	movwf	LCDcmd@command,c
  7220                           
  7221                           ;lcd.c: 96: LATA = command;
  7222  0031DE  C013  FF89         	movff	LCDcmd@command,3977	;volatile
  7223                           
  7224                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  7225  0031E2  948D               	bcf	3981,2,c	;volatile
  7226                           
  7227                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  7228  0031E4  848D               	bsf	3981,2,c	;volatile
  7229  0031E6  0012               	return		;funcret
  7230  0031E8                     __end_of_LCDcmd:
  7231                           	opt stack 0
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           intcon	equ	0xFF2
  7239                           postinc0	equ	0xFEE
  7240                           wreg	equ	0xFE8
  7241                           postdec1	equ	0xFE5
  7242                           fsr1l	equ	0xFE1
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           plusw2	equ	0xFDB
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function _LCDcheckBF *****************
  7251 ;; Defined at:
  7252 ;;		line 101 in file "lcd.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;		None
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;		None
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      void 
  7259 ;; Registers used:
  7260 ;;		None
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;Total ram usage:        0 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    1
  7273 ;; This function calls:
  7274 ;;		Nothing
  7275 ;; This function is called by:
  7276 ;;		_LCDinit
  7277 ;;		_LCDwrite
  7278 ;;		_LCDclear
  7279 ;;		_LCDgotoLineTwo
  7280 ;;		_LCDgotoLineOne
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text32
  7285  003196                     __ptext32:
  7286                           	opt stack 0
  7287  003196                     _LCDcheckBF:
  7288                           	opt stack 26
  7289                           
  7290                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  7291                           
  7292                           ;incstack = 0
  7293  003196  8E92               	bsf	3986,7,c	;volatile
  7294                           
  7295                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  7296  003198  908D               	bcf	3981,0,c	;volatile
  7297                           
  7298                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  7299  00319A  828D               	bsf	3981,1,c	;volatile
  7300  00319C                     l242:
  7301                           
  7302                           ;lcd.c: 110: {
  7303                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  7304  00319C  948D               	bcf	3981,2,c	;volatile
  7305                           
  7306                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  7307  00319E  848D               	bsf	3981,2,c	;volatile
  7308  0031A0  BE80               	btfsc	3968,7,c	;volatile
  7309  0031A2  D7FC               	goto	l242
  7310                           
  7311                           ;lcd.c: 113: }
  7312                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  7313  0031A4  848D               	bsf	3981,2,c	;volatile
  7314                           
  7315                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  7316  0031A6  9E92               	bcf	3986,7,c	;volatile
  7317  0031A8  0012               	return		;funcret
  7318  0031AA                     __end_of_LCDcheckBF:
  7319                           	opt stack 0
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           intcon	equ	0xFF2
  7327                           postinc0	equ	0xFEE
  7328                           wreg	equ	0xFE8
  7329                           postdec1	equ	0xFE5
  7330                           fsr1l	equ	0xFE1
  7331                           postinc2	equ	0xFDE
  7332                           postdec2	equ	0xFDD
  7333                           plusw2	equ	0xFDB
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338 ;; *************** function _ISR *****************
  7339 ;; Defined at:
  7340 ;;		line 271 in file "main.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  dummy           1   17[COMRAM] unsigned char 
  7345 ;;  dummy           1   16[COMRAM] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  1    wreg      void 
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;Total ram usage:       18 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; This function calls:
  7362 ;;		Nothing
  7363 ;; This function is called by:
  7364 ;;		Interrupt level 2
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           	psect	intcode
  7369  000008                     __pintcode:
  7370                           	opt stack 0
  7371  000008                     _ISR:
  7372                           	opt stack 25
  7373                           
  7374                           ;incstack = 0
  7375  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7376  00000A  CFFA F003          	movff	pclath,??_ISR+2
  7377  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  7378  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  7379  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  7380  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  7381  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  7382  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  7383  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  7384  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  7385  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  7386  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  7387  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  7388  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  7389  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  7390                           
  7391                           ;main.c: 274: if (CCP2IE && CCP2IF)
  7392  000042  B0A0               	btfsc	4000,0,c	;volatile
  7393  000044  A0A1               	btfss	4001,0,c	;volatile
  7394  000046  D01E               	goto	i2l156
  7395                           
  7396                           ;main.c: 275: {
  7397                           ;main.c: 277: if(LATDbits.LATD1 == 1)
  7398  000048  A28C               	btfss	3980,1,c	;volatile
  7399  00004A  D010               	goto	i2l157
  7400                           
  7401                           ;main.c: 278: {
  7402                           ;main.c: 279: LATDbits.LATD1 = 0;
  7403  00004C  928C               	bcf	3980,1,c	;volatile
  7404                           
  7405                           ;main.c: 280: CCPR2 = 8000 - CCPR2;
  7406  00004E  CF67 F001          	movff	3943,??_ISR	;volatile
  7407  000052  CF68 F002          	movff	3944,??_ISR+1	;volatile
  7408  000056  1E01               	comf	??_ISR,f,c
  7409  000058  1E02               	comf	??_ISR+1,f,c
  7410  00005A  4A01               	infsnz	??_ISR,f,c
  7411  00005C  2A02               	incf	??_ISR+1,f,c
  7412  00005E  0E40               	movlw	64
  7413  000060  2401               	addwf	??_ISR,w,c
  7414  000062  6E67               	movwf	3943,c	;volatile
  7415  000064  0E1F               	movlw	31
  7416  000066  2002               	addwfc	??_ISR+1,w,c
  7417  000068  6E68               	movwf	3944,c	;volatile
  7418                           
  7419                           ;main.c: 281: }
  7420  00006A  D005               	goto	i2l2902
  7421  00006C                     i2l157:
  7422                           
  7423                           ;main.c: 282: else
  7424                           ;main.c: 283: {
  7425                           ;main.c: 284: LATDbits.LATD1 = 1;
  7426  00006C  828C               	bsf	3980,1,c	;volatile
  7427                           
  7428                           ;main.c: 285: CCPR2 = leftWheelCommandedPW;
  7429  00006E  C047  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  7430  000072  C048  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  7431  000076                     i2l2902:
  7432                           
  7433                           ;main.c: 286: }
  7434                           ;main.c: 287: TMR5 = 0;
  7435  000076  0E00               	movlw	0
  7436  000078  010F               	movlb	15	; () banked
  7437  00007A  6F50               	movwf	80,b	;volatile
  7438  00007C  0E00               	movlw	0
  7439  00007E  6F4F               	movwf	79,b	;volatile
  7440                           
  7441                           ; BSR set to: 15
  7442                           ;main.c: 288: CCP2IF = 0;
  7443  000080  90A1               	bcf	4001,0,c	;volatile
  7444                           
  7445                           ; BSR set to: 15
  7446                           ;main.c: 289: return;
  7447  000082  D047               	goto	i2l159
  7448  000084                     i2l156:
  7449                           
  7450                           ;main.c: 290: }
  7451                           ;main.c: 294: if (CCP3IE && CCP3IF)
  7452  000084  B07A               	btfsc	3962,0,c	;volatile
  7453  000086  A07B               	btfss	3963,0,c	;volatile
  7454  000088  D01F               	goto	i2l160
  7455                           
  7456                           ;main.c: 295: {
  7457                           ;main.c: 297: if(LATDbits.LATD0 == 1)
  7458  00008A  A08C               	btfss	3980,0,c	;volatile
  7459  00008C  D012               	goto	i2l161
  7460                           
  7461                           ;main.c: 298: {
  7462                           ;main.c: 299: LATDbits.LATD0 = 0;
  7463  00008E  908C               	bcf	3980,0,c	;volatile
  7464                           
  7465                           ;main.c: 300: CCPR3 = 8000 - CCPR3;
  7466  000090  CF5E F001          	movff	3934,??_ISR	;volatile
  7467  000094  CF5F F002          	movff	3935,??_ISR+1	;volatile
  7468  000098  1E01               	comf	??_ISR,f,c
  7469  00009A  1E02               	comf	??_ISR+1,f,c
  7470  00009C  4A01               	infsnz	??_ISR,f,c
  7471  00009E  2A02               	incf	??_ISR+1,f,c
  7472  0000A0  0E40               	movlw	64
  7473  0000A2  2401               	addwf	??_ISR,w,c
  7474  0000A4  010F               	movlb	15	; () banked
  7475  0000A6  6F5E               	movwf	94,b	;volatile
  7476  0000A8  0E1F               	movlw	31
  7477  0000AA  2002               	addwfc	??_ISR+1,w,c
  7478  0000AC  010F               	movlb	15	; () banked
  7479  0000AE  6F5F               	movwf	95,b	;volatile
  7480                           
  7481                           ;main.c: 301: }
  7482  0000B0  D005               	goto	i2l162
  7483  0000B2                     i2l161:
  7484                           
  7485                           ;main.c: 302: else
  7486                           ;main.c: 303: {
  7487                           ;main.c: 304: LATDbits.LATD0 = 1;
  7488  0000B2  808C               	bsf	3980,0,c	;volatile
  7489                           
  7490                           ;main.c: 305: CCPR3 = rightWheelCommandedPW;
  7491  0000B4  C049  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  7492  0000B8  C04A  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  7493  0000BC                     i2l162:
  7494                           
  7495                           ;main.c: 306: }
  7496                           ;main.c: 307: CCP3IF = 0;
  7497  0000BC  907B               	bcf	3963,0,c	;volatile
  7498                           
  7499                           ;main.c: 308: TMR1 = 0;
  7500  0000BE  0E00               	movlw	0
  7501  0000C0  6ECF               	movwf	4047,c	;volatile
  7502  0000C2  0E00               	movlw	0
  7503  0000C4  6ECE               	movwf	4046,c	;volatile
  7504                           
  7505                           ;main.c: 310: return;
  7506  0000C6  D025               	goto	i2l159
  7507  0000C8                     i2l160:
  7508                           
  7509                           ;main.c: 313: }
  7510                           ;main.c: 318: if(C1IF && C1IE)
  7511  0000C8  BCA1               	btfsc	4001,6,c	;volatile
  7512  0000CA  ACA0               	btfss	4000,6,c	;volatile
  7513  0000CC  D00A               	goto	i2l2928
  7514                           
  7515                           ;main.c: 319: {
  7516                           ;main.c: 320: leftWheelCount++;
  7517  0000CE  0E01               	movlw	1
  7518  0000D0  0100               	movlb	0	; () banked
  7519  0000D2  27CA               	addwf	_leftWheelCount& (0+255),f,b
  7520  0000D4  0E00               	movlw	0
  7521  0000D6  23CB               	addwfc	(_leftWheelCount+1)& (0+255),f,b
  7522  0000D8  23CC               	addwfc	(_leftWheelCount+2)& (0+255),f,b
  7523  0000DA  23CD               	addwfc	(_leftWheelCount+3)& (0+255),f,b
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;main.c: 321: char dummy = CM1CON0;
  7527  0000DC  CF79 F011          	movff	3961,ISR@dummy	;volatile
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;main.c: 322: C1IF = 0;
  7531  0000E0  9CA1               	bcf	4001,6,c	;volatile
  7532  0000E2                     i2l2928:
  7533                           
  7534                           ;main.c: 323: }
  7535                           ;main.c: 324: if(C2IF && C2IE)
  7536  0000E2  BAA1               	btfsc	4001,5,c	;volatile
  7537  0000E4  AAA0               	btfss	4000,5,c	;volatile
  7538  0000E6  D00A               	goto	i2l2938
  7539                           
  7540                           ;main.c: 325: {
  7541                           ;main.c: 326: rightWheelCount++;
  7542  0000E8  0E01               	movlw	1
  7543  0000EA  0100               	movlb	0	; () banked
  7544  0000EC  27CE               	addwf	_rightWheelCount& (0+255),f,b
  7545  0000EE  0E00               	movlw	0
  7546  0000F0  23CF               	addwfc	(_rightWheelCount+1)& (0+255),f,b
  7547  0000F2  23D0               	addwfc	(_rightWheelCount+2)& (0+255),f,b
  7548  0000F4  23D1               	addwfc	(_rightWheelCount+3)& (0+255),f,b
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;main.c: 328: char dummy = CM2CON0;
  7552  0000F6  CF78 F012          	movff	3960,ISR@dummy_1019	;volatile
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;main.c: 329: C2IF = 0;
  7556  0000FA  9AA1               	bcf	4001,5,c	;volatile
  7557  0000FC                     i2l2938:
  7558                           
  7559                           ;main.c: 330: }
  7560                           ;main.c: 335: if (TMR2IE && TMR2IF)
  7561  0000FC  B29D               	btfsc	3997,1,c	;volatile
  7562  0000FE  A29E               	btfss	3998,1,c	;volatile
  7563  000100  D008               	goto	i2l159
  7564                           
  7565                           ;main.c: 336: {
  7566                           ;main.c: 337: elapsedMillis++;
  7567  000102  0E01               	movlw	1
  7568  000104  0100               	movlb	0	; () banked
  7569  000106  27C6               	addwf	_elapsedMillis& (0+255),f,b
  7570  000108  0E00               	movlw	0
  7571  00010A  23C7               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  7572  00010C  23C8               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  7573  00010E  23C9               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;main.c: 338: PIR1bits.TMR2IF = 0;
  7577  000110  929E               	bcf	3998,1,c	;volatile
  7578  000112                     i2l159:
  7579  000112  C010  FFF5         	movff	??_ISR+15,tablat
  7580  000116  C00F  FFF8         	movff	??_ISR+14,tblptru
  7581  00011A  C00E  FFF7         	movff	??_ISR+13,tblptrh
  7582  00011E  C00D  FFF6         	movff	??_ISR+12,tblptrl
  7583  000122  C00C  FFF4         	movff	??_ISR+11,prodh
  7584  000126  C00B  FFF3         	movff	??_ISR+10,prodl
  7585  00012A  C00A  FFDA         	movff	??_ISR+9,fsr2h
  7586  00012E  C009  FFD9         	movff	??_ISR+8,fsr2l
  7587  000132  C008  FFE2         	movff	??_ISR+7,fsr1h
  7588  000136  C007  FFE1         	movff	??_ISR+6,fsr1l
  7589  00013A  C006  FFEA         	movff	??_ISR+5,fsr0h
  7590  00013E  C005  FFE9         	movff	??_ISR+4,fsr0l
  7591  000142  C004  FFFB         	movff	??_ISR+3,pclatu
  7592  000146  C003  FFFA         	movff	??_ISR+2,pclath
  7593  00014A  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7594  00014C  0011               	retfie		f
  7595  00014E                     __end_of_ISR:
  7596                           	opt stack 0
  7597                           pclatu	equ	0xFFB
  7598                           pclath	equ	0xFFA
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           postinc0	equ	0xFEE
  7607                           fsr0h	equ	0xFEA
  7608                           fsr0l	equ	0xFE9
  7609                           wreg	equ	0xFE8
  7610                           postdec1	equ	0xFE5
  7611                           fsr1h	equ	0xFE2
  7612                           fsr1l	equ	0xFE1
  7613                           postinc2	equ	0xFDE
  7614                           postdec2	equ	0xFDD
  7615                           plusw2	equ	0xFDB
  7616                           fsr2h	equ	0xFDA
  7617                           fsr2l	equ	0xFD9
  7618                           status	equ	0xFD8
  7619                           pclatu	equ	0xFFB
  7620                           pclath	equ	0xFFA
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           postinc0	equ	0xFEE
  7629                           fsr0h	equ	0xFEA
  7630                           fsr0l	equ	0xFE9
  7631                           wreg	equ	0xFE8
  7632                           postdec1	equ	0xFE5
  7633                           fsr1h	equ	0xFE2
  7634                           fsr1l	equ	0xFE1
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           plusw2	equ	0xFDB
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642                           	psect	rparam
  7643  0000                     pclatu	equ	0xFFB
  7644                           pclath	equ	0xFFA
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           postinc0	equ	0xFEE
  7653                           fsr0h	equ	0xFEA
  7654                           fsr0l	equ	0xFE9
  7655                           wreg	equ	0xFE8
  7656                           postdec1	equ	0xFE5
  7657                           fsr1h	equ	0xFE2
  7658                           fsr1l	equ	0xFE1
  7659                           postinc2	equ	0xFDE
  7660                           postdec2	equ	0xFDD
  7661                           plusw2	equ	0xFDB
  7662                           fsr2h	equ	0xFDA
  7663                           fsr2l	equ	0xFD9
  7664                           status	equ	0xFD8
  7665                           
  7666                           	psect	temp
  7667  00004D                     btemp:
  7668                           	opt stack 0
  7669  00004D                     	ds	1
  7670  0000                     int$flags	set	btemp
  7671                           pclatu	equ	0xFFB
  7672                           pclath	equ	0xFFA
  7673                           tblptru	equ	0xFF8
  7674                           tblptrh	equ	0xFF7
  7675                           tblptrl	equ	0xFF6
  7676                           tablat	equ	0xFF5
  7677                           prodh	equ	0xFF4
  7678                           prodl	equ	0xFF3
  7679                           intcon	equ	0xFF2
  7680                           postinc0	equ	0xFEE
  7681                           fsr0h	equ	0xFEA
  7682                           fsr0l	equ	0xFE9
  7683                           wreg	equ	0xFE8
  7684                           postdec1	equ	0xFE5
  7685                           fsr1h	equ	0xFE2
  7686                           fsr1l	equ	0xFE1
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           plusw2	equ	0xFDB
  7690                           fsr2h	equ	0xFDA
  7691                           fsr2l	equ	0xFD9
  7692                           status	equ	0xFD8


Data Sizes:
    Strings     30
    Constant    10
    Data        12
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     70      76
    BANK0           160    102     133
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[10]), STR_2(CODE[9]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@speedCompensation	PTR int  size(2) Largest target is 2
		 -> speedCompensation(BANK0[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@rightWheelCommandedSpeed(BANK0[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@leftWheelCommandedSpeed(BANK0[2]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    ___awtoft->___ftpack
    _sqrt->___ftsub
    ___ftsub->___ftadd
    ___ftmul->___lltoft
    ___ftge->___ftmul
    _trunc->___altoft
    ___fttol->___ftsub
    ___ftneg->___ftadd
    ___ftadd->___ftmul
    ___lltoft->___ftpack
    ___ftdiv->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd
    _LCDclear->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_excerciseControl
    _excerciseControl->_round
    _wheelVelocity->___fttol
    _round->_trunc
    _trunc->___altoft
    ___fttol->_sqrt
    ___altoft->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   71162
                                             78 BANK0     24    24      0
                           _LCDclear
                     _LCDgotoLineTwo
                            _LCDinit
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
               _configureComparators
                    _configureTimers
                   _excerciseControl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              28    22      6    1826
                                             30 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             20 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _excerciseControl                                    31    31      0   58077
                                             56 BANK0     22    22      0
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lltoft
                   _limitWheelSpeeds
                              _round
                               _sqrt
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (2) _wheelVelocity                                        8     4      4   16577
                                             34 BANK0      8     4      4
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2687
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   10423
                                              0 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4923
                                             62 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4112
                                             35 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             50 COMRAM     9     3      6
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    8856
                                             50 BANK0      6     3      3
                            ___ftadd
                             ___ftge (ARG)
                            ___ftmul (ARG)
                            ___ftneg
                           ___lltoft (ARG)
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    3869
                                             42 BANK0      8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     336
                                             18 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     892
                                             19 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2350
                                             68 COMRAM     2     2      0
                                             34 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     219
                                              0 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4370
                                             50 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _limitWheelSpeeds                                     8     2      6     840
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3049
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _configureTimers                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureComparators                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2786
                                             50 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2148
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDclear                                             0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 18    18      0       2
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDcheckBF
     _LCDcmd
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
     ___ftsub (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
     _sqrt (ARG)
       ___ftge
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
   ___lltoft
     ___ftpack
   _configureComparators
   _configureTimers
   _excerciseControl
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftge
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _sqrt (ARG)
         ___ftge
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
     ___lltoft
       ___ftpack
     _limitWheelSpeeds
     _round
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftge (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _trunc (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
             _sqrt (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _sqrt (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
         _frexp (ARG)
     _sqrt
       ___ftge
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     _wheelVelocity
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _sqrt (ARG)
           ___ftge
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     66      85       5       83.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     46      4C       1       80.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D1      12        0.0%
DATA                 0      0      D1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Mon Apr 25 16:20:53 2016

                            ___altoft@exp 0045                             ___altoft@sign 0046  
                     ___wmul@multiplicand 0015                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 003E  
                   _excerciseControl$2070 009E                              ___ftadd@exp2 003D  
                   _excerciseControl$2067 00A1                     _excerciseControl$2068 00A4  
                   _excerciseControl$2069 00A7                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 003C                                       l242 319C  
                                     l196 1858                                       l541 2B82  
                                     l621 3144                                       l564 238E  
                                     l724 305E                                       l734 30A0  
                                     l568 23B8                                       l579 2468  
                                     l588 2484                                       l599 29FC  
                                     l876 21DE                                       l877 21CA  
                            __CFG_CPB$OFF 000000                                       _PR2 000FBB  
                            __CFG_CPD$OFF 000000                                       _ISR 0008  
                             ?_LCDcheckBF 0001                                       wreg 000FE8  
                                    ?_ISR 0001                              ___ftdiv@cntr 003C  
                            ___ftdiv@sign 0041                                      l2002 2B50  
                                    _C1IE 007D06                                      l2004 2B6E  
                                    _C1IF 007D0E                                      l2006 2B78  
                                    l2102 24A0                                      _C2IE 007D05  
                                    l2112 24D0                                      l2040 2C7E  
                                    _C2IF 007D0D                                      l2122 2530  
                                    l2210 28D6                                      l2300 27A6  
                                    l2060 23C6                                      l2140 25C2  
                                    l2220 28FE                                      l2054 239C  
                                    l2038 2C70                                      l2150 25F2  
                                    l2214 28E6                                      l2312 2828  
                                    l2304 27D2                                      l2152 2602  
                                    l2144 25D6                                      l2224 290E  
                                    l2082 2418                                      l2154 260C  
                                    l2402 302C                                      l2308 27FC  
                                    l2084 2422                                      l2076 23F6  
                                    l2260 2D40                                      l2236 30C0  
                                    l2404 3034                                      l2094 2456  
                                    l2086 242C                                      l2158 2628  
                                    l2190 287C                                      l3230 107C  
                                    l3222 102E                                      l2414 3054  
                                    l2406 3038                                      l2430 3096  
                                    l2422 3076                                      l2096 2460  
                                    l2088 2434                                      l2168 2EA8  
                                    l2256 2D10                                      l2248 30FE  
                                    l3208 26A4                                      l3312 1834  
                                    l3224 1044                                      l2424 307E  
                                    l2600 208C                                      l2282 2E30  
                                    l2266 2D6C                                      l3330 192A  
                                    l3322 18B4                                      l3242 11EC  
                                    l2426 3082                                      l2196 28A4  
                                    l3324 18D2                                      l3316 186A  
                                    l3260 13E0                                      l2612 20B8  
                                    l2390 2F74                                      l2286 2E4E  
                                    l3342 1A46                                      l3270 1412  
                                    l3246 1322                                      l3238 10DE  
                                    l2630 211A                                      l2622 20F6  
                                    l2296 277C                                      l3328 18F2  
                                    l3280 1490                                      l3264 13F8  
                                    l3256 13CA                                      l2376 318E  
                                    l2640 217A                                      l2624 20FE  
                                    l3290 1628                                      l3282 14CA  
                                    l3362 1B9E                                      l2634 212C  
                                    l2626 2106                                      l2618 20D2  
                                    l2570 1FB6                                      l2642 2182  
                                    l2812 2970                                      l2388 2F68  
                                    l3348 1AF4                                      l3276 145C  
                                    l2636 2132                                      l3358 1B80  
                                    l3294 175E                                      l3286 151A  
                                    l3278 147A                                      l2566 1FA6  
                                    l2576 1FDE                                      l2818 2998  
                                    l2586 203A                                      l3394 1D46  
                                    l3378 1C2E                                      l2588 2060  
                                    l3388 1CCA                                      l1990 2B04  
                                    l2838 29D6                                      l2598 2088  
                         __end_of_LCDinit 2AF4                                      l1994 2B12  
                                    l1996 2B1C                                      l1998 2B3A  
                                    l2998 2246                                      STR_1 100B  
                                    STR_2 1020                                      STR_3 1016  
                                    u3010 133A                                      u3100 178E  
                                    u3020 1352                                      _LATA 000F89  
                                    u3120 1858                                      u3060 14E0  
                                    u1461 235A                                      u1471 236E  
                                    u3207 13E8                                      u3160 1B0E  
                                    u3217 183C                                      u3090 1776  
                                    u3227 2A44                                      u2451 2958  
                                    u1900 2E40                                      u3237 2A5A  
                                    u1910 276C                                      u3247 2A70  
                                    u2471 2980                                      u1671 250C  
                                    u1760 2ED0                                      u3257 2A86  
                                    u1930 27C2                                      u1690 2556  
                                    u3267 2A9C                                      u1771 2864  
                                    u3277 2AB2                                      u1950 2818  
                                    u3287 2AC8                                      u1695 254C  
                                    u1791 288C                                      u1768 2ED2  
                                    u3297 2ADE                                      u2980 1092  
                                    _TMR1 000FCE                                      _TMR5 000F4F  
            excerciseControl@leftIntegral 00DF                          ?_configureTimers 0001  
                                    _main 1BB8                              ___ftpack@arg 0013  
                            ___ftpack@exp 0016                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 004D  
                                    _sqrt 219C                             __CFG_BORV$190 000000  
                                    pclat 000FFA                           ??_wheelVelocity 0045  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 014E                             __CFG_IESO$OFF 000000  
       excerciseControl@startCircleMillis 00D2                              ___ftmul@cntr 0031  
                            ___param_bank 000010                              ___ftmul@sign 0032  
                                   ??_ISR 0001                              ___fttol@exp1 0081  
                       excerciseControl@i 00AA                              ___fttol@lval 007D  
                        __end_of_LCDclear 31DC                                     ?_main 0001  
                         __end_of___ftadd 24F6                                     _CCPR2 000F67  
                                   _CCPR3 000F5E                           __end_of___ftdiv 2A2E  
                         __end_of___ftneg 3152                                     ?_sqrt 0060  
                         __end_of___ftmul 2948                                     _T1CON 000FCD  
                         __end_of___ftsub 30EA                           __end_of___fttol 263A  
                                   _T2CON 000FBA                                     _T5CON 000F4E  
                         __end_of___lwdiv 3068                           __end_of___lwmod 30AA  
                                   i2l160 00C8                                     i2l161 00B2  
                                   i2l162 00BC                                     i2l156 0084  
                                   i2l157 006C                                     i2l159 0112  
                        __end_of_LCDwrite 31BC                                     _TRISA 000F92  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0023                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                __end_of_limitWheelSpeeds 2854                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 001E  
                         __end_of_dpowers 100B                                     _event 00DA  
                                   _frexp 2E8C                                     _errno 004B  
                         __end_of_isdigit 3196                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 0017                                     _putch 31E8  
                                   _round 2D70                                     _trunc 2DFE  
                                   tablat 000FF5                                     plusw2 000FDB  
                                   sqrt@a 0060                                     sqrt@i 006C  
                                   sqrt@q 006D                                     sqrt@x 0070  
                                   sqrt@z 0069                                     status 000FD8  
                          __CFG_HFOFST$ON 000000                       __size_of_LCDcheckBF 0014  
                         __initialization 2F04                              __end_of_main 1F9C  
                            __end_of_sqrt 234A                                    ??_main 00AE  
                           ___fttol@sign1 007C                                    ??_sqrt 0063  
                           ISR@dummy_1019 0012                             __activetblptr 000002  
                               ??_LCDinit 0014                       main@speedLastMillis 00C2  
                      wheelVelocity@speed 0082                        wheelVelocity@wheel 0089  
            __end_of_configureComparators 3016                                    _CCP2IE 007D00  
                                  _CCP2IF 007D08                                    _CCP3IE 007BD0  
                                  _CCP3IF 007BD8                                    ?_frexp 0013  
                        __end_of___altoft 2CE0                          __end_of___awtoft 3122  
                                  ?_putch 0001                                    _ANSELD 000F3B  
                        __end_of___ftpack 2BA2                                    ?_round 0092  
                                  ?_trunc 008A                          __end_of___lltoft 2FBE  
                          __CFG_WDTEN$OFF 000000                                    i2l2902 0076  
                                  i2l2928 00E2                                    i2l2938 00FC  
                                  _LCDcmd 31DC                                    _TMR2IE 007CE9  
                                  _TMR2IF 007CF1                                    _TMR1ON 007E68  
                                  _TMR5ON 007A70                         ?_excerciseControl 0001  
                          __CFG_PWRTEN$ON 000000                            __CFG_XINST$OFF 000000  
                      ??_excerciseControl 0098                              _CCPTMRS0bits 000F49  
                                  ___ftge 2CE0                                    ___wmul 3152  
                               ??___ftadd 0039                            __CFG_STVREN$ON 000000  
                               ??___ftdiv 0039                                 ??___ftneg 003F  
                               ??___ftmul 002A                                 ??___ftsub 0045  
                               ??___fttol 0077                                 ??___lwdiv 0017  
                               ??___lwmod 001E                            _leftWheelCount 00CA  
                                  clear_0 2F0A                                    _printf 1F9C  
                   ___ftmul@f3_as_product 002E                              __pdataCOMRAM 0047  
                               ??_isdigit 0013                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                                    round@f 0095  
                                  round@x 0092                                    sqrt@og 0066  
                                  trunc@i 008D                     main@controlLastMillis 00B6  
                                  trunc@x 008A         limitWheelSpeeds@speedCompensation 0017  
                              __accesstop 0060                   __end_of__initialization 2F54  
                              ___altoft@c 0082                           __CFG_PBADEN$OFF 000000  
                              ___ftadd@f1 0033                                ___ftadd@f2 0036  
                              ___ftge@ff1 0033                                ___ftge@ff2 0036  
                               ?_LCDclear 0001                             ___rparam_used 000001  
                              ___ftdiv@f1 0033                                ___ftdiv@f2 0036  
                              ___ftdiv@f3 003D                                ___ftneg@f1 0060  
                              ___awtoft@c 001B                   __size_of_LCDgotoLineTwo 0010  
                               ?_LCDwrite 0001                                ___ftmul@f1 0024  
                              ___ftmul@f2 0027                                ___ftsub@f1 003F  
                              ___ftsub@f2 0042                                ___fttol@f1 0073  
                          __pcstackCOMRAM 0001                              __pidataBANK0 31F2  
                              ___lltoft@c 001B                             __end_of_frexp 2F04  
                           __end_of_putch 31F2                             __end_of_round 2DFE  
                           __end_of_trunc 2E8C                              ??_LCDcheckBF 0013  
                                 ??_frexp 0018                                   ??_putch 0015  
                                 ??_round 0047                                   ??_trunc 0047  
                              __pbssBANK0 00C6                                   ?_LCDcmd 0001  
                   _rightWheelCommandedPW 0049                           __CFG_PLLCFG$OFF 000000  
                              ??_LCDclear 0014                                ??_LCDwrite 0014  
                      __end_of_LCDcheckBF 31AA                        __CFG_CCP2MX$PORTB3 000000  
                                 ?___ftge 0033            limitWheelSpeeds@leftWheelSpeed 0013  
                                 ?___wmul 0013                        __CFG_CCP3MX$PORTB5 000000  
                    main@leftCountTracker 00BE                      _configureComparators 2FBE  
                                 _CM1CON0 000F79                                   _CM2CON0 000F78  
                                 _CCP2CON 000F66                                   _CCP3CON 000F5D  
                               ?___altoft 0082                                 ?___awtoft 001B  
                               ?___ftpack 0013                                   ?_printf 001F  
                               ?___lltoft 001B                                   _LCDinit 2A2E  
                       ?_limitWheelSpeeds 0013                        ??_limitWheelSpeeds 0019  
                         __size_of_LCDcmd 000C                                _control_ms 00DD  
                                 __Hparam 0000                     __end_of_wheelVelocity 2750  
                                 __Lparam 0000                  __size_of_configureTimers 00A8  
                         __size_of___ftge 0090                                   ___ftadd 234A  
                   ?_configureComparators 0001                                   ___ftdiv 2948  
                                 ___ftneg 3122                           __size_of___wmul 0026  
                                 ___ftmul 2854                                   ___ftsub 30AA  
                                 ___fttol 24F6                                   ___lwdiv 3016  
                                 ___lwmod 3068                              __psmallconst 1000  
                              ??___altoft 0086                                   __pcinit 2F04  
                              ??___awtoft 001E                                ??___ftpack 0018  
                                 __ramtop 1000                                ??___lltoft 001F  
                                 __ptext0 1BB8                                   __ptext1 1F9C  
                                 __ptext2 31E8                                   __ptext3 31AA  
                                 __ptext4 3178                                   __ptext5 3152  
                                 __ptext6 3068                                   __ptext7 3016  
                                 __ptext8 102A                                   __ptext9 263A  
                         __size_of_printf 0200                              __size_of_ISR 0146  
                               _T1CONbits 000FCD                                   _dpowers 1001  
                               _T2CONbits 000FBA                    excerciseControl@i_1035 00AC  
                                 _isdigit 3178                                 _T5CONbits 000F4E  
                    end_of_initialization 2F54                             __Lmediumconst 0000  
                  _leftWheelMeasuredSpeed 00D6           limitWheelSpeeds@rightWheelSpeed 0015  
                          _LCDgotoLineTwo 31BC                                   printf@c 0031  
                                 printf@f 001F                         main@lcdLastMillis 00BA  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                               _PORTAbits 000F80                 __size_of_excerciseControl 0B8E  
                               _TRISAbits 000F92                                 _TRISBbits 000F93  
                               _TRISDbits 000F95                                 _TRISEbits 000F96  
                           LCDcmd@command 0013                               _CM1CON0bits 000F79  
                  __end_of_LCDgotoLineTwo 31CC                               _CM2CON0bits 000F78  
                             _CM2CON1bits 000F77                               ___ftdiv@exp 0040  
                          __end_of_LCDcmd 31E8                               printf@width 002F  
                             _CCP2CONbits 000F66                               _CCP3CONbits 000F5D  
                       __size_of_LCDclear 0010                               ___ftmul@exp 002D  
                  ??_configureComparators 0013                         __size_of_LCDwrite 0012  
                 _rightWheelMeasuredSpeed 00D8                      _leftWheelCommandedPW 0047  
                          __end_of___ftge 2D70                            __end_of___wmul 3178  
                           __pidataCOMRAM 31FA                         ??_configureTimers 0013  
                          __end_of_printf 219C                       start_initialization 2F04  
                             __end_of_ISR 014E                                  ??_LCDcmd 0013  
                              frexp@value 0013                           ?_LCDgotoLineTwo 0001  
                                ??___ftge 0039                                  ??___wmul 0017  
                             __pdataBANK0 00DD                      excerciseControl@temp 009C  
                         _rightWheelCount 00CE                                  ??_printf 0025  
                       __size_of___altoft 0096                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 004B                                  ?_LCDinit 0001  
                           __pcstackBANK0 0060                              _isdigit$1679 0014  
                                ISR@dummy 0011                          ___lwdiv@dividend 0013  
               __size_of_limitWheelSpeeds 0104                                 __pintcode 0008  
                                ?___ftadd 0033                                  ?___ftdiv 0033  
                                ?___ftneg 0060                                  ?___ftmul 0024  
                                ?___ftsub 003F                                  ?___fttol 0073  
                                ?___lwdiv 0013                                  ?___lwmod 001A  
excerciseControl@rightWheelCommandedSpeed 00E3                          __CFG_PRICLKEN$ON 000000  
                        _excerciseControl 102A                               __smallconst 1000  
                                ?_isdigit 0001                          ___lwdiv@quotient 0017  
                          __size_of_frexp 0078                            __size_of_putch 000A  
                          __size_of_round 008E                            __size_of_trunc 008E  
                          ___wmul@product 0017                                  _LATDbits 000F8C  
                                _LATEbits 000F8D                                  _LCDclear 31CC  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                                _LCDwrite 31AA                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                          __CFG_WDTPS$32768 000000  
                      _wheelVelocity$2066 0086                         ___wmul@multiplier 0013  
                              printf@flag 002C                                printf@prec 002B  
                        __size_of_LCDinit 00C6                    __size_of_wheelVelocity 0116  
                               copy_data0 2F28                                 copy_data1 2F48  
                               frexp@eptr 0016                                  __Hrparam 0000  
                         _configureTimers 2BA2                                  __Lrparam 0000  
                      __CFG_BOREN$SBORDIS 000000                     main@rightCountTracker 00C0  
                       __CFG_P2BMX$PORTD2 000000                          __size_of___ftadd 01AC  
                        __size_of___ftdiv 00E6                          __size_of___ftneg 0030  
                                ___altoft 2C4A                          __size_of___ftmul 00F4  
                        __size_of___ftsub 0040                          __size_of___fttol 0144  
                        __size_of___lwdiv 0052                          __size_of___lwmod 0042  
                                ___awtoft 30EA                                  ___ftpack 2AF4  
                                ___lltoft 2F62                                _ANSELBbits 000F39  
                        __size_of_isdigit 001E                           ___lwdiv@divisor 0015  
                         ___lwdiv@counter 0019                                  __ptext10 30EA  
                                __ptext11 219C                                  __ptext20 3122  
                                __ptext12 30AA                                  __ptext21 234A  
                                __ptext13 2854                                  __ptext30 31CC  
                                __ptext22 2750                                  __ptext14 2CE0  
                                __ptext31 31DC                                  __ptext23 2F62  
                                __ptext15 2D70                                  __ptext32 3196  
                                __ptext24 2BA2                                  __ptext16 2DFE  
                                __ptext25 2FBE                                  __ptext17 2E8C  
                                __ptext26 2948                                  __ptext18 24F6  
                                __ptext27 2AF4                                  __ptext19 2C4A  
                                __ptext28 2A2E                                  __ptext29 31BC  
                        ??_LCDgotoLineTwo 0014                                trunc@expon 0090  
                           _elapsedMillis 00C6                             __size_of_main 03E4  
                           __size_of_sqrt 01AE            wheelVelocity@speedCompensation 0084  
                        _limitWheelSpeeds 2750                             _wheelVelocity 263A  
                                int$flags 004D             __size_of_configureComparators 0058  
                               printf@val 002D                         _speedCompensation 00DB  
                              _LCDcheckBF 3196                                 putch@data 0015  
                              _INTCONbits 000FF2                                  isdigit@c 0015  
                                intlevel2 0000                   __end_of_configureTimers 2C4A  
                        ___lwmod@dividend 001A                              _VREFCON0bits 000F42  
                __end_of_excerciseControl 1BB8   excerciseControl@leftWheelCommandedSpeed 00E1  
                              _OSCCONbits 000FD3                            ?_wheelVelocity 0082  
                                printf@ap 0029                           ___lwmod@divisor 001C  
                         ___lwmod@counter 001E                         __CFG_T3CMX$PORTB5 000000  
                       __CFG_FOSC$INTIO67 000000                             LCDwrite@input 0014  

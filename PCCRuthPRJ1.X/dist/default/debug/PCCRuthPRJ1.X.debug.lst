

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Apr 21 21:17:35 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	smallconst
    38  001000                     __psmallconst:
    39                           	opt stack 0
    40  001000  00                 	db	0
    41  001001                     _dpowers:
    42                           	opt stack 0
    43  001001  0001               	dw	1
    44  001003  000A               	dw	10
    45  001005  0064               	dw	100
    46  001007  03E8               	dw	1000
    47  001009  2710               	dw	10000
    48  00100B                     __end_of_dpowers:
    49                           	opt stack 0
    50  0000                     _CCPR3	set	3934
    51  0000                     _TMR5	set	3919
    52  0000                     _ANSELBbits	set	3897
    53  0000                     _CCP3CON	set	3933
    54  0000                     _CCP3CONbits	set	3933
    55  0000                     _CCPR3H	set	3935
    56  0000                     _CCPR3L	set	3934
    57  0000                     _CCPTMRS0bits	set	3913
    58  0000                     _T5CON	set	3918
    59  0000                     _T5CONbits	set	3918
    60  0000                     _TMR5ON	set	31344
    61  0000                     _CCPR2	set	3943
    62  0000                     _TMR1	set	4046
    63  0000                     _TMR3	set	4018
    64  0000                     _CCP2CON	set	3942
    65  0000                     _CCP2CONbits	set	3942
    66  0000                     _CCPR1H	set	4031
    67  0000                     _CCPR1L	set	4030
    68  0000                     _INTCONbits	set	4082
    69  0000                     _LATA	set	3977
    70  0000                     _LATCbits	set	3979
    71  0000                     _LATEbits	set	3981
    72  0000                     _OSCCONbits	set	4051
    73  0000                     _PIE1bits	set	3997
    74  0000                     _PIR1bits	set	3998
    75  0000                     _PORTAbits	set	3968
    76  0000                     _PORTBbits	set	3969
    77  0000                     _T1CON	set	4045
    78  0000                     _T1CONbits	set	4045
    79  0000                     _T2CON	set	4026
    80  0000                     _T2CONbits	set	4026
    81  0000                     _TRISA	set	3986
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISCbits	set	3988
    85  0000                     _TRISEbits	set	3990
    86  0000                     _CCP2IE	set	32000
    87  0000                     _CCP2IF	set	32008
    88  0000                     _CCP3IE	set	31696
    89  0000                     _CCP3IF	set	31704
    90  0000                     _TMR1ON	set	32360
    91  0000                     _TMR2IE	set	31977
    92  0000                     _TMR2IF	set	31985
    93  00100B                     STR_1:
    94  00100B  45                 	db	69	;'E'
    95  00100C  76                 	db	118	;'v'
    96  00100D  65                 	db	101	;'e'
    97  00100E  6E                 	db	110	;'n'
    98  00100F  74                 	db	116	;'t'
    99  001010  3A                 	db	58	;':'
   100  001011  20                 	db	32
   101  001012  25                 	db	37
   102  001013  33                 	db	51	;'3'
   103  001014  64                 	db	100	;'d'
   104  001015  00                 	db	0
   105  001016                     STR_2:
   106  001016  25                 	db	37
   107  001017  64                 	db	100	;'d'
   108  001018  00                 	db	0
   109                           
   110                           ; #config settings
   111  001019  00                 	db	0	; dummy byte at the end
   112  0000                     
   113                           	psect	cinit
   114  0021CC                     __pcinit:
   115                           	opt stack 0
   116  0021CC                     start_initialization:
   117                           	opt stack 0
   118  0021CC                     __initialization:
   119                           	opt stack 0
   120                           
   121                           ; Clear objects allocated to BANK0 (12 bytes)
   122  0021CC  EE00  F07C         	lfsr	0,__pbssBANK0
   123  0021D0  0E0C               	movlw	12
   124  0021D2                     clear_0:
   125  0021D2  6AEE               	clrf	postinc0,c
   126  0021D4  06E8               	decf	wreg,f,c
   127  0021D6  E1FD               	bnz	clear_0
   128                           
   129                           ; Clear objects allocated to COMRAM (2 bytes)
   130  0021D8  6A4D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   131  0021DA  6A4C               	clrf	__pbssCOMRAM& (0+255),c
   132  0021DC                     end_of_initialization:
   133                           	opt stack 0
   134  0021DC                     __end_of__initialization:
   135                           	opt stack 0
   136  0021DC  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   137  0021DE  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   138  0021E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   139  0021E2  6EF8               	movwf	tblptru,c
   140  0021E4  0100               	movlb	0
   141  0021E6  EF0D  F008         	goto	_main	;jump to C main() function
   142                           tblptru	equ	0xFF8
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           
   146                           	psect	bssCOMRAM
   147  00004C                     __pbssCOMRAM:
   148                           	opt stack 0
   149  00004C                     _rightWheelMeasuredSpeed:
   150                           	opt stack 0
   151  00004C                     	ds	2
   152                           tblptru	equ	0xFF8
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	bssBANK0
   157  00007C                     __pbssBANK0:
   158                           	opt stack 0
   159  00007C                     _elapsedMillis:
   160                           	opt stack 0
   161  00007C                     	ds	4
   162  000080                     _leftWheelCount:
   163                           	opt stack 0
   164  000080                     	ds	4
   165  000084                     _rightWheelCount:
   166                           	opt stack 0
   167  000084                     	ds	4
   168                           tblptru	equ	0xFF8
   169                           postinc0	equ	0xFEE
   170                           wreg	equ	0xFE8
   171                           
   172                           	psect	cstackBANK0
   173  000060                     __pcstackBANK0:
   174                           	opt stack 0
   175  000060                     wheelVelocity@speed:
   176                           	opt stack 0
   177                           
   178                           ; 2 bytes @ 0x0
   179  000060                     	ds	2
   180  000062                     wheelVelocity@speedCompensation:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0x2
   184  000062                     	ds	2
   185  000064                     wheelVelocity@temp:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x4
   189  000064                     	ds	2
   190  000066                     wheelVelocity@temp_834:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x6
   194  000066                     	ds	2
   195  000068                     wheelVelocity@wheel:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0x8
   199  000068                     	ds	1
   200  000069                     ??_main:
   201                           
   202                           ; 1 bytes @ 0x9
   203  000069                     	ds	4
   204  00006D                     main@controlLastMillis:
   205                           	opt stack 0
   206                           
   207                           ; 4 bytes @ 0xD
   208  00006D                     	ds	4
   209  000071                     main@lcdLastMillis:
   210                           	opt stack 0
   211                           
   212                           ; 4 bytes @ 0x11
   213  000071                     	ds	4
   214  000075                     main@event:
   215                           	opt stack 0
   216                           
   217                           ; 1 bytes @ 0x15
   218  000075                     	ds	1
   219  000076                     main@rightWheelSpeed:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x16
   223  000076                     	ds	2
   224  000078                     main@leftWheelSpeed:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x18
   228  000078                     	ds	2
   229  00007A                     main@speedCompensation:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x1A
   233  00007A                     	ds	2
   234                           tblptru	equ	0xFF8
   235                           postinc0	equ	0xFEE
   236                           wreg	equ	0xFE8
   237                           
   238                           	psect	cstackCOMRAM
   239  000001                     __pcstackCOMRAM:
   240                           	opt stack 0
   241  000001                     ??_ISR:
   242  000001                     
   243                           ; 1 bytes @ 0x0
   244  000001                     	ds	16
   245  000011                     ??_isdigit:
   246  000011                     ?___wmul:
   247                           	opt stack 0
   248  000011                     ?___lwdiv:
   249                           	opt stack 0
   250  000011                     ?___ftpack:
   251                           	opt stack 0
   252  000011                     LCDcmd@command:
   253                           	opt stack 0
   254  000011                     limitWheelSpeeds@leftWheelSpeed:
   255                           	opt stack 0
   256  000011                     ___wmul@multiplier:
   257                           	opt stack 0
   258  000011                     ___lwdiv@dividend:
   259                           	opt stack 0
   260  000011                     ___ftpack@arg:
   261                           	opt stack 0
   262                           
   263                           ; 3 bytes @ 0x10
   264  000011                     	ds	1
   265  000012                     ??_LCDinit:
   266  000012                     LCDwrite@input:
   267                           	opt stack 0
   268  000012                     _isdigit$1406:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x11
   272  000012                     	ds	1
   273  000013                     putch@data:
   274                           	opt stack 0
   275  000013                     isdigit@c:
   276                           	opt stack 0
   277  000013                     limitWheelSpeeds@rightWheelSpeed:
   278                           	opt stack 0
   279  000013                     ___wmul@multiplicand:
   280                           	opt stack 0
   281  000013                     ___lwdiv@divisor:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x12
   285  000013                     	ds	1
   286  000014                     ___ftpack@exp:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x13
   290  000014                     	ds	1
   291  000015                     ___ftpack@sign:
   292                           	opt stack 0
   293  000015                     ___wmul@product:
   294                           	opt stack 0
   295  000015                     ___lwdiv@quotient:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x14
   299  000015                     	ds	1
   300  000016                     ??___ftpack:
   301                           
   302                           ; 1 bytes @ 0x15
   303  000016                     	ds	1
   304  000017                     ___lwdiv@counter:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x16
   308  000017                     	ds	1
   309  000018                     ?___lwmod:
   310                           	opt stack 0
   311  000018                     ___lwmod@dividend:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x17
   315  000018                     	ds	1
   316  000019                     ?___awtoft:
   317                           	opt stack 0
   318  000019                     ?___lltoft:
   319                           	opt stack 0
   320  000019                     ___awtoft@c:
   321                           	opt stack 0
   322  000019                     ___lltoft@c:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x18
   326  000019                     	ds	1
   327  00001A                     ___lwmod@divisor:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x19
   331  00001A                     	ds	2
   332  00001C                     ___awtoft@sign:
   333                           	opt stack 0
   334  00001C                     ___lwmod@counter:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x1B
   338  00001C                     	ds	1
   339  00001D                     ??___lltoft:
   340  00001D                     ?_printf:
   341                           	opt stack 0
   342  00001D                     printf@f:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x1C
   346  00001D                     	ds	4
   347  000021                     ??_printf:
   348  000021                     ___lltoft@exp:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x20
   352  000021                     	ds	1
   353  000022                     ?___ftmul:
   354                           	opt stack 0
   355  000022                     ___ftmul@f1:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x21
   359  000022                     	ds	3
   360  000025                     printf@ap:
   361                           	opt stack 0
   362  000025                     ___ftmul@f2:
   363                           	opt stack 0
   364                           
   365                           ; 3 bytes @ 0x24
   366  000025                     	ds	2
   367  000027                     printf@prec:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x26
   371  000027                     	ds	1
   372  000028                     ??___ftmul:
   373  000028                     printf@flag:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x27
   377  000028                     	ds	1
   378  000029                     printf@val:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x28
   382  000029                     	ds	2
   383  00002B                     ___ftmul@exp:
   384                           	opt stack 0
   385  00002B                     printf@width:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x2A
   389  00002B                     	ds	1
   390  00002C                     ___ftmul@f3_as_product:
   391                           	opt stack 0
   392                           
   393                           ; 3 bytes @ 0x2B
   394  00002C                     	ds	1
   395  00002D                     printf@c:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x2C
   399  00002D                     	ds	2
   400  00002F                     ___ftmul@cntr:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x2E
   404  00002F                     	ds	1
   405  000030                     ___ftmul@sign:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x2F
   409  000030                     	ds	1
   410  000031                     ?___ftadd:
   411                           	opt stack 0
   412  000031                     ___ftadd@f1:
   413                           	opt stack 0
   414  000031                     ___ftge@ff1:
   415                           	opt stack 0
   416                           
   417                           ; 3 bytes @ 0x30
   418  000031                     	ds	3
   419  000034                     ___ftadd@f2:
   420                           	opt stack 0
   421  000034                     ___ftge@ff2:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x33
   425  000034                     	ds	3
   426  000037                     ??___ftadd:
   427  000037                     ??___ftge:
   428                           
   429                           ; 1 bytes @ 0x36
   430  000037                     	ds	3
   431  00003A                     ___ftadd@sign:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x39
   435  00003A                     	ds	1
   436  00003B                     ___ftadd@exp2:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x3A
   440  00003B                     	ds	1
   441  00003C                     ___ftadd@exp1:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x3B
   445  00003C                     	ds	1
   446  00003D                     ?___fttol:
   447                           	opt stack 0
   448  00003D                     ___fttol@f1:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0x3C
   452  00003D                     	ds	4
   453  000041                     ??___fttol:
   454                           
   455                           ; 1 bytes @ 0x40
   456  000041                     	ds	5
   457  000046                     ___fttol@sign1:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x45
   461  000046                     	ds	1
   462  000047                     ___fttol@lval:
   463                           	opt stack 0
   464                           
   465                           ; 4 bytes @ 0x46
   466  000047                     	ds	4
   467  00004B                     ___fttol@exp1:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x4A
   471  00004B                     	ds	1
   472  00004C                     tblptru	equ	0xFF8
   473                           postinc0	equ	0xFEE
   474                           wreg	equ	0xFE8
   475                           
   476                           ; 1 bytes @ 0x4B
   477 ;;
   478 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   479 ;;
   480 ;; *************** function _main *****************
   481 ;; Defined at:
   482 ;;		line 100 in file "main.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;		None
   485 ;; Auto vars:     Size  Location     Type
   486 ;;  lcdLastMilli    4   17[BANK0 ] unsigned long 
   487 ;;  controlLastM    4   13[BANK0 ] unsigned long 
   488 ;;  speedCompens    2   26[BANK0 ] int 
   489 ;;  leftWheelSpe    2   24[BANK0 ] int 
   490 ;;  rightWheelSp    2   22[BANK0 ] int 
   491 ;;  event           1   21[BANK0 ] unsigned char 
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;Total ram usage:       19 bytes
   506 ;; Hardware stack levels required when called:    5
   507 ;; This function calls:
   508 ;;		_LCDgotoLineTwo
   509 ;;		_LCDinit
   510 ;;		___ftge
   511 ;;		___ftmul
   512 ;;		___lltoft
   513 ;;		_limitWheelSpeeds
   514 ;;		_printf
   515 ;;		_wheelVelocity
   516 ;; This function is called by:
   517 ;;		Startup code after reset
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text0
   522  00101A                     __ptext0:
   523                           	opt stack 0
   524  00101A                     _main:
   525                           	opt stack 26
   526                           
   527                           ;main.c: 102: OSCCONbits.IRCF = 0b100;
   528                           
   529                           ;incstack = 0
   530  00101A  50D3               	movf	4051,w,c	;volatile
   531  00101C  0B8F               	andlw	-113
   532  00101E  0940               	iorlw	64
   533  001020  6ED3               	movwf	4051,c	;volatile
   534                           
   535                           ;main.c: 104: (INTCONbits.GIE = 0);
   536  001022  9EF2               	bcf	intcon,7,c	;volatile
   537                           
   538                           ;main.c: 111: T1CON = 0;
   539  001024  0E00               	movlw	0
   540  001026  6ECD               	movwf	4045,c	;volatile
   541                           
   542                           ;main.c: 112: T1CONbits.TMR1CS = 0b00;
   543  001028  0E3F               	movlw	-193
   544  00102A  16CD               	andwf	4045,f,c	;volatile
   545                           
   546                           ;main.c: 113: T5CON = 0;
   547  00102C  0E00               	movlw	0
   548  00102E  010F               	movlb	15	; () banked
   549  001030  6F4E               	movwf	78,b	;volatile
   550                           
   551                           ;main.c: 114: T5CONbits.TMR5CS = 0b00;
   552  001032  0E3F               	movlw	-193
   553  001034  010F               	movlb	15	; () banked
   554  001036  174E               	andwf	78,f,b	;volatile
   555                           
   556                           ; BSR set to: 15
   557                           ;main.c: 115: T1CONbits.RD16 = 1;
   558  001038  82CD               	bsf	4045,1,c	;volatile
   559                           
   560                           ;main.c: 121: CCP3CON = 0;
   561  00103A  0E00               	movlw	0
   562  00103C  010F               	movlb	15	; () banked
   563  00103E  6F5D               	movwf	93,b	;volatile
   564                           
   565                           ;main.c: 122: CCP2CON = 0;
   566  001040  0E00               	movlw	0
   567  001042  6E66               	movwf	3942,c	;volatile
   568                           
   569                           ;main.c: 123: CCP3CONbits.CCP3M = 0b1010;
   570  001044  010F               	movlb	15	; () banked
   571  001046  515D               	movf	93,w,b	;volatile
   572  001048  0BF0               	andlw	-16
   573  00104A  090A               	iorlw	10
   574  00104C  6F5D               	movwf	93,b	;volatile
   575                           
   576                           ;main.c: 124: CCP2CONbits.CCP2M = 0b1010;
   577  00104E  5066               	movf	3942,w,c	;volatile
   578  001050  0BF0               	andlw	-16
   579  001052  090A               	iorlw	10
   580  001054  6E66               	movwf	3942,c	;volatile
   581                           
   582                           ; BSR set to: 15
   583                           ;main.c: 125: CCP3IE = 1;
   584  001056  807A               	bsf	3962,0,c	;volatile
   585                           
   586                           ; BSR set to: 15
   587                           ;main.c: 126: CCP2IE = 1;
   588  001058  80A0               	bsf	4000,0,c	;volatile
   589                           
   590                           ;main.c: 131: CCPTMRS0bits.C3TSEL = 0;
   591  00105A  0E3F               	movlw	-193
   592  00105C  010F               	movlb	15	; () banked
   593  00105E  1749               	andwf	73,f,b	;volatile
   594                           
   595                           ;main.c: 132: CCPTMRS0bits.C2TSEL = 2;
   596  001060  010F               	movlb	15	; () banked
   597  001062  5149               	movf	73,w,b	;volatile
   598  001064  0BE7               	andlw	-25
   599  001066  0910               	iorlw	16
   600  001068  6F49               	movwf	73,b	;volatile
   601                           
   602                           ;main.c: 134: CCPR3 = 325;
   603  00106A  0E01               	movlw	1
   604  00106C  010F               	movlb	15	; () banked
   605  00106E  6F5F               	movwf	95,b	;volatile
   606  001070  0E45               	movlw	69
   607  001072  6F5E               	movwf	94,b	;volatile
   608                           
   609                           ;main.c: 135: CCPR2 = 325;
   610  001074  0E01               	movlw	1
   611  001076  6E68               	movwf	3944,c	;volatile
   612  001078  0E45               	movlw	69
   613  00107A  6E67               	movwf	3943,c	;volatile
   614                           
   615                           ; BSR set to: 15
   616                           ;main.c: 139: PIE1bits.TMR2IE = 1;
   617  00107C  829D               	bsf	3997,1,c	;volatile
   618                           
   619                           ;main.c: 140: T2CON = 0;
   620  00107E  0E00               	movlw	0
   621  001080  6EBA               	movwf	4026,c	;volatile
   622                           
   623                           ;main.c: 141: T2CONbits.T2CKPS = 0b11;
   624  001082  0E03               	movlw	3
   625  001084  12BA               	iorwf	4026,f,c	;volatile
   626                           
   627                           ; BSR set to: 15
   628                           ;main.c: 142: T2CONbits.TMR2ON = 1;
   629  001086  84BA               	bsf	4026,2,c	;volatile
   630                           
   631                           ; BSR set to: 15
   632                           ;main.c: 148: INTCONbits.GIE = 1;
   633  001088  8EF2               	bsf	intcon,7,c	;volatile
   634                           
   635                           ; BSR set to: 15
   636                           ;main.c: 149: INTCONbits.PEIE = 1;
   637  00108A  8CF2               	bsf	intcon,6,c	;volatile
   638                           
   639                           ; BSR set to: 15
   640                           ;main.c: 151: TMR1ON = 1;
   641  00108C  80CD               	bsf	4045,0,c	;volatile
   642                           
   643                           ; BSR set to: 15
   644                           ;main.c: 152: TMR5ON = 1;
   645  00108E  010F               	movlb	15	; () banked
   646  001090  814E               	bsf	78,0,b	;volatile
   647                           
   648                           ; BSR set to: 15
   649                           ;main.c: 154: (INTCONbits.GIE = 1);
   650  001092  8EF2               	bsf	intcon,7,c	;volatile
   651                           
   652                           ; BSR set to: 15
   653                           ;main.c: 156: TRISCbits.TRISC0 = 0;
   654  001094  9094               	bcf	3988,0,c	;volatile
   655                           
   656                           ; BSR set to: 15
   657                           ;main.c: 157: TRISCbits.TRISC1 = 0;
   658  001096  9294               	bcf	3988,1,c	;volatile
   659                           
   660                           ; BSR set to: 15
   661                           ;main.c: 159: TRISBbits.TRISB4 = 1;
   662  001098  8893               	bsf	3987,4,c	;volatile
   663                           
   664                           ; BSR set to: 15
   665                           ;main.c: 160: ANSELBbits.ANSB4 = 0;
   666  00109A  010F               	movlb	15	; () banked
   667  00109C  9939               	bcf	57,4,b	;volatile
   668                           
   669                           ;main.c: 163: unsigned long controlLastMillis = 0;
   670  00109E  0E00               	movlw	0
   671  0010A0  0100               	movlb	0	; () banked
   672  0010A2  6F6D               	movwf	main@controlLastMillis& (0+255),b
   673  0010A4  0E00               	movlw	0
   674  0010A6  6F6E               	movwf	(main@controlLastMillis+1)& (0+255),b
   675  0010A8  0E00               	movlw	0
   676  0010AA  6F6F               	movwf	(main@controlLastMillis+2)& (0+255),b
   677  0010AC  0E00               	movlw	0
   678  0010AE  6F70               	movwf	(main@controlLastMillis+3)& (0+255),b
   679                           
   680                           ;main.c: 164: unsigned long lcdLastMillis = 0;
   681  0010B0  0E00               	movlw	0
   682  0010B2  0100               	movlb	0	; () banked
   683  0010B4  6F71               	movwf	main@lcdLastMillis& (0+255),b
   684  0010B6  0E00               	movlw	0
   685  0010B8  6F72               	movwf	(main@lcdLastMillis+1)& (0+255),b
   686  0010BA  0E00               	movlw	0
   687  0010BC  6F73               	movwf	(main@lcdLastMillis+2)& (0+255),b
   688  0010BE  0E00               	movlw	0
   689  0010C0  6F74               	movwf	(main@lcdLastMillis+3)& (0+255),b
   690                           
   691                           ;main.c: 166: unsigned char event = 0;
   692  0010C2  0E00               	movlw	0
   693  0010C4  0100               	movlb	0	; () banked
   694  0010C6  6F75               	movwf	main@event& (0+255),b
   695                           
   696                           ;main.c: 168: int speedCompensation = 0;
   697  0010C8  0E00               	movlw	0
   698  0010CA  0100               	movlb	0	; () banked
   699  0010CC  6F7B               	movwf	(main@speedCompensation+1)& (0+255),b
   700  0010CE  0E00               	movlw	0
   701  0010D0  6F7A               	movwf	main@speedCompensation& (0+255),b
   702                           
   703                           ;main.c: 169: int rightWheelSpeed = 0;
   704  0010D2  0E00               	movlw	0
   705  0010D4  0100               	movlb	0	; () banked
   706  0010D6  6F77               	movwf	(main@rightWheelSpeed+1)& (0+255),b
   707  0010D8  0E00               	movlw	0
   708  0010DA  6F76               	movwf	main@rightWheelSpeed& (0+255),b
   709                           
   710                           ;main.c: 170: int leftWheelSpeed = 0;
   711  0010DC  0E00               	movlw	0
   712  0010DE  0100               	movlb	0	; () banked
   713  0010E0  6F79               	movwf	(main@leftWheelSpeed+1)& (0+255),b
   714  0010E2  0E00               	movlw	0
   715  0010E4  6F78               	movwf	main@leftWheelSpeed& (0+255),b
   716                           
   717                           ; BSR set to: 0
   718                           ;main.c: 172: LCDinit();
   719  0010E6  ECE6  F00E         	call	_LCDinit	;wreg free
   720                           
   721                           ;main.c: 173: printf("Event: %3d", event);
   722  0010EA  0E0B               	movlw	low STR_1
   723  0010EC  6E1D               	movwf	printf@f,c
   724  0010EE  0E10               	movlw	high STR_1
   725  0010F0  6E1E               	movwf	printf@f+1,c
   726  0010F2  C075  F01F         	movff	main@event,?_printf+2
   727  0010F6  6A20               	clrf	?_printf+3,c
   728  0010F8  EC9E  F00B         	call	_printf	;wreg free
   729                           
   730                           ;main.c: 174: LCDgotoLineTwo();
   731  0010FC  EC17  F011         	call	_LCDgotoLineTwo	;wreg free
   732                           
   733                           ;main.c: 175: printf("%d", TMR3);
   734  001100  0E16               	movlw	low STR_2
   735  001102  6E1D               	movwf	printf@f,c
   736  001104  0E10               	movlw	high STR_2
   737  001106  6E1E               	movwf	printf@f+1,c
   738  001108  CFB2 F01F          	movff	4018,?_printf+2	;volatile
   739  00110C  CFB3 F020          	movff	4019,?_printf+3	;volatile
   740  001110  EC9E  F00B         	call	_printf	;wreg free
   741  001114                     l2124:
   742                           
   743                           ;main.c: 187: }
   744                           ;main.c: 192: if(event == 1)
   745  001114  0100               	movlb	0	; () banked
   746  001116  0575               	decf	main@event& (0+255),w,b
   747  001118  A4D8               	btfss	status,2,c
   748  00111A  D7FC               	goto	l2124
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 193: {
   752                           ;main.c: 194: controlLastMillis = 0;
   753  00111C  0E00               	movlw	0
   754  00111E  0100               	movlb	0	; () banked
   755  001120  6F6D               	movwf	main@controlLastMillis& (0+255),b
   756  001122  0E00               	movlw	0
   757  001124  6F6E               	movwf	(main@controlLastMillis+1)& (0+255),b
   758  001126  0E00               	movlw	0
   759  001128  6F6F               	movwf	(main@controlLastMillis+2)& (0+255),b
   760  00112A  0E00               	movlw	0
   761  00112C  6F70               	movwf	(main@controlLastMillis+3)& (0+255),b
   762                           
   763                           ;main.c: 195: switch(event){
   764  00112E  D2FA               	goto	l2220
   765  001130                     l2128:
   766                           
   767                           ; BSR set to: 0
   768                           ;main.c: 197: if(rightWheelSpeed < 10)
   769  001130  0100               	movlb	0	; () banked
   770  001132  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
   771  001134  D008               	goto	l2130
   772  001136  0100               	movlb	0	; () banked
   773  001138  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
   774  00113A  E121               	bnz	l2132
   775  00113C  0E0A               	movlw	10
   776  00113E  0100               	movlb	0	; () banked
   777  001140  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
   778  001142  B0D8               	btfsc	status,0,c
   779  001144  D01C               	goto	l2132
   780  001146                     l2130:
   781                           
   782                           ; BSR set to: 0
   783                           ;main.c: 198: {
   784                           ;main.c: 199: wheelVelocity('r', ++rightWheelSpeed, speedCompensation);
   785  001146  0100               	movlb	0	; () banked
   786  001148  4B76               	infsnz	main@rightWheelSpeed& (0+255),f,b
   787  00114A  2B77               	incf	(main@rightWheelSpeed+1)& (0+255),f,b
   788  00114C  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
   789  001150  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
   790  001154  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   791  001158  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   792  00115C  0E72               	movlw	114
   793  00115E  EC74  F00D         	call	_wheelVelocity
   794                           
   795                           ;main.c: 200: wheelVelocity('l', ++leftWheelSpeed, speedCompensation);
   796  001162  0100               	movlb	0	; () banked
   797  001164  4B78               	infsnz	main@leftWheelSpeed& (0+255),f,b
   798  001166  2B79               	incf	(main@leftWheelSpeed+1)& (0+255),f,b
   799  001168  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
   800  00116C  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
   801  001170  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   802  001174  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   803  001178  0E6C               	movlw	108
   804  00117A  EC74  F00D         	call	_wheelVelocity
   805  00117E                     l2132:
   806                           
   807                           ;main.c: 201: }
   808                           ;main.c: 202: if(rightWheelSpeed > 55)
   809  00117E  0100               	movlb	0	; () banked
   810  001180  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
   811  001182  D026               	goto	l2136
   812  001184  0100               	movlb	0	; () banked
   813  001186  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
   814  001188  E105               	bnz	u1890
   815  00118A  0E38               	movlw	56
   816  00118C  0100               	movlb	0	; () banked
   817  00118E  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
   818  001190  A0D8               	btfss	status,0,c
   819  001192  D01E               	goto	l2136
   820  001194                     u1890:
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 203: {
   824                           ;main.c: 204: wheelVelocity('r', --rightWheelSpeed, speedCompensation);
   825  001194  0100               	movlb	0	; () banked
   826  001196  0776               	decf	main@rightWheelSpeed& (0+255),f,b
   827  001198  A0D8               	btfss	status,0,c
   828  00119A  0777               	decf	(main@rightWheelSpeed+1)& (0+255),f,b
   829  00119C  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
   830  0011A0  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
   831  0011A4  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   832  0011A8  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   833  0011AC  0E72               	movlw	114
   834  0011AE  EC74  F00D         	call	_wheelVelocity
   835                           
   836                           ;main.c: 205: wheelVelocity('l', --leftWheelSpeed, speedCompensation);
   837  0011B2  0100               	movlb	0	; () banked
   838  0011B4  0778               	decf	main@leftWheelSpeed& (0+255),f,b
   839  0011B6  A0D8               	btfss	status,0,c
   840  0011B8  0779               	decf	(main@leftWheelSpeed+1)& (0+255),f,b
   841  0011BA  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
   842  0011BE  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
   843  0011C2  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   844  0011C6  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   845  0011CA  0E6C               	movlw	108
   846  0011CC  EC74  F00D         	call	_wheelVelocity
   847  0011D0                     l2136:
   848                           
   849                           ;main.c: 206: }
   850                           ;main.c: 207: if(leftWheelCount > rightWheelCount + 2)
   851  0011D0  0E02               	movlw	2
   852  0011D2  0100               	movlb	0	; () banked
   853  0011D4  2584               	addwf	_rightWheelCount& (0+255),w,b
   854  0011D6  0100               	movlb	0	; () banked
   855  0011D8  6F69               	movwf	??_main& (0+255),b
   856  0011DA  0E00               	movlw	0
   857  0011DC  0100               	movlb	0	; () banked
   858  0011DE  2185               	addwfc	(_rightWheelCount+1)& (0+255),w,b
   859  0011E0  0100               	movlb	0	; () banked
   860  0011E2  6F6A               	movwf	(??_main+1)& (0+255),b
   861  0011E4  0E00               	movlw	0
   862  0011E6  0100               	movlb	0	; () banked
   863  0011E8  2186               	addwfc	(_rightWheelCount+2)& (0+255),w,b
   864  0011EA  0100               	movlb	0	; () banked
   865  0011EC  6F6B               	movwf	(??_main+2)& (0+255),b
   866  0011EE  0E00               	movlw	0
   867  0011F0  0100               	movlb	0	; () banked
   868  0011F2  2187               	addwfc	(_rightWheelCount+3)& (0+255),w,b
   869  0011F4  0100               	movlb	0	; () banked
   870  0011F6  6F6C               	movwf	(??_main+3)& (0+255),b
   871  0011F8  0100               	movlb	0	; () banked
   872  0011FA  5180               	movf	_leftWheelCount& (0+255),w,b
   873  0011FC  0100               	movlb	0	; () banked
   874  0011FE  5D69               	subwf	??_main& (0+255),w,b
   875  001200  0100               	movlb	0	; () banked
   876  001202  5181               	movf	(_leftWheelCount+1)& (0+255),w,b
   877  001204  0100               	movlb	0	; () banked
   878  001206  596A               	subwfb	(??_main+1)& (0+255),w,b
   879  001208  0100               	movlb	0	; () banked
   880  00120A  5182               	movf	(_leftWheelCount+2)& (0+255),w,b
   881  00120C  0100               	movlb	0	; () banked
   882  00120E  596B               	subwfb	(??_main+2)& (0+255),w,b
   883  001210  0100               	movlb	0	; () banked
   884  001212  5183               	movf	(_leftWheelCount+3)& (0+255),w,b
   885  001214  0100               	movlb	0	; () banked
   886  001216  596C               	subwfb	(??_main+3)& (0+255),w,b
   887  001218  B0D8               	btfsc	status,0,c
   888  00121A  D00F               	goto	l2142
   889                           
   890                           ; BSR set to: 0
   891                           ;main.c: 209: {
   892                           ;main.c: 210: speedCompensation--;
   893  00121C  0100               	movlb	0	; () banked
   894  00121E  077A               	decf	main@speedCompensation& (0+255),f,b
   895  001220  A0D8               	btfss	status,0,c
   896  001222  077B               	decf	(main@speedCompensation+1)& (0+255),f,b
   897                           
   898                           ; BSR set to: 0
   899                           ;main.c: 211: wheelVelocity('l', leftWheelSpeed, speedCompensation);
   900  001224  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
   901  001228  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
   902  00122C  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   903  001230  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   904  001234  0E6C               	movlw	108
   905  001236  EC74  F00D         	call	_wheelVelocity
   906  00123A                     l2142:
   907                           
   908                           ;main.c: 212: }
   909                           ;main.c: 213: if(rightWheelCount > leftWheelCount + 2)
   910  00123A  0E02               	movlw	2
   911  00123C  0100               	movlb	0	; () banked
   912  00123E  2580               	addwf	_leftWheelCount& (0+255),w,b
   913  001240  0100               	movlb	0	; () banked
   914  001242  6F69               	movwf	??_main& (0+255),b
   915  001244  0E00               	movlw	0
   916  001246  0100               	movlb	0	; () banked
   917  001248  2181               	addwfc	(_leftWheelCount+1)& (0+255),w,b
   918  00124A  0100               	movlb	0	; () banked
   919  00124C  6F6A               	movwf	(??_main+1)& (0+255),b
   920  00124E  0E00               	movlw	0
   921  001250  0100               	movlb	0	; () banked
   922  001252  2182               	addwfc	(_leftWheelCount+2)& (0+255),w,b
   923  001254  0100               	movlb	0	; () banked
   924  001256  6F6B               	movwf	(??_main+2)& (0+255),b
   925  001258  0E00               	movlw	0
   926  00125A  0100               	movlb	0	; () banked
   927  00125C  2183               	addwfc	(_leftWheelCount+3)& (0+255),w,b
   928  00125E  0100               	movlb	0	; () banked
   929  001260  6F6C               	movwf	(??_main+3)& (0+255),b
   930  001262  0100               	movlb	0	; () banked
   931  001264  5184               	movf	_rightWheelCount& (0+255),w,b
   932  001266  0100               	movlb	0	; () banked
   933  001268  5D69               	subwf	??_main& (0+255),w,b
   934  00126A  0100               	movlb	0	; () banked
   935  00126C  5185               	movf	(_rightWheelCount+1)& (0+255),w,b
   936  00126E  0100               	movlb	0	; () banked
   937  001270  596A               	subwfb	(??_main+1)& (0+255),w,b
   938  001272  0100               	movlb	0	; () banked
   939  001274  5186               	movf	(_rightWheelCount+2)& (0+255),w,b
   940  001276  0100               	movlb	0	; () banked
   941  001278  596B               	subwfb	(??_main+2)& (0+255),w,b
   942  00127A  0100               	movlb	0	; () banked
   943  00127C  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
   944  00127E  0100               	movlb	0	; () banked
   945  001280  596C               	subwfb	(??_main+3)& (0+255),w,b
   946  001282  B0D8               	btfsc	status,0,c
   947  001284  D00E               	goto	l2148
   948                           
   949                           ; BSR set to: 0
   950                           ;main.c: 215: {
   951                           ;main.c: 216: speedCompensation++;
   952  001286  0100               	movlb	0	; () banked
   953  001288  4B7A               	infsnz	main@speedCompensation& (0+255),f,b
   954  00128A  2B7B               	incf	(main@speedCompensation+1)& (0+255),f,b
   955                           
   956                           ; BSR set to: 0
   957                           ;main.c: 217: wheelVelocity('l', leftWheelSpeed, speedCompensation);
   958  00128C  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
   959  001290  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
   960  001294  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   961  001298  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   962  00129C  0E6C               	movlw	108
   963  00129E  EC74  F00D         	call	_wheelVelocity
   964  0012A2                     l2148:
   965                           
   966                           ;main.c: 218: }
   967                           ;main.c: 219: if(rightWheelCount >= 113)
   968  0012A2  0100               	movlb	0	; () banked
   969  0012A4  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
   970  0012A6  0100               	movlb	0	; () banked
   971  0012A8  1186               	iorwf	(_rightWheelCount+2)& (0+255),w,b
   972  0012AA  0100               	movlb	0	; () banked
   973  0012AC  1185               	iorwf	(_rightWheelCount+1)& (0+255),w,b
   974  0012AE  E105               	bnz	u1920
   975  0012B0  0E71               	movlw	113
   976  0012B2  0100               	movlb	0	; () banked
   977  0012B4  5D84               	subwf	_rightWheelCount& (0+255),w,b
   978  0012B6  A0D8               	btfss	status,0,c
   979  0012B8  D02E               	goto	l2158
   980  0012BA                     u1920:
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 220: {
   984                           ;main.c: 221: rightWheelCount = 0;
   985  0012BA  0E00               	movlw	0
   986  0012BC  0100               	movlb	0	; () banked
   987  0012BE  6F84               	movwf	_rightWheelCount& (0+255),b
   988  0012C0  0E00               	movlw	0
   989  0012C2  6F85               	movwf	(_rightWheelCount+1)& (0+255),b
   990  0012C4  0E00               	movlw	0
   991  0012C6  6F86               	movwf	(_rightWheelCount+2)& (0+255),b
   992  0012C8  0E00               	movlw	0
   993  0012CA  6F87               	movwf	(_rightWheelCount+3)& (0+255),b
   994                           
   995                           ;main.c: 222: leftWheelCount = 0;
   996  0012CC  0E00               	movlw	0
   997  0012CE  0100               	movlb	0	; () banked
   998  0012D0  6F80               	movwf	_leftWheelCount& (0+255),b
   999  0012D2  0E00               	movlw	0
  1000  0012D4  6F81               	movwf	(_leftWheelCount+1)& (0+255),b
  1001  0012D6  0E00               	movlw	0
  1002  0012D8  6F82               	movwf	(_leftWheelCount+2)& (0+255),b
  1003  0012DA  0E00               	movlw	0
  1004  0012DC  6F83               	movwf	(_leftWheelCount+3)& (0+255),b
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;main.c: 223: wheelVelocity('r', 0, speedCompensation);
  1008  0012DE  0E00               	movlw	0
  1009  0012E0  0100               	movlb	0	; () banked
  1010  0012E2  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1011  0012E4  0E00               	movlw	0
  1012  0012E6  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1013  0012E8  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1014  0012EC  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1015  0012F0  0E72               	movlw	114
  1016  0012F2  EC74  F00D         	call	_wheelVelocity
  1017                           
  1018                           ;main.c: 224: wheelVelocity('l', 0, speedCompensation);
  1019  0012F6  0E00               	movlw	0
  1020  0012F8  0100               	movlb	0	; () banked
  1021  0012FA  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1022  0012FC  0E00               	movlw	0
  1023  0012FE  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1024  001300  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1025  001304  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1026  001308  0E6C               	movlw	108
  1027  00130A  EC74  F00D         	call	_wheelVelocity
  1028  00130E                     l105:
  1029  00130E  B081               	btfsc	3969,0,c	;volatile
  1030  001310  D7FE               	goto	l105
  1031                           
  1032                           ;main.c: 228: }
  1033                           ;main.c: 229: event++;
  1034  001312  0100               	movlb	0	; () banked
  1035  001314  2B75               	incf	main@event& (0+255),f,b
  1036  001316                     l2158:
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;main.c: 230: }
  1040                           ;main.c: 231: limitWheelSpeeds(&leftWheelSpeed, &rightWheelSpeed);
  1041  001316  0E78               	movlw	low main@leftWheelSpeed
  1042  001318  6E11               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  1043  00131A  0E00               	movlw	high main@leftWheelSpeed
  1044  00131C  6E12               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  1045  00131E  0E76               	movlw	low main@rightWheelSpeed
  1046  001320  6E13               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  1047  001322  0E00               	movlw	high main@rightWheelSpeed
  1048  001324  6E14               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  1049  001326  EC49  F00F         	call	_limitWheelSpeeds	;wreg free
  1050                           
  1051                           ;main.c: 232: break;
  1052  00132A  D6F4               	goto	l2124
  1053  00132C                     l2160:
  1054                           
  1055                           ;main.c: 236: if(rightWheelSpeed < 10)
  1056  00132C  0100               	movlb	0	; () banked
  1057  00132E  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
  1058  001330  D008               	goto	l2162
  1059  001332  0100               	movlb	0	; () banked
  1060  001334  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
  1061  001336  E122               	bnz	l2164
  1062  001338  0E0A               	movlw	10
  1063  00133A  0100               	movlb	0	; () banked
  1064  00133C  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
  1065  00133E  B0D8               	btfsc	status,0,c
  1066  001340  D01D               	goto	l2164
  1067  001342                     l2162:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;main.c: 237: {
  1071                           ;main.c: 238: wheelVelocity('r', ++rightWheelSpeed, speedCompensation);
  1072  001342  0100               	movlb	0	; () banked
  1073  001344  4B76               	infsnz	main@rightWheelSpeed& (0+255),f,b
  1074  001346  2B77               	incf	(main@rightWheelSpeed+1)& (0+255),f,b
  1075  001348  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
  1076  00134C  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
  1077  001350  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1078  001354  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1079  001358  0E72               	movlw	114
  1080  00135A  EC74  F00D         	call	_wheelVelocity
  1081                           
  1082                           ;main.c: 239: wheelVelocity('l', --leftWheelSpeed, speedCompensation);
  1083  00135E  0100               	movlb	0	; () banked
  1084  001360  0778               	decf	main@leftWheelSpeed& (0+255),f,b
  1085  001362  A0D8               	btfss	status,0,c
  1086  001364  0779               	decf	(main@leftWheelSpeed+1)& (0+255),f,b
  1087  001366  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1088  00136A  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1089  00136E  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1090  001372  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1091  001376  0E6C               	movlw	108
  1092  001378  EC74  F00D         	call	_wheelVelocity
  1093  00137C                     l2164:
  1094                           
  1095                           ;main.c: 240: }
  1096                           ;main.c: 241: if(rightWheelSpeed > 12)
  1097  00137C  0100               	movlb	0	; () banked
  1098  00137E  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
  1099  001380  D025               	goto	l2168
  1100  001382  0100               	movlb	0	; () banked
  1101  001384  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
  1102  001386  E105               	bnz	u1950
  1103  001388  0E0D               	movlw	13
  1104  00138A  0100               	movlb	0	; () banked
  1105  00138C  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
  1106  00138E  A0D8               	btfss	status,0,c
  1107  001390  D01D               	goto	l2168
  1108  001392                     u1950:
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 242: {
  1112                           ;main.c: 243: wheelVelocity('r', --rightWheelSpeed, speedCompensation);
  1113  001392  0100               	movlb	0	; () banked
  1114  001394  0776               	decf	main@rightWheelSpeed& (0+255),f,b
  1115  001396  A0D8               	btfss	status,0,c
  1116  001398  0777               	decf	(main@rightWheelSpeed+1)& (0+255),f,b
  1117  00139A  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
  1118  00139E  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
  1119  0013A2  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1120  0013A6  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1121  0013AA  0E72               	movlw	114
  1122  0013AC  EC74  F00D         	call	_wheelVelocity
  1123                           
  1124                           ;main.c: 244: wheelVelocity('l', ++leftWheelSpeed, speedCompensation);
  1125  0013B0  0100               	movlb	0	; () banked
  1126  0013B2  4B78               	infsnz	main@leftWheelSpeed& (0+255),f,b
  1127  0013B4  2B79               	incf	(main@leftWheelSpeed+1)& (0+255),f,b
  1128  0013B6  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1129  0013BA  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1130  0013BE  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1131  0013C2  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1132  0013C6  0E6C               	movlw	108
  1133  0013C8  EC74  F00D         	call	_wheelVelocity
  1134  0013CC                     l2168:
  1135                           
  1136                           ;main.c: 245: }
  1137                           ;main.c: 246: if(leftWheelCount > (rightWheelCount + 2))
  1138  0013CC  0E02               	movlw	2
  1139  0013CE  0100               	movlb	0	; () banked
  1140  0013D0  2584               	addwf	_rightWheelCount& (0+255),w,b
  1141  0013D2  0100               	movlb	0	; () banked
  1142  0013D4  6F69               	movwf	??_main& (0+255),b
  1143  0013D6  0E00               	movlw	0
  1144  0013D8  0100               	movlb	0	; () banked
  1145  0013DA  2185               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  1146  0013DC  0100               	movlb	0	; () banked
  1147  0013DE  6F6A               	movwf	(??_main+1)& (0+255),b
  1148  0013E0  0E00               	movlw	0
  1149  0013E2  0100               	movlb	0	; () banked
  1150  0013E4  2186               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  1151  0013E6  0100               	movlb	0	; () banked
  1152  0013E8  6F6B               	movwf	(??_main+2)& (0+255),b
  1153  0013EA  0E00               	movlw	0
  1154  0013EC  0100               	movlb	0	; () banked
  1155  0013EE  2187               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  1156  0013F0  0100               	movlb	0	; () banked
  1157  0013F2  6F6C               	movwf	(??_main+3)& (0+255),b
  1158  0013F4  0100               	movlb	0	; () banked
  1159  0013F6  5180               	movf	_leftWheelCount& (0+255),w,b
  1160  0013F8  0100               	movlb	0	; () banked
  1161  0013FA  5D69               	subwf	??_main& (0+255),w,b
  1162  0013FC  0100               	movlb	0	; () banked
  1163  0013FE  5181               	movf	(_leftWheelCount+1)& (0+255),w,b
  1164  001400  0100               	movlb	0	; () banked
  1165  001402  596A               	subwfb	(??_main+1)& (0+255),w,b
  1166  001404  0100               	movlb	0	; () banked
  1167  001406  5182               	movf	(_leftWheelCount+2)& (0+255),w,b
  1168  001408  0100               	movlb	0	; () banked
  1169  00140A  596B               	subwfb	(??_main+2)& (0+255),w,b
  1170  00140C  0100               	movlb	0	; () banked
  1171  00140E  5183               	movf	(_leftWheelCount+3)& (0+255),w,b
  1172  001410  0100               	movlb	0	; () banked
  1173  001412  596C               	subwfb	(??_main+3)& (0+255),w,b
  1174  001414  B0D8               	btfsc	status,0,c
  1175  001416  D00E               	goto	l2174
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;main.c: 248: {
  1179                           ;main.c: 249: speedCompensation++;
  1180  001418  0100               	movlb	0	; () banked
  1181  00141A  4B7A               	infsnz	main@speedCompensation& (0+255),f,b
  1182  00141C  2B7B               	incf	(main@speedCompensation+1)& (0+255),f,b
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 250: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1186  00141E  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1187  001422  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1188  001426  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1189  00142A  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1190  00142E  0E6C               	movlw	108
  1191  001430  EC74  F00D         	call	_wheelVelocity
  1192  001434                     l2174:
  1193                           
  1194                           ;main.c: 251: }
  1195                           ;main.c: 252: if(rightWheelCount > leftWheelCount + 2)
  1196  001434  0E02               	movlw	2
  1197  001436  0100               	movlb	0	; () banked
  1198  001438  2580               	addwf	_leftWheelCount& (0+255),w,b
  1199  00143A  0100               	movlb	0	; () banked
  1200  00143C  6F69               	movwf	??_main& (0+255),b
  1201  00143E  0E00               	movlw	0
  1202  001440  0100               	movlb	0	; () banked
  1203  001442  2181               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  1204  001444  0100               	movlb	0	; () banked
  1205  001446  6F6A               	movwf	(??_main+1)& (0+255),b
  1206  001448  0E00               	movlw	0
  1207  00144A  0100               	movlb	0	; () banked
  1208  00144C  2182               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  1209  00144E  0100               	movlb	0	; () banked
  1210  001450  6F6B               	movwf	(??_main+2)& (0+255),b
  1211  001452  0E00               	movlw	0
  1212  001454  0100               	movlb	0	; () banked
  1213  001456  2183               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  1214  001458  0100               	movlb	0	; () banked
  1215  00145A  6F6C               	movwf	(??_main+3)& (0+255),b
  1216  00145C  0100               	movlb	0	; () banked
  1217  00145E  5184               	movf	_rightWheelCount& (0+255),w,b
  1218  001460  0100               	movlb	0	; () banked
  1219  001462  5D69               	subwf	??_main& (0+255),w,b
  1220  001464  0100               	movlb	0	; () banked
  1221  001466  5185               	movf	(_rightWheelCount+1)& (0+255),w,b
  1222  001468  0100               	movlb	0	; () banked
  1223  00146A  596A               	subwfb	(??_main+1)& (0+255),w,b
  1224  00146C  0100               	movlb	0	; () banked
  1225  00146E  5186               	movf	(_rightWheelCount+2)& (0+255),w,b
  1226  001470  0100               	movlb	0	; () banked
  1227  001472  596B               	subwfb	(??_main+2)& (0+255),w,b
  1228  001474  0100               	movlb	0	; () banked
  1229  001476  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1230  001478  0100               	movlb	0	; () banked
  1231  00147A  596C               	subwfb	(??_main+3)& (0+255),w,b
  1232  00147C  B0D8               	btfsc	status,0,c
  1233  00147E  D00F               	goto	l2180
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 254: {
  1237                           ;main.c: 255: speedCompensation--;
  1238  001480  0100               	movlb	0	; () banked
  1239  001482  077A               	decf	main@speedCompensation& (0+255),f,b
  1240  001484  A0D8               	btfss	status,0,c
  1241  001486  077B               	decf	(main@speedCompensation+1)& (0+255),f,b
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 256: wheelVelocity('l', leftWheelSpeed,speedCompensation);
  1245  001488  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1246  00148C  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1247  001490  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1248  001494  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1249  001498  0E6C               	movlw	108
  1250  00149A  EC74  F00D         	call	_wheelVelocity
  1251  00149E                     l2180:
  1252                           
  1253                           ;main.c: 257: }
  1254                           ;main.c: 259: if(rightWheelCount >= 25)
  1255  00149E  0100               	movlb	0	; () banked
  1256  0014A0  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1257  0014A2  0100               	movlb	0	; () banked
  1258  0014A4  1186               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  1259  0014A6  0100               	movlb	0	; () banked
  1260  0014A8  1185               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  1261  0014AA  E105               	bnz	u1980
  1262  0014AC  0E19               	movlw	25
  1263  0014AE  0100               	movlb	0	; () banked
  1264  0014B0  5D84               	subwf	_rightWheelCount& (0+255),w,b
  1265  0014B2  A0D8               	btfss	status,0,c
  1266  0014B4  D02E               	goto	l2190
  1267  0014B6                     u1980:
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 260: {
  1271                           ;main.c: 261: rightWheelCount = 0;
  1272  0014B6  0E00               	movlw	0
  1273  0014B8  0100               	movlb	0	; () banked
  1274  0014BA  6F84               	movwf	_rightWheelCount& (0+255),b
  1275  0014BC  0E00               	movlw	0
  1276  0014BE  6F85               	movwf	(_rightWheelCount+1)& (0+255),b
  1277  0014C0  0E00               	movlw	0
  1278  0014C2  6F86               	movwf	(_rightWheelCount+2)& (0+255),b
  1279  0014C4  0E00               	movlw	0
  1280  0014C6  6F87               	movwf	(_rightWheelCount+3)& (0+255),b
  1281                           
  1282                           ;main.c: 262: leftWheelCount = 0;
  1283  0014C8  0E00               	movlw	0
  1284  0014CA  0100               	movlb	0	; () banked
  1285  0014CC  6F80               	movwf	_leftWheelCount& (0+255),b
  1286  0014CE  0E00               	movlw	0
  1287  0014D0  6F81               	movwf	(_leftWheelCount+1)& (0+255),b
  1288  0014D2  0E00               	movlw	0
  1289  0014D4  6F82               	movwf	(_leftWheelCount+2)& (0+255),b
  1290  0014D6  0E00               	movlw	0
  1291  0014D8  6F83               	movwf	(_leftWheelCount+3)& (0+255),b
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;main.c: 263: wheelVelocity('r', 0, speedCompensation);
  1295  0014DA  0E00               	movlw	0
  1296  0014DC  0100               	movlb	0	; () banked
  1297  0014DE  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1298  0014E0  0E00               	movlw	0
  1299  0014E2  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1300  0014E4  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1301  0014E8  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1302  0014EC  0E72               	movlw	114
  1303  0014EE  EC74  F00D         	call	_wheelVelocity
  1304                           
  1305                           ;main.c: 264: wheelVelocity('l', 0, speedCompensation);
  1306  0014F2  0E00               	movlw	0
  1307  0014F4  0100               	movlb	0	; () banked
  1308  0014F6  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1309  0014F8  0E00               	movlw	0
  1310  0014FA  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1311  0014FC  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1312  001500  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1313  001504  0E6C               	movlw	108
  1314  001506  EC74  F00D         	call	_wheelVelocity
  1315  00150A                     l115:
  1316  00150A  B081               	btfsc	3969,0,c	;volatile
  1317  00150C  D7FE               	goto	l115
  1318                           
  1319                           ;main.c: 268: }
  1320                           ;main.c: 269: event++;
  1321  00150E  0100               	movlb	0	; () banked
  1322  001510  2B75               	incf	main@event& (0+255),f,b
  1323  001512                     l2190:
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;main.c: 270: }
  1327                           ;main.c: 271: limitWheelSpeeds(&leftWheelSpeed, &rightWheelSpeed);
  1328  001512  0E78               	movlw	low main@leftWheelSpeed
  1329  001514  6E11               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  1330  001516  0E00               	movlw	high main@leftWheelSpeed
  1331  001518  6E12               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  1332  00151A  0E76               	movlw	low main@rightWheelSpeed
  1333  00151C  6E13               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  1334  00151E  0E00               	movlw	high main@rightWheelSpeed
  1335  001520  6E14               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  1336  001522  EC49  F00F         	call	_limitWheelSpeeds	;wreg free
  1337                           
  1338                           ;main.c: 272: break;
  1339  001526  D5F6               	goto	l2124
  1340  001528                     l2192:
  1341                           
  1342                           ;main.c: 275: if(rightWheelSpeed < 30)
  1343  001528  0100               	movlb	0	; () banked
  1344  00152A  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
  1345  00152C  D008               	goto	l2194
  1346  00152E  0100               	movlb	0	; () banked
  1347  001530  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
  1348  001532  E121               	bnz	l119
  1349  001534  0E1E               	movlw	30
  1350  001536  0100               	movlb	0	; () banked
  1351  001538  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
  1352  00153A  B0D8               	btfsc	status,0,c
  1353  00153C  D01C               	goto	l119
  1354  00153E                     l2194:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 276: {
  1358                           ;main.c: 277: wheelVelocity('r', ++rightWheelSpeed, speedCompensation);
  1359  00153E  0100               	movlb	0	; () banked
  1360  001540  4B76               	infsnz	main@rightWheelSpeed& (0+255),f,b
  1361  001542  2B77               	incf	(main@rightWheelSpeed+1)& (0+255),f,b
  1362  001544  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
  1363  001548  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
  1364  00154C  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1365  001550  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1366  001554  0E72               	movlw	114
  1367  001556  EC74  F00D         	call	_wheelVelocity
  1368                           
  1369                           ;main.c: 278: wheelVelocity('l', ++leftWheelSpeed, speedCompensation);
  1370  00155A  0100               	movlb	0	; () banked
  1371  00155C  4B78               	infsnz	main@leftWheelSpeed& (0+255),f,b
  1372  00155E  2B79               	incf	(main@leftWheelSpeed+1)& (0+255),f,b
  1373  001560  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1374  001564  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1375  001568  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1376  00156C  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1377  001570  0E6C               	movlw	108
  1378  001572  EC74  F00D         	call	_wheelVelocity
  1379  001576                     l119:
  1380                           
  1381                           ;main.c: 279: }
  1382                           ;main.c: 280: if((leftWheelCount * 1.25f) > (rightWheelCount + 2) )
  1383  001576  0E02               	movlw	2
  1384  001578  0100               	movlb	0	; () banked
  1385  00157A  2584               	addwf	_rightWheelCount& (0+255),w,b
  1386  00157C  6E19               	movwf	___lltoft@c,c
  1387  00157E  0E00               	movlw	0
  1388  001580  0100               	movlb	0	; () banked
  1389  001582  2185               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  1390  001584  6E1A               	movwf	___lltoft@c+1,c
  1391  001586  0E00               	movlw	0
  1392  001588  0100               	movlb	0	; () banked
  1393  00158A  2186               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  1394  00158C  6E1B               	movwf	___lltoft@c+2,c
  1395  00158E  0E00               	movlw	0
  1396  001590  0100               	movlb	0	; () banked
  1397  001592  2187               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  1398  001594  6E1C               	movwf	___lltoft@c+3,c
  1399  001596  EC3F  F010         	call	___lltoft	;wreg free
  1400  00159A  C019  F031         	movff	?___lltoft,___ftge@ff1
  1401  00159E  C01A  F032         	movff	?___lltoft+1,___ftge@ff1+1
  1402  0015A2  C01B  F033         	movff	?___lltoft+2,___ftge@ff1+2
  1403  0015A6  0E00               	movlw	0
  1404  0015A8  6E25               	movwf	___ftmul@f2,c
  1405  0015AA  0EA0               	movlw	160
  1406  0015AC  6E26               	movwf	___ftmul@f2+1,c
  1407  0015AE  0E3F               	movlw	63
  1408  0015B0  6E27               	movwf	___ftmul@f2+2,c
  1409  0015B2  C080  F019         	movff	_leftWheelCount,___lltoft@c
  1410  0015B6  C081  F01A         	movff	_leftWheelCount+1,___lltoft@c+1
  1411  0015BA  C082  F01B         	movff	_leftWheelCount+2,___lltoft@c+2
  1412  0015BE  C083  F01C         	movff	_leftWheelCount+3,___lltoft@c+3
  1413  0015C2  EC3F  F010         	call	___lltoft	;wreg free
  1414  0015C6  C019  F022         	movff	?___lltoft,___ftmul@f1
  1415  0015CA  C01A  F023         	movff	?___lltoft+1,___ftmul@f1+1
  1416  0015CE  C01B  F024         	movff	?___lltoft+2,___ftmul@f1+2
  1417  0015D2  EC6C  F00E         	call	___ftmul	;wreg free
  1418  0015D6  C022  F034         	movff	?___ftmul,___ftge@ff2
  1419  0015DA  C023  F035         	movff	?___ftmul+1,___ftge@ff2+1
  1420  0015DE  C024  F036         	movff	?___ftmul+2,___ftge@ff2+2
  1421  0015E2  ECF7  F00F         	call	___ftge	;wreg free
  1422  0015E6  B0D8               	btfsc	status,0,c
  1423  0015E8  D00F               	goto	l2200
  1424                           
  1425                           ;main.c: 282: {
  1426                           ;main.c: 283: speedCompensation--;
  1427  0015EA  0100               	movlb	0	; () banked
  1428  0015EC  077A               	decf	main@speedCompensation& (0+255),f,b
  1429  0015EE  A0D8               	btfss	status,0,c
  1430  0015F0  077B               	decf	(main@speedCompensation+1)& (0+255),f,b
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 284: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1434  0015F2  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1435  0015F6  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1436  0015FA  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1437  0015FE  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1438  001602  0E6C               	movlw	108
  1439  001604  EC74  F00D         	call	_wheelVelocity
  1440  001608                     l2200:
  1441                           
  1442                           ;main.c: 285: }
  1443                           ;main.c: 286: if(rightWheelCount > ((leftWheelCount + 2)*1.25f))
  1444  001608  0E00               	movlw	0
  1445  00160A  6E25               	movwf	___ftmul@f2,c
  1446  00160C  0EA0               	movlw	160
  1447  00160E  6E26               	movwf	___ftmul@f2+1,c
  1448  001610  0E3F               	movlw	63
  1449  001612  6E27               	movwf	___ftmul@f2+2,c
  1450  001614  0E02               	movlw	2
  1451  001616  0100               	movlb	0	; () banked
  1452  001618  2580               	addwf	_leftWheelCount& (0+255),w,b
  1453  00161A  6E19               	movwf	___lltoft@c,c
  1454  00161C  0E00               	movlw	0
  1455  00161E  0100               	movlb	0	; () banked
  1456  001620  2181               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  1457  001622  6E1A               	movwf	___lltoft@c+1,c
  1458  001624  0E00               	movlw	0
  1459  001626  0100               	movlb	0	; () banked
  1460  001628  2182               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  1461  00162A  6E1B               	movwf	___lltoft@c+2,c
  1462  00162C  0E00               	movlw	0
  1463  00162E  0100               	movlb	0	; () banked
  1464  001630  2183               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  1465  001632  6E1C               	movwf	___lltoft@c+3,c
  1466  001634  EC3F  F010         	call	___lltoft	;wreg free
  1467  001638  C019  F022         	movff	?___lltoft,___ftmul@f1
  1468  00163C  C01A  F023         	movff	?___lltoft+1,___ftmul@f1+1
  1469  001640  C01B  F024         	movff	?___lltoft+2,___ftmul@f1+2
  1470  001644  EC6C  F00E         	call	___ftmul	;wreg free
  1471  001648  C022  F031         	movff	?___ftmul,___ftge@ff1
  1472  00164C  C023  F032         	movff	?___ftmul+1,___ftge@ff1+1
  1473  001650  C024  F033         	movff	?___ftmul+2,___ftge@ff1+2
  1474  001654  C084  F019         	movff	_rightWheelCount,___lltoft@c
  1475  001658  C085  F01A         	movff	_rightWheelCount+1,___lltoft@c+1
  1476  00165C  C086  F01B         	movff	_rightWheelCount+2,___lltoft@c+2
  1477  001660  C087  F01C         	movff	_rightWheelCount+3,___lltoft@c+3
  1478  001664  EC3F  F010         	call	___lltoft	;wreg free
  1479  001668  C019  F034         	movff	?___lltoft,___ftge@ff2
  1480  00166C  C01A  F035         	movff	?___lltoft+1,___ftge@ff2+1
  1481  001670  C01B  F036         	movff	?___lltoft+2,___ftge@ff2+2
  1482  001674  ECF7  F00F         	call	___ftge	;wreg free
  1483  001678  B0D8               	btfsc	status,0,c
  1484  00167A  D00E               	goto	l2206
  1485                           
  1486                           ;main.c: 288: {
  1487                           ;main.c: 289: speedCompensation++;
  1488  00167C  0100               	movlb	0	; () banked
  1489  00167E  4B7A               	infsnz	main@speedCompensation& (0+255),f,b
  1490  001680  2B7B               	incf	(main@speedCompensation+1)& (0+255),f,b
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 290: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1494  001682  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1495  001686  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1496  00168A  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1497  00168E  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1498  001692  0E6C               	movlw	108
  1499  001694  EC74  F00D         	call	_wheelVelocity
  1500  001698                     l2206:
  1501                           
  1502                           ;main.c: 291: }
  1503                           ;main.c: 292: if(rightWheelCount >= 500)
  1504  001698  0100               	movlb	0	; () banked
  1505  00169A  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1506  00169C  0100               	movlb	0	; () banked
  1507  00169E  1186               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  1508  0016A0  E108               	bnz	u2030
  1509  0016A2  0EF4               	movlw	244
  1510  0016A4  0100               	movlb	0	; () banked
  1511  0016A6  5D84               	subwf	_rightWheelCount& (0+255),w,b
  1512  0016A8  0E01               	movlw	1
  1513  0016AA  0100               	movlb	0	; () banked
  1514  0016AC  5985               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  1515  0016AE  A0D8               	btfss	status,0,c
  1516  0016B0  D02E               	goto	l2216
  1517  0016B2                     u2030:
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 293: {
  1521                           ;main.c: 294: rightWheelCount = 0;
  1522  0016B2  0E00               	movlw	0
  1523  0016B4  0100               	movlb	0	; () banked
  1524  0016B6  6F84               	movwf	_rightWheelCount& (0+255),b
  1525  0016B8  0E00               	movlw	0
  1526  0016BA  6F85               	movwf	(_rightWheelCount+1)& (0+255),b
  1527  0016BC  0E00               	movlw	0
  1528  0016BE  6F86               	movwf	(_rightWheelCount+2)& (0+255),b
  1529  0016C0  0E00               	movlw	0
  1530  0016C2  6F87               	movwf	(_rightWheelCount+3)& (0+255),b
  1531                           
  1532                           ;main.c: 295: leftWheelCount = 0;
  1533  0016C4  0E00               	movlw	0
  1534  0016C6  0100               	movlb	0	; () banked
  1535  0016C8  6F80               	movwf	_leftWheelCount& (0+255),b
  1536  0016CA  0E00               	movlw	0
  1537  0016CC  6F81               	movwf	(_leftWheelCount+1)& (0+255),b
  1538  0016CE  0E00               	movlw	0
  1539  0016D0  6F82               	movwf	(_leftWheelCount+2)& (0+255),b
  1540  0016D2  0E00               	movlw	0
  1541  0016D4  6F83               	movwf	(_leftWheelCount+3)& (0+255),b
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 296: wheelVelocity('r', 0, speedCompensation);
  1545  0016D6  0E00               	movlw	0
  1546  0016D8  0100               	movlb	0	; () banked
  1547  0016DA  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1548  0016DC  0E00               	movlw	0
  1549  0016DE  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1550  0016E0  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1551  0016E4  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1552  0016E8  0E72               	movlw	114
  1553  0016EA  EC74  F00D         	call	_wheelVelocity
  1554                           
  1555                           ;main.c: 297: wheelVelocity('l', 0, speedCompensation);
  1556  0016EE  0E00               	movlw	0
  1557  0016F0  0100               	movlb	0	; () banked
  1558  0016F2  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1559  0016F4  0E00               	movlw	0
  1560  0016F6  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1561  0016F8  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1562  0016FC  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1563  001700  0E6C               	movlw	108
  1564  001702  EC74  F00D         	call	_wheelVelocity
  1565  001706                     l123:
  1566  001706  B081               	btfsc	3969,0,c	;volatile
  1567  001708  D7FE               	goto	l123
  1568                           
  1569                           ;main.c: 301: }
  1570                           ;main.c: 302: event++;
  1571  00170A  0100               	movlb	0	; () banked
  1572  00170C  2B75               	incf	main@event& (0+255),f,b
  1573  00170E                     l2216:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 303: }
  1577                           ;main.c: 304: limitWheelSpeeds(&leftWheelSpeed, &rightWheelSpeed);
  1578  00170E  0E78               	movlw	low main@leftWheelSpeed
  1579  001710  6E11               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  1580  001712  0E00               	movlw	high main@leftWheelSpeed
  1581  001714  6E12               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  1582  001716  0E76               	movlw	low main@rightWheelSpeed
  1583  001718  6E13               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  1584  00171A  0E00               	movlw	high main@rightWheelSpeed
  1585  00171C  6E14               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  1586  00171E  EC49  F00F         	call	_limitWheelSpeeds	;wreg free
  1587                           
  1588                           ;main.c: 306: }
  1589                           
  1590                           ;main.c: 305: break;
  1591  001722  D4F8               	goto	l2124
  1592  001724                     l2220:
  1593  001724  0100               	movlb	0	; () banked
  1594  001726  5175               	movf	main@event& (0+255),w,b
  1595                           
  1596                           ; Switch size 1, requested type "space"
  1597                           ; Number of cases is 3, Range of values is 0 to 2
  1598                           ; switch strategies available:
  1599                           ; Name         Instructions Cycles
  1600                           ; simple_byte           10     6 (average)
  1601                           ;	Chosen strategy is simple_byte
  1602  001728  0A00               	xorlw	0	; case 0
  1603  00172A  B4D8               	btfsc	status,2,c
  1604  00172C  D501               	goto	l2128
  1605  00172E  0A01               	xorlw	1	; case 1
  1606  001730  B4D8               	btfsc	status,2,c
  1607  001732  D5FC               	goto	l2160
  1608  001734  0A03               	xorlw	3	; case 2
  1609  001736  B4D8               	btfsc	status,2,c
  1610  001738  D6F7               	goto	l2192
  1611                           
  1612                           ; BSR set to: 0
  1613                           
  1614                           ; BSR set to: 0
  1615                           
  1616                           ; BSR set to: 0
  1617  00173A  D4EC               	goto	l2124
  1618  00173C                     __end_of_main:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           intcon	equ	0xFF2
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _wheelVelocity *****************
  1627 ;; Defined at:
  1628 ;;		line 340 in file "main.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  wheel           1    wreg     unsigned char 
  1631 ;;  speed           2    0[BANK0 ] int 
  1632 ;;  speedCompens    2    2[BANK0 ] int 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  wheel           1    8[BANK0 ] unsigned char 
  1635 ;;  temp            2    6[BANK0 ] int 
  1636 ;;  temp            2    4[BANK0 ] int 
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg, status,2, status,0, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1646 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;Total ram usage:        9 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    3
  1653 ;; This function calls:
  1654 ;;		___awtoft
  1655 ;;		___ftadd
  1656 ;;		___ftmul
  1657 ;;		___fttol
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text1
  1664  001AE8                     __ptext1:
  1665                           	opt stack 0
  1666  001AE8                     _wheelVelocity:
  1667                           	opt stack 27
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;incstack = 0
  1671                           ;wheelVelocity@wheel stored from wreg
  1672  001AE8  0100               	movlb	0	; () banked
  1673  001AEA  6F68               	movwf	wheelVelocity@wheel& (0+255),b
  1674                           
  1675                           ;main.c: 342: if(wheel == 'r')
  1676  001AEC  0E72               	movlw	114
  1677  001AEE  0100               	movlb	0	; () banked
  1678  001AF0  1968               	xorwf	wheelVelocity@wheel& (0+255),w,b
  1679  001AF2  A4D8               	btfss	status,2,c
  1680  001AF4  D033               	goto	l2018
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 343: {
  1684                           ;main.c: 346: int temp = (int) (750 + speed * 1.25);
  1685  001AF6  0E80               	movlw	128
  1686  001AF8  6E34               	movwf	___ftadd@f2,c
  1687  001AFA  0E3B               	movlw	59
  1688  001AFC  6E35               	movwf	___ftadd@f2+1,c
  1689  001AFE  0E44               	movlw	68
  1690  001B00  6E36               	movwf	___ftadd@f2+2,c
  1691  001B02  0E00               	movlw	0
  1692  001B04  6E25               	movwf	___ftmul@f2,c
  1693  001B06  0EA0               	movlw	160
  1694  001B08  6E26               	movwf	___ftmul@f2+1,c
  1695  001B0A  0E3F               	movlw	63
  1696  001B0C  6E27               	movwf	___ftmul@f2+2,c
  1697  001B0E  C060  F019         	movff	wheelVelocity@speed,___awtoft@c
  1698  001B12  C061  F01A         	movff	wheelVelocity@speed+1,___awtoft@c+1
  1699  001B16  ECB7  F010         	call	___awtoft	;wreg free
  1700  001B1A  C019  F022         	movff	?___awtoft,___ftmul@f1
  1701  001B1E  C01A  F023         	movff	?___awtoft+1,___ftmul@f1+1
  1702  001B22  C01B  F024         	movff	?___awtoft+2,___ftmul@f1+2
  1703  001B26  EC6C  F00E         	call	___ftmul	;wreg free
  1704  001B2A  C022  F031         	movff	?___ftmul,___ftadd@f1
  1705  001B2E  C023  F032         	movff	?___ftmul+1,___ftadd@f1+1
  1706  001B32  C024  F033         	movff	?___ftmul+2,___ftadd@f1+2
  1707  001B36  EC9E  F00C         	call	___ftadd	;wreg free
  1708  001B3A  C031  F03D         	movff	?___ftadd,___fttol@f1
  1709  001B3E  C032  F03E         	movff	?___ftadd+1,___fttol@f1+1
  1710  001B42  C033  F03F         	movff	?___ftadd+2,___fttol@f1+2
  1711  001B46  ECF2  F00D         	call	___fttol	;wreg free
  1712  001B4A  C03D  F064         	movff	?___fttol,wheelVelocity@temp
  1713  001B4E  C03E  F065         	movff	?___fttol+1,wheelVelocity@temp+1
  1714                           
  1715                           ;main.c: 347: CCPR1H = (temp >> 8) & 0xFF;
  1716  001B52  0100               	movlb	0	; () banked
  1717  001B54  5165               	movf	(wheelVelocity@temp+1)& (0+255),w,b
  1718  001B56  6EBF               	movwf	4031,c	;volatile
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 348: CCPR1L = temp & 0xFF;
  1722  001B58  C064  FFBE         	movff	wheelVelocity@temp,4030	;volatile
  1723  001B5C                     l2018:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 349: }
  1727                           ;main.c: 351: if(wheel == 'l')
  1728  001B5C  0E6C               	movlw	108
  1729  001B5E  0100               	movlb	0	; () banked
  1730  001B60  1968               	xorwf	wheelVelocity@wheel& (0+255),w,b
  1731  001B62  A4D8               	btfss	status,2,c
  1732  001B64  0012               	return	
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 352: {
  1736                           ;main.c: 355: int temp = (int) (750 + speedCompensation + speed * 1.25);
  1737  001B66  0E00               	movlw	0
  1738  001B68  6E25               	movwf	___ftmul@f2,c
  1739  001B6A  0EA0               	movlw	160
  1740  001B6C  6E26               	movwf	___ftmul@f2+1,c
  1741  001B6E  0E3F               	movlw	63
  1742  001B70  6E27               	movwf	___ftmul@f2+2,c
  1743  001B72  C060  F019         	movff	wheelVelocity@speed,___awtoft@c
  1744  001B76  C061  F01A         	movff	wheelVelocity@speed+1,___awtoft@c+1
  1745  001B7A  ECB7  F010         	call	___awtoft	;wreg free
  1746  001B7E  C019  F022         	movff	?___awtoft,___ftmul@f1
  1747  001B82  C01A  F023         	movff	?___awtoft+1,___ftmul@f1+1
  1748  001B86  C01B  F024         	movff	?___awtoft+2,___ftmul@f1+2
  1749  001B8A  EC6C  F00E         	call	___ftmul	;wreg free
  1750  001B8E  C022  F034         	movff	?___ftmul,___ftadd@f2
  1751  001B92  C023  F035         	movff	?___ftmul+1,___ftadd@f2+1
  1752  001B96  C024  F036         	movff	?___ftmul+2,___ftadd@f2+2
  1753  001B9A  0EEE               	movlw	238
  1754  001B9C  0100               	movlb	0	; () banked
  1755  001B9E  2562               	addwf	wheelVelocity@speedCompensation& (0+255),w,b
  1756  001BA0  6E19               	movwf	___awtoft@c,c
  1757  001BA2  0E02               	movlw	2
  1758  001BA4  0100               	movlb	0	; () banked
  1759  001BA6  2163               	addwfc	(wheelVelocity@speedCompensation+1)& (0+255),w,b
  1760  001BA8  6E1A               	movwf	___awtoft@c+1,c
  1761  001BAA  ECB7  F010         	call	___awtoft	;wreg free
  1762  001BAE  C019  F031         	movff	?___awtoft,___ftadd@f1
  1763  001BB2  C01A  F032         	movff	?___awtoft+1,___ftadd@f1+1
  1764  001BB6  C01B  F033         	movff	?___awtoft+2,___ftadd@f1+2
  1765  001BBA  EC9E  F00C         	call	___ftadd	;wreg free
  1766  001BBE  C031  F03D         	movff	?___ftadd,___fttol@f1
  1767  001BC2  C032  F03E         	movff	?___ftadd+1,___fttol@f1+1
  1768  001BC6  C033  F03F         	movff	?___ftadd+2,___fttol@f1+2
  1769  001BCA  ECF2  F00D         	call	___fttol	;wreg free
  1770  001BCE  C03D  F066         	movff	?___fttol,wheelVelocity@temp_834
  1771  001BD2  C03E  F067         	movff	?___fttol+1,wheelVelocity@temp_834+1
  1772                           
  1773                           ;main.c: 356: CCPR3H = (temp >> 8) & 0xFF;
  1774  001BD6  0100               	movlb	0	; () banked
  1775  001BD8  5167               	movf	(wheelVelocity@temp_834+1)& (0+255),w,b
  1776  001BDA  010F               	movlb	15	; () banked
  1777  001BDC  6F5F               	movwf	95,b	;volatile
  1778                           
  1779                           ; BSR set to: 15
  1780                           ;main.c: 357: CCPR3L = temp & 0xFF;
  1781  001BDE  C066  FF5E         	movff	wheelVelocity@temp_834,3934	;volatile
  1782  001BE2  0012               	return	
  1783  001BE4                     __end_of_wheelVelocity:
  1784                           	opt stack 0
  1785                           tblptru	equ	0xFF8
  1786                           intcon	equ	0xFF2
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           status	equ	0xFD8
  1790                           
  1791 ;; *************** function ___fttol *****************
  1792 ;; Defined at:
  1793 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;  f1              3   60[COMRAM] float 
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  lval            4   70[COMRAM] unsigned long 
  1798 ;;  exp1            1   74[COMRAM] unsigned char 
  1799 ;;  sign1           1   69[COMRAM] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  4   60[COMRAM] long 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1809 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;Total ram usage:       15 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    1
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_wheelVelocity
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text2
  1824  001BE4                     __ptext2:
  1825                           	opt stack 0
  1826  001BE4                     ___fttol:
  1827                           	opt stack 28
  1828                           
  1829                           ;incstack = 0
  1830  001BE4  C03F  F041         	movff	___fttol@f1+2,??___fttol
  1831  001BE8  6A42               	clrf	(??___fttol+1)& (0+255),c
  1832  001BEA  6A43               	clrf	(??___fttol+2)& (0+255),c
  1833  001BEC  343E               	rlcf	___fttol@f1+1,w,c
  1834  001BEE  3641               	rlcf	??___fttol& (0+255),f,c
  1835  001BF0  E301               	bnc	u1481
  1836  001BF2  8042               	bsf	(??___fttol+1)& (0+255),0,c
  1837  001BF4                     u1481:
  1838  001BF4  5041               	movf	??___fttol,w,c
  1839  001BF6  6E4B               	movwf	___fttol@exp1,c
  1840  001BF8  504B               	movf	___fttol@exp1,w,c
  1841  001BFA  A4D8               	btfss	status,2,c
  1842  001BFC  D009               	goto	l1798
  1843  001BFE  0E00               	movlw	0
  1844  001C00  6E3D               	movwf	?___fttol,c
  1845  001C02  0E00               	movlw	0
  1846  001C04  6E3E               	movwf	?___fttol+1,c
  1847  001C06  0E00               	movlw	0
  1848  001C08  6E3F               	movwf	?___fttol+2,c
  1849  001C0A  0E00               	movlw	0
  1850  001C0C  6E40               	movwf	?___fttol+3,c
  1851  001C0E  0012               	return	
  1852  001C10                     l1798:
  1853  001C10  0E17               	movlw	23
  1854  001C12  6E41               	movwf	??___fttol& (0+255),c
  1855  001C14  C03D  F042         	movff	___fttol@f1,??___fttol+1
  1856  001C18  C03E  F043         	movff	___fttol@f1+1,??___fttol+2
  1857  001C1C  C03F  F044         	movff	___fttol@f1+2,??___fttol+3
  1858  001C20  2841               	incf	??___fttol,w,c
  1859  001C22  6E45               	movwf	(??___fttol+4)& (0+255),c
  1860  001C24  D004               	goto	u1500
  1861  001C26                     u1505:
  1862  001C26  90D8               	bcf	status,0,c
  1863  001C28  3244               	rrcf	??___fttol+3,f,c
  1864  001C2A  3243               	rrcf	??___fttol+2,f,c
  1865  001C2C  3242               	rrcf	??___fttol+1,f,c
  1866  001C2E                     u1500:
  1867  001C2E  2E45               	decfsz	(??___fttol+4)& (0+255),f,c
  1868  001C30  D7FA               	goto	u1505
  1869  001C32  5042               	movf	??___fttol+1,w,c
  1870  001C34  6E46               	movwf	___fttol@sign1,c
  1871  001C36  8E3E               	bsf	___fttol@f1+1,7,c
  1872  001C38  0EFF               	movlw	255
  1873  001C3A  163D               	andwf	___fttol@f1,f,c
  1874  001C3C  0EFF               	movlw	255
  1875  001C3E  163E               	andwf	___fttol@f1+1,f,c
  1876  001C40  0E00               	movlw	0
  1877  001C42  163F               	andwf	___fttol@f1+2,f,c
  1878  001C44  503D               	movf	___fttol@f1,w,c
  1879  001C46  6E47               	movwf	___fttol@lval,c
  1880  001C48  503E               	movf	___fttol@f1+1,w,c
  1881  001C4A  6E48               	movwf	___fttol@lval+1,c
  1882  001C4C  503F               	movf	___fttol@f1+2,w,c
  1883  001C4E  6E49               	movwf	___fttol@lval+2,c
  1884  001C50  6A4A               	clrf	___fttol@lval+3,c
  1885  001C52  0E8E               	movlw	142
  1886  001C54  5E4B               	subwf	___fttol@exp1,f,c
  1887  001C56  AE4B               	btfss	___fttol@exp1,7,c
  1888  001C58  D016               	goto	l1820
  1889  001C5A  504B               	movf	___fttol@exp1,w,c
  1890  001C5C  0A80               	xorlw	128
  1891  001C5E  0F8F               	addlw	143
  1892  001C60  B0D8               	btfsc	status,0,c
  1893  001C62  D009               	goto	l1816
  1894  001C64  0E00               	movlw	0
  1895  001C66  6E3D               	movwf	?___fttol,c
  1896  001C68  0E00               	movlw	0
  1897  001C6A  6E3E               	movwf	?___fttol+1,c
  1898  001C6C  0E00               	movlw	0
  1899  001C6E  6E3F               	movwf	?___fttol+2,c
  1900  001C70  0E00               	movlw	0
  1901  001C72  6E40               	movwf	?___fttol+3,c
  1902  001C74  0012               	return	
  1903  001C76                     l1816:
  1904  001C76  90D8               	bcf	status,0,c
  1905  001C78  324A               	rrcf	___fttol@lval+3,f,c
  1906  001C7A  3249               	rrcf	___fttol@lval+2,f,c
  1907  001C7C  3248               	rrcf	___fttol@lval+1,f,c
  1908  001C7E  3247               	rrcf	___fttol@lval,f,c
  1909  001C80  3E4B               	incfsz	___fttol@exp1,f,c
  1910  001C82  D7F9               	goto	l1816
  1911  001C84  D015               	goto	l1830
  1912  001C86                     l1820:
  1913  001C86  0E17               	movlw	23
  1914  001C88  644B               	cpfsgt	___fttol@exp1,c
  1915  001C8A  D00F               	goto	l1828
  1916  001C8C  0E00               	movlw	0
  1917  001C8E  6E3D               	movwf	?___fttol,c
  1918  001C90  0E00               	movlw	0
  1919  001C92  6E3E               	movwf	?___fttol+1,c
  1920  001C94  0E00               	movlw	0
  1921  001C96  6E3F               	movwf	?___fttol+2,c
  1922  001C98  0E00               	movlw	0
  1923  001C9A  6E40               	movwf	?___fttol+3,c
  1924  001C9C  0012               	return	
  1925  001C9E                     l1826:
  1926  001C9E  90D8               	bcf	status,0,c
  1927  001CA0  3647               	rlcf	___fttol@lval,f,c
  1928  001CA2  3648               	rlcf	___fttol@lval+1,f,c
  1929  001CA4  3649               	rlcf	___fttol@lval+2,f,c
  1930  001CA6  364A               	rlcf	___fttol@lval+3,f,c
  1931  001CA8  064B               	decf	___fttol@exp1,f,c
  1932  001CAA                     l1828:
  1933  001CAA  504B               	movf	___fttol@exp1,w,c
  1934  001CAC  A4D8               	btfss	status,2,c
  1935  001CAE  D7F7               	goto	l1826
  1936  001CB0                     l1830:
  1937  001CB0  5046               	movf	___fttol@sign1,w,c
  1938  001CB2  B4D8               	btfsc	status,2,c
  1939  001CB4  D008               	goto	l1834
  1940  001CB6  1E4A               	comf	___fttol@lval+3,f,c
  1941  001CB8  1E49               	comf	___fttol@lval+2,f,c
  1942  001CBA  1E48               	comf	___fttol@lval+1,f,c
  1943  001CBC  6C47               	negf	___fttol@lval,c
  1944  001CBE  0E00               	movlw	0
  1945  001CC0  2248               	addwfc	___fttol@lval+1,f,c
  1946  001CC2  2249               	addwfc	___fttol@lval+2,f,c
  1947  001CC4  224A               	addwfc	___fttol@lval+3,f,c
  1948  001CC6                     l1834:
  1949  001CC6  C047  F03D         	movff	___fttol@lval,?___fttol
  1950  001CCA  C048  F03E         	movff	___fttol@lval+1,?___fttol+1
  1951  001CCE  C049  F03F         	movff	___fttol@lval+2,?___fttol+2
  1952  001CD2  C04A  F040         	movff	___fttol@lval+3,?___fttol+3
  1953  001CD6  0012               	return	
  1954  001CD8                     __end_of___fttol:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           intcon	equ	0xFF2
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function ___ftmul *****************
  1963 ;; Defined at:
  1964 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  f1              3   33[COMRAM] float 
  1967 ;;  f2              3   36[COMRAM] float 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  f3_as_produc    3   43[COMRAM] unsigned um
  1970 ;;  sign            1   47[COMRAM] unsigned char 
  1971 ;;  cntr            1   46[COMRAM] unsigned char 
  1972 ;;  exp             1   42[COMRAM] unsigned char 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  3   33[COMRAM] float 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:       15 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    2
  1989 ;; This function calls:
  1990 ;;		___ftpack
  1991 ;; This function is called by:
  1992 ;;		_main
  1993 ;;		_wheelVelocity
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text3
  1998  001CD8                     __ptext3:
  1999                           	opt stack 0
  2000  001CD8                     ___ftmul:
  2001                           	opt stack 27
  2002                           
  2003                           ;incstack = 0
  2004  001CD8  C024  F028         	movff	___ftmul@f1+2,??___ftmul
  2005  001CDC  6A29               	clrf	(??___ftmul+1)& (0+255),c
  2006  001CDE  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  2007  001CE0  3423               	rlcf	___ftmul@f1+1,w,c
  2008  001CE2  3628               	rlcf	??___ftmul& (0+255),f,c
  2009  001CE4  E301               	bnc	u1411
  2010  001CE6  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  2011  001CE8                     u1411:
  2012  001CE8  5028               	movf	??___ftmul,w,c
  2013  001CEA  6E2B               	movwf	___ftmul@exp,c
  2014  001CEC  502B               	movf	___ftmul@exp,w,c
  2015  001CEE  A4D8               	btfss	status,2,c
  2016  001CF0  D007               	goto	l1738
  2017  001CF2  0E00               	movlw	0
  2018  001CF4  6E22               	movwf	?___ftmul,c
  2019  001CF6  0E00               	movlw	0
  2020  001CF8  6E23               	movwf	?___ftmul+1,c
  2021  001CFA  0E00               	movlw	0
  2022  001CFC  6E24               	movwf	?___ftmul+2,c
  2023  001CFE  0012               	return	
  2024  001D00                     l1738:
  2025  001D00  C027  F028         	movff	___ftmul@f2+2,??___ftmul
  2026  001D04  6A29               	clrf	(??___ftmul+1)& (0+255),c
  2027  001D06  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  2028  001D08  3426               	rlcf	___ftmul@f2+1,w,c
  2029  001D0A  3628               	rlcf	??___ftmul& (0+255),f,c
  2030  001D0C  E301               	bnc	u1431
  2031  001D0E  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  2032  001D10                     u1431:
  2033  001D10  5028               	movf	??___ftmul,w,c
  2034  001D12  6E30               	movwf	___ftmul@sign,c
  2035  001D14  5030               	movf	___ftmul@sign,w,c
  2036  001D16  A4D8               	btfss	status,2,c
  2037  001D18  D007               	goto	l1744
  2038  001D1A  0E00               	movlw	0
  2039  001D1C  6E22               	movwf	?___ftmul,c
  2040  001D1E  0E00               	movlw	0
  2041  001D20  6E23               	movwf	?___ftmul+1,c
  2042  001D22  0E00               	movlw	0
  2043  001D24  6E24               	movwf	?___ftmul+2,c
  2044  001D26  0012               	return	
  2045  001D28                     l1744:
  2046  001D28  5030               	movf	___ftmul@sign,w,c
  2047  001D2A  0F7B               	addlw	123
  2048  001D2C  262B               	addwf	___ftmul@exp,f,c
  2049  001D2E  C024  F030         	movff	___ftmul@f1+2,___ftmul@sign
  2050  001D32  5027               	movf	___ftmul@f2+2,w,c
  2051  001D34  1A30               	xorwf	___ftmul@sign,f,c
  2052  001D36  0E80               	movlw	128
  2053  001D38  1630               	andwf	___ftmul@sign,f,c
  2054  001D3A  8E23               	bsf	___ftmul@f1+1,7,c
  2055  001D3C  8E26               	bsf	___ftmul@f2+1,7,c
  2056  001D3E  0EFF               	movlw	255
  2057  001D40  1625               	andwf	___ftmul@f2,f,c
  2058  001D42  0EFF               	movlw	255
  2059  001D44  1626               	andwf	___ftmul@f2+1,f,c
  2060  001D46  0E00               	movlw	0
  2061  001D48  1627               	andwf	___ftmul@f2+2,f,c
  2062  001D4A  0E00               	movlw	0
  2063  001D4C  6E2C               	movwf	___ftmul@f3_as_product,c
  2064  001D4E  0E00               	movlw	0
  2065  001D50  6E2D               	movwf	___ftmul@f3_as_product+1,c
  2066  001D52  0E00               	movlw	0
  2067  001D54  6E2E               	movwf	___ftmul@f3_as_product+2,c
  2068  001D56  0E07               	movlw	7
  2069  001D58  6E2F               	movwf	___ftmul@cntr,c
  2070  001D5A                     l1758:
  2071  001D5A  A022               	btfss	___ftmul@f1,0,c
  2072  001D5C  D006               	goto	l1762
  2073  001D5E  5025               	movf	___ftmul@f2,w,c
  2074  001D60  262C               	addwf	___ftmul@f3_as_product,f,c
  2075  001D62  5026               	movf	___ftmul@f2+1,w,c
  2076  001D64  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  2077  001D66  5027               	movf	___ftmul@f2+2,w,c
  2078  001D68  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  2079  001D6A                     l1762:
  2080  001D6A  90D8               	bcf	status,0,c
  2081  001D6C  3224               	rrcf	___ftmul@f1+2,f,c
  2082  001D6E  3223               	rrcf	___ftmul@f1+1,f,c
  2083  001D70  3222               	rrcf	___ftmul@f1,f,c
  2084  001D72  90D8               	bcf	status,0,c
  2085  001D74  3625               	rlcf	___ftmul@f2,f,c
  2086  001D76  3626               	rlcf	___ftmul@f2+1,f,c
  2087  001D78  3627               	rlcf	___ftmul@f2+2,f,c
  2088  001D7A  2E2F               	decfsz	___ftmul@cntr,f,c
  2089  001D7C  D7EE               	goto	l1758
  2090  001D7E  0E09               	movlw	9
  2091  001D80  6E2F               	movwf	___ftmul@cntr,c
  2092  001D82                     l1768:
  2093  001D82  A022               	btfss	___ftmul@f1,0,c
  2094  001D84  D006               	goto	l1772
  2095  001D86  5025               	movf	___ftmul@f2,w,c
  2096  001D88  262C               	addwf	___ftmul@f3_as_product,f,c
  2097  001D8A  5026               	movf	___ftmul@f2+1,w,c
  2098  001D8C  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  2099  001D8E  5027               	movf	___ftmul@f2+2,w,c
  2100  001D90  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  2101  001D92                     l1772:
  2102  001D92  90D8               	bcf	status,0,c
  2103  001D94  3224               	rrcf	___ftmul@f1+2,f,c
  2104  001D96  3223               	rrcf	___ftmul@f1+1,f,c
  2105  001D98  3222               	rrcf	___ftmul@f1,f,c
  2106  001D9A  90D8               	bcf	status,0,c
  2107  001D9C  322E               	rrcf	___ftmul@f3_as_product+2,f,c
  2108  001D9E  322D               	rrcf	___ftmul@f3_as_product+1,f,c
  2109  001DA0  322C               	rrcf	___ftmul@f3_as_product,f,c
  2110  001DA2  2E2F               	decfsz	___ftmul@cntr,f,c
  2111  001DA4  D7EE               	goto	l1768
  2112  001DA6  C02C  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  2113  001DAA  C02D  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2114  001DAE  C02E  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2115  001DB2  C02B  F014         	movff	___ftmul@exp,___ftpack@exp
  2116  001DB6  C030  F015         	movff	___ftmul@sign,___ftpack@sign
  2117  001DBA  ECA0  F00F         	call	___ftpack	;wreg free
  2118  001DBE  C011  F022         	movff	?___ftpack,?___ftmul
  2119  001DC2  C012  F023         	movff	?___ftpack+1,?___ftmul+1
  2120  001DC6  C013  F024         	movff	?___ftpack+2,?___ftmul+2
  2121  001DCA  0012               	return	
  2122  001DCC                     __end_of___ftmul:
  2123                           	opt stack 0
  2124                           tblptru	equ	0xFF8
  2125                           intcon	equ	0xFF2
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           status	equ	0xFD8
  2129                           
  2130 ;; *************** function ___ftadd *****************
  2131 ;; Defined at:
  2132 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  f1              3   48[COMRAM] float 
  2135 ;;  f2              3   51[COMRAM] float 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;  exp1            1   59[COMRAM] unsigned char 
  2138 ;;  exp2            1   58[COMRAM] unsigned char 
  2139 ;;  sign            1   57[COMRAM] unsigned char 
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  3   48[COMRAM] float 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2, status,0, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2149 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;Total ram usage:       12 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    2
  2156 ;; This function calls:
  2157 ;;		___ftpack
  2158 ;; This function is called by:
  2159 ;;		_wheelVelocity
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text4
  2164  00193C                     __ptext4:
  2165                           	opt stack 0
  2166  00193C                     ___ftadd:
  2167                           	opt stack 27
  2168                           
  2169                           ;incstack = 0
  2170  00193C  C033  F037         	movff	___ftadd@f1+2,??___ftadd
  2171  001940  6A38               	clrf	(??___ftadd+1)& (0+255),c
  2172  001942  6A39               	clrf	(??___ftadd+2)& (0+255),c
  2173  001944  3432               	rlcf	___ftadd@f1+1,w,c
  2174  001946  3637               	rlcf	??___ftadd& (0+255),f,c
  2175  001948  E301               	bnc	u1201
  2176  00194A  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  2177  00194C                     u1201:
  2178  00194C  5037               	movf	??___ftadd,w,c
  2179  00194E  6E3C               	movwf	___ftadd@exp1,c
  2180  001950  C036  F037         	movff	___ftadd@f2+2,??___ftadd
  2181  001954  6A38               	clrf	(??___ftadd+1)& (0+255),c
  2182  001956  6A39               	clrf	(??___ftadd+2)& (0+255),c
  2183  001958  3435               	rlcf	___ftadd@f2+1,w,c
  2184  00195A  3637               	rlcf	??___ftadd& (0+255),f,c
  2185  00195C  E301               	bnc	u1211
  2186  00195E  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  2187  001960                     u1211:
  2188  001960  5037               	movf	??___ftadd,w,c
  2189  001962  6E3B               	movwf	___ftadd@exp2,c
  2190  001964  503C               	movf	___ftadd@exp1,w,c
  2191  001966  B4D8               	btfsc	status,2,c
  2192  001968  D00B               	goto	l505
  2193  00196A  503B               	movf	___ftadd@exp2,w,c
  2194  00196C  5C3C               	subwf	___ftadd@exp1,w,c
  2195  00196E  B0D8               	btfsc	status,0,c
  2196  001970  D00E               	goto	l1670
  2197  001972  503C               	movf	___ftadd@exp1,w,c
  2198  001974  0800               	sublw	0
  2199  001976  243B               	addwf	___ftadd@exp2,w,c
  2200  001978  6E37               	movwf	??___ftadd& (0+255),c
  2201  00197A  0E18               	movlw	24
  2202  00197C  6437               	cpfsgt	??___ftadd,c
  2203  00197E  D007               	goto	l1670
  2204  001980                     l505:
  2205  001980  C034  F031         	movff	___ftadd@f2,?___ftadd
  2206  001984  C035  F032         	movff	___ftadd@f2+1,?___ftadd+1
  2207  001988  C036  F033         	movff	___ftadd@f2+2,?___ftadd+2
  2208  00198C  0012               	return	
  2209  00198E                     l1670:
  2210  00198E  503B               	movf	___ftadd@exp2,w,c
  2211  001990  B4D8               	btfsc	status,2,c
  2212  001992  D00B               	goto	l509
  2213  001994  503C               	movf	___ftadd@exp1,w,c
  2214  001996  5C3B               	subwf	___ftadd@exp2,w,c
  2215  001998  B0D8               	btfsc	status,0,c
  2216  00199A  D00E               	goto	l1676
  2217  00199C  503B               	movf	___ftadd@exp2,w,c
  2218  00199E  0800               	sublw	0
  2219  0019A0  243C               	addwf	___ftadd@exp1,w,c
  2220  0019A2  6E37               	movwf	??___ftadd& (0+255),c
  2221  0019A4  0E18               	movlw	24
  2222  0019A6  6437               	cpfsgt	??___ftadd,c
  2223  0019A8  D007               	goto	l1676
  2224  0019AA                     l509:
  2225  0019AA  C031  F031         	movff	___ftadd@f1,?___ftadd
  2226  0019AE  C032  F032         	movff	___ftadd@f1+1,?___ftadd+1
  2227  0019B2  C033  F033         	movff	___ftadd@f1+2,?___ftadd+2
  2228  0019B6  0012               	return	
  2229  0019B8                     l1676:
  2230  0019B8  0E06               	movlw	6
  2231  0019BA  6E3A               	movwf	___ftadd@sign,c
  2232  0019BC  BE33               	btfsc	___ftadd@f1+2,7,c
  2233  0019BE  8E3A               	bsf	___ftadd@sign,7,c
  2234  0019C0  BE36               	btfsc	___ftadd@f2+2,7,c
  2235  0019C2  8C3A               	bsf	___ftadd@sign,6,c
  2236  0019C4  8E32               	bsf	___ftadd@f1+1,7,c
  2237  0019C6  0EFF               	movlw	255
  2238  0019C8  1631               	andwf	___ftadd@f1,f,c
  2239  0019CA  0EFF               	movlw	255
  2240  0019CC  1632               	andwf	___ftadd@f1+1,f,c
  2241  0019CE  0E00               	movlw	0
  2242  0019D0  1633               	andwf	___ftadd@f1+2,f,c
  2243  0019D2  8E35               	bsf	___ftadd@f2+1,7,c
  2244  0019D4  0EFF               	movlw	255
  2245  0019D6  1634               	andwf	___ftadd@f2,f,c
  2246  0019D8  0EFF               	movlw	255
  2247  0019DA  1635               	andwf	___ftadd@f2+1,f,c
  2248  0019DC  0E00               	movlw	0
  2249  0019DE  1636               	andwf	___ftadd@f2+2,f,c
  2250  0019E0  503B               	movf	___ftadd@exp2,w,c
  2251  0019E2  5C3C               	subwf	___ftadd@exp1,w,c
  2252  0019E4  B0D8               	btfsc	status,0,c
  2253  0019E6  D01B               	goto	l1702
  2254  0019E8                     l1692:
  2255  0019E8  90D8               	bcf	status,0,c
  2256  0019EA  3634               	rlcf	___ftadd@f2,f,c
  2257  0019EC  3635               	rlcf	___ftadd@f2+1,f,c
  2258  0019EE  3636               	rlcf	___ftadd@f2+2,f,c
  2259  0019F0  063B               	decf	___ftadd@exp2,f,c
  2260  0019F2  503C               	movf	___ftadd@exp1,w,c
  2261  0019F4  183B               	xorwf	___ftadd@exp2,w,c
  2262  0019F6  B4D8               	btfsc	status,2,c
  2263  0019F8  D00D               	goto	l1700
  2264  0019FA  063A               	decf	___ftadd@sign,f,c
  2265  0019FC  C03A  F037         	movff	___ftadd@sign,??___ftadd
  2266  001A00  0E07               	movlw	7
  2267  001A02  1637               	andwf	??___ftadd,f,c
  2268  001A04  B4D8               	btfsc	status,2,c
  2269  001A06  D006               	goto	l1700
  2270  001A08  D7EF               	goto	l1692
  2271  001A0A                     l1698:
  2272  001A0A  90D8               	bcf	status,0,c
  2273  001A0C  3233               	rrcf	___ftadd@f1+2,f,c
  2274  001A0E  3232               	rrcf	___ftadd@f1+1,f,c
  2275  001A10  3231               	rrcf	___ftadd@f1,f,c
  2276  001A12  2A3C               	incf	___ftadd@exp1,f,c
  2277  001A14                     l1700:
  2278  001A14  503B               	movf	___ftadd@exp2,w,c
  2279  001A16  183C               	xorwf	___ftadd@exp1,w,c
  2280  001A18  B4D8               	btfsc	status,2,c
  2281  001A1A  D01F               	goto	l520
  2282  001A1C  D7F6               	goto	l1698
  2283  001A1E                     l1702:
  2284  001A1E  503C               	movf	___ftadd@exp1,w,c
  2285  001A20  5C3B               	subwf	___ftadd@exp2,w,c
  2286  001A22  B0D8               	btfsc	status,0,c
  2287  001A24  D01A               	goto	l520
  2288  001A26                     l1704:
  2289  001A26  90D8               	bcf	status,0,c
  2290  001A28  3631               	rlcf	___ftadd@f1,f,c
  2291  001A2A  3632               	rlcf	___ftadd@f1+1,f,c
  2292  001A2C  3633               	rlcf	___ftadd@f1+2,f,c
  2293  001A2E  063C               	decf	___ftadd@exp1,f,c
  2294  001A30  503C               	movf	___ftadd@exp1,w,c
  2295  001A32  183B               	xorwf	___ftadd@exp2,w,c
  2296  001A34  B4D8               	btfsc	status,2,c
  2297  001A36  D00D               	goto	l1712
  2298  001A38  063A               	decf	___ftadd@sign,f,c
  2299  001A3A  C03A  F037         	movff	___ftadd@sign,??___ftadd
  2300  001A3E  0E07               	movlw	7
  2301  001A40  1637               	andwf	??___ftadd,f,c
  2302  001A42  B4D8               	btfsc	status,2,c
  2303  001A44  D006               	goto	l1712
  2304  001A46  D7EF               	goto	l1704
  2305  001A48                     l1710:
  2306  001A48  90D8               	bcf	status,0,c
  2307  001A4A  3236               	rrcf	___ftadd@f2+2,f,c
  2308  001A4C  3235               	rrcf	___ftadd@f2+1,f,c
  2309  001A4E  3234               	rrcf	___ftadd@f2,f,c
  2310  001A50  2A3B               	incf	___ftadd@exp2,f,c
  2311  001A52                     l1712:
  2312  001A52  503B               	movf	___ftadd@exp2,w,c
  2313  001A54  183C               	xorwf	___ftadd@exp1,w,c
  2314  001A56  A4D8               	btfss	status,2,c
  2315  001A58  D7F7               	goto	l1710
  2316  001A5A                     l520:
  2317  001A5A  AE3A               	btfss	___ftadd@sign,7,c
  2318  001A5C  D00C               	goto	l529
  2319  001A5E  0EFF               	movlw	255
  2320  001A60  1A31               	xorwf	___ftadd@f1,f,c
  2321  001A62  0EFF               	movlw	255
  2322  001A64  1A32               	xorwf	___ftadd@f1+1,f,c
  2323  001A66  0EFF               	movlw	255
  2324  001A68  1A33               	xorwf	___ftadd@f1+2,f,c
  2325  001A6A  0E01               	movlw	1
  2326  001A6C  2631               	addwf	___ftadd@f1,f,c
  2327  001A6E  0E00               	movlw	0
  2328  001A70  2232               	addwfc	___ftadd@f1+1,f,c
  2329  001A72  0E00               	movlw	0
  2330  001A74  2233               	addwfc	___ftadd@f1+2,f,c
  2331  001A76                     l529:
  2332  001A76  AC3A               	btfss	___ftadd@sign,6,c
  2333  001A78  D00C               	goto	l1718
  2334  001A7A  0EFF               	movlw	255
  2335  001A7C  1A34               	xorwf	___ftadd@f2,f,c
  2336  001A7E  0EFF               	movlw	255
  2337  001A80  1A35               	xorwf	___ftadd@f2+1,f,c
  2338  001A82  0EFF               	movlw	255
  2339  001A84  1A36               	xorwf	___ftadd@f2+2,f,c
  2340  001A86  0E01               	movlw	1
  2341  001A88  2634               	addwf	___ftadd@f2,f,c
  2342  001A8A  0E00               	movlw	0
  2343  001A8C  2235               	addwfc	___ftadd@f2+1,f,c
  2344  001A8E  0E00               	movlw	0
  2345  001A90  2236               	addwfc	___ftadd@f2+2,f,c
  2346  001A92                     l1718:
  2347  001A92  0E00               	movlw	0
  2348  001A94  6E3A               	movwf	___ftadd@sign,c
  2349  001A96  5031               	movf	___ftadd@f1,w,c
  2350  001A98  2634               	addwf	___ftadd@f2,f,c
  2351  001A9A  5032               	movf	___ftadd@f1+1,w,c
  2352  001A9C  2235               	addwfc	___ftadd@f2+1,f,c
  2353  001A9E  5033               	movf	___ftadd@f1+2,w,c
  2354  001AA0  2236               	addwfc	___ftadd@f2+2,f,c
  2355  001AA2  AE36               	btfss	___ftadd@f2+2,7,c
  2356  001AA4  D00E               	goto	l1728
  2357  001AA6  0EFF               	movlw	255
  2358  001AA8  1A34               	xorwf	___ftadd@f2,f,c
  2359  001AAA  0EFF               	movlw	255
  2360  001AAC  1A35               	xorwf	___ftadd@f2+1,f,c
  2361  001AAE  0EFF               	movlw	255
  2362  001AB0  1A36               	xorwf	___ftadd@f2+2,f,c
  2363  001AB2  0E01               	movlw	1
  2364  001AB4  2634               	addwf	___ftadd@f2,f,c
  2365  001AB6  0E00               	movlw	0
  2366  001AB8  2235               	addwfc	___ftadd@f2+1,f,c
  2367  001ABA  0E00               	movlw	0
  2368  001ABC  2236               	addwfc	___ftadd@f2+2,f,c
  2369  001ABE  0E01               	movlw	1
  2370  001AC0  6E3A               	movwf	___ftadd@sign,c
  2371  001AC2                     l1728:
  2372  001AC2  C034  F011         	movff	___ftadd@f2,___ftpack@arg
  2373  001AC6  C035  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  2374  001ACA  C036  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  2375  001ACE  C03C  F014         	movff	___ftadd@exp1,___ftpack@exp
  2376  001AD2  C03A  F015         	movff	___ftadd@sign,___ftpack@sign
  2377  001AD6  ECA0  F00F         	call	___ftpack	;wreg free
  2378  001ADA  C011  F031         	movff	?___ftpack,?___ftadd
  2379  001ADE  C012  F032         	movff	?___ftpack+1,?___ftadd+1
  2380  001AE2  C013  F033         	movff	?___ftpack+2,?___ftadd+2
  2381  001AE6  0012               	return	
  2382  001AE8                     __end_of___ftadd:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           intcon	equ	0xFF2
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function ___awtoft *****************
  2391 ;; Defined at:
  2392 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  c               2   24[COMRAM] int 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  sign            1   27[COMRAM] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  3   24[COMRAM] float 
  2399 ;; Registers used:
  2400 ;;		wreg, status,2, status,0, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:        4 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    2
  2413 ;; This function calls:
  2414 ;;		___ftpack
  2415 ;; This function is called by:
  2416 ;;		_wheelVelocity
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text5
  2421  00216E                     __ptext5:
  2422                           	opt stack 0
  2423  00216E                     ___awtoft:
  2424                           	opt stack 27
  2425                           
  2426                           ;incstack = 0
  2427  00216E  0E00               	movlw	0
  2428  002170  6E1C               	movwf	___awtoft@sign,c
  2429  002172  AE1A               	btfss	___awtoft@c+1,7,c
  2430  002174  D006               	goto	l1788
  2431  002176  6C19               	negf	___awtoft@c,c
  2432  002178  1E1A               	comf	___awtoft@c+1,f,c
  2433  00217A  B0D8               	btfsc	status,0,c
  2434  00217C  2A1A               	incf	___awtoft@c+1,f,c
  2435  00217E  0E01               	movlw	1
  2436  002180  6E1C               	movwf	___awtoft@sign,c
  2437  002182                     l1788:
  2438  002182  C019  F011         	movff	___awtoft@c,___ftpack@arg
  2439  002186  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  2440  00218A  6A13               	clrf	___ftpack@arg+2,c
  2441  00218C  0E8E               	movlw	142
  2442  00218E  6E14               	movwf	___ftpack@exp,c
  2443  002190  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  2444  002194  ECA0  F00F         	call	___ftpack	;wreg free
  2445  002198  C011  F019         	movff	?___ftpack,?___awtoft
  2446  00219C  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  2447  0021A0  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  2448  0021A4  0012               	return	
  2449  0021A6                     __end_of___awtoft:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           intcon	equ	0xFF2
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           status	equ	0xFD8
  2456                           
  2457 ;; *************** function _printf *****************
  2458 ;; Defined at:
  2459 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2462 ;;		 -> STR_2(3), STR_1(11), 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  tmpval          4    0        struct .
  2465 ;;  cp              3    0        PTR const unsigned char 
  2466 ;;  width           2   42[COMRAM] int 
  2467 ;;  val             2   40[COMRAM] unsigned int 
  2468 ;;  ap              2   36[COMRAM] PTR void [1]
  2469 ;;		 -> ?_printf(2), 
  2470 ;;  len             2    0        unsigned int 
  2471 ;;  c               1   44[COMRAM] char 
  2472 ;;  flag            1   39[COMRAM] unsigned char 
  2473 ;;  prec            1   38[COMRAM] char 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  2   28[COMRAM] int 
  2476 ;; Registers used:
  2477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2484 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2486 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;Total ram usage:       17 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    4
  2490 ;; This function calls:
  2491 ;;		___lwdiv
  2492 ;;		___lwmod
  2493 ;;		___wmul
  2494 ;;		_isdigit
  2495 ;;		_putch
  2496 ;; This function is called by:
  2497 ;;		_main
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text6
  2502  00173C                     __ptext6:
  2503                           	opt stack 0
  2504  00173C                     _printf:
  2505                           	opt stack 26
  2506                           
  2507                           ;doprnt.c: 466: va_list ap;
  2508                           ;doprnt.c: 499: signed char c;
  2509                           ;doprnt.c: 501: int width;
  2510                           ;doprnt.c: 506: signed char prec;
  2511                           ;doprnt.c: 508: unsigned char flag;
  2512                           ;doprnt.c: 523: union {
  2513                           ;doprnt.c: 524: unsigned long vd;
  2514                           ;doprnt.c: 525: double integ;
  2515                           ;doprnt.c: 526: } tmpval;
  2516                           ;doprnt.c: 528: unsigned int val;
  2517                           ;doprnt.c: 529: unsigned len;
  2518                           ;doprnt.c: 530: const char * cp;
  2519                           ;doprnt.c: 533: *ap = __va_start();
  2520                           
  2521                           ;incstack = 0
  2522  00173C  0E1F               	movlw	low (?_printf+2)
  2523  00173E  6E25               	movwf	printf@ap,c
  2524  001740  0E00               	movlw	high (?_printf+2)
  2525  001742  6E26               	movwf	printf@ap+1,c
  2526                           
  2527                           ;doprnt.c: 536: while(c = *f++) {
  2528  001744  D0EE               	goto	l2002
  2529  001746                     l1926:
  2530                           
  2531                           ;doprnt.c: 538: if(c != '%')
  2532  001746  0E25               	movlw	37
  2533  001748  182D               	xorwf	printf@c,w,c
  2534  00174A  B4D8               	btfsc	status,2,c
  2535  00174C  D004               	goto	l1930
  2536                           
  2537                           ;doprnt.c: 540: {
  2538                           ;doprnt.c: 541: (putch(c) );
  2539  00174E  502D               	movf	printf@c,w,c
  2540  001750  EC25  F011         	call	_putch
  2541                           
  2542                           ;doprnt.c: 542: continue;
  2543  001754  D0E6               	goto	l2002
  2544  001756                     l1930:
  2545                           
  2546                           ;doprnt.c: 543: }
  2547                           ;doprnt.c: 546: width = 0;
  2548  001756  0E00               	movlw	0
  2549  001758  6E2C               	movwf	printf@width+1,c
  2550  00175A  0E00               	movlw	0
  2551  00175C  6E2B               	movwf	printf@width,c
  2552                           
  2553                           ;doprnt.c: 548: flag = 0;
  2554  00175E  0E00               	movlw	0
  2555  001760  6E28               	movwf	printf@flag,c
  2556                           
  2557                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2558  001762  C01D  FFF6         	movff	printf@f,tblptrl
  2559  001766  C01E  FFF7         	movff	printf@f+1,tblptrh
  2560  00176A                     	if	0	;tblptru may be non-zero
  2561  00176A                     	endif
  2562  00176A                     	if	0	;tblptru may be non-zero
  2563  00176A                     	endif
  2564  00176A  0008               	tblrd		*
  2565  00176C  50F5               	movf	tablat,w,c
  2566  00176E  ECF5  F010         	call	_isdigit
  2567  001772  A0D8               	btfss	status,0,c
  2568  001774  D032               	goto	l1946
  2569                           
  2570                           ;doprnt.c: 598: width = 0;
  2571  001776  0E00               	movlw	0
  2572  001778  6E2C               	movwf	printf@width+1,c
  2573  00177A  0E00               	movlw	0
  2574  00177C  6E2B               	movwf	printf@width,c
  2575  00177E                     l1936:
  2576                           
  2577                           ;doprnt.c: 600: width *= 10;
  2578  00177E  C02B  F011         	movff	printf@width,___wmul@multiplier
  2579  001782  C02C  F012         	movff	printf@width+1,___wmul@multiplier+1
  2580  001786  0E00               	movlw	0
  2581  001788  6E14               	movwf	___wmul@multiplicand+1,c
  2582  00178A  0E0A               	movlw	10
  2583  00178C  6E13               	movwf	___wmul@multiplicand,c
  2584  00178E  ECD3  F010         	call	___wmul	;wreg free
  2585  001792  C011  F02B         	movff	?___wmul,printf@width
  2586  001796  C012  F02C         	movff	?___wmul+1,printf@width+1
  2587                           
  2588                           ;doprnt.c: 601: width += *f++ - '0';
  2589  00179A  0ED0               	movlw	208
  2590  00179C  6E21               	movwf	??_printf& (0+255),c
  2591  00179E  0EFF               	movlw	255
  2592  0017A0  6E22               	movwf	(??_printf+1)& (0+255),c
  2593  0017A2  C01D  FFF6         	movff	printf@f,tblptrl
  2594  0017A6  C01E  FFF7         	movff	printf@f+1,tblptrh
  2595  0017AA                     	if	0	;tblptru may be non-zero
  2596  0017AA                     	endif
  2597  0017AA                     	if	0	;tblptru may be non-zero
  2598  0017AA                     	endif
  2599  0017AA  0008               	tblrd		*
  2600  0017AC  50F5               	movf	tablat,w,c
  2601  0017AE  6E23               	movwf	(??_printf+2)& (0+255),c
  2602  0017B0  6A24               	clrf	(??_printf+3)& (0+255),c
  2603  0017B2  5021               	movf	??_printf,w,c
  2604  0017B4  2623               	addwf	??_printf+2,f,c
  2605  0017B6  5022               	movf	??_printf+1,w,c
  2606  0017B8  2224               	addwfc	??_printf+3,f,c
  2607  0017BA  5023               	movf	??_printf+2,w,c
  2608  0017BC  262B               	addwf	printf@width,f,c
  2609  0017BE  5024               	movf	??_printf+3,w,c
  2610  0017C0  222C               	addwfc	printf@width+1,f,c
  2611  0017C2  4A1D               	infsnz	printf@f,f,c
  2612  0017C4  2A1E               	incf	printf@f+1,f,c
  2613                           
  2614                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2615  0017C6  C01D  FFF6         	movff	printf@f,tblptrl
  2616  0017CA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2617  0017CE                     	if	0	;tblptru may be non-zero
  2618  0017CE                     	endif
  2619  0017CE                     	if	0	;tblptru may be non-zero
  2620  0017CE                     	endif
  2621  0017CE  0008               	tblrd		*
  2622  0017D0  50F5               	movf	tablat,w,c
  2623  0017D2  ECF5  F010         	call	_isdigit
  2624  0017D6  B0D8               	btfsc	status,0,c
  2625  0017D8  D7D2               	goto	l1936
  2626  0017DA                     l1946:
  2627  0017DA  C01D  FFF6         	movff	printf@f,tblptrl
  2628  0017DE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2629  0017E2  4A1D               	infsnz	printf@f,f,c
  2630  0017E4  2A1E               	incf	printf@f+1,f,c
  2631  0017E6                     	if	0	;tblptru may be non-zero
  2632  0017E6                     	endif
  2633  0017E6                     	if	0	;tblptru may be non-zero
  2634  0017E6                     	endif
  2635  0017E6  0008               	tblrd		*
  2636  0017E8  CFF5 F02D          	movff	tablat,printf@c
  2637  0017EC  502D               	movf	printf@c,w,c
  2638                           
  2639                           ; Switch size 1, requested type "space"
  2640                           ; Number of cases is 3, Range of values is 0 to 105
  2641                           ; switch strategies available:
  2642                           ; Name         Instructions Cycles
  2643                           ; simple_byte           10     6 (average)
  2644                           ;	Chosen strategy is simple_byte
  2645  0017EE  0A00               	xorlw	0	; case 0
  2646  0017F0  B4D8               	btfsc	status,2,c
  2647  0017F2  0012               	return	
  2648  0017F4  0A64               	xorlw	100	; case 100
  2649  0017F6  B4D8               	btfsc	status,2,c
  2650  0017F8  D003               	goto	l1948
  2651  0017FA  0A0D               	xorlw	13	; case 105
  2652  0017FC  A4D8               	btfss	status,2,c
  2653  0017FE  D091               	goto	l2002
  2654  001800                     l1948:
  2655                           
  2656                           ;doprnt.c: 1253: {
  2657                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2658  001800  C025  FFD9         	movff	printf@ap,fsr2l
  2659  001804  C026  FFDA         	movff	printf@ap+1,fsr2h
  2660  001808  CFDE F029          	movff	postinc2,printf@val
  2661  00180C  CFDD F02A          	movff	postdec2,printf@val+1
  2662  001810  0E02               	movlw	2
  2663  001812  2625               	addwf	printf@ap,f,c
  2664  001814  0E00               	movlw	0
  2665  001816  2226               	addwfc	printf@ap+1,f,c
  2666                           
  2667                           ;doprnt.c: 1261: if((int)val < 0) {
  2668  001818  AE2A               	btfss	printf@val+1,7,c
  2669  00181A  D006               	goto	l1958
  2670                           
  2671                           ;doprnt.c: 1262: flag |= 0x03;
  2672  00181C  0E03               	movlw	3
  2673  00181E  1228               	iorwf	printf@flag,f,c
  2674                           
  2675                           ;doprnt.c: 1263: val = -val;
  2676  001820  6C29               	negf	printf@val,c
  2677  001822  1E2A               	comf	printf@val+1,f,c
  2678  001824  B0D8               	btfsc	status,0,c
  2679  001826  2A2A               	incf	printf@val+1,f,c
  2680  001828                     l1958:
  2681                           
  2682                           ;doprnt.c: 1264: }
  2683                           ;doprnt.c: 1266: }
  2684                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2685  001828  0E01               	movlw	1
  2686  00182A  6E2D               	movwf	printf@c,c
  2687  00182C                     l1960:
  2688  00182C  0E05               	movlw	5
  2689  00182E  182D               	xorwf	printf@c,w,c
  2690  001830  B4D8               	btfsc	status,2,c
  2691  001832  D012               	goto	l1972
  2692                           
  2693                           ;doprnt.c: 1306: if(val < dpowers[c])
  2694  001834  502D               	movf	printf@c,w,c
  2695  001836  0D02               	mullw	2
  2696  001838  0E01               	movlw	low _dpowers
  2697  00183A  24F3               	addwf	prodl,w,c
  2698  00183C  6EF6               	movwf	tblptrl,c
  2699  00183E  0E10               	movlw	high _dpowers
  2700  001840  20F4               	addwfc	prodh,w,c
  2701  001842  6EF7               	movwf	tblptrh,c
  2702  001844                     	if	0	;There are less than 3 active tblptr bytes
  2703  001844                     	endif
  2704  001844  0009               	tblrd		*+
  2705  001846  50F5               	movf	tablat,w,c
  2706  001848  5C29               	subwf	printf@val,w,c
  2707  00184A  0009               	tblrd		*+
  2708  00184C  50F5               	movf	tablat,w,c
  2709  00184E  582A               	subwfb	printf@val+1,w,c
  2710  001850  A0D8               	btfss	status,0,c
  2711  001852  D002               	goto	l1972
  2712                           
  2713                           ;doprnt.c: 1307: break;
  2714  001854  2A2D               	incf	printf@c,f,c
  2715  001856  D7EA               	goto	l1960
  2716  001858                     l1972:
  2717                           
  2718                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2719  001858  502B               	movf	printf@width,w,c
  2720  00185A  102C               	iorwf	printf@width+1,w,c
  2721  00185C  B4D8               	btfsc	status,2,c
  2722  00185E  D009               	goto	l1978
  2723  001860  C028  F021         	movff	printf@flag,??_printf
  2724  001864  0E03               	movlw	3
  2725  001866  1621               	andwf	??_printf,f,c
  2726  001868  B4D8               	btfsc	status,2,c
  2727  00186A  D003               	goto	l1978
  2728                           
  2729                           ;doprnt.c: 1346: width--;
  2730  00186C  062B               	decf	printf@width,f,c
  2731  00186E  A0D8               	btfss	status,0,c
  2732  001870  062C               	decf	printf@width+1,f,c
  2733  001872                     l1978:
  2734                           
  2735                           ;doprnt.c: 1381: if(width > c)
  2736  001872  0E80               	movlw	128
  2737  001874  BE2D               	btfsc	printf@c,7,c
  2738  001876  0E7F               	movlw	127
  2739  001878  6E21               	movwf	??_printf& (0+255),c
  2740  00187A  502B               	movf	printf@width,w,c
  2741  00187C  5C2D               	subwf	printf@c,w,c
  2742  00187E  502C               	movf	printf@width+1,w,c
  2743  001880  0A80               	xorlw	128
  2744  001882  5821               	subwfb	??_printf& (0+255),w,c
  2745  001884  B0D8               	btfsc	status,0,c
  2746  001886  D007               	goto	l1982
  2747                           
  2748                           ;doprnt.c: 1382: width -= c;
  2749  001888  502D               	movf	printf@c,w,c
  2750  00188A  5E2B               	subwf	printf@width,f,c
  2751  00188C  0E00               	movlw	0
  2752  00188E  BE2D               	btfsc	printf@c,7,c
  2753  001890  0EFF               	movlw	255
  2754  001892  5A2C               	subwfb	printf@width+1,f,c
  2755  001894  D004               	goto	l1984
  2756  001896                     l1982:
  2757                           
  2758                           ;doprnt.c: 1383: else
  2759                           ;doprnt.c: 1384: width = 0;
  2760  001896  0E00               	movlw	0
  2761  001898  6E2C               	movwf	printf@width+1,c
  2762  00189A  0E00               	movlw	0
  2763  00189C  6E2B               	movwf	printf@width,c
  2764  00189E                     l1984:
  2765                           
  2766                           ;doprnt.c: 1422: {
  2767                           ;doprnt.c: 1424: if(width
  2768                           ;doprnt.c: 1428: )
  2769  00189E  502B               	movf	printf@width,w,c
  2770  0018A0  102C               	iorwf	printf@width+1,w,c
  2771  0018A2  B4D8               	btfsc	status,2,c
  2772  0018A4  D00A               	goto	l1990
  2773  0018A6                     l1986:
  2774                           
  2775                           ;doprnt.c: 1430: (putch(' ') );
  2776  0018A6  0E20               	movlw	32
  2777  0018A8  EC25  F011         	call	_putch
  2778                           
  2779                           ;doprnt.c: 1431: while(--width);
  2780  0018AC  062B               	decf	printf@width,f,c
  2781  0018AE  A0D8               	btfss	status,0,c
  2782  0018B0  062C               	decf	printf@width+1,f,c
  2783  0018B2  502B               	movf	printf@width,w,c
  2784  0018B4  102C               	iorwf	printf@width+1,w,c
  2785  0018B6  A4D8               	btfss	status,2,c
  2786  0018B8  D7F6               	goto	l1986
  2787  0018BA                     l1990:
  2788                           
  2789                           ;doprnt.c: 1438: if(flag & 0x03)
  2790  0018BA  C028  F021         	movff	printf@flag,??_printf
  2791  0018BE  0E03               	movlw	3
  2792  0018C0  1621               	andwf	??_printf,f,c
  2793  0018C2  B4D8               	btfsc	status,2,c
  2794  0018C4  D003               	goto	l1994
  2795                           
  2796                           ;doprnt.c: 1439: (putch('-') );
  2797  0018C6  0E2D               	movlw	45
  2798  0018C8  EC25  F011         	call	_putch
  2799  0018CC                     l1994:
  2800                           
  2801                           ;doprnt.c: 1469: }
  2802                           ;doprnt.c: 1472: prec = c;
  2803  0018CC  C02D  F027         	movff	printf@c,printf@prec
  2804                           
  2805                           ;doprnt.c: 1474: while(prec--) {
  2806  0018D0  D024               	goto	l2000
  2807  0018D2                     l1996:
  2808                           
  2809                           ;doprnt.c: 1478: {
  2810                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2811  0018D2  5027               	movf	printf@prec,w,c
  2812  0018D4  0D02               	mullw	2
  2813  0018D6  0E01               	movlw	low _dpowers
  2814  0018D8  24F3               	addwf	prodl,w,c
  2815  0018DA  6EF6               	movwf	tblptrl,c
  2816  0018DC  0E10               	movlw	high _dpowers
  2817  0018DE  20F4               	addwfc	prodh,w,c
  2818  0018E0  6EF7               	movwf	tblptrh,c
  2819  0018E2                     	if	0	;There are less than 3 active tblptr bytes
  2820  0018E2                     	endif
  2821  0018E2  0009               	tblrd		*+
  2822  0018E4  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2823  0018E8  000A               	tblrd		*-
  2824  0018EA  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2825  0018EE  C029  F011         	movff	printf@val,___lwdiv@dividend
  2826  0018F2  C02A  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2827  0018F6  EC6D  F010         	call	___lwdiv	;wreg free
  2828  0018FA  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2829  0018FE  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2830  001902  0E00               	movlw	0
  2831  001904  6E1B               	movwf	___lwmod@divisor+1,c
  2832  001906  0E0A               	movlw	10
  2833  001908  6E1A               	movwf	___lwmod@divisor,c
  2834  00190A  EC96  F010         	call	___lwmod	;wreg free
  2835  00190E  5018               	movf	?___lwmod,w,c
  2836  001910  0F30               	addlw	48
  2837  001912  6E2D               	movwf	printf@c,c
  2838                           
  2839                           ;doprnt.c: 1523: }
  2840                           ;doprnt.c: 1524: (putch(c) );
  2841  001914  502D               	movf	printf@c,w,c
  2842  001916  EC25  F011         	call	_putch
  2843  00191A                     l2000:
  2844  00191A  0627               	decf	printf@prec,f,c
  2845  00191C  2827               	incf	printf@prec,w,c
  2846  00191E  A4D8               	btfss	status,2,c
  2847  001920  D7D8               	goto	l1996
  2848  001922                     l2002:
  2849  001922  C01D  FFF6         	movff	printf@f,tblptrl
  2850  001926  C01E  FFF7         	movff	printf@f+1,tblptrh
  2851  00192A  4A1D               	infsnz	printf@f,f,c
  2852  00192C  2A1E               	incf	printf@f+1,f,c
  2853  00192E                     	if	0	;tblptru may be non-zero
  2854  00192E                     	endif
  2855  00192E                     	if	0	;tblptru may be non-zero
  2856  00192E                     	endif
  2857  00192E  0008               	tblrd		*
  2858  001930  CFF5 F02D          	movff	tablat,printf@c
  2859  001934  502D               	movf	printf@c,w,c
  2860  001936  B4D8               	btfsc	status,2,c
  2861  001938  0012               	return	
  2862  00193A  D705               	goto	l1926
  2863  00193C                     __end_of_printf:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           prodh	equ	0xFF4
  2870                           prodl	equ	0xFF3
  2871                           intcon	equ	0xFF2
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postinc2	equ	0xFDE
  2875                           postdec2	equ	0xFDD
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function _putch *****************
  2881 ;; Defined at:
  2882 ;;		line 12 in file "printfLib.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  data            1    wreg     unsigned char 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  data            1   18[COMRAM] unsigned char 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      void 
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;Total ram usage:        1 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    3
  2903 ;; This function calls:
  2904 ;;		_LCDwrite
  2905 ;; This function is called by:
  2906 ;;		_printf
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text7
  2911  00224A                     __ptext7:
  2912                           	opt stack 0
  2913  00224A                     _putch:
  2914                           	opt stack 26
  2915                           
  2916                           ;incstack = 0
  2917                           ;putch@data stored from wreg
  2918  00224A  6E13               	movwf	putch@data,c
  2919                           
  2920                           ;printfLib.c: 13: LCDwrite(data);
  2921  00224C  5013               	movf	putch@data,w,c
  2922  00224E  EC0E  F011         	call	_LCDwrite
  2923  002252  0012               	return		;funcret
  2924  002254                     __end_of_putch:
  2925                           	opt stack 0
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           intcon	equ	0xFF2
  2933                           postinc0	equ	0xFEE
  2934                           wreg	equ	0xFE8
  2935                           postinc2	equ	0xFDE
  2936                           postdec2	equ	0xFDD
  2937                           fsr2h	equ	0xFDA
  2938                           fsr2l	equ	0xFD9
  2939                           status	equ	0xFD8
  2940                           
  2941 ;; *************** function _LCDwrite *****************
  2942 ;; Defined at:
  2943 ;;		line 118 in file "lcd.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  input           1    wreg     unsigned char 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  input           1   17[COMRAM] unsigned char 
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;Total ram usage:        1 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    2
  2964 ;; This function calls:
  2965 ;;		_LCDcheckBF
  2966 ;;		_LCDcmd
  2967 ;; This function is called by:
  2968 ;;		_putch
  2969 ;;		_LCDputs
  2970 ;;		_LCDwriteLineOne
  2971 ;;		_LCDwriteLineTwo
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text8
  2976  00221C                     __ptext8:
  2977                           	opt stack 0
  2978  00221C                     _LCDwrite:
  2979                           	opt stack 26
  2980                           
  2981                           ;incstack = 0
  2982                           ;LCDwrite@input stored from wreg
  2983  00221C  6E12               	movwf	LCDwrite@input,c
  2984                           
  2985                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  2986  00221E  808D               	bsf	3981,0,c	;volatile
  2987                           
  2988                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  2989  002220  928D               	bcf	3981,1,c	;volatile
  2990                           
  2991                           ;lcd.c: 122: LCDcmd(input);
  2992  002222  5012               	movf	LCDwrite@input,w,c
  2993  002224  EC1F  F011         	call	_LCDcmd
  2994                           
  2995                           ;lcd.c: 123: LCDcheckBF();
  2996  002228  EC04  F011         	call	_LCDcheckBF	;wreg free
  2997  00222C  0012               	return		;funcret
  2998  00222E                     __end_of_LCDwrite:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           postinc0	equ	0xFEE
  3008                           wreg	equ	0xFE8
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _isdigit *****************
  3016 ;; Defined at:
  3017 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  c               1    wreg     unsigned char 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  c               1   18[COMRAM] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;		None               void
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;Total ram usage:        3 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    1
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_printf
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text9
  3046  0021EA                     __ptext9:
  3047                           	opt stack 0
  3048  0021EA                     _isdigit:
  3049                           	opt stack 28
  3050                           
  3051                           ;incstack = 0
  3052                           ;isdigit@c stored from wreg
  3053  0021EA  6E13               	movwf	isdigit@c,c
  3054  0021EC  0E00               	movlw	0
  3055  0021EE  6E12               	movwf	_isdigit$1406,c
  3056  0021F0  0E3A               	movlw	58
  3057  0021F2  6013               	cpfslt	isdigit@c,c
  3058  0021F4  D005               	goto	l1652
  3059  0021F6  0E2F               	movlw	47
  3060  0021F8  6413               	cpfsgt	isdigit@c,c
  3061  0021FA  D002               	goto	l1652
  3062  0021FC  0E01               	movlw	1
  3063  0021FE  6E12               	movwf	_isdigit$1406,c
  3064  002200                     l1652:
  3065  002200  C012  F011         	movff	_isdigit$1406,??_isdigit
  3066  002204  3011               	rrcf	??_isdigit,w,c
  3067  002206  0012               	return	
  3068  002208                     __end_of_isdigit:
  3069                           	opt stack 0
  3070                           tblptru	equ	0xFF8
  3071                           tblptrh	equ	0xFF7
  3072                           tblptrl	equ	0xFF6
  3073                           tablat	equ	0xFF5
  3074                           prodh	equ	0xFF4
  3075                           prodl	equ	0xFF3
  3076                           intcon	equ	0xFF2
  3077                           postinc0	equ	0xFEE
  3078                           wreg	equ	0xFE8
  3079                           postinc2	equ	0xFDE
  3080                           postdec2	equ	0xFDD
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function ___wmul *****************
  3086 ;; Defined at:
  3087 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  multiplier      2   16[COMRAM] unsigned int 
  3090 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  product         2   20[COMRAM] unsigned int 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  2   16[COMRAM] unsigned int 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0, prodl, prodh
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;Total ram usage:        6 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    1
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_printf
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text10
  3117  0021A6                     __ptext10:
  3118                           	opt stack 0
  3119  0021A6                     ___wmul:
  3120                           	opt stack 28
  3121                           
  3122                           ;incstack = 0
  3123  0021A6  5011               	movf	___wmul@multiplier,w,c
  3124  0021A8  0213               	mulwf	___wmul@multiplicand,c
  3125  0021AA  CFF3 F015          	movff	prodl,___wmul@product
  3126  0021AE  CFF4 F016          	movff	prodh,___wmul@product+1
  3127  0021B2  5011               	movf	___wmul@multiplier,w,c
  3128  0021B4  0214               	mulwf	___wmul@multiplicand+1,c
  3129  0021B6  50F3               	movf	prodl,w,c
  3130  0021B8  2616               	addwf	___wmul@product+1,f,c
  3131  0021BA  5012               	movf	___wmul@multiplier+1,w,c
  3132  0021BC  0213               	mulwf	___wmul@multiplicand,c
  3133  0021BE  50F3               	movf	prodl,w,c
  3134  0021C0  2616               	addwf	___wmul@product+1,f,c
  3135  0021C2  C015  F011         	movff	___wmul@product,?___wmul
  3136  0021C6  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3137  0021CA  0012               	return	
  3138  0021CC                     __end_of___wmul:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           prodh	equ	0xFF4
  3145                           prodl	equ	0xFF3
  3146                           intcon	equ	0xFF2
  3147                           postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function ___lwmod *****************
  3156 ;; Defined at:
  3157 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  dividend        2   23[COMRAM] unsigned int 
  3160 ;;  divisor         2   25[COMRAM] unsigned int 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  counter         1   27[COMRAM] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  2   23[COMRAM] unsigned int 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3172 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;Total ram usage:        5 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    1
  3179 ;; This function calls:
  3180 ;;		Nothing
  3181 ;; This function is called by:
  3182 ;;		_printf
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text11
  3187  00212C                     __ptext11:
  3188                           	opt stack 0
  3189  00212C                     ___lwmod:
  3190                           	opt stack 28
  3191                           
  3192                           ;incstack = 0
  3193  00212C  501A               	movf	___lwmod@divisor,w,c
  3194  00212E  101B               	iorwf	___lwmod@divisor+1,w,c
  3195  002130  B4D8               	btfsc	status,2,c
  3196  002132  D018               	goto	l675
  3197  002134  0E01               	movlw	1
  3198  002136  6E1C               	movwf	___lwmod@counter,c
  3199  002138  D004               	goto	l1866
  3200  00213A                     l1864:
  3201  00213A  90D8               	bcf	status,0,c
  3202  00213C  361A               	rlcf	___lwmod@divisor,f,c
  3203  00213E  361B               	rlcf	___lwmod@divisor+1,f,c
  3204  002140  2A1C               	incf	___lwmod@counter,f,c
  3205  002142                     l1866:
  3206  002142  AE1B               	btfss	___lwmod@divisor+1,7,c
  3207  002144  D7FA               	goto	l1864
  3208  002146                     l1868:
  3209  002146  501A               	movf	___lwmod@divisor,w,c
  3210  002148  5C18               	subwf	___lwmod@dividend,w,c
  3211  00214A  501B               	movf	___lwmod@divisor+1,w,c
  3212  00214C  5819               	subwfb	___lwmod@dividend+1,w,c
  3213  00214E  A0D8               	btfss	status,0,c
  3214  002150  D004               	goto	l1872
  3215  002152  501A               	movf	___lwmod@divisor,w,c
  3216  002154  5E18               	subwf	___lwmod@dividend,f,c
  3217  002156  501B               	movf	___lwmod@divisor+1,w,c
  3218  002158  5A19               	subwfb	___lwmod@dividend+1,f,c
  3219  00215A                     l1872:
  3220  00215A  90D8               	bcf	status,0,c
  3221  00215C  321B               	rrcf	___lwmod@divisor+1,f,c
  3222  00215E  321A               	rrcf	___lwmod@divisor,f,c
  3223  002160  2E1C               	decfsz	___lwmod@counter,f,c
  3224  002162  D7F1               	goto	l1868
  3225  002164                     l675:
  3226  002164  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3227  002168  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3228  00216C  0012               	return		;funcret
  3229  00216E                     __end_of___lwmod:
  3230                           	opt stack 0
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodh	equ	0xFF4
  3236                           prodl	equ	0xFF3
  3237                           intcon	equ	0xFF2
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function ___lwdiv *****************
  3247 ;; Defined at:
  3248 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  dividend        2   16[COMRAM] unsigned int 
  3251 ;;  divisor         2   18[COMRAM] unsigned int 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  quotient        2   20[COMRAM] unsigned int 
  3254 ;;  counter         1   22[COMRAM] unsigned char 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  2   16[COMRAM] unsigned int 
  3257 ;; Registers used:
  3258 ;;		wreg, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3264 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;Total ram usage:        7 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    1
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_printf
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text12
  3279  0020DA                     __ptext12:
  3280                           	opt stack 0
  3281  0020DA                     ___lwdiv:
  3282                           	opt stack 28
  3283                           
  3284                           ;incstack = 0
  3285  0020DA  0E00               	movlw	0
  3286  0020DC  6E16               	movwf	___lwdiv@quotient+1,c
  3287  0020DE  0E00               	movlw	0
  3288  0020E0  6E15               	movwf	___lwdiv@quotient,c
  3289  0020E2  5013               	movf	___lwdiv@divisor,w,c
  3290  0020E4  1014               	iorwf	___lwdiv@divisor+1,w,c
  3291  0020E6  B4D8               	btfsc	status,2,c
  3292  0020E8  D01C               	goto	l665
  3293  0020EA  0E01               	movlw	1
  3294  0020EC  6E17               	movwf	___lwdiv@counter,c
  3295  0020EE  D004               	goto	l1846
  3296  0020F0                     l1844:
  3297  0020F0  90D8               	bcf	status,0,c
  3298  0020F2  3613               	rlcf	___lwdiv@divisor,f,c
  3299  0020F4  3614               	rlcf	___lwdiv@divisor+1,f,c
  3300  0020F6  2A17               	incf	___lwdiv@counter,f,c
  3301  0020F8                     l1846:
  3302  0020F8  AE14               	btfss	___lwdiv@divisor+1,7,c
  3303  0020FA  D7FA               	goto	l1844
  3304  0020FC                     l1848:
  3305  0020FC  90D8               	bcf	status,0,c
  3306  0020FE  3615               	rlcf	___lwdiv@quotient,f,c
  3307  002100  3616               	rlcf	___lwdiv@quotient+1,f,c
  3308  002102  5013               	movf	___lwdiv@divisor,w,c
  3309  002104  5C11               	subwf	___lwdiv@dividend,w,c
  3310  002106  5014               	movf	___lwdiv@divisor+1,w,c
  3311  002108  5812               	subwfb	___lwdiv@dividend+1,w,c
  3312  00210A  A0D8               	btfss	status,0,c
  3313  00210C  D005               	goto	l1856
  3314  00210E  5013               	movf	___lwdiv@divisor,w,c
  3315  002110  5E11               	subwf	___lwdiv@dividend,f,c
  3316  002112  5014               	movf	___lwdiv@divisor+1,w,c
  3317  002114  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3318  002116  8015               	bsf	___lwdiv@quotient,0,c
  3319  002118                     l1856:
  3320  002118  90D8               	bcf	status,0,c
  3321  00211A  3214               	rrcf	___lwdiv@divisor+1,f,c
  3322  00211C  3213               	rrcf	___lwdiv@divisor,f,c
  3323  00211E  2E17               	decfsz	___lwdiv@counter,f,c
  3324  002120  D7ED               	goto	l1848
  3325  002122                     l665:
  3326  002122  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  3327  002126  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3328  00212A  0012               	return		;funcret
  3329  00212C                     __end_of___lwdiv:
  3330                           	opt stack 0
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           prodh	equ	0xFF4
  3336                           prodl	equ	0xFF3
  3337                           intcon	equ	0xFF2
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           postinc2	equ	0xFDE
  3341                           postdec2	equ	0xFDD
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _limitWheelSpeeds *****************
  3347 ;; Defined at:
  3348 ;;		line 316 in file "main.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  leftWheelSpe    2   16[COMRAM] PTR int 
  3351 ;;		 -> main@leftWheelSpeed(2), 
  3352 ;;  rightWheelSp    2   18[COMRAM] PTR int 
  3353 ;;		 -> main@rightWheelSpeed(2), 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;Total ram usage:        6 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    1
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_main
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text13
  3380  001E92                     __ptext13:
  3381                           	opt stack 0
  3382  001E92                     _limitWheelSpeeds:
  3383                           	opt stack 29
  3384                           
  3385                           ;main.c: 321: if (*leftWheelSpeed >= 100)
  3386                           
  3387                           ;incstack = 0
  3388  001E92  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3389  001E96  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3390  001E9A  0E01               	movlw	1
  3391  001E9C  BEDB               	btfsc	plusw2,7,c
  3392  001E9E  D00F               	goto	l2030
  3393  001EA0  0E01               	movlw	1
  3394  001EA2  50DB               	movf	plusw2,w,c
  3395  001EA4  E104               	bnz	u1790
  3396  001EA6  0E64               	movlw	100
  3397  001EA8  5CDE               	subwf	postinc2,w,c
  3398  001EAA  A0D8               	btfss	status,0,c
  3399  001EAC  D008               	goto	l2030
  3400  001EAE                     u1790:
  3401                           
  3402                           ;main.c: 322: {
  3403                           ;main.c: 323: *leftWheelSpeed = 100;
  3404  001EAE  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3405  001EB2  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3406  001EB6  0E64               	movlw	100
  3407  001EB8  6EDE               	movwf	postinc2,c
  3408  001EBA  0E00               	movlw	0
  3409  001EBC  6EDD               	movwf	postdec2,c
  3410  001EBE                     l2030:
  3411                           
  3412                           ;main.c: 324: }
  3413                           ;main.c: 325: if (*leftWheelSpeed <= -100)
  3414  001EBE  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3415  001EC2  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3416  001EC6  0E01               	movlw	1
  3417  001EC8  AEDB               	btfss	plusw2,7,c
  3418  001ECA  D00E               	goto	l2034
  3419  001ECC  0E9D               	movlw	157
  3420  001ECE  5CDE               	subwf	postinc2,w,c
  3421  001ED0  0EFF               	movlw	255
  3422  001ED2  58DE               	subwfb	postinc2,w,c
  3423  001ED4  B0D8               	btfsc	status,0,c
  3424  001ED6  D008               	goto	l2034
  3425                           
  3426                           ;main.c: 326: {
  3427                           ;main.c: 327: *leftWheelSpeed = -100;
  3428  001ED8  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3429  001EDC  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3430  001EE0  0E9C               	movlw	156
  3431  001EE2  6EDE               	movwf	postinc2,c
  3432  001EE4  0EFF               	movlw	255
  3433  001EE6  6EDD               	movwf	postdec2,c
  3434  001EE8                     l2034:
  3435                           
  3436                           ;main.c: 328: }
  3437                           ;main.c: 330: if (*rightWheelSpeed >= 80)
  3438  001EE8  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3439  001EEC  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3440  001EF0  0E01               	movlw	1
  3441  001EF2  BEDB               	btfsc	plusw2,7,c
  3442  001EF4  D00F               	goto	l2038
  3443  001EF6  0E01               	movlw	1
  3444  001EF8  50DB               	movf	plusw2,w,c
  3445  001EFA  E104               	bnz	u1810
  3446  001EFC  0E50               	movlw	80
  3447  001EFE  5CDE               	subwf	postinc2,w,c
  3448  001F00  A0D8               	btfss	status,0,c
  3449  001F02  D008               	goto	l2038
  3450  001F04                     u1810:
  3451                           
  3452                           ;main.c: 331: {
  3453                           ;main.c: 332: *rightWheelSpeed = 80;
  3454  001F04  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3455  001F08  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3456  001F0C  0E50               	movlw	80
  3457  001F0E  6EDE               	movwf	postinc2,c
  3458  001F10  0E00               	movlw	0
  3459  001F12  6EDD               	movwf	postdec2,c
  3460  001F14                     l2038:
  3461                           
  3462                           ;main.c: 333: }
  3463                           ;main.c: 334: if (*rightWheelSpeed <= -80)
  3464  001F14  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3465  001F18  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3466  001F1C  0E01               	movlw	1
  3467  001F1E  AEDB               	btfss	plusw2,7,c
  3468  001F20  0012               	return	
  3469  001F22  0EB1               	movlw	177
  3470  001F24  5CDE               	subwf	postinc2,w,c
  3471  001F26  0EFF               	movlw	255
  3472  001F28  58DE               	subwfb	postinc2,w,c
  3473  001F2A  B0D8               	btfsc	status,0,c
  3474  001F2C  0012               	return	
  3475                           
  3476                           ;main.c: 335: {
  3477                           ;main.c: 336: *rightWheelSpeed = -80;
  3478  001F2E  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3479  001F32  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3480  001F36  0EB0               	movlw	176
  3481  001F38  6EDE               	movwf	postinc2,c
  3482  001F3A  0EFF               	movlw	255
  3483  001F3C  6EDD               	movwf	postdec2,c
  3484  001F3E  0012               	return	
  3485  001F40                     __end_of_limitWheelSpeeds:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           prodh	equ	0xFF4
  3492                           prodl	equ	0xFF3
  3493                           intcon	equ	0xFF2
  3494                           postinc0	equ	0xFEE
  3495                           wreg	equ	0xFE8
  3496                           postinc2	equ	0xFDE
  3497                           postdec2	equ	0xFDD
  3498                           plusw2	equ	0xFDB
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function ___lltoft *****************
  3504 ;; Defined at:
  3505 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  c               4   24[COMRAM] unsigned long 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  exp             1   32[COMRAM] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  3   24[COMRAM] float 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3519 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;Total ram usage:        9 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    2
  3526 ;; This function calls:
  3527 ;;		___ftpack
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text14
  3534  00207E                     __ptext14:
  3535                           	opt stack 0
  3536  00207E                     ___lltoft:
  3537                           	opt stack 28
  3538                           
  3539                           ;incstack = 0
  3540  00207E  0E8E               	movlw	142
  3541  002080  6E21               	movwf	___lltoft@exp,c
  3542  002082  D006               	goto	l2076
  3543  002084                     l2074:
  3544  002084  90D8               	bcf	status,0,c
  3545  002086  321C               	rrcf	___lltoft@c+3,f,c
  3546  002088  321B               	rrcf	___lltoft@c+2,f,c
  3547  00208A  321A               	rrcf	___lltoft@c+1,f,c
  3548  00208C  3219               	rrcf	___lltoft@c,f,c
  3549  00208E  2A21               	incf	___lltoft@exp,f,c
  3550  002090                     l2076:
  3551  002090  0E00               	movlw	0
  3552  002092  1419               	andwf	___lltoft@c,w,c
  3553  002094  6E1D               	movwf	??___lltoft& (0+255),c
  3554  002096  0E00               	movlw	0
  3555  002098  141A               	andwf	___lltoft@c+1,w,c
  3556  00209A  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  3557  00209C  0E00               	movlw	0
  3558  00209E  141B               	andwf	___lltoft@c+2,w,c
  3559  0020A0  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  3560  0020A2  0EFF               	movlw	255
  3561  0020A4  141C               	andwf	___lltoft@c+3,w,c
  3562  0020A6  6E20               	movwf	(??___lltoft+3)& (0+255),c
  3563  0020A8  501D               	movf	??___lltoft,w,c
  3564  0020AA  101E               	iorwf	??___lltoft+1,w,c
  3565  0020AC  101F               	iorwf	??___lltoft+2,w,c
  3566  0020AE  1020               	iorwf	??___lltoft+3,w,c
  3567  0020B0  A4D8               	btfss	status,2,c
  3568  0020B2  D7E8               	goto	l2074
  3569  0020B4  C019  F011         	movff	___lltoft@c,___ftpack@arg
  3570  0020B8  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  3571  0020BC  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  3572  0020C0  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  3573  0020C4  0E00               	movlw	0
  3574  0020C6  6E15               	movwf	___ftpack@sign,c
  3575  0020C8  ECA0  F00F         	call	___ftpack	;wreg free
  3576  0020CC  C011  F019         	movff	?___ftpack,?___lltoft
  3577  0020D0  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  3578  0020D4  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  3579  0020D8  0012               	return	
  3580  0020DA                     __end_of___lltoft:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           postinc2	equ	0xFDE
  3592                           postdec2	equ	0xFDD
  3593                           plusw2	equ	0xFDB
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function ___ftpack *****************
  3599 ;; Defined at:
  3600 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  arg             3   16[COMRAM] unsigned um
  3603 ;;  exp             1   19[COMRAM] unsigned char 
  3604 ;;  sign            1   20[COMRAM] unsigned char 
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  3   16[COMRAM] float 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3616 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;Total ram usage:        8 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    1
  3623 ;; This function calls:
  3624 ;;		Nothing
  3625 ;; This function is called by:
  3626 ;;		___awtoft
  3627 ;;		___ftadd
  3628 ;;		___ftmul
  3629 ;;		___lltoft
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text15
  3634  001F40                     __ptext15:
  3635                           	opt stack 0
  3636  001F40                     ___ftpack:
  3637                           	opt stack 27
  3638                           
  3639                           ;incstack = 0
  3640  001F40  5014               	movf	___ftpack@exp,w,c
  3641  001F42  B4D8               	btfsc	status,2,c
  3642  001F44  D005               	goto	l1610
  3643  001F46  5011               	movf	___ftpack@arg,w,c
  3644  001F48  1012               	iorwf	___ftpack@arg+1,w,c
  3645  001F4A  1013               	iorwf	___ftpack@arg+2,w,c
  3646  001F4C  A4D8               	btfss	status,2,c
  3647  001F4E  D00C               	goto	l1616
  3648  001F50                     l1610:
  3649  001F50  0E00               	movlw	0
  3650  001F52  6E11               	movwf	?___ftpack,c
  3651  001F54  0E00               	movlw	0
  3652  001F56  6E12               	movwf	?___ftpack+1,c
  3653  001F58  0E00               	movlw	0
  3654  001F5A  6E13               	movwf	?___ftpack+2,c
  3655  001F5C  0012               	return	
  3656  001F5E                     l1614:
  3657  001F5E  2A14               	incf	___ftpack@exp,f,c
  3658  001F60  90D8               	bcf	status,0,c
  3659  001F62  3213               	rrcf	___ftpack@arg+2,f,c
  3660  001F64  3212               	rrcf	___ftpack@arg+1,f,c
  3661  001F66  3211               	rrcf	___ftpack@arg,f,c
  3662  001F68                     l1616:
  3663  001F68  0E00               	movlw	0
  3664  001F6A  1411               	andwf	___ftpack@arg,w,c
  3665  001F6C  6E16               	movwf	??___ftpack& (0+255),c
  3666  001F6E  0E00               	movlw	0
  3667  001F70  1412               	andwf	___ftpack@arg+1,w,c
  3668  001F72  6E17               	movwf	(??___ftpack+1)& (0+255),c
  3669  001F74  0EFE               	movlw	254
  3670  001F76  1413               	andwf	___ftpack@arg+2,w,c
  3671  001F78  6E18               	movwf	(??___ftpack+2)& (0+255),c
  3672  001F7A  5016               	movf	??___ftpack,w,c
  3673  001F7C  1017               	iorwf	??___ftpack+1,w,c
  3674  001F7E  1018               	iorwf	??___ftpack+2,w,c
  3675  001F80  B4D8               	btfsc	status,2,c
  3676  001F82  D00C               	goto	l1622
  3677  001F84  D7EC               	goto	l1614
  3678  001F86                     l1618:
  3679  001F86  2A14               	incf	___ftpack@exp,f,c
  3680  001F88  0E01               	movlw	1
  3681  001F8A  2611               	addwf	___ftpack@arg,f,c
  3682  001F8C  0E00               	movlw	0
  3683  001F8E  2212               	addwfc	___ftpack@arg+1,f,c
  3684  001F90  0E00               	movlw	0
  3685  001F92  2213               	addwfc	___ftpack@arg+2,f,c
  3686  001F94  90D8               	bcf	status,0,c
  3687  001F96  3213               	rrcf	___ftpack@arg+2,f,c
  3688  001F98  3212               	rrcf	___ftpack@arg+1,f,c
  3689  001F9A  3211               	rrcf	___ftpack@arg,f,c
  3690  001F9C                     l1622:
  3691  001F9C  0E00               	movlw	0
  3692  001F9E  1411               	andwf	___ftpack@arg,w,c
  3693  001FA0  6E16               	movwf	??___ftpack& (0+255),c
  3694  001FA2  0E00               	movlw	0
  3695  001FA4  1412               	andwf	___ftpack@arg+1,w,c
  3696  001FA6  6E17               	movwf	(??___ftpack+1)& (0+255),c
  3697  001FA8  0EFF               	movlw	255
  3698  001FAA  1413               	andwf	___ftpack@arg+2,w,c
  3699  001FAC  6E18               	movwf	(??___ftpack+2)& (0+255),c
  3700  001FAE  5016               	movf	??___ftpack,w,c
  3701  001FB0  1017               	iorwf	??___ftpack+1,w,c
  3702  001FB2  1018               	iorwf	??___ftpack+2,w,c
  3703  001FB4  B4D8               	btfsc	status,2,c
  3704  001FB6  D006               	goto	l1626
  3705  001FB8  D7E6               	goto	l1618
  3706  001FBA                     l1624:
  3707  001FBA  0614               	decf	___ftpack@exp,f,c
  3708  001FBC  90D8               	bcf	status,0,c
  3709  001FBE  3611               	rlcf	___ftpack@arg,f,c
  3710  001FC0  3612               	rlcf	___ftpack@arg+1,f,c
  3711  001FC2  3613               	rlcf	___ftpack@arg+2,f,c
  3712  001FC4                     l1626:
  3713  001FC4  BE12               	btfsc	___ftpack@arg+1,7,c
  3714  001FC6  D003               	goto	l482
  3715  001FC8  0E02               	movlw	2
  3716  001FCA  6014               	cpfslt	___ftpack@exp,c
  3717  001FCC  D7F6               	goto	l1624
  3718  001FCE                     l482:
  3719  001FCE  A014               	btfss	___ftpack@exp,0,c
  3720  001FD0  9E12               	bcf	___ftpack@arg+1,7,c
  3721  001FD2  90D8               	bcf	status,0,c
  3722  001FD4  3214               	rrcf	___ftpack@exp,f,c
  3723  001FD6  5014               	movf	___ftpack@exp,w,c
  3724  001FD8  1213               	iorwf	___ftpack@arg+2,f,c
  3725  001FDA  5015               	movf	___ftpack@sign,w,c
  3726  001FDC  A4D8               	btfss	status,2,c
  3727  001FDE  8E13               	bsf	___ftpack@arg+2,7,c
  3728  001FE0  C011  F011         	movff	___ftpack@arg,?___ftpack
  3729  001FE4  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  3730  001FE8  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  3731  001FEC  0012               	return	
  3732  001FEE                     __end_of___ftpack:
  3733                           	opt stack 0
  3734                           tblptru	equ	0xFF8
  3735                           tblptrh	equ	0xFF7
  3736                           tblptrl	equ	0xFF6
  3737                           tablat	equ	0xFF5
  3738                           prodh	equ	0xFF4
  3739                           prodl	equ	0xFF3
  3740                           intcon	equ	0xFF2
  3741                           postinc0	equ	0xFEE
  3742                           wreg	equ	0xFE8
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           plusw2	equ	0xFDB
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function ___ftge *****************
  3751 ;; Defined at:
  3752 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  ff1             3   48[COMRAM] float 
  3755 ;;  ff2             3   51[COMRAM] float 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;		None               void
  3760 ;; Registers used:
  3761 ;;		wreg, status,2, status,0
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3767 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;Total ram usage:        9 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    1
  3774 ;; This function calls:
  3775 ;;		Nothing
  3776 ;; This function is called by:
  3777 ;;		_main
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text16
  3782  001FEE                     __ptext16:
  3783                           	opt stack 0
  3784  001FEE                     ___ftge:
  3785                           	opt stack 29
  3786                           
  3787                           ;incstack = 0
  3788  001FEE  AE33               	btfss	___ftge@ff1+2,7,c
  3789  001FF0  D016               	goto	l2058
  3790  001FF2  C031  F037         	movff	___ftge@ff1,??___ftge
  3791  001FF6  C032  F038         	movff	___ftge@ff1+1,??___ftge+1
  3792  001FFA  C033  F039         	movff	___ftge@ff1+2,??___ftge+2
  3793  001FFE  1E37               	comf	??___ftge,f,c
  3794  002000  1E38               	comf	??___ftge+1,f,c
  3795  002002  1E39               	comf	??___ftge+2,f,c
  3796  002004  2A37               	incf	??___ftge,f,c
  3797  002006  0E00               	movlw	0
  3798  002008  2238               	addwfc	??___ftge+1,f,c
  3799  00200A  2239               	addwfc	??___ftge+2,f,c
  3800  00200C  0E00               	movlw	0
  3801  00200E  2437               	addwf	??___ftge,w,c
  3802  002010  6E31               	movwf	___ftge@ff1,c
  3803  002012  0E00               	movlw	0
  3804  002014  2038               	addwfc	??___ftge+1,w,c
  3805  002016  6E32               	movwf	___ftge@ff1+1,c
  3806  002018  0E80               	movlw	128
  3807  00201A  2039               	addwfc	??___ftge+2,w,c
  3808  00201C  6E33               	movwf	___ftge@ff1+2,c
  3809  00201E                     l2058:
  3810  00201E  AE36               	btfss	___ftge@ff2+2,7,c
  3811  002020  D016               	goto	l2062
  3812  002022  C034  F037         	movff	___ftge@ff2,??___ftge
  3813  002026  C035  F038         	movff	___ftge@ff2+1,??___ftge+1
  3814  00202A  C036  F039         	movff	___ftge@ff2+2,??___ftge+2
  3815  00202E  1E37               	comf	??___ftge,f,c
  3816  002030  1E38               	comf	??___ftge+1,f,c
  3817  002032  1E39               	comf	??___ftge+2,f,c
  3818  002034  2A37               	incf	??___ftge,f,c
  3819  002036  0E00               	movlw	0
  3820  002038  2238               	addwfc	??___ftge+1,f,c
  3821  00203A  2239               	addwfc	??___ftge+2,f,c
  3822  00203C  0E00               	movlw	0
  3823  00203E  2437               	addwf	??___ftge,w,c
  3824  002040  6E34               	movwf	___ftge@ff2,c
  3825  002042  0E00               	movlw	0
  3826  002044  2038               	addwfc	??___ftge+1,w,c
  3827  002046  6E35               	movwf	___ftge@ff2+1,c
  3828  002048  0E80               	movlw	128
  3829  00204A  2039               	addwfc	??___ftge+2,w,c
  3830  00204C  6E36               	movwf	___ftge@ff2+2,c
  3831  00204E                     l2062:
  3832  00204E  0E00               	movlw	0
  3833  002050  1A31               	xorwf	___ftge@ff1,f,c
  3834  002052  0E00               	movlw	0
  3835  002054  1A32               	xorwf	___ftge@ff1+1,f,c
  3836  002056  0E80               	movlw	128
  3837  002058  1A33               	xorwf	___ftge@ff1+2,f,c
  3838  00205A  0E00               	movlw	0
  3839  00205C  1A34               	xorwf	___ftge@ff2,f,c
  3840  00205E  0E00               	movlw	0
  3841  002060  1A35               	xorwf	___ftge@ff2+1,f,c
  3842  002062  0E80               	movlw	128
  3843  002064  1A36               	xorwf	___ftge@ff2+2,f,c
  3844  002066  5034               	movf	___ftge@ff2,w,c
  3845  002068  5C31               	subwf	___ftge@ff1,w,c
  3846  00206A  5035               	movf	___ftge@ff2+1,w,c
  3847  00206C  5832               	subwfb	___ftge@ff1+1,w,c
  3848  00206E  5036               	movf	___ftge@ff2+2,w,c
  3849  002070  5833               	subwfb	___ftge@ff1+2,w,c
  3850  002072  B0D8               	btfsc	status,0,c
  3851  002074  D002               	goto	l2068
  3852  002076  90D8               	bcf	status,0,c
  3853  002078  0012               	return	
  3854  00207A                     l2068:
  3855  00207A  80D8               	bsf	status,0,c
  3856  00207C  0012               	return	
  3857  00207E                     __end_of___ftge:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           prodh	equ	0xFF4
  3864                           prodl	equ	0xFF3
  3865                           intcon	equ	0xFF2
  3866                           postinc0	equ	0xFEE
  3867                           wreg	equ	0xFE8
  3868                           postinc2	equ	0xFDE
  3869                           postdec2	equ	0xFDD
  3870                           plusw2	equ	0xFDB
  3871                           fsr2h	equ	0xFDA
  3872                           fsr2l	equ	0xFD9
  3873                           status	equ	0xFD8
  3874                           
  3875 ;; *************** function _LCDinit *****************
  3876 ;; Defined at:
  3877 ;;		line 60 in file "lcd.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;Total ram usage:        1 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    2
  3898 ;; This function calls:
  3899 ;;		_LCDcheckBF
  3900 ;;		_LCDcmd
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text17
  3907  001DCC                     __ptext17:
  3908                           	opt stack 0
  3909  001DCC                     _LCDinit:
  3910                           	opt stack 28
  3911                           
  3912                           ;lcd.c: 63: TRISA = 0;
  3913                           
  3914                           ;incstack = 0
  3915  001DCC  0E00               	movlw	0
  3916  001DCE  6E92               	movwf	3986,c	;volatile
  3917                           
  3918                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  3919  001DD0  9096               	bcf	3990,0,c	;volatile
  3920                           
  3921                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  3922  001DD2  9296               	bcf	3990,1,c	;volatile
  3923                           
  3924                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  3925  001DD4  9496               	bcf	3990,2,c	;volatile
  3926                           
  3927                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  3928  001DD6  908D               	bcf	3981,0,c	;volatile
  3929                           
  3930                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  3931  001DD8  928D               	bcf	3981,1,c	;volatile
  3932                           
  3933                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  3934  001DDA  848D               	bsf	3981,2,c	;volatile
  3935                           
  3936                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  3937  001DDC  0E21               	movlw	33
  3938  001DDE  6E12               	movwf	??_LCDinit& (0+255),c
  3939  001DE0  0E76               	movlw	118
  3940  001DE2                     u2177:
  3941  001DE2  2EE8               	decfsz	wreg,f,c
  3942  001DE4  D7FE               	goto	u2177
  3943  001DE6  2E12               	decfsz	??_LCDinit& (0+255),f,c
  3944  001DE8  D7FC               	goto	u2177
  3945  001DEA  D000               	nop2	
  3946                           
  3947                           ;lcd.c: 74: LCDcmd(0b00110000);
  3948  001DEC  0E30               	movlw	48
  3949  001DEE  EC1F  F011         	call	_LCDcmd
  3950                           
  3951                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  3952  001DF2  0E27               	movlw	39
  3953  001DF4  6E12               	movwf	??_LCDinit& (0+255),c
  3954  001DF6  0EF5               	movlw	245
  3955  001DF8                     u2187:
  3956  001DF8  2EE8               	decfsz	wreg,f,c
  3957  001DFA  D7FE               	goto	u2187
  3958  001DFC  2E12               	decfsz	??_LCDinit& (0+255),f,c
  3959  001DFE  D7FC               	goto	u2187
  3960  001E00  F000               	nop	
  3961                           
  3962                           ;lcd.c: 76: LCDcmd(0b00110000);
  3963  001E02  0E30               	movlw	48
  3964  001E04  EC1F  F011         	call	_LCDcmd
  3965                           
  3966                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  3967  001E08  0E27               	movlw	39
  3968  001E0A  6E12               	movwf	??_LCDinit& (0+255),c
  3969  001E0C  0EF5               	movlw	245
  3970  001E0E                     u2197:
  3971  001E0E  2EE8               	decfsz	wreg,f,c
  3972  001E10  D7FE               	goto	u2197
  3973  001E12  2E12               	decfsz	??_LCDinit& (0+255),f,c
  3974  001E14  D7FC               	goto	u2197
  3975  001E16  F000               	nop	
  3976                           
  3977                           ;lcd.c: 78: LCDcmd(0b00110000);
  3978  001E18  0E30               	movlw	48
  3979  001E1A  EC1F  F011         	call	_LCDcmd
  3980                           
  3981                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  3982  001E1E  0E27               	movlw	39
  3983  001E20  6E12               	movwf	??_LCDinit& (0+255),c
  3984  001E22  0EF5               	movlw	245
  3985  001E24                     u2207:
  3986  001E24  2EE8               	decfsz	wreg,f,c
  3987  001E26  D7FE               	goto	u2207
  3988  001E28  2E12               	decfsz	??_LCDinit& (0+255),f,c
  3989  001E2A  D7FC               	goto	u2207
  3990  001E2C  F000               	nop	
  3991                           
  3992                           ;lcd.c: 80: LCDcmd(0b00111000);
  3993  001E2E  0E38               	movlw	56
  3994  001E30  EC1F  F011         	call	_LCDcmd
  3995                           
  3996                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  3997  001E34  0E27               	movlw	39
  3998  001E36  6E12               	movwf	??_LCDinit& (0+255),c
  3999  001E38  0EF5               	movlw	245
  4000  001E3A                     u2217:
  4001  001E3A  2EE8               	decfsz	wreg,f,c
  4002  001E3C  D7FE               	goto	u2217
  4003  001E3E  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4004  001E40  D7FC               	goto	u2217
  4005  001E42  F000               	nop	
  4006                           
  4007                           ;lcd.c: 82: LCDcmd(0b00001000);
  4008  001E44  0E08               	movlw	8
  4009  001E46  EC1F  F011         	call	_LCDcmd
  4010                           
  4011                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  4012  001E4A  0E27               	movlw	39
  4013  001E4C  6E12               	movwf	??_LCDinit& (0+255),c
  4014  001E4E  0EF5               	movlw	245
  4015  001E50                     u2227:
  4016  001E50  2EE8               	decfsz	wreg,f,c
  4017  001E52  D7FE               	goto	u2227
  4018  001E54  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4019  001E56  D7FC               	goto	u2227
  4020  001E58  F000               	nop	
  4021                           
  4022                           ;lcd.c: 84: LCDcmd(0b00000001);
  4023  001E5A  0E01               	movlw	1
  4024  001E5C  EC1F  F011         	call	_LCDcmd
  4025                           
  4026                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  4027  001E60  0E27               	movlw	39
  4028  001E62  6E12               	movwf	??_LCDinit& (0+255),c
  4029  001E64  0EF5               	movlw	245
  4030  001E66                     u2237:
  4031  001E66  2EE8               	decfsz	wreg,f,c
  4032  001E68  D7FE               	goto	u2237
  4033  001E6A  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4034  001E6C  D7FC               	goto	u2237
  4035  001E6E  F000               	nop	
  4036                           
  4037                           ;lcd.c: 86: LCDcmd(0b00000110);
  4038  001E70  0E06               	movlw	6
  4039  001E72  EC1F  F011         	call	_LCDcmd
  4040                           
  4041                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  4042  001E76  0E27               	movlw	39
  4043  001E78  6E12               	movwf	??_LCDinit& (0+255),c
  4044  001E7A  0EF5               	movlw	245
  4045  001E7C                     u2247:
  4046  001E7C  2EE8               	decfsz	wreg,f,c
  4047  001E7E  D7FE               	goto	u2247
  4048  001E80  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4049  001E82  D7FC               	goto	u2247
  4050  001E84  F000               	nop	
  4051                           
  4052                           ;lcd.c: 90: LCDcmd(0b00001111);
  4053  001E86  0E0F               	movlw	15
  4054  001E88  EC1F  F011         	call	_LCDcmd
  4055                           
  4056                           ;lcd.c: 91: LCDcheckBF();
  4057  001E8C  EC04  F011         	call	_LCDcheckBF	;wreg free
  4058  001E90  0012               	return		;funcret
  4059  001E92                     __end_of_LCDinit:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           tblptrh	equ	0xFF7
  4063                           tblptrl	equ	0xFF6
  4064                           tablat	equ	0xFF5
  4065                           prodh	equ	0xFF4
  4066                           prodl	equ	0xFF3
  4067                           intcon	equ	0xFF2
  4068                           postinc0	equ	0xFEE
  4069                           wreg	equ	0xFE8
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           plusw2	equ	0xFDB
  4073                           fsr2h	equ	0xFDA
  4074                           fsr2l	equ	0xFD9
  4075                           status	equ	0xFD8
  4076                           
  4077 ;; *************** function _LCDgotoLineTwo *****************
  4078 ;; Defined at:
  4079 ;;		line 142 in file "lcd.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;		None
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;		None
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      void 
  4086 ;; Registers used:
  4087 ;;		wreg, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;Total ram usage:        0 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    2
  4100 ;; This function calls:
  4101 ;;		_LCDcheckBF
  4102 ;;		_LCDcmd
  4103 ;; This function is called by:
  4104 ;;		_main
  4105 ;;		_LCDputs
  4106 ;;		_LCDwriteLineTwo
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text18
  4111  00222E                     __ptext18:
  4112                           	opt stack 0
  4113  00222E                     _LCDgotoLineTwo:
  4114                           	opt stack 28
  4115                           
  4116                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  4117                           
  4118                           ;incstack = 0
  4119  00222E  908D               	bcf	3981,0,c	;volatile
  4120                           
  4121                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  4122  002230  928D               	bcf	3981,1,c	;volatile
  4123                           
  4124                           ;lcd.c: 146: LCDcmd(0b11000000);
  4125  002232  0EC0               	movlw	192
  4126  002234  EC1F  F011         	call	_LCDcmd
  4127                           
  4128                           ;lcd.c: 147: LCDcheckBF();
  4129  002238  EC04  F011         	call	_LCDcheckBF	;wreg free
  4130  00223C  0012               	return		;funcret
  4131  00223E                     __end_of_LCDgotoLineTwo:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           intcon	equ	0xFF2
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           plusw2	equ	0xFDB
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _LCDcmd *****************
  4150 ;; Defined at:
  4151 ;;		line 94 in file "lcd.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  command         1    wreg     unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  command         1   16[COMRAM] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      void 
  4158 ;; Registers used:
  4159 ;;		wreg
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;Total ram usage:        1 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    1
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_LCDinit
  4176 ;;		_LCDwrite
  4177 ;;		_LCDgotoLineTwo
  4178 ;;		_LCDclear
  4179 ;;		_LCDgotoLineOne
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text19
  4184  00223E                     __ptext19:
  4185                           	opt stack 0
  4186  00223E                     _LCDcmd:
  4187                           	opt stack 26
  4188                           
  4189                           ;incstack = 0
  4190                           ;LCDcmd@command stored from wreg
  4191  00223E  6E11               	movwf	LCDcmd@command,c
  4192                           
  4193                           ;lcd.c: 96: LATA = command;
  4194  002240  C011  FF89         	movff	LCDcmd@command,3977	;volatile
  4195                           
  4196                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  4197  002244  948D               	bcf	3981,2,c	;volatile
  4198                           
  4199                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  4200  002246  848D               	bsf	3981,2,c	;volatile
  4201  002248  0012               	return		;funcret
  4202  00224A                     __end_of_LCDcmd:
  4203                           	opt stack 0
  4204                           tblptru	equ	0xFF8
  4205                           tblptrh	equ	0xFF7
  4206                           tblptrl	equ	0xFF6
  4207                           tablat	equ	0xFF5
  4208                           prodh	equ	0xFF4
  4209                           prodl	equ	0xFF3
  4210                           intcon	equ	0xFF2
  4211                           postinc0	equ	0xFEE
  4212                           wreg	equ	0xFE8
  4213                           postinc2	equ	0xFDE
  4214                           postdec2	equ	0xFDD
  4215                           plusw2	equ	0xFDB
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function _LCDcheckBF *****************
  4221 ;; Defined at:
  4222 ;;		line 101 in file "lcd.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;		None
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;		None
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  1    wreg      void 
  4229 ;; Registers used:
  4230 ;;		None
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;Total ram usage:        0 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; Hardware stack levels required when called:    1
  4243 ;; This function calls:
  4244 ;;		Nothing
  4245 ;; This function is called by:
  4246 ;;		_LCDinit
  4247 ;;		_LCDwrite
  4248 ;;		_LCDgotoLineTwo
  4249 ;;		_LCDclear
  4250 ;;		_LCDgotoLineOne
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text20
  4255  002208                     __ptext20:
  4256                           	opt stack 0
  4257  002208                     _LCDcheckBF:
  4258                           	opt stack 26
  4259                           
  4260                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  4261                           
  4262                           ;incstack = 0
  4263  002208  8E92               	bsf	3986,7,c	;volatile
  4264                           
  4265                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  4266  00220A  908D               	bcf	3981,0,c	;volatile
  4267                           
  4268                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  4269  00220C  828D               	bsf	3981,1,c	;volatile
  4270  00220E                     l183:
  4271                           
  4272                           ;lcd.c: 110: {
  4273                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  4274  00220E  948D               	bcf	3981,2,c	;volatile
  4275                           
  4276                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  4277  002210  848D               	bsf	3981,2,c	;volatile
  4278  002212  BE80               	btfsc	3968,7,c	;volatile
  4279  002214  D7FC               	goto	l183
  4280                           
  4281                           ;lcd.c: 113: }
  4282                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  4283  002216  848D               	bsf	3981,2,c	;volatile
  4284                           
  4285                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  4286  002218  9E92               	bcf	3986,7,c	;volatile
  4287  00221A  0012               	return		;funcret
  4288  00221C                     __end_of_LCDcheckBF:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           plusw2	equ	0xFDB
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _ISR *****************
  4307 ;; Defined at:
  4308 ;;		line 362 in file "main.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:       16 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		Interrupt level 2
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	intcode
  4336  000008                     __pintcode:
  4337                           	opt stack 0
  4338  000008                     _ISR:
  4339                           	opt stack 26
  4340                           
  4341                           ;incstack = 0
  4342  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4343  00000A  CFFA F003          	movff	pclath,??_ISR+2
  4344  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  4345  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  4346  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  4347  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  4348  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  4349  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  4350  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  4351  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  4352  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  4353  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  4354  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  4355  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  4356  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  4357                           
  4358                           ;main.c: 364: if (CCP2IE && CCP2IF)
  4359  000042  B0A0               	btfsc	4000,0,c	;volatile
  4360  000044  A0A1               	btfss	4001,0,c	;volatile
  4361  000046  D021               	goto	i2l2236
  4362                           
  4363                           ;main.c: 365: {
  4364                           ;main.c: 367: if(CCPR2 < 2000)
  4365  000048  0ED0               	movlw	208
  4366  00004A  5C67               	subwf	3943,w,c	;volatile
  4367  00004C  0E07               	movlw	7
  4368  00004E  5868               	subwfb	3944,w,c	;volatile
  4369  000050  B0D8               	btfsc	status,0,c
  4370  000052  D010               	goto	i2l144
  4371                           
  4372                           ;main.c: 368: {
  4373                           ;main.c: 369: LATCbits.LATC1 = 0;
  4374  000054  928B               	bcf	3979,1,c	;volatile
  4375                           
  4376                           ;main.c: 370: CCPR2 = 8000 - CCPR2;
  4377  000056  CF67 F001          	movff	3943,??_ISR	;volatile
  4378  00005A  CF68 F002          	movff	3944,??_ISR+1	;volatile
  4379  00005E  1E01               	comf	??_ISR,f,c
  4380  000060  1E02               	comf	??_ISR+1,f,c
  4381  000062  4A01               	infsnz	??_ISR,f,c
  4382  000064  2A02               	incf	??_ISR+1,f,c
  4383  000066  0E40               	movlw	64
  4384  000068  2401               	addwf	??_ISR,w,c
  4385  00006A  6E67               	movwf	3943,c	;volatile
  4386  00006C  0E1F               	movlw	31
  4387  00006E  2002               	addwfc	??_ISR+1,w,c
  4388  000070  6E68               	movwf	3944,c	;volatile
  4389                           
  4390                           ;main.c: 371: }
  4391  000072  D005               	goto	i2l145
  4392  000074                     i2l144:
  4393                           
  4394                           ;main.c: 372: else
  4395                           ;main.c: 373: {
  4396                           ;main.c: 374: LATCbits.LATC1 = 1;
  4397  000074  828B               	bsf	3979,1,c	;volatile
  4398                           
  4399                           ;main.c: 375: CCPR2 = 630;
  4400  000076  0E02               	movlw	2
  4401  000078  6E68               	movwf	3944,c	;volatile
  4402  00007A  0E76               	movlw	118
  4403  00007C  6E67               	movwf	3943,c	;volatile
  4404  00007E                     i2l145:
  4405                           
  4406                           ;main.c: 376: }
  4407                           ;main.c: 377: TMR5 = 0;
  4408  00007E  0E00               	movlw	0
  4409  000080  010F               	movlb	15	; () banked
  4410  000082  6F50               	movwf	80,b	;volatile
  4411  000084  0E00               	movlw	0
  4412  000086  6F4F               	movwf	79,b	;volatile
  4413                           
  4414                           ; BSR set to: 15
  4415                           ;main.c: 378: CCP2IF = 0;
  4416  000088  90A1               	bcf	4001,0,c	;volatile
  4417  00008A                     i2l2236:
  4418                           
  4419                           ;main.c: 380: }
  4420                           ;main.c: 382: if (CCP3IE && CCP3IF)
  4421  00008A  B07A               	btfsc	3962,0,c	;volatile
  4422  00008C  A07B               	btfss	3963,0,c	;volatile
  4423  00008E  D025               	goto	i2l2250
  4424                           
  4425                           ;main.c: 383: {
  4426                           ;main.c: 385: if(CCPR3 < 2000)
  4427  000090  0ED0               	movlw	208
  4428  000092  010F               	movlb	15	; () banked
  4429  000094  5D5E               	subwf	94,w,b	;volatile
  4430  000096  0E07               	movlw	7
  4431  000098  010F               	movlb	15	; () banked
  4432  00009A  595F               	subwfb	95,w,b	;volatile
  4433  00009C  B0D8               	btfsc	status,0,c
  4434  00009E  D012               	goto	i2l147
  4435                           
  4436                           ; BSR set to: 15
  4437                           ;main.c: 386: {
  4438                           ;main.c: 387: LATCbits.LATC0 = 0;
  4439  0000A0  908B               	bcf	3979,0,c	;volatile
  4440                           
  4441                           ; BSR set to: 15
  4442                           ;main.c: 388: CCPR3 = 8000 - CCPR3;
  4443  0000A2  CF5E F001          	movff	3934,??_ISR	;volatile
  4444  0000A6  CF5F F002          	movff	3935,??_ISR+1	;volatile
  4445  0000AA  1E01               	comf	??_ISR,f,c
  4446  0000AC  1E02               	comf	??_ISR+1,f,c
  4447  0000AE  4A01               	infsnz	??_ISR,f,c
  4448  0000B0  2A02               	incf	??_ISR+1,f,c
  4449  0000B2  0E40               	movlw	64
  4450  0000B4  2401               	addwf	??_ISR,w,c
  4451  0000B6  010F               	movlb	15	; () banked
  4452  0000B8  6F5E               	movwf	94,b	;volatile
  4453  0000BA  0E1F               	movlw	31
  4454  0000BC  2002               	addwfc	??_ISR+1,w,c
  4455  0000BE  010F               	movlb	15	; () banked
  4456  0000C0  6F5F               	movwf	95,b	;volatile
  4457                           
  4458                           ;main.c: 389: }
  4459  0000C2  D006               	goto	i2l148
  4460  0000C4                     i2l147:
  4461                           
  4462                           ; BSR set to: 15
  4463                           ;main.c: 390: else
  4464                           ;main.c: 391: {
  4465                           ;main.c: 392: LATCbits.LATC0 = 1;
  4466  0000C4  808B               	bsf	3979,0,c	;volatile
  4467                           
  4468                           ; BSR set to: 15
  4469                           ;main.c: 393: CCPR3 = 630;
  4470  0000C6  0E02               	movlw	2
  4471  0000C8  010F               	movlb	15	; () banked
  4472  0000CA  6F5F               	movwf	95,b	;volatile
  4473  0000CC  0E76               	movlw	118
  4474  0000CE  6F5E               	movwf	94,b	;volatile
  4475  0000D0                     i2l148:
  4476                           
  4477                           ; BSR set to: 15
  4478                           ;main.c: 394: }
  4479                           ;main.c: 395: TMR1 = 0;
  4480  0000D0  0E00               	movlw	0
  4481  0000D2  6ECF               	movwf	4047,c	;volatile
  4482  0000D4  0E00               	movlw	0
  4483  0000D6  6ECE               	movwf	4046,c	;volatile
  4484                           
  4485                           ; BSR set to: 15
  4486                           ;main.c: 396: CCP3IF = 0;
  4487  0000D8  907B               	bcf	3963,0,c	;volatile
  4488  0000DA                     i2l2250:
  4489                           
  4490                           ;main.c: 398: }
  4491                           ;main.c: 401: if (TMR2IE && TMR2IF)
  4492  0000DA  B29D               	btfsc	3997,1,c	;volatile
  4493  0000DC  A29E               	btfss	3998,1,c	;volatile
  4494  0000DE  D008               	goto	i2l150
  4495                           
  4496                           ;main.c: 402: {
  4497                           ;main.c: 403: elapsedMillis++;
  4498  0000E0  0E01               	movlw	1
  4499  0000E2  0100               	movlb	0	; () banked
  4500  0000E4  277C               	addwf	_elapsedMillis& (0+255),f,b
  4501  0000E6  0E00               	movlw	0
  4502  0000E8  237D               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  4503  0000EA  237E               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  4504  0000EC  237F               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;main.c: 404: PIR1bits.TMR2IF = 0;
  4508  0000EE  929E               	bcf	3998,1,c	;volatile
  4509  0000F0                     i2l150:
  4510  0000F0  C010  FFF5         	movff	??_ISR+15,tablat
  4511  0000F4  C00F  FFF8         	movff	??_ISR+14,tblptru
  4512  0000F8  C00E  FFF7         	movff	??_ISR+13,tblptrh
  4513  0000FC  C00D  FFF6         	movff	??_ISR+12,tblptrl
  4514  000100  C00C  FFF4         	movff	??_ISR+11,prodh
  4515  000104  C00B  FFF3         	movff	??_ISR+10,prodl
  4516  000108  C00A  FFDA         	movff	??_ISR+9,fsr2h
  4517  00010C  C009  FFD9         	movff	??_ISR+8,fsr2l
  4518  000110  C008  FFE2         	movff	??_ISR+7,fsr1h
  4519  000114  C007  FFE1         	movff	??_ISR+6,fsr1l
  4520  000118  C006  FFEA         	movff	??_ISR+5,fsr0h
  4521  00011C  C005  FFE9         	movff	??_ISR+4,fsr0l
  4522  000120  C004  FFFB         	movff	??_ISR+3,pclatu
  4523  000124  C003  FFFA         	movff	??_ISR+2,pclath
  4524  000128  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4525  00012A  0011               	retfie		f
  4526  00012C                     __end_of_ISR:
  4527                           	opt stack 0
  4528                           pclatu	equ	0xFFB
  4529                           pclath	equ	0xFFA
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           intcon	equ	0xFF2
  4537                           postinc0	equ	0xFEE
  4538                           fsr0h	equ	0xFEA
  4539                           fsr0l	equ	0xFE9
  4540                           wreg	equ	0xFE8
  4541                           fsr1h	equ	0xFE2
  4542                           fsr1l	equ	0xFE1
  4543                           postinc2	equ	0xFDE
  4544                           postdec2	equ	0xFDD
  4545                           plusw2	equ	0xFDB
  4546                           fsr2h	equ	0xFDA
  4547                           fsr2l	equ	0xFD9
  4548                           status	equ	0xFD8
  4549                           pclatu	equ	0xFFB
  4550                           pclath	equ	0xFFA
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           prodh	equ	0xFF4
  4556                           prodl	equ	0xFF3
  4557                           intcon	equ	0xFF2
  4558                           postinc0	equ	0xFEE
  4559                           fsr0h	equ	0xFEA
  4560                           fsr0l	equ	0xFE9
  4561                           wreg	equ	0xFE8
  4562                           fsr1h	equ	0xFE2
  4563                           fsr1l	equ	0xFE1
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           plusw2	equ	0xFDB
  4567                           fsr2h	equ	0xFDA
  4568                           fsr2l	equ	0xFD9
  4569                           status	equ	0xFD8
  4570                           
  4571                           	psect	rparam
  4572  0000                     pclatu	equ	0xFFB
  4573                           pclath	equ	0xFFA
  4574                           tblptru	equ	0xFF8
  4575                           tblptrh	equ	0xFF7
  4576                           tblptrl	equ	0xFF6
  4577                           tablat	equ	0xFF5
  4578                           prodh	equ	0xFF4
  4579                           prodl	equ	0xFF3
  4580                           intcon	equ	0xFF2
  4581                           postinc0	equ	0xFEE
  4582                           fsr0h	equ	0xFEA
  4583                           fsr0l	equ	0xFE9
  4584                           wreg	equ	0xFE8
  4585                           fsr1h	equ	0xFE2
  4586                           fsr1l	equ	0xFE1
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           plusw2	equ	0xFDB
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594                           	psect	temp
  4595  00004E                     btemp:
  4596                           	opt stack 0
  4597  00004E                     	ds	1
  4598  0000                     int$flags	set	btemp
  4599                           pclatu	equ	0xFFB
  4600                           pclath	equ	0xFFA
  4601                           tblptru	equ	0xFF8
  4602                           tblptrh	equ	0xFF7
  4603                           tblptrl	equ	0xFF6
  4604                           tablat	equ	0xFF5
  4605                           prodh	equ	0xFF4
  4606                           prodl	equ	0xFF3
  4607                           intcon	equ	0xFF2
  4608                           postinc0	equ	0xFEE
  4609                           fsr0h	equ	0xFEA
  4610                           fsr0l	equ	0xFE9
  4611                           wreg	equ	0xFE8
  4612                           fsr1h	equ	0xFE2
  4613                           fsr1l	equ	0xFE1
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           plusw2	equ	0xFDB
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    10
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     75      77
    BANK0           160     28      40
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[3]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> main@rightWheelSpeed(BANK0[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> main@leftWheelSpeed(BANK0[2]), 


Critical Paths under _main in COMRAM

    _wheelVelocity->___fttol
    ___fttol->___ftadd
    ___ftmul->___lltoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    ___lltoft->___ftpack
    ___ftge->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_wheelVelocity

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   21486
                                              9 BANK0     19    19      0
                     _LCDgotoLineTwo
                            _LCDinit
                             ___ftge
                            ___ftmul
                           ___lltoft
                   _limitWheelSpeeds
                             _printf
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (1) _wheelVelocity                                        9     5      4   12129
                                              0 BANK0      9     5      4
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     380
                                             60 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3010
                                             33 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3370
                                             48 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2353
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    1762
                                             28 COMRAM    17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             18 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             17 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _limitWheelSpeeds                                     6     2      4     560
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lltoft                                             9     5      4    2395
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2070
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     392
                                             48 COMRAM     9     3      6
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             17 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftge
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lltoft
     ___ftpack
   _limitWheelSpeeds
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd
   _wheelVelocity
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1C      28       5       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4B      4D       1       81.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      75      12        0.0%
DATA                 0      0      75       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Apr 21 21:17:35 2016

            ___wmul@multiplicand 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                     ___ftadd@exp1 003C  
                   ___ftadd@exp2 003B                      __CFG_LVP$ON 000000  
                   ___ftadd@sign 003A                              l105 130E  
                            l123 1706                              l115 150A  
                            l119 1576                              l183 220E  
                            l520 1A5A                              l505 1980  
                            l509 19AA                              l529 1A76  
                            l482 1FCE                              l665 2122  
                            l675 2164                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _ISR 0008  
                    ?_LCDcheckBF 0001                              wreg 000FE8  
                           ?_ISR 0001                             l2000 191A  
                           l2002 1922                             l2030 1EBE  
                           l2200 1608                             l2034 1EE8  
                           l2018 1B5C                             l2130 1146  
                           l2132 117E                             l2220 1724  
                           l2124 1114                             l2062 204E  
                           l2038 1F14                             l2206 1698  
                           l2142 123A                             l2216 170E  
                           l2160 132C                             l2136 11D0  
                           l2128 1130                             l2058 201E  
                           l1610 1F50                             l2074 2084  
                           l2162 1342                             l2068 207A  
                           l2076 2090                             l1700 1A14  
                           l2180 149E                             l2164 137C  
                           l2148 12A2                             l1622 1F9C  
                           l1614 1F5E                             l1710 1A48  
                           l1702 1A1E                             l2190 1512  
                           l2174 1434                             l2158 1316  
                           l1624 1FBA                             l1616 1F68  
                           l1712 1A52                             l1704 1A26  
                           l2192 1528                             l2168 13CC  
                           l1626 1FC4                             l1618 1F86  
                           l2194 153E                             l1652 2200  
                           l1820 1C86                             l1718 1A92  
                           l1670 198E                             l1830 1CB0  
                           l1728 1AC2                             l1744 1D28  
                           l1816 1C76                             l1930 1756  
                           l1762 1D6A                             l1738 1D00  
                           l1834 1CC6                             l1826 1C9E  
                           l1844 20F0                             l1692 19E8  
                           l1676 19B8                             l1772 1D92  
                           l1828 1CAA                             l1846 20F8  
                           l1926 1746                             l1758 1D5A  
                           l1856 2118                             l1848 20FC  
                           l1872 215A                             l1864 213A  
                           l1960 182C                             l1936 177E  
                           l1768 1D82                             l1866 2142  
                           l1946 17DA                             l1698 1A0A  
                           l1868 2146                             l1972 1858  
                           l1948 1800                             l1788 2182  
                           l1990 18BA                             l1982 1896  
                           l1958 1828                             l1798 1C10  
                           l1984 189E                  __end_of_LCDinit 1E92  
                           l1994 18CC                             l1986 18A6  
                           l1978 1872                             l1996 18D2  
                           STR_1 100B                             STR_2 1016  
                           u1201 194C                             u1211 1960  
                           u2030 16B2                             u1411 1CE8  
                           u1500 1C2E                             _LATA 000F89  
                           u2207 1E24                             u1431 1D10  
                           u2217 1E3A                             u1505 1C26  
                           u2227 1E50                             u2237 1E66  
                           u2247 1E7C                             u2177 1DE2  
                           u1481 1BF4                             u1810 1F04  
                           u2187 1DF8                             u2197 1E0E  
                           u1920 12BA                             u1790 1EAE  
                           u1950 1392                             u1890 1194  
                           u1980 14B6                             _TMR1 000FCE  
                           _TMR3 000FB2                             _TMR5 000F4F  
                           _main 101A                     ___ftpack@arg 0011  
                   ___ftpack@exp 0014                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 004E  
                  __CFG_BORV$190 000000                             pclat 000FFA  
                ??_wheelVelocity 004C                             prodh 000FF4  
                           prodl 000FF3                             start 012C  
                  __CFG_IESO$OFF 000000                     ___ftmul@cntr 002F  
                   ___param_bank 000010                     ___ftmul@sign 0030  
                          ??_ISR 0001                     ___fttol@exp1 004B  
                   ___fttol@lval 0047                wheelVelocity@temp 0064  
                          ?_main 0001                  __end_of___ftadd 1AE8  
                          _CCPR2 000F67                            _CCPR3 000F5E  
                __end_of___ftmul 1DCC                            _T1CON 000FCD  
                __end_of___fttol 1CD8                            _T2CON 000FBA  
                          _T5CON 000F4E                  __end_of___lwdiv 212C  
                __end_of___lwmod 216E                            i2l150 00F0  
                          i2l144 0074                            i2l145 007E  
                          i2l147 00C4                            i2l148 00D0  
               __end_of_LCDwrite 222E                            _TRISA 000F92  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                   ___lltoft@exp 0021                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
       __end_of_limitWheelSpeeds 1F40                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                    ___awtoft@sign 001C  
                __end_of_dpowers 100B                  __end_of_isdigit 2208  
             __CFG_MCLRE$EXTMCLR 000000                    ___ftpack@sign 0015  
                          _putch 224A                            tablat 000FF5  
                          plusw2 000FDB                            status 000FD8  
                 __CFG_HFOFST$ON 000000              __size_of_LCDcheckBF 0014  
                __initialization 21CC                     __end_of_main 173C  
                         ??_main 0069                    ___fttol@sign1 0046  
                  __activetblptr 000002                        ??_LCDinit 0012  
             wheelVelocity@speed 0060               wheelVelocity@wheel 0068  
                         _CCP2IE 007D00                           _CCP2IF 007D08  
                         _CCP3IE 007BD0                           _CCP3IF 007BD8  
                         _CCPR1H 000FBF                           _CCPR1L 000FBE  
                         _CCPR3H 000F5F                           _CCPR3L 000F5E  
               __end_of___awtoft 21A6                           ?_putch 0001  
               __end_of___ftpack 1FEE                 __end_of___lltoft 20DA  
                         i2l2250 00DA                           i2l2236 008A  
                 __CFG_WDTEN$OFF 000000                           _LCDcmd 223E  
                         _TMR2IE 007CE9                           _TMR2IF 007CF1  
                         _TMR1ON 007E68                           _TMR5ON 007A70  
                 __CFG_PWRTEN$ON 000000                   __CFG_XINST$OFF 000000  
                   _CCPTMRS0bits 000F49                           ___ftge 1FEE  
                         ___wmul 21A6                        ??___ftadd 0037  
                 __CFG_STVREN$ON 000000                        ??___ftmul 0028  
                      ??___fttol 0041                        ??___lwdiv 0015  
                      ??___lwmod 001C                   _leftWheelCount 0080  
                         clear_0 21D2                           _printf 173C  
          ___ftmul@f3_as_product 002C                        ??_isdigit 0011  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
          main@controlLastMillis 006D                       __accesstop 0060  
        __end_of__initialization 21DC                  __CFG_PBADEN$OFF 000000  
                     ___ftadd@f1 0031                       ___ftadd@f2 0034  
                     ___ftge@ff1 0031                       ___ftge@ff2 0034  
                  ___rparam_used 000001                       ___awtoft@c 0019  
        __size_of_LCDgotoLineTwo 0010                        ?_LCDwrite 0001  
                     ___ftmul@f1 0022                       ___ftmul@f2 0025  
                     ___fttol@f1 003D                   __pcstackCOMRAM 0001  
                     ___lltoft@c 0019                    __end_of_putch 2254  
                   ??_LCDcheckBF 0011                          ??_putch 0013  
                     __pbssBANK0 007C                          ?_LCDcmd 0001  
                __CFG_PLLCFG$OFF 000000                       ??_LCDwrite 0012  
             __end_of_LCDcheckBF 221C               __CFG_CCP2MX$PORTB3 000000  
                        ?___ftge 0031   limitWheelSpeeds@leftWheelSpeed 0011  
                        ?___wmul 0011               __CFG_CCP3MX$PORTB5 000000  
                        _CCP2CON 000F66                          _CCP3CON 000F5D  
                      ?___awtoft 0019                        ?___ftpack 0011  
                        ?_printf 001D                        ?___lltoft 0019  
          wheelVelocity@temp_834 0066                          _LCDinit 1DCC  
              ?_limitWheelSpeeds 0011               ??_limitWheelSpeeds 0015  
                __size_of_LCDcmd 000C                          __Hparam 0000  
          __end_of_wheelVelocity 1BE4                          __Lparam 0000  
                __size_of___ftge 0090                          ___ftadd 193C  
                __size_of___wmul 0026                          ___ftmul 1CD8  
                        ___fttol 1BE4                          ___lwdiv 20DA  
                        ___lwmod 212C                     __psmallconst 1000  
                        __pcinit 21CC                       ??___awtoft 001C  
                     ??___ftpack 0016                          __ramtop 1000  
                     ??___lltoft 001D                          __ptext0 101A  
                        __ptext1 1AE8                          __ptext2 1BE4  
                        __ptext3 1CD8                          __ptext4 193C  
                        __ptext5 216E                          __ptext6 173C  
                        __ptext7 224A                          __ptext8 221C  
                        __ptext9 21EA                  __size_of_printf 0200  
                   __size_of_ISR 0124                        _T1CONbits 000FCD  
                        _dpowers 1001                        _T2CONbits 000FBA  
                        _isdigit 21EA                        _T5CONbits 000F4E  
           end_of_initialization 21DC                    __Lmediumconst 0000  
limitWheelSpeeds@rightWheelSpeed 0013                   _LCDgotoLineTwo 222E  
                        printf@c 002D                          printf@f 001D  
              main@lcdLastMillis 0071                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                      _PORTAbits 000F80                        _PORTBbits 000F81  
                      _TRISAbits 000F92                        _TRISBbits 000F93  
                      _TRISCbits 000F94                        _TRISEbits 000F96  
                  LCDcmd@command 0011           __end_of_LCDgotoLineTwo 223E  
                 __end_of_LCDcmd 224A                      printf@width 002B  
                    _CCP2CONbits 000F66                      _CCP3CONbits 000F5D  
                    ___ftmul@exp 002B                __size_of_LCDwrite 0012  
            main@rightWheelSpeed 0076          _rightWheelMeasuredSpeed 004C  
                 __end_of___ftge 207E                   __end_of___wmul 21CC  
                 __end_of_printf 193C              start_initialization 21CC  
                    __end_of_ISR 012C                         ??_LCDcmd 0011  
          main@speedCompensation 007A                  ?_LCDgotoLineTwo 0001  
                       ??___ftge 0037                         ??___wmul 0015  
                _rightWheelCount 0084                         ??_printf 0021  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
              __size_of___lltoft 005C                      __pbssCOMRAM 004C  
                       ?_LCDinit 0001                    __pcstackBANK0 0060  
                   _isdigit$1406 0012                 ___lwdiv@dividend 0011  
      __size_of_limitWheelSpeeds 00AE                        __pintcode 0008  
                       ?___ftadd 0031                         ?___ftmul 0022  
                       ?___fttol 003D                         ?___lwdiv 0011  
                       ?___lwmod 0018               main@leftWheelSpeed 0078  
               __CFG_PRICLKEN$ON 000000                      __smallconst 1000  
                       ?_isdigit 0001                 ___lwdiv@quotient 0015  
                 __size_of_putch 000A                   ___wmul@product 0015  
                       _LATCbits 000F8B                         _LATEbits 000F8D  
                       _PIE1bits 000F9D                         _LCDwrite 221C  
                       _PIR1bits 000F9E                 __CFG_WDTPS$32768 000000  
              ___wmul@multiplier 0011                       printf@flag 0028  
                     printf@prec 0027                        main@event 0075  
               __size_of_LCDinit 00C6           __size_of_wheelVelocity 00FC  
                       __Hrparam 0000                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000                __CFG_P2BMX$PORTD2 000000  
               __size_of___ftadd 01AC                 __size_of___ftmul 00F4  
               __size_of___fttol 00F4                 __size_of___lwdiv 0052  
               __size_of___lwmod 0042                         ___awtoft 216E  
                       ___ftpack 1F40                         ___lltoft 207E  
                     _ANSELBbits 000F39                 __size_of_isdigit 001E  
                ___lwdiv@divisor 0013                  ___lwdiv@counter 0017  
                       __ptext10 21A6                         __ptext11 212C  
                       __ptext20 2208                         __ptext12 20DA  
                       __ptext13 1E92                         __ptext14 207E  
                       __ptext15 1F40                         __ptext16 1FEE  
                       __ptext17 1DCC                         __ptext18 222E  
                       __ptext19 223E                 ??_LCDgotoLineTwo 0012  
                  _elapsedMillis 007C                    __size_of_main 0722  
 wheelVelocity@speedCompensation 0062                 _limitWheelSpeeds 1E92  
                  _wheelVelocity 1AE8                         int$flags 004E  
                      printf@val 0029                       _LCDcheckBF 2208  
                      putch@data 0013                       _INTCONbits 000FF2  
                       isdigit@c 0013                         intlevel2 0000  
               ___lwmod@dividend 0018                       _OSCCONbits 000FD3  
                 ?_wheelVelocity 0060                         printf@ap 0025  
                ___lwmod@divisor 001A                  ___lwmod@counter 001C  
              __CFG_T3CMX$PORTB5 000000                __CFG_FOSC$INTIO67 000000  
                  LCDwrite@input 0012  

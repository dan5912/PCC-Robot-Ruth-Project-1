

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Apr 22 13:11:06 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           	psect	idataCOMRAM
    34  001880                     __pidataCOMRAM:
    35                           	opt stack 0
    36                           
    37                           ;initializer for _leftWheelCommandedPW
    38  001880  02B0               	dw	688
    39                           
    40                           ;initializer for _rightWheelCommandedPW
    41  001882  02A3               	dw	675
    42                           
    43                           	psect	smallconst
    44  001000                     __psmallconst:
    45                           	opt stack 0
    46  001000  00                 	db	0
    47  001001                     _dpowers:
    48                           	opt stack 0
    49  001001  0001               	dw	1
    50  001003  000A               	dw	10
    51  001005  0064               	dw	100
    52  001007  03E8               	dw	1000
    53  001009  2710               	dw	10000
    54  00100B                     __end_of_dpowers:
    55                           	opt stack 0
    56  0000                     _CCPR3	set	3934
    57  0000                     _TMR5	set	3919
    58  0000                     _ANSELBbits	set	3897
    59  0000                     _ANSELD	set	3899
    60  0000                     _CCP3CON	set	3933
    61  0000                     _CCP3CONbits	set	3933
    62  0000                     _CCPTMRS0bits	set	3913
    63  0000                     _T5CON	set	3918
    64  0000                     _T5CONbits	set	3918
    65  0000                     _VREFCON0bits	set	3906
    66  0000                     _TMR5ON	set	31344
    67  0000                     _CCPR2	set	3943
    68  0000                     _TMR1	set	4046
    69  0000                     _CCP2CON	set	3942
    70  0000                     _CCP2CONbits	set	3942
    71  0000                     _CM2CON0	set	3960
    72  0000                     _CM2CON0bits	set	3960
    73  0000                     _CM2CON1bits	set	3959
    74  0000                     _INTCONbits	set	4082
    75  0000                     _LATA	set	3977
    76  0000                     _LATDbits	set	3980
    77  0000                     _LATEbits	set	3981
    78  0000                     _OSCCONbits	set	4051
    79  0000                     _PIE1bits	set	3997
    80  0000                     _PIE2bits	set	4000
    81  0000                     _PIR1bits	set	3998
    82  0000                     _PIR2bits	set	4001
    83  0000                     _PORTAbits	set	3968
    84  0000                     _PORTBbits	set	3969
    85  0000                     _PR2	set	4027
    86  0000                     _T1CON	set	4045
    87  0000                     _T1CONbits	set	4045
    88  0000                     _T2CON	set	4026
    89  0000                     _T2CONbits	set	4026
    90  0000                     _TRISA	set	3986
    91  0000                     _TRISAbits	set	3986
    92  0000                     _TRISBbits	set	3987
    93  0000                     _TRISDbits	set	3989
    94  0000                     _TRISEbits	set	3990
    95  0000                     _WPUBbits	set	3937
    96  0000                     _C2IE	set	32005
    97  0000                     _C2IF	set	32013
    98  0000                     _CCP2IE	set	32000
    99  0000                     _CCP2IF	set	32008
   100  0000                     _CCP3IE	set	31696
   101  0000                     _CCP3IF	set	31704
   102  0000                     _TMR1ON	set	32360
   103  0000                     _TMR2IE	set	31977
   104  0000                     _TMR2IF	set	31985
   105  00100B                     STR_1:
   106  00100B  45                 	db	69	;'E'
   107  00100C  76                 	db	118	;'v'
   108  00100D  65                 	db	101	;'e'
   109  00100E  6E                 	db	110	;'n'
   110  00100F  74                 	db	116	;'t'
   111  001010  3A                 	db	58	;':'
   112  001011  20                 	db	32
   113  001012  25                 	db	37
   114  001013  33                 	db	51	;'3'
   115  001014  64                 	db	100	;'d'
   116  001015  00                 	db	0
   117  001016                     STR_2:
   118  001016  53                 	db	83	;'S'
   119  001017  70                 	db	112	;'p'
   120  001018  65                 	db	101	;'e'
   121  001019  65                 	db	101	;'e'
   122  00101A  64                 	db	100	;'d'
   123  00101B  3A                 	db	58	;':'
   124  00101C  20                 	db	32
   125  00101D  25                 	db	37
   126  00101E  64                 	db	100	;'d'
   127  00101F  00                 	db	0
   128                           
   129                           ; #config settings
   130  001020  00                 	db	0	; dummy byte at the end
   131  0000                     
   132                           	psect	cinit
   133  00177E                     __pcinit:
   134                           	opt stack 0
   135  00177E                     start_initialization:
   136                           	opt stack 0
   137  00177E                     __initialization:
   138                           	opt stack 0
   139                           
   140                           ; Clear objects allocated to COMRAM (19 bytes)
   141  00177E  EE00  F037         	lfsr	0,__pbssCOMRAM
   142  001782  0E13               	movlw	19
   143  001784                     clear_0:
   144  001784  6AEE               	clrf	postinc0,c
   145  001786  06E8               	decf	wreg,f,c
   146  001788  E1FD               	bnz	clear_0
   147                           
   148                           ; Initialize objects allocated to COMRAM (4 bytes)
   149                           ; load TBLPTR registers with __pidataCOMRAM
   150  00178A  0E80               	movlw	low __pidataCOMRAM
   151  00178C  6EF6               	movwf	tblptrl,c
   152  00178E  0E18               	movlw	high __pidataCOMRAM
   153  001790  6EF7               	movwf	tblptrh,c
   154  001792  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   155  001794  6EF8               	movwf	tblptru,c
   156  001796  EE00  F04A         	lfsr	0,__pdataCOMRAM
   157  00179A  EE10 F004          	lfsr	1,4
   158  00179E                     copy_data0:
   159  00179E  0009               	tblrd		*+
   160  0017A0  CFF5 FFEE          	movff	tablat,postinc0
   161  0017A4  50E5               	movf	postdec1,w,c
   162  0017A6  50E1               	movf	fsr1l,w,c
   163  0017A8  E1FA               	bnz	copy_data0
   164  0017AA                     end_of_initialization:
   165                           	opt stack 0
   166  0017AA                     __end_of__initialization:
   167                           	opt stack 0
   168  0017AA  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   169  0017AC  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   170  0017AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   171  0017B0  6EF8               	movwf	tblptru,c
   172  0017B2  0100               	movlb	0
   173  0017B4  EF11  F008         	goto	_main	;jump to C main() function
   174                           tblptru	equ	0xFF8
   175                           tblptrh	equ	0xFF7
   176                           tblptrl	equ	0xFF6
   177                           tablat	equ	0xFF5
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           postdec1	equ	0xFE5
   181                           fsr1l	equ	0xFE1
   182                           
   183                           	psect	bssCOMRAM
   184  000037                     __pbssCOMRAM:
   185                           	opt stack 0
   186  000037                     _elapsedMillis:
   187                           	opt stack 0
   188  000037                     	ds	4
   189  00003B                     _leftWheelCount:
   190                           	opt stack 0
   191  00003B                     	ds	4
   192  00003F                     _rightWheelCount:
   193                           	opt stack 0
   194  00003F                     	ds	4
   195  000043                     _speedCompensation:
   196                           	opt stack 0
   197  000043                     	ds	2
   198  000045                     _event:
   199                           	opt stack 0
   200  000045                     	ds	1
   201  000046                     _leftWheelMeasuredSpeed:
   202                           	opt stack 0
   203  000046                     	ds	2
   204  000048                     _rightWheelMeasuredSpeed:
   205                           	opt stack 0
   206  000048                     	ds	2
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	dataCOMRAM
   217  00004A                     __pdataCOMRAM:
   218                           	opt stack 0
   219  00004A                     _leftWheelCommandedPW:
   220                           	opt stack 0
   221  00004A                     	ds	2
   222  00004C                     _rightWheelCommandedPW:
   223                           	opt stack 0
   224  00004C                     	ds	2
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           tblptrl	equ	0xFF6
   228                           tablat	equ	0xFF5
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           postdec1	equ	0xFE5
   232                           fsr1l	equ	0xFE1
   233                           
   234                           	psect	cstackBANK0
   235  000060                     __pcstackBANK0:
   236                           	opt stack 0
   237  000060                     main@controlLastMillis:
   238                           	opt stack 0
   239                           
   240                           ; 4 bytes @ 0x0
   241  000060                     	ds	4
   242  000064                     main@lcdLastMillis:
   243                           	opt stack 0
   244                           
   245                           ; 4 bytes @ 0x4
   246  000064                     	ds	4
   247  000068                     main@leftCountTracker:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x8
   251  000068                     	ds	2
   252  00006A                     main@rightCountTracker:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0xA
   256  00006A                     	ds	2
   257  00006C                     main@speedLastMillis:
   258                           	opt stack 0
   259                           
   260                           ; 4 bytes @ 0xC
   261  00006C                     	ds	4
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           postdec1	equ	0xFE5
   269                           fsr1l	equ	0xFE1
   270                           
   271                           	psect	cstackCOMRAM
   272  000001                     __pcstackCOMRAM:
   273                           	opt stack 0
   274  000001                     ??_ISR:
   275  000001                     
   276                           ; 1 bytes @ 0x0
   277  000001                     	ds	16
   278  000011                     ISR@dummy:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x10
   282  000011                     	ds	1
   283  000012                     ??_isdigit:
   284  000012                     ?___wmul:
   285                           	opt stack 0
   286  000012                     ?___lwdiv:
   287                           	opt stack 0
   288  000012                     ?___lmul:
   289                           	opt stack 0
   290  000012                     LCDcmd@command:
   291                           	opt stack 0
   292  000012                     ___wmul@multiplier:
   293                           	opt stack 0
   294  000012                     ___lwdiv@dividend:
   295                           	opt stack 0
   296  000012                     ___lmul@multiplier:
   297                           	opt stack 0
   298                           
   299                           ; 4 bytes @ 0x11
   300  000012                     	ds	1
   301  000013                     ??_LCDinit:
   302  000013                     LCDwrite@input:
   303                           	opt stack 0
   304  000013                     _isdigit$1662:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x12
   308  000013                     	ds	1
   309  000014                     putch@data:
   310                           	opt stack 0
   311  000014                     isdigit@c:
   312                           	opt stack 0
   313  000014                     ___wmul@multiplicand:
   314                           	opt stack 0
   315  000014                     ___lwdiv@divisor:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x13
   319  000014                     	ds	2
   320  000016                     ___lwdiv@counter:
   321                           	opt stack 0
   322  000016                     ___wmul@product:
   323                           	opt stack 0
   324  000016                     ___lmul@multiplicand:
   325                           	opt stack 0
   326                           
   327                           ; 4 bytes @ 0x15
   328  000016                     	ds	1
   329  000017                     ___lwdiv@quotient:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x16
   333  000017                     	ds	2
   334  000019                     ?___lwmod:
   335                           	opt stack 0
   336  000019                     ___lwmod@dividend:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x18
   340  000019                     	ds	1
   341  00001A                     ___lmul@product:
   342                           	opt stack 0
   343                           
   344                           ; 4 bytes @ 0x19
   345  00001A                     	ds	1
   346  00001B                     ___lwmod@divisor:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x1A
   350  00001B                     	ds	2
   351  00001D                     ___lwmod@counter:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x1C
   355  00001D                     	ds	1
   356  00001E                     ?_printf:
   357                           	opt stack 0
   358  00001E                     ?___lldiv:
   359                           	opt stack 0
   360  00001E                     printf@f:
   361                           	opt stack 0
   362  00001E                     ___lldiv@dividend:
   363                           	opt stack 0
   364                           
   365                           ; 4 bytes @ 0x1D
   366  00001E                     	ds	4
   367  000022                     ??_printf:
   368  000022                     ___lldiv@divisor:
   369                           	opt stack 0
   370                           
   371                           ; 4 bytes @ 0x21
   372  000022                     	ds	4
   373  000026                     printf@ap:
   374                           	opt stack 0
   375  000026                     ___lldiv@quotient:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x25
   379  000026                     	ds	2
   380  000028                     printf@prec:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x27
   384  000028                     	ds	1
   385  000029                     printf@flag:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x28
   389  000029                     	ds	1
   390  00002A                     ___lldiv@counter:
   391                           	opt stack 0
   392  00002A                     printf@val:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x29
   396  00002A                     	ds	2
   397  00002C                     printf@width:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x2B
   401  00002C                     	ds	2
   402  00002E                     printf@c:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x2D
   406  00002E                     	ds	1
   407  00002F                     ??_main:
   408                           
   409                           ; 1 bytes @ 0x2E
   410  00002F                     	ds	8
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           postdec1	equ	0xFE5
   418                           fsr1l	equ	0xFE1
   419                           
   420 ;;
   421 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   422 ;;
   423 ;; *************** function _main *****************
   424 ;; Defined at:
   425 ;;		line 124 in file "main.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;		None
   428 ;; Auto vars:     Size  Location     Type
   429 ;;  speedLastMil    4   12[BANK0 ] unsigned long 
   430 ;;  lcdLastMilli    4    4[BANK0 ] unsigned long 
   431 ;;  controlLastM    4    0[BANK0 ] unsigned long 
   432 ;;  rightCountTr    2   10[BANK0 ] int 
   433 ;;  leftCountTra    2    8[BANK0 ] int 
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Totals:         8      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;Total ram usage:       24 bytes
   448 ;; Hardware stack levels required when called:    5
   449 ;; This function calls:
   450 ;;		_LCDclear
   451 ;;		_LCDinit
   452 ;;		___lldiv
   453 ;;		___lmul
   454 ;;		_configureComparators
   455 ;;		_configureTimers
   456 ;;		_printf
   457 ;; This function is called by:
   458 ;;		Startup code after reset
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           	psect	text0
   463  001022                     __ptext0:
   464                           	opt stack 0
   465  001022                     _main:
   466                           	opt stack 26
   467                           
   468                           ;main.c: 126: OSCCONbits.IRCF = 0b110;
   469                           
   470                           ;incstack = 0
   471  001022  50D3               	movf	4051,w,c	;volatile
   472  001024  0B8F               	andlw	-113
   473  001026  0960               	iorlw	96
   474  001028  6ED3               	movwf	4051,c	;volatile
   475                           
   476                           ;main.c: 129: configureComparators();
   477  00102A  ECDC  F00B         	call	_configureComparators	;wreg free
   478                           
   479                           ;main.c: 130: configureTimers();
   480  00102E  ECB6  F00A         	call	_configureTimers	;wreg free
   481                           
   482                           ;main.c: 132: TRISBbits.TRISB4 = 1;
   483  001032  8893               	bsf	3987,4,c	;volatile
   484                           
   485                           ;main.c: 133: ANSELBbits.ANSB4 = 0;
   486  001034  010F               	movlb	15	; () banked
   487  001036  9939               	bcf	57,4,b	;volatile
   488                           
   489                           ;main.c: 137: unsigned long controlLastMillis = 0;
   490  001038  0E00               	movlw	0
   491  00103A  0100               	movlb	0	; () banked
   492  00103C  6F60               	movwf	main@controlLastMillis& (0+255),b
   493  00103E  0E00               	movlw	0
   494  001040  6F61               	movwf	(main@controlLastMillis+1)& (0+255),b
   495  001042  0E00               	movlw	0
   496  001044  6F62               	movwf	(main@controlLastMillis+2)& (0+255),b
   497  001046  0E00               	movlw	0
   498  001048  6F63               	movwf	(main@controlLastMillis+3)& (0+255),b
   499                           
   500                           ;main.c: 138: unsigned long lcdLastMillis = 0;
   501  00104A  0E00               	movlw	0
   502  00104C  0100               	movlb	0	; () banked
   503  00104E  6F64               	movwf	main@lcdLastMillis& (0+255),b
   504  001050  0E00               	movlw	0
   505  001052  6F65               	movwf	(main@lcdLastMillis+1)& (0+255),b
   506  001054  0E00               	movlw	0
   507  001056  6F66               	movwf	(main@lcdLastMillis+2)& (0+255),b
   508  001058  0E00               	movlw	0
   509  00105A  6F67               	movwf	(main@lcdLastMillis+3)& (0+255),b
   510                           
   511                           ;main.c: 139: unsigned long speedLastMillis = 0;
   512  00105C  0E00               	movlw	0
   513  00105E  0100               	movlb	0	; () banked
   514  001060  6F6C               	movwf	main@speedLastMillis& (0+255),b
   515  001062  0E00               	movlw	0
   516  001064  6F6D               	movwf	(main@speedLastMillis+1)& (0+255),b
   517  001066  0E00               	movlw	0
   518  001068  6F6E               	movwf	(main@speedLastMillis+2)& (0+255),b
   519  00106A  0E00               	movlw	0
   520  00106C  6F6F               	movwf	(main@speedLastMillis+3)& (0+255),b
   521                           
   522                           ;main.c: 140: int leftCountTracker = 0;
   523  00106E  0E00               	movlw	0
   524  001070  0100               	movlb	0	; () banked
   525  001072  6F69               	movwf	(main@leftCountTracker+1)& (0+255),b
   526  001074  0E00               	movlw	0
   527  001076  6F68               	movwf	main@leftCountTracker& (0+255),b
   528                           
   529                           ;main.c: 141: int rightCountTracker = 0;
   530  001078  0E00               	movlw	0
   531  00107A  0100               	movlb	0	; () banked
   532  00107C  6F6B               	movwf	(main@rightCountTracker+1)& (0+255),b
   533  00107E  0E00               	movlw	0
   534  001080  6F6A               	movwf	main@rightCountTracker& (0+255),b
   535                           
   536                           ; BSR set to: 0
   537                           ;main.c: 144: LCDinit();
   538  001082  EC53  F00A         	call	_LCDinit	;wreg free
   539                           
   540                           ;main.c: 145: printf("Event: %3d", event);
   541  001086  0E0B               	movlw	low STR_1
   542  001088  6E1E               	movwf	printf@f,c
   543  00108A  0E10               	movlw	high STR_1
   544  00108C  6E1F               	movwf	printf@f+1,c
   545  00108E  C045  F020         	movff	_event,?_printf+2
   546  001092  6A21               	clrf	?_printf+3,c
   547  001094  EC53  F009         	call	_printf	;wreg free
   548  001098                     l1978:
   549                           
   550                           ;main.c: 150: {
   551                           ;main.c: 155: if(lcdLastMillis + 5000 < elapsedMillis)
   552  001098  0E88               	movlw	136
   553  00109A  0100               	movlb	0	; () banked
   554  00109C  2564               	addwf	main@lcdLastMillis& (0+255),w,b
   555  00109E  6E2F               	movwf	??_main& (0+255),c
   556  0010A0  0E13               	movlw	19
   557  0010A2  0100               	movlb	0	; () banked
   558  0010A4  2165               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
   559  0010A6  6E30               	movwf	(??_main+1)& (0+255),c
   560  0010A8  0E00               	movlw	0
   561  0010AA  0100               	movlb	0	; () banked
   562  0010AC  2166               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
   563  0010AE  6E31               	movwf	(??_main+2)& (0+255),c
   564  0010B0  0E00               	movlw	0
   565  0010B2  0100               	movlb	0	; () banked
   566  0010B4  2167               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
   567  0010B6  6E32               	movwf	(??_main+3)& (0+255),c
   568  0010B8  5037               	movf	_elapsedMillis,w,c
   569  0010BA  5C2F               	subwf	??_main,w,c
   570  0010BC  5038               	movf	_elapsedMillis+1,w,c
   571  0010BE  5830               	subwfb	??_main+1,w,c
   572  0010C0  5039               	movf	_elapsedMillis+2,w,c
   573  0010C2  5831               	subwfb	??_main+2,w,c
   574  0010C4  503A               	movf	_elapsedMillis+3,w,c
   575  0010C6  5832               	subwfb	??_main+3,w,c
   576  0010C8  B0D8               	btfsc	status,0,c
   577  0010CA  D014               	goto	l1986
   578                           
   579                           ; BSR set to: 0
   580                           ;main.c: 156: {
   581                           ;main.c: 157: LCDclear();
   582  0010CC  EC2D  F00C         	call	_LCDclear	;wreg free
   583                           
   584                           ;main.c: 158: printf("Speed: %d", rightWheelMeasuredSpeed);
   585  0010D0  0E16               	movlw	low STR_2
   586  0010D2  6E1E               	movwf	printf@f,c
   587  0010D4  0E10               	movlw	high STR_2
   588  0010D6  6E1F               	movwf	printf@f+1,c
   589  0010D8  C048  F020         	movff	_rightWheelMeasuredSpeed,?_printf+2
   590  0010DC  C049  F021         	movff	_rightWheelMeasuredSpeed+1,?_printf+3
   591  0010E0  EC53  F009         	call	_printf	;wreg free
   592                           
   593                           ;main.c: 159: lcdLastMillis = elapsedMillis;
   594  0010E4  C037  F064         	movff	_elapsedMillis,main@lcdLastMillis
   595  0010E8  C038  F065         	movff	_elapsedMillis+1,main@lcdLastMillis+1
   596  0010EC  C039  F066         	movff	_elapsedMillis+2,main@lcdLastMillis+2
   597  0010F0  C03A  F067         	movff	_elapsedMillis+3,main@lcdLastMillis+3
   598  0010F4                     l1986:
   599                           
   600                           ;main.c: 160: }
   601                           ;main.c: 165: {
   602                           ;main.c: 166: controlLastMillis = elapsedMillis;
   603  0010F4  C037  F060         	movff	_elapsedMillis,main@controlLastMillis
   604  0010F8  C038  F061         	movff	_elapsedMillis+1,main@controlLastMillis+1
   605  0010FC  C039  F062         	movff	_elapsedMillis+2,main@controlLastMillis+2
   606  001100  C03A  F063         	movff	_elapsedMillis+3,main@controlLastMillis+3
   607                           
   608                           ;main.c: 168: }
   609                           ;main.c: 171: if(speedLastMillis + 1000 < elapsedMillis)
   610  001104  0EE8               	movlw	232
   611  001106  0100               	movlb	0	; () banked
   612  001108  256C               	addwf	main@speedLastMillis& (0+255),w,b
   613  00110A  6E2F               	movwf	??_main& (0+255),c
   614  00110C  0E03               	movlw	3
   615  00110E  0100               	movlb	0	; () banked
   616  001110  216D               	addwfc	(main@speedLastMillis+1)& (0+255),w,b
   617  001112  6E30               	movwf	(??_main+1)& (0+255),c
   618  001114  0E00               	movlw	0
   619  001116  0100               	movlb	0	; () banked
   620  001118  216E               	addwfc	(main@speedLastMillis+2)& (0+255),w,b
   621  00111A  6E31               	movwf	(??_main+2)& (0+255),c
   622  00111C  0E00               	movlw	0
   623  00111E  0100               	movlb	0	; () banked
   624  001120  216F               	addwfc	(main@speedLastMillis+3)& (0+255),w,b
   625  001122  6E32               	movwf	(??_main+3)& (0+255),c
   626  001124  5037               	movf	_elapsedMillis,w,c
   627  001126  5C2F               	subwf	??_main,w,c
   628  001128  5038               	movf	_elapsedMillis+1,w,c
   629  00112A  5830               	subwfb	??_main+1,w,c
   630  00112C  5039               	movf	_elapsedMillis+2,w,c
   631  00112E  5831               	subwfb	??_main+2,w,c
   632  001130  503A               	movf	_elapsedMillis+3,w,c
   633  001132  5832               	subwfb	??_main+3,w,c
   634  001134  B0D8               	btfsc	status,0,c
   635  001136  D7B0               	goto	l1978
   636                           
   637                           ; BSR set to: 0
   638                           ;main.c: 172: {
   639                           ;main.c: 175: rightWheelMeasuredSpeed = (int) ((rightWheelCount - rightCountTracker) * 1
      +                          350 / (elapsedMillis - speedLastMillis));
   640  001138  C06A  F02F         	movff	main@rightCountTracker,??_main
   641  00113C  C06B  F030         	movff	main@rightCountTracker+1,??_main+1
   642  001140  0E00               	movlw	0
   643  001142  BE30               	btfsc	(??_main+1)& (0+255),7,c
   644  001144  0EFF               	movlw	255
   645  001146  6E31               	movwf	(??_main+2)& (0+255),c
   646  001148  6E32               	movwf	(??_main+3)& (0+255),c
   647  00114A  1E2F               	comf	??_main,f,c
   648  00114C  1E30               	comf	??_main+1,f,c
   649  00114E  1E31               	comf	??_main+2,f,c
   650  001150  1E32               	comf	??_main+3,f,c
   651  001152  2A2F               	incf	??_main,f,c
   652  001154  0E00               	movlw	0
   653  001156  2230               	addwfc	??_main+1,f,c
   654  001158  2231               	addwfc	??_main+2,f,c
   655  00115A  2232               	addwfc	??_main+3,f,c
   656  00115C  503F               	movf	_rightWheelCount,w,c
   657  00115E  242F               	addwf	??_main,w,c
   658  001160  6E12               	movwf	___lmul@multiplier,c
   659  001162  5040               	movf	_rightWheelCount+1,w,c
   660  001164  2030               	addwfc	??_main+1,w,c
   661  001166  6E13               	movwf	___lmul@multiplier+1,c
   662  001168  5041               	movf	_rightWheelCount+2,w,c
   663  00116A  2031               	addwfc	??_main+2,w,c
   664  00116C  6E14               	movwf	___lmul@multiplier+2,c
   665  00116E  5042               	movf	_rightWheelCount+3,w,c
   666  001170  2032               	addwfc	??_main+3,w,c
   667  001172  6E15               	movwf	___lmul@multiplier+3,c
   668  001174  0E46               	movlw	70
   669  001176  6E16               	movwf	___lmul@multiplicand,c
   670  001178  0E05               	movlw	5
   671  00117A  6E17               	movwf	___lmul@multiplicand+1,c
   672  00117C  0E00               	movlw	0
   673  00117E  6E18               	movwf	___lmul@multiplicand+2,c
   674  001180  0E00               	movlw	0
   675  001182  6E19               	movwf	___lmul@multiplicand+3,c
   676  001184  EC4A  F00B         	call	___lmul	;wreg free
   677  001188  C012  F01E         	movff	?___lmul,___lldiv@dividend
   678  00118C  C013  F01F         	movff	?___lmul+1,___lldiv@dividend+1
   679  001190  C014  F020         	movff	?___lmul+2,___lldiv@dividend+2
   680  001194  C015  F021         	movff	?___lmul+3,___lldiv@dividend+3
   681  001198  C06C  F033         	movff	main@speedLastMillis,??_main+4
   682  00119C  C06D  F034         	movff	main@speedLastMillis+1,??_main+5
   683  0011A0  C06E  F035         	movff	main@speedLastMillis+2,??_main+6
   684  0011A4  C06F  F036         	movff	main@speedLastMillis+3,??_main+7
   685  0011A8  1E33               	comf	??_main+4,f,c
   686  0011AA  1E34               	comf	??_main+5,f,c
   687  0011AC  1E35               	comf	??_main+6,f,c
   688  0011AE  1E36               	comf	??_main+7,f,c
   689  0011B0  2A33               	incf	??_main+4,f,c
   690  0011B2  0E00               	movlw	0
   691  0011B4  2234               	addwfc	??_main+5,f,c
   692  0011B6  2235               	addwfc	??_main+6,f,c
   693  0011B8  2236               	addwfc	??_main+7,f,c
   694  0011BA  5037               	movf	_elapsedMillis,w,c
   695  0011BC  2433               	addwf	??_main+4,w,c
   696  0011BE  6E22               	movwf	___lldiv@divisor,c
   697  0011C0  5038               	movf	_elapsedMillis+1,w,c
   698  0011C2  2034               	addwfc	??_main+5,w,c
   699  0011C4  6E23               	movwf	___lldiv@divisor+1,c
   700  0011C6  5039               	movf	_elapsedMillis+2,w,c
   701  0011C8  2035               	addwfc	??_main+6,w,c
   702  0011CA  6E24               	movwf	___lldiv@divisor+2,c
   703  0011CC  503A               	movf	_elapsedMillis+3,w,c
   704  0011CE  2036               	addwfc	??_main+7,w,c
   705  0011D0  6E25               	movwf	___lldiv@divisor+3,c
   706  0011D2  EC09  F00B         	call	___lldiv	;wreg free
   707  0011D6  C01E  F048         	movff	?___lldiv,_rightWheelMeasuredSpeed
   708  0011DA  C01F  F049         	movff	?___lldiv+1,_rightWheelMeasuredSpeed+1
   709                           
   710                           ;main.c: 177: leftWheelMeasuredSpeed = (int) ((leftWheelCount - leftCountTracker) * 1350
      +                           / (elapsedMillis - speedLastMillis));
   711  0011DE  C068  F02F         	movff	main@leftCountTracker,??_main
   712  0011E2  C069  F030         	movff	main@leftCountTracker+1,??_main+1
   713  0011E6  0E00               	movlw	0
   714  0011E8  BE30               	btfsc	(??_main+1)& (0+255),7,c
   715  0011EA  0EFF               	movlw	255
   716  0011EC  6E31               	movwf	(??_main+2)& (0+255),c
   717  0011EE  6E32               	movwf	(??_main+3)& (0+255),c
   718  0011F0  1E2F               	comf	??_main,f,c
   719  0011F2  1E30               	comf	??_main+1,f,c
   720  0011F4  1E31               	comf	??_main+2,f,c
   721  0011F6  1E32               	comf	??_main+3,f,c
   722  0011F8  2A2F               	incf	??_main,f,c
   723  0011FA  0E00               	movlw	0
   724  0011FC  2230               	addwfc	??_main+1,f,c
   725  0011FE  2231               	addwfc	??_main+2,f,c
   726  001200  2232               	addwfc	??_main+3,f,c
   727  001202  503B               	movf	_leftWheelCount,w,c
   728  001204  242F               	addwf	??_main,w,c
   729  001206  6E12               	movwf	___lmul@multiplier,c
   730  001208  503C               	movf	_leftWheelCount+1,w,c
   731  00120A  2030               	addwfc	??_main+1,w,c
   732  00120C  6E13               	movwf	___lmul@multiplier+1,c
   733  00120E  503D               	movf	_leftWheelCount+2,w,c
   734  001210  2031               	addwfc	??_main+2,w,c
   735  001212  6E14               	movwf	___lmul@multiplier+2,c
   736  001214  503E               	movf	_leftWheelCount+3,w,c
   737  001216  2032               	addwfc	??_main+3,w,c
   738  001218  6E15               	movwf	___lmul@multiplier+3,c
   739  00121A  0E46               	movlw	70
   740  00121C  6E16               	movwf	___lmul@multiplicand,c
   741  00121E  0E05               	movlw	5
   742  001220  6E17               	movwf	___lmul@multiplicand+1,c
   743  001222  0E00               	movlw	0
   744  001224  6E18               	movwf	___lmul@multiplicand+2,c
   745  001226  0E00               	movlw	0
   746  001228  6E19               	movwf	___lmul@multiplicand+3,c
   747  00122A  EC4A  F00B         	call	___lmul	;wreg free
   748  00122E  C012  F01E         	movff	?___lmul,___lldiv@dividend
   749  001232  C013  F01F         	movff	?___lmul+1,___lldiv@dividend+1
   750  001236  C014  F020         	movff	?___lmul+2,___lldiv@dividend+2
   751  00123A  C015  F021         	movff	?___lmul+3,___lldiv@dividend+3
   752  00123E  C06C  F033         	movff	main@speedLastMillis,??_main+4
   753  001242  C06D  F034         	movff	main@speedLastMillis+1,??_main+5
   754  001246  C06E  F035         	movff	main@speedLastMillis+2,??_main+6
   755  00124A  C06F  F036         	movff	main@speedLastMillis+3,??_main+7
   756  00124E  1E33               	comf	??_main+4,f,c
   757  001250  1E34               	comf	??_main+5,f,c
   758  001252  1E35               	comf	??_main+6,f,c
   759  001254  1E36               	comf	??_main+7,f,c
   760  001256  2A33               	incf	??_main+4,f,c
   761  001258  0E00               	movlw	0
   762  00125A  2234               	addwfc	??_main+5,f,c
   763  00125C  2235               	addwfc	??_main+6,f,c
   764  00125E  2236               	addwfc	??_main+7,f,c
   765  001260  5037               	movf	_elapsedMillis,w,c
   766  001262  2433               	addwf	??_main+4,w,c
   767  001264  6E22               	movwf	___lldiv@divisor,c
   768  001266  5038               	movf	_elapsedMillis+1,w,c
   769  001268  2034               	addwfc	??_main+5,w,c
   770  00126A  6E23               	movwf	___lldiv@divisor+1,c
   771  00126C  5039               	movf	_elapsedMillis+2,w,c
   772  00126E  2035               	addwfc	??_main+6,w,c
   773  001270  6E24               	movwf	___lldiv@divisor+2,c
   774  001272  503A               	movf	_elapsedMillis+3,w,c
   775  001274  2036               	addwfc	??_main+7,w,c
   776  001276  6E25               	movwf	___lldiv@divisor+3,c
   777  001278  EC09  F00B         	call	___lldiv	;wreg free
   778  00127C  C01E  F046         	movff	?___lldiv,_leftWheelMeasuredSpeed
   779  001280  C01F  F047         	movff	?___lldiv+1,_leftWheelMeasuredSpeed+1
   780                           
   781                           ;main.c: 179: speedLastMillis = elapsedMillis;
   782  001284  C037  F06C         	movff	_elapsedMillis,main@speedLastMillis
   783  001288  C038  F06D         	movff	_elapsedMillis+1,main@speedLastMillis+1
   784  00128C  C039  F06E         	movff	_elapsedMillis+2,main@speedLastMillis+2
   785  001290  C03A  F06F         	movff	_elapsedMillis+3,main@speedLastMillis+3
   786                           
   787                           ;main.c: 181: rightCountTracker = rightWheelCount;
   788  001294  C03F  F06A         	movff	_rightWheelCount,main@rightCountTracker
   789  001298  C040  F06B         	movff	_rightWheelCount+1,main@rightCountTracker+1
   790                           
   791                           ;main.c: 183: leftCountTracker = leftWheelCount;
   792  00129C  C03B  F068         	movff	_leftWheelCount,main@leftCountTracker
   793  0012A0  C03C  F069         	movff	_leftWheelCount+1,main@leftCountTracker+1
   794  0012A4  D6F9               	goto	l1978
   795  0012A6                     __end_of_main:
   796                           	opt stack 0
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1l	equ	0xFE1
   805                           status	equ	0xFD8
   806                           
   807 ;; *************** function _printf *****************
   808 ;; Defined at:
   809 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  f               2   29[COMRAM] PTR const unsigned char 
   812 ;;		 -> STR_2(10), STR_1(11), 
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  tmpval          4    0        struct .
   815 ;;  cp              3    0        PTR const unsigned char 
   816 ;;  width           2   43[COMRAM] int 
   817 ;;  val             2   41[COMRAM] unsigned int 
   818 ;;  ap              2   37[COMRAM] PTR void [1]
   819 ;;		 -> ?_printf(2), 
   820 ;;  len             2    0        unsigned int 
   821 ;;  c               1   45[COMRAM] char 
   822 ;;  flag            1   40[COMRAM] unsigned char 
   823 ;;  prec            1   39[COMRAM] char 
   824 ;; Return value:  Size  Location     Type
   825 ;;                  2   29[COMRAM] int 
   826 ;; Registers used:
   827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   833 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;Total ram usage:       17 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    4
   840 ;; This function calls:
   841 ;;		___lwdiv
   842 ;;		___lwmod
   843 ;;		___wmul
   844 ;;		_isdigit
   845 ;;		_putch
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text1
   852  0012A6                     __ptext1:
   853                           	opt stack 0
   854  0012A6                     _printf:
   855                           	opt stack 26
   856                           
   857                           ;doprnt.c: 466: va_list ap;
   858                           ;doprnt.c: 499: signed char c;
   859                           ;doprnt.c: 501: int width;
   860                           ;doprnt.c: 506: signed char prec;
   861                           ;doprnt.c: 508: unsigned char flag;
   862                           ;doprnt.c: 523: union {
   863                           ;doprnt.c: 524: unsigned long vd;
   864                           ;doprnt.c: 525: double integ;
   865                           ;doprnt.c: 526: } tmpval;
   866                           ;doprnt.c: 528: unsigned int val;
   867                           ;doprnt.c: 529: unsigned len;
   868                           ;doprnt.c: 530: const char * cp;
   869                           ;doprnt.c: 533: *ap = __va_start();
   870                           
   871                           ;incstack = 0
   872  0012A6  0E20               	movlw	low (?_printf+2)
   873  0012A8  6E26               	movwf	printf@ap,c
   874  0012AA  0E00               	movlw	high (?_printf+2)
   875  0012AC  6E27               	movwf	printf@ap+1,c
   876                           
   877                           ;doprnt.c: 536: while(c = *f++) {
   878  0012AE  D0EE               	goto	l1912
   879  0012B0                     l1836:
   880                           
   881                           ;doprnt.c: 538: if(c != '%')
   882  0012B0  0E25               	movlw	37
   883  0012B2  182E               	xorwf	printf@c,w,c
   884  0012B4  B4D8               	btfsc	status,2,c
   885  0012B6  D004               	goto	l1840
   886                           
   887                           ;doprnt.c: 540: {
   888                           ;doprnt.c: 541: (putch(c) );
   889  0012B8  502E               	movf	printf@c,w,c
   890  0012BA  EC3B  F00C         	call	_putch
   891                           
   892                           ;doprnt.c: 542: continue;
   893  0012BE  D0E6               	goto	l1912
   894  0012C0                     l1840:
   895                           
   896                           ;doprnt.c: 543: }
   897                           ;doprnt.c: 546: width = 0;
   898  0012C0  0E00               	movlw	0
   899  0012C2  6E2D               	movwf	printf@width+1,c
   900  0012C4  0E00               	movlw	0
   901  0012C6  6E2C               	movwf	printf@width,c
   902                           
   903                           ;doprnt.c: 548: flag = 0;
   904  0012C8  0E00               	movlw	0
   905  0012CA  6E29               	movwf	printf@flag,c
   906                           
   907                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   908  0012CC  C01E  FFF6         	movff	printf@f,tblptrl
   909  0012D0  C01F  FFF7         	movff	printf@f+1,tblptrh
   910  0012D4                     	if	0	;tblptru may be non-zero
   911  0012D4                     	endif
   912  0012D4                     	if	0	;tblptru may be non-zero
   913  0012D4                     	endif
   914  0012D4  0008               	tblrd		*
   915  0012D6  50F5               	movf	tablat,w,c
   916  0012D8  EC0B  F00C         	call	_isdigit
   917  0012DC  A0D8               	btfss	status,0,c
   918  0012DE  D032               	goto	l1856
   919                           
   920                           ;doprnt.c: 598: width = 0;
   921  0012E0  0E00               	movlw	0
   922  0012E2  6E2D               	movwf	printf@width+1,c
   923  0012E4  0E00               	movlw	0
   924  0012E6  6E2C               	movwf	printf@width,c
   925  0012E8                     l1846:
   926                           
   927                           ;doprnt.c: 600: width *= 10;
   928  0012E8  C02C  F012         	movff	printf@width,___wmul@multiplier
   929  0012EC  C02D  F013         	movff	printf@width+1,___wmul@multiplier+1
   930  0012F0  0E00               	movlw	0
   931  0012F2  6E15               	movwf	___wmul@multiplicand+1,c
   932  0012F4  0E0A               	movlw	10
   933  0012F6  6E14               	movwf	___wmul@multiplicand,c
   934  0012F8  ECF8  F00B         	call	___wmul	;wreg free
   935  0012FC  C012  F02C         	movff	?___wmul,printf@width
   936  001300  C013  F02D         	movff	?___wmul+1,printf@width+1
   937                           
   938                           ;doprnt.c: 601: width += *f++ - '0';
   939  001304  0ED0               	movlw	208
   940  001306  6E22               	movwf	??_printf& (0+255),c
   941  001308  0EFF               	movlw	255
   942  00130A  6E23               	movwf	(??_printf+1)& (0+255),c
   943  00130C  C01E  FFF6         	movff	printf@f,tblptrl
   944  001310  C01F  FFF7         	movff	printf@f+1,tblptrh
   945  001314                     	if	0	;tblptru may be non-zero
   946  001314                     	endif
   947  001314                     	if	0	;tblptru may be non-zero
   948  001314                     	endif
   949  001314  0008               	tblrd		*
   950  001316  50F5               	movf	tablat,w,c
   951  001318  6E24               	movwf	(??_printf+2)& (0+255),c
   952  00131A  6A25               	clrf	(??_printf+3)& (0+255),c
   953  00131C  5022               	movf	??_printf,w,c
   954  00131E  2624               	addwf	??_printf+2,f,c
   955  001320  5023               	movf	??_printf+1,w,c
   956  001322  2225               	addwfc	??_printf+3,f,c
   957  001324  5024               	movf	??_printf+2,w,c
   958  001326  262C               	addwf	printf@width,f,c
   959  001328  5025               	movf	??_printf+3,w,c
   960  00132A  222D               	addwfc	printf@width+1,f,c
   961  00132C  4A1E               	infsnz	printf@f,f,c
   962  00132E  2A1F               	incf	printf@f+1,f,c
   963                           
   964                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   965  001330  C01E  FFF6         	movff	printf@f,tblptrl
   966  001334  C01F  FFF7         	movff	printf@f+1,tblptrh
   967  001338                     	if	0	;tblptru may be non-zero
   968  001338                     	endif
   969  001338                     	if	0	;tblptru may be non-zero
   970  001338                     	endif
   971  001338  0008               	tblrd		*
   972  00133A  50F5               	movf	tablat,w,c
   973  00133C  EC0B  F00C         	call	_isdigit
   974  001340  B0D8               	btfsc	status,0,c
   975  001342  D7D2               	goto	l1846
   976  001344                     l1856:
   977  001344  C01E  FFF6         	movff	printf@f,tblptrl
   978  001348  C01F  FFF7         	movff	printf@f+1,tblptrh
   979  00134C  4A1E               	infsnz	printf@f,f,c
   980  00134E  2A1F               	incf	printf@f+1,f,c
   981  001350                     	if	0	;tblptru may be non-zero
   982  001350                     	endif
   983  001350                     	if	0	;tblptru may be non-zero
   984  001350                     	endif
   985  001350  0008               	tblrd		*
   986  001352  CFF5 F02E          	movff	tablat,printf@c
   987  001356  502E               	movf	printf@c,w,c
   988                           
   989                           ; Switch size 1, requested type "space"
   990                           ; Number of cases is 3, Range of values is 0 to 105
   991                           ; switch strategies available:
   992                           ; Name         Instructions Cycles
   993                           ; simple_byte           10     6 (average)
   994                           ;	Chosen strategy is simple_byte
   995  001358  0A00               	xorlw	0	; case 0
   996  00135A  B4D8               	btfsc	status,2,c
   997  00135C  0012               	return	
   998  00135E  0A64               	xorlw	100	; case 100
   999  001360  B4D8               	btfsc	status,2,c
  1000  001362  D003               	goto	l1858
  1001  001364  0A0D               	xorlw	13	; case 105
  1002  001366  A4D8               	btfss	status,2,c
  1003  001368  D091               	goto	l1912
  1004  00136A                     l1858:
  1005                           
  1006                           ;doprnt.c: 1253: {
  1007                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1008  00136A  C026  FFD9         	movff	printf@ap,fsr2l
  1009  00136E  C027  FFDA         	movff	printf@ap+1,fsr2h
  1010  001372  CFDE F02A          	movff	postinc2,printf@val
  1011  001376  CFDD F02B          	movff	postdec2,printf@val+1
  1012  00137A  0E02               	movlw	2
  1013  00137C  2626               	addwf	printf@ap,f,c
  1014  00137E  0E00               	movlw	0
  1015  001380  2227               	addwfc	printf@ap+1,f,c
  1016                           
  1017                           ;doprnt.c: 1261: if((int)val < 0) {
  1018  001382  AE2B               	btfss	printf@val+1,7,c
  1019  001384  D006               	goto	l1868
  1020                           
  1021                           ;doprnt.c: 1262: flag |= 0x03;
  1022  001386  0E03               	movlw	3
  1023  001388  1229               	iorwf	printf@flag,f,c
  1024                           
  1025                           ;doprnt.c: 1263: val = -val;
  1026  00138A  6C2A               	negf	printf@val,c
  1027  00138C  1E2B               	comf	printf@val+1,f,c
  1028  00138E  B0D8               	btfsc	status,0,c
  1029  001390  2A2B               	incf	printf@val+1,f,c
  1030  001392                     l1868:
  1031                           
  1032                           ;doprnt.c: 1264: }
  1033                           ;doprnt.c: 1266: }
  1034                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1035  001392  0E01               	movlw	1
  1036  001394  6E2E               	movwf	printf@c,c
  1037  001396                     l1870:
  1038  001396  0E05               	movlw	5
  1039  001398  182E               	xorwf	printf@c,w,c
  1040  00139A  B4D8               	btfsc	status,2,c
  1041  00139C  D012               	goto	l1882
  1042                           
  1043                           ;doprnt.c: 1306: if(val < dpowers[c])
  1044  00139E  502E               	movf	printf@c,w,c
  1045  0013A0  0D02               	mullw	2
  1046  0013A2  0E01               	movlw	low _dpowers
  1047  0013A4  24F3               	addwf	prodl,w,c
  1048  0013A6  6EF6               	movwf	tblptrl,c
  1049  0013A8  0E10               	movlw	high _dpowers
  1050  0013AA  20F4               	addwfc	prodh,w,c
  1051  0013AC  6EF7               	movwf	tblptrh,c
  1052  0013AE                     	if	0	;There are less than 3 active tblptr bytes
  1053  0013AE                     	endif
  1054  0013AE  0009               	tblrd		*+
  1055  0013B0  50F5               	movf	tablat,w,c
  1056  0013B2  5C2A               	subwf	printf@val,w,c
  1057  0013B4  0009               	tblrd		*+
  1058  0013B6  50F5               	movf	tablat,w,c
  1059  0013B8  582B               	subwfb	printf@val+1,w,c
  1060  0013BA  A0D8               	btfss	status,0,c
  1061  0013BC  D002               	goto	l1882
  1062                           
  1063                           ;doprnt.c: 1307: break;
  1064  0013BE  2A2E               	incf	printf@c,f,c
  1065  0013C0  D7EA               	goto	l1870
  1066  0013C2                     l1882:
  1067                           
  1068                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1069  0013C2  502C               	movf	printf@width,w,c
  1070  0013C4  102D               	iorwf	printf@width+1,w,c
  1071  0013C6  B4D8               	btfsc	status,2,c
  1072  0013C8  D009               	goto	l1888
  1073  0013CA  C029  F022         	movff	printf@flag,??_printf
  1074  0013CE  0E03               	movlw	3
  1075  0013D0  1622               	andwf	??_printf,f,c
  1076  0013D2  B4D8               	btfsc	status,2,c
  1077  0013D4  D003               	goto	l1888
  1078                           
  1079                           ;doprnt.c: 1346: width--;
  1080  0013D6  062C               	decf	printf@width,f,c
  1081  0013D8  A0D8               	btfss	status,0,c
  1082  0013DA  062D               	decf	printf@width+1,f,c
  1083  0013DC                     l1888:
  1084                           
  1085                           ;doprnt.c: 1381: if(width > c)
  1086  0013DC  0E80               	movlw	128
  1087  0013DE  BE2E               	btfsc	printf@c,7,c
  1088  0013E0  0E7F               	movlw	127
  1089  0013E2  6E22               	movwf	??_printf& (0+255),c
  1090  0013E4  502C               	movf	printf@width,w,c
  1091  0013E6  5C2E               	subwf	printf@c,w,c
  1092  0013E8  502D               	movf	printf@width+1,w,c
  1093  0013EA  0A80               	xorlw	128
  1094  0013EC  5822               	subwfb	??_printf& (0+255),w,c
  1095  0013EE  B0D8               	btfsc	status,0,c
  1096  0013F0  D007               	goto	l1892
  1097                           
  1098                           ;doprnt.c: 1382: width -= c;
  1099  0013F2  502E               	movf	printf@c,w,c
  1100  0013F4  5E2C               	subwf	printf@width,f,c
  1101  0013F6  0E00               	movlw	0
  1102  0013F8  BE2E               	btfsc	printf@c,7,c
  1103  0013FA  0EFF               	movlw	255
  1104  0013FC  5A2D               	subwfb	printf@width+1,f,c
  1105  0013FE  D004               	goto	l1894
  1106  001400                     l1892:
  1107                           
  1108                           ;doprnt.c: 1383: else
  1109                           ;doprnt.c: 1384: width = 0;
  1110  001400  0E00               	movlw	0
  1111  001402  6E2D               	movwf	printf@width+1,c
  1112  001404  0E00               	movlw	0
  1113  001406  6E2C               	movwf	printf@width,c
  1114  001408                     l1894:
  1115                           
  1116                           ;doprnt.c: 1422: {
  1117                           ;doprnt.c: 1424: if(width
  1118                           ;doprnt.c: 1428: )
  1119  001408  502C               	movf	printf@width,w,c
  1120  00140A  102D               	iorwf	printf@width+1,w,c
  1121  00140C  B4D8               	btfsc	status,2,c
  1122  00140E  D00A               	goto	l1900
  1123  001410                     l1896:
  1124                           
  1125                           ;doprnt.c: 1430: (putch(' ') );
  1126  001410  0E20               	movlw	32
  1127  001412  EC3B  F00C         	call	_putch
  1128                           
  1129                           ;doprnt.c: 1431: while(--width);
  1130  001416  062C               	decf	printf@width,f,c
  1131  001418  A0D8               	btfss	status,0,c
  1132  00141A  062D               	decf	printf@width+1,f,c
  1133  00141C  502C               	movf	printf@width,w,c
  1134  00141E  102D               	iorwf	printf@width+1,w,c
  1135  001420  A4D8               	btfss	status,2,c
  1136  001422  D7F6               	goto	l1896
  1137  001424                     l1900:
  1138                           
  1139                           ;doprnt.c: 1438: if(flag & 0x03)
  1140  001424  C029  F022         	movff	printf@flag,??_printf
  1141  001428  0E03               	movlw	3
  1142  00142A  1622               	andwf	??_printf,f,c
  1143  00142C  B4D8               	btfsc	status,2,c
  1144  00142E  D003               	goto	l1904
  1145                           
  1146                           ;doprnt.c: 1439: (putch('-') );
  1147  001430  0E2D               	movlw	45
  1148  001432  EC3B  F00C         	call	_putch
  1149  001436                     l1904:
  1150                           
  1151                           ;doprnt.c: 1469: }
  1152                           ;doprnt.c: 1472: prec = c;
  1153  001436  C02E  F028         	movff	printf@c,printf@prec
  1154                           
  1155                           ;doprnt.c: 1474: while(prec--) {
  1156  00143A  D024               	goto	l1910
  1157  00143C                     l1906:
  1158                           
  1159                           ;doprnt.c: 1478: {
  1160                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1161  00143C  5028               	movf	printf@prec,w,c
  1162  00143E  0D02               	mullw	2
  1163  001440  0E01               	movlw	low _dpowers
  1164  001442  24F3               	addwf	prodl,w,c
  1165  001444  6EF6               	movwf	tblptrl,c
  1166  001446  0E10               	movlw	high _dpowers
  1167  001448  20F4               	addwfc	prodh,w,c
  1168  00144A  6EF7               	movwf	tblptrh,c
  1169  00144C                     	if	0	;There are less than 3 active tblptr bytes
  1170  00144C                     	endif
  1171  00144C  0009               	tblrd		*+
  1172  00144E  CFF5 F014          	movff	tablat,___lwdiv@divisor
  1173  001452  000A               	tblrd		*-
  1174  001454  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  1175  001458  C02A  F012         	movff	printf@val,___lwdiv@dividend
  1176  00145C  C02B  F013         	movff	printf@val+1,___lwdiv@dividend+1
  1177  001460  EC75  F00B         	call	___lwdiv	;wreg free
  1178  001464  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  1179  001468  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  1180  00146C  0E00               	movlw	0
  1181  00146E  6E1C               	movwf	___lwmod@divisor+1,c
  1182  001470  0E0A               	movlw	10
  1183  001472  6E1B               	movwf	___lwmod@divisor,c
  1184  001474  EC9E  F00B         	call	___lwmod	;wreg free
  1185  001478  5019               	movf	?___lwmod,w,c
  1186  00147A  0F30               	addlw	48
  1187  00147C  6E2E               	movwf	printf@c,c
  1188                           
  1189                           ;doprnt.c: 1523: }
  1190                           ;doprnt.c: 1524: (putch(c) );
  1191  00147E  502E               	movf	printf@c,w,c
  1192  001480  EC3B  F00C         	call	_putch
  1193  001484                     l1910:
  1194  001484  0628               	decf	printf@prec,f,c
  1195  001486  2828               	incf	printf@prec,w,c
  1196  001488  A4D8               	btfss	status,2,c
  1197  00148A  D7D8               	goto	l1906
  1198  00148C                     l1912:
  1199  00148C  C01E  FFF6         	movff	printf@f,tblptrl
  1200  001490  C01F  FFF7         	movff	printf@f+1,tblptrh
  1201  001494  4A1E               	infsnz	printf@f,f,c
  1202  001496  2A1F               	incf	printf@f+1,f,c
  1203  001498                     	if	0	;tblptru may be non-zero
  1204  001498                     	endif
  1205  001498                     	if	0	;tblptru may be non-zero
  1206  001498                     	endif
  1207  001498  0008               	tblrd		*
  1208  00149A  CFF5 F02E          	movff	tablat,printf@c
  1209  00149E  502E               	movf	printf@c,w,c
  1210  0014A0  B4D8               	btfsc	status,2,c
  1211  0014A2  0012               	return	
  1212  0014A4  D705               	goto	l1836
  1213  0014A6                     __end_of_printf:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           prodh	equ	0xFF4
  1220                           prodl	equ	0xFF3
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           postdec1	equ	0xFE5
  1224                           fsr1l	equ	0xFE1
  1225                           postinc2	equ	0xFDE
  1226                           postdec2	equ	0xFDD
  1227                           fsr2h	equ	0xFDA
  1228                           fsr2l	equ	0xFD9
  1229                           status	equ	0xFD8
  1230                           
  1231 ;; *************** function _putch *****************
  1232 ;; Defined at:
  1233 ;;		line 12 in file "printfLib.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  data            1    wreg     unsigned char 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  data            1   19[COMRAM] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;Total ram usage:        1 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    3
  1254 ;; This function calls:
  1255 ;;		_LCDwrite
  1256 ;; This function is called by:
  1257 ;;		_printf
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text2
  1262  001876                     __ptext2:
  1263                           	opt stack 0
  1264  001876                     _putch:
  1265                           	opt stack 26
  1266                           
  1267                           ;incstack = 0
  1268                           ;putch@data stored from wreg
  1269  001876  6E14               	movwf	putch@data,c
  1270                           
  1271                           ;printfLib.c: 13: LCDwrite(data);
  1272  001878  5014               	movf	putch@data,w,c
  1273  00187A  EC24  F00C         	call	_LCDwrite
  1274  00187E  0012               	return		;funcret
  1275  001880                     __end_of_putch:
  1276                           	opt stack 0
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1l	equ	0xFE1
  1287                           postinc2	equ	0xFDE
  1288                           postdec2	equ	0xFDD
  1289                           fsr2h	equ	0xFDA
  1290                           fsr2l	equ	0xFD9
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _LCDwrite *****************
  1294 ;; Defined at:
  1295 ;;		line 118 in file "lcd.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  input           1    wreg     unsigned char 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  input           1   18[COMRAM] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, status,2, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;Total ram usage:        1 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    2
  1316 ;; This function calls:
  1317 ;;		_LCDcheckBF
  1318 ;;		_LCDcmd
  1319 ;; This function is called by:
  1320 ;;		_putch
  1321 ;;		_LCDputs
  1322 ;;		_LCDwriteLineOne
  1323 ;;		_LCDwriteLineTwo
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text3
  1328  001848                     __ptext3:
  1329                           	opt stack 0
  1330  001848                     _LCDwrite:
  1331                           	opt stack 26
  1332                           
  1333                           ;incstack = 0
  1334                           ;LCDwrite@input stored from wreg
  1335  001848  6E13               	movwf	LCDwrite@input,c
  1336                           
  1337                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  1338  00184A  808D               	bsf	3981,0,c	;volatile
  1339                           
  1340                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  1341  00184C  928D               	bcf	3981,1,c	;volatile
  1342                           
  1343                           ;lcd.c: 122: LCDcmd(input);
  1344  00184E  5013               	movf	LCDwrite@input,w,c
  1345  001850  EC35  F00C         	call	_LCDcmd
  1346                           
  1347                           ;lcd.c: 123: LCDcheckBF();
  1348  001854  EC1A  F00C         	call	_LCDcheckBF	;wreg free
  1349  001858  0012               	return		;funcret
  1350  00185A                     __end_of_LCDwrite:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           prodh	equ	0xFF4
  1357                           prodl	equ	0xFF3
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1l	equ	0xFE1
  1362                           postinc2	equ	0xFDE
  1363                           postdec2	equ	0xFDD
  1364                           fsr2h	equ	0xFDA
  1365                           fsr2l	equ	0xFD9
  1366                           status	equ	0xFD8
  1367                           
  1368 ;; *************** function _isdigit *****************
  1369 ;; Defined at:
  1370 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  c               1    wreg     unsigned char 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  c               1   19[COMRAM] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;		None               void
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;Total ram usage:        3 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    1
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_printf
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text4
  1399  001816                     __ptext4:
  1400                           	opt stack 0
  1401  001816                     _isdigit:
  1402                           	opt stack 28
  1403                           
  1404                           ;incstack = 0
  1405                           ;isdigit@c stored from wreg
  1406  001816  6E14               	movwf	isdigit@c,c
  1407  001818  0E00               	movlw	0
  1408  00181A  6E13               	movwf	_isdigit$1662,c
  1409  00181C  0E3A               	movlw	58
  1410  00181E  6014               	cpfslt	isdigit@c,c
  1411  001820  D005               	goto	l1678
  1412  001822  0E2F               	movlw	47
  1413  001824  6414               	cpfsgt	isdigit@c,c
  1414  001826  D002               	goto	l1678
  1415  001828  0E01               	movlw	1
  1416  00182A  6E13               	movwf	_isdigit$1662,c
  1417  00182C                     l1678:
  1418  00182C  C013  F012         	movff	_isdigit$1662,??_isdigit
  1419  001830  3012               	rrcf	??_isdigit,w,c
  1420  001832  0012               	return	
  1421  001834                     __end_of_isdigit:
  1422                           	opt stack 0
  1423                           tblptru	equ	0xFF8
  1424                           tblptrh	equ	0xFF7
  1425                           tblptrl	equ	0xFF6
  1426                           tablat	equ	0xFF5
  1427                           prodh	equ	0xFF4
  1428                           prodl	equ	0xFF3
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           postdec1	equ	0xFE5
  1432                           fsr1l	equ	0xFE1
  1433                           postinc2	equ	0xFDE
  1434                           postdec2	equ	0xFDD
  1435                           fsr2h	equ	0xFDA
  1436                           fsr2l	equ	0xFD9
  1437                           status	equ	0xFD8
  1438                           
  1439 ;; *************** function ___wmul *****************
  1440 ;; Defined at:
  1441 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;  multiplier      2   17[COMRAM] unsigned int 
  1444 ;;  multiplicand    2   19[COMRAM] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;  product         2   21[COMRAM] unsigned int 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  2   17[COMRAM] unsigned int 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0, prodl, prodh
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1456 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;Total ram usage:        6 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    1
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_printf
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text5
  1471  0017F0                     __ptext5:
  1472                           	opt stack 0
  1473  0017F0                     ___wmul:
  1474                           	opt stack 28
  1475                           
  1476                           ;incstack = 0
  1477  0017F0  5012               	movf	___wmul@multiplier,w,c
  1478  0017F2  0214               	mulwf	___wmul@multiplicand,c
  1479  0017F4  CFF3 F016          	movff	prodl,___wmul@product
  1480  0017F8  CFF4 F017          	movff	prodh,___wmul@product+1
  1481  0017FC  5012               	movf	___wmul@multiplier,w,c
  1482  0017FE  0215               	mulwf	___wmul@multiplicand+1,c
  1483  001800  50F3               	movf	prodl,w,c
  1484  001802  2617               	addwf	___wmul@product+1,f,c
  1485  001804  5013               	movf	___wmul@multiplier+1,w,c
  1486  001806  0214               	mulwf	___wmul@multiplicand,c
  1487  001808  50F3               	movf	prodl,w,c
  1488  00180A  2617               	addwf	___wmul@product+1,f,c
  1489  00180C  C016  F012         	movff	___wmul@product,?___wmul
  1490  001810  C017  F013         	movff	___wmul@product+1,?___wmul+1
  1491  001814  0012               	return	
  1492  001816                     __end_of___wmul:
  1493                           	opt stack 0
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           prodh	equ	0xFF4
  1499                           prodl	equ	0xFF3
  1500                           postinc0	equ	0xFEE
  1501                           wreg	equ	0xFE8
  1502                           postdec1	equ	0xFE5
  1503                           fsr1l	equ	0xFE1
  1504                           postinc2	equ	0xFDE
  1505                           postdec2	equ	0xFDD
  1506                           fsr2h	equ	0xFDA
  1507                           fsr2l	equ	0xFD9
  1508                           status	equ	0xFD8
  1509                           
  1510 ;; *************** function ___lwmod *****************
  1511 ;; Defined at:
  1512 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  dividend        2   24[COMRAM] unsigned int 
  1515 ;;  divisor         2   26[COMRAM] unsigned int 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  counter         1   28[COMRAM] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  2   24[COMRAM] unsigned int 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;Total ram usage:        5 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    1
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_printf
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text6
  1542  00173C                     __ptext6:
  1543                           	opt stack 0
  1544  00173C                     ___lwmod:
  1545                           	opt stack 28
  1546                           
  1547                           ;incstack = 0
  1548  00173C  501B               	movf	___lwmod@divisor,w,c
  1549  00173E  101C               	iorwf	___lwmod@divisor+1,w,c
  1550  001740  B4D8               	btfsc	status,2,c
  1551  001742  D018               	goto	l707
  1552  001744  0E01               	movlw	1
  1553  001746  6E1D               	movwf	___lwmod@counter,c
  1554  001748  D004               	goto	l1716
  1555  00174A                     l1714:
  1556  00174A  90D8               	bcf	status,0,c
  1557  00174C  361B               	rlcf	___lwmod@divisor,f,c
  1558  00174E  361C               	rlcf	___lwmod@divisor+1,f,c
  1559  001750  2A1D               	incf	___lwmod@counter,f,c
  1560  001752                     l1716:
  1561  001752  AE1C               	btfss	___lwmod@divisor+1,7,c
  1562  001754  D7FA               	goto	l1714
  1563  001756                     l1718:
  1564  001756  501B               	movf	___lwmod@divisor,w,c
  1565  001758  5C19               	subwf	___lwmod@dividend,w,c
  1566  00175A  501C               	movf	___lwmod@divisor+1,w,c
  1567  00175C  581A               	subwfb	___lwmod@dividend+1,w,c
  1568  00175E  A0D8               	btfss	status,0,c
  1569  001760  D004               	goto	l1722
  1570  001762  501B               	movf	___lwmod@divisor,w,c
  1571  001764  5E19               	subwf	___lwmod@dividend,f,c
  1572  001766  501C               	movf	___lwmod@divisor+1,w,c
  1573  001768  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1574  00176A                     l1722:
  1575  00176A  90D8               	bcf	status,0,c
  1576  00176C  321C               	rrcf	___lwmod@divisor+1,f,c
  1577  00176E  321B               	rrcf	___lwmod@divisor,f,c
  1578  001770  2E1D               	decfsz	___lwmod@counter,f,c
  1579  001772  D7F1               	goto	l1718
  1580  001774                     l707:
  1581  001774  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1582  001778  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1583  00177C  0012               	return		;funcret
  1584  00177E                     __end_of___lwmod:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1l	equ	0xFE1
  1596                           postinc2	equ	0xFDE
  1597                           postdec2	equ	0xFDD
  1598                           fsr2h	equ	0xFDA
  1599                           fsr2l	equ	0xFD9
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function ___lwdiv *****************
  1603 ;; Defined at:
  1604 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  dividend        2   17[COMRAM] unsigned int 
  1607 ;;  divisor         2   19[COMRAM] unsigned int 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  quotient        2   22[COMRAM] unsigned int 
  1610 ;;  counter         1   21[COMRAM] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2   17[COMRAM] unsigned int 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        7 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    1
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_printf
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text7
  1635  0016EA                     __ptext7:
  1636                           	opt stack 0
  1637  0016EA                     ___lwdiv:
  1638                           	opt stack 28
  1639                           
  1640                           ;incstack = 0
  1641  0016EA  0E00               	movlw	0
  1642  0016EC  6E18               	movwf	___lwdiv@quotient+1,c
  1643  0016EE  0E00               	movlw	0
  1644  0016F0  6E17               	movwf	___lwdiv@quotient,c
  1645  0016F2  5014               	movf	___lwdiv@divisor,w,c
  1646  0016F4  1015               	iorwf	___lwdiv@divisor+1,w,c
  1647  0016F6  B4D8               	btfsc	status,2,c
  1648  0016F8  D01C               	goto	l697
  1649  0016FA  0E01               	movlw	1
  1650  0016FC  6E16               	movwf	___lwdiv@counter,c
  1651  0016FE  D004               	goto	l1696
  1652  001700                     l1694:
  1653  001700  90D8               	bcf	status,0,c
  1654  001702  3614               	rlcf	___lwdiv@divisor,f,c
  1655  001704  3615               	rlcf	___lwdiv@divisor+1,f,c
  1656  001706  2A16               	incf	___lwdiv@counter,f,c
  1657  001708                     l1696:
  1658  001708  AE15               	btfss	___lwdiv@divisor+1,7,c
  1659  00170A  D7FA               	goto	l1694
  1660  00170C                     l1698:
  1661  00170C  90D8               	bcf	status,0,c
  1662  00170E  3617               	rlcf	___lwdiv@quotient,f,c
  1663  001710  3618               	rlcf	___lwdiv@quotient+1,f,c
  1664  001712  5014               	movf	___lwdiv@divisor,w,c
  1665  001714  5C12               	subwf	___lwdiv@dividend,w,c
  1666  001716  5015               	movf	___lwdiv@divisor+1,w,c
  1667  001718  5813               	subwfb	___lwdiv@dividend+1,w,c
  1668  00171A  A0D8               	btfss	status,0,c
  1669  00171C  D005               	goto	l1706
  1670  00171E  5014               	movf	___lwdiv@divisor,w,c
  1671  001720  5E12               	subwf	___lwdiv@dividend,f,c
  1672  001722  5015               	movf	___lwdiv@divisor+1,w,c
  1673  001724  5A13               	subwfb	___lwdiv@dividend+1,f,c
  1674  001726  8017               	bsf	___lwdiv@quotient,0,c
  1675  001728                     l1706:
  1676  001728  90D8               	bcf	status,0,c
  1677  00172A  3215               	rrcf	___lwdiv@divisor+1,f,c
  1678  00172C  3214               	rrcf	___lwdiv@divisor,f,c
  1679  00172E  2E16               	decfsz	___lwdiv@counter,f,c
  1680  001730  D7ED               	goto	l1698
  1681  001732                     l697:
  1682  001732  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  1683  001736  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1684  00173A  0012               	return		;funcret
  1685  00173C                     __end_of___lwdiv:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           postdec1	equ	0xFE5
  1696                           fsr1l	equ	0xFE1
  1697                           postinc2	equ	0xFDE
  1698                           postdec2	equ	0xFDD
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _configureTimers *****************
  1704 ;; Defined at:
  1705 ;;		line 433 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, status,2
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    1
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text8
  1734  00156C                     __ptext8:
  1735                           	opt stack 0
  1736  00156C                     _configureTimers:
  1737                           	opt stack 29
  1738                           
  1739                           ;main.c: 435: (INTCONbits.GIE = 0);
  1740                           
  1741                           ;incstack = 0
  1742  00156C  9EF2               	bcf	intcon,7,c	;volatile
  1743                           
  1744                           ;main.c: 437: T1CON = 0;
  1745  00156E  0E00               	movlw	0
  1746  001570  6ECD               	movwf	4045,c	;volatile
  1747                           
  1748                           ;main.c: 438: T1CONbits.TMR1CS = 0b00;
  1749  001572  0E3F               	movlw	-193
  1750  001574  16CD               	andwf	4045,f,c	;volatile
  1751                           
  1752                           ;main.c: 439: T1CONbits.T1CKPS = 0b10;
  1753  001576  50CD               	movf	4045,w,c	;volatile
  1754  001578  0BCF               	andlw	-49
  1755  00157A  0920               	iorlw	32
  1756  00157C  6ECD               	movwf	4045,c	;volatile
  1757                           
  1758                           ;main.c: 440: T5CON = 0;
  1759  00157E  0E00               	movlw	0
  1760  001580  010F               	movlb	15	; () banked
  1761  001582  6F4E               	movwf	78,b	;volatile
  1762                           
  1763                           ;main.c: 441: T5CONbits.TMR5CS = 0b00;
  1764  001584  0E3F               	movlw	-193
  1765  001586  010F               	movlb	15	; () banked
  1766  001588  174E               	andwf	78,f,b	;volatile
  1767                           
  1768                           ;main.c: 442: T1CONbits.T1CKPS = 0b10;
  1769  00158A  50CD               	movf	4045,w,c	;volatile
  1770  00158C  0BCF               	andlw	-49
  1771  00158E  0920               	iorlw	32
  1772  001590  6ECD               	movwf	4045,c	;volatile
  1773                           
  1774                           ;main.c: 447: CCP3CON = 0;
  1775  001592  0E00               	movlw	0
  1776  001594  010F               	movlb	15	; () banked
  1777  001596  6F5D               	movwf	93,b	;volatile
  1778                           
  1779                           ;main.c: 448: CCP2CON = 0;
  1780  001598  0E00               	movlw	0
  1781  00159A  6E66               	movwf	3942,c	;volatile
  1782                           
  1783                           ;main.c: 449: CCP3CONbits.CCP3M = 0b1010;
  1784  00159C  010F               	movlb	15	; () banked
  1785  00159E  515D               	movf	93,w,b	;volatile
  1786  0015A0  0BF0               	andlw	-16
  1787  0015A2  090A               	iorlw	10
  1788  0015A4  6F5D               	movwf	93,b	;volatile
  1789                           
  1790                           ;main.c: 450: CCP2CONbits.CCP2M = 0b1010;
  1791  0015A6  5066               	movf	3942,w,c	;volatile
  1792  0015A8  0BF0               	andlw	-16
  1793  0015AA  090A               	iorlw	10
  1794  0015AC  6E66               	movwf	3942,c	;volatile
  1795                           
  1796                           ;main.c: 457: CCPTMRS0bits.C3TSEL = 0;
  1797  0015AE  0E3F               	movlw	-193
  1798  0015B0  010F               	movlb	15	; () banked
  1799  0015B2  1749               	andwf	73,f,b	;volatile
  1800                           
  1801                           ;main.c: 458: CCPTMRS0bits.C2TSEL = 0b10;
  1802  0015B4  010F               	movlb	15	; () banked
  1803  0015B6  5149               	movf	73,w,b	;volatile
  1804  0015B8  0BE7               	andlw	-25
  1805  0015BA  0910               	iorlw	16
  1806  0015BC  6F49               	movwf	73,b	;volatile
  1807                           
  1808                           ;main.c: 460: CCPR3 = 675;
  1809  0015BE  0E02               	movlw	2
  1810  0015C0  010F               	movlb	15	; () banked
  1811  0015C2  6F5F               	movwf	95,b	;volatile
  1812  0015C4  0EA3               	movlw	163
  1813  0015C6  6F5E               	movwf	94,b	;volatile
  1814                           
  1815                           ;main.c: 461: CCPR2 = 675;
  1816  0015C8  0E02               	movlw	2
  1817  0015CA  6E68               	movwf	3944,c	;volatile
  1818  0015CC  0EA3               	movlw	163
  1819  0015CE  6E67               	movwf	3943,c	;volatile
  1820                           
  1821                           ; BSR set to: 15
  1822                           ;main.c: 463: CCP3IE = 1;
  1823  0015D0  807A               	bsf	3962,0,c	;volatile
  1824                           
  1825                           ; BSR set to: 15
  1826                           ;main.c: 464: CCP2IE = 1;
  1827  0015D2  80A0               	bsf	4000,0,c	;volatile
  1828                           
  1829                           ; BSR set to: 15
  1830                           ;main.c: 467: PIE1bits.TMR2IE = 1;
  1831  0015D4  829D               	bsf	3997,1,c	;volatile
  1832                           
  1833                           ;main.c: 468: T2CON = 0;
  1834  0015D6  0E00               	movlw	0
  1835  0015D8  6EBA               	movwf	4026,c	;volatile
  1836                           
  1837                           ;main.c: 469: T2CONbits.T2CKPS = 0b10;
  1838  0015DA  50BA               	movf	4026,w,c	;volatile
  1839  0015DC  0BFC               	andlw	-4
  1840  0015DE  0902               	iorlw	2
  1841  0015E0  6EBA               	movwf	4026,c	;volatile
  1842                           
  1843                           ; BSR set to: 15
  1844                           ;main.c: 470: T2CONbits.TMR2ON = 1;
  1845  0015E2  84BA               	bsf	4026,2,c	;volatile
  1846                           
  1847                           ;main.c: 471: PR2 = 125;
  1848  0015E4  0E7D               	movlw	125
  1849  0015E6  6EBB               	movwf	4027,c	;volatile
  1850                           
  1851                           ; BSR set to: 15
  1852                           ;main.c: 477: INTCONbits.GIE = 1;
  1853  0015E8  8EF2               	bsf	intcon,7,c	;volatile
  1854                           
  1855                           ; BSR set to: 15
  1856                           ;main.c: 478: INTCONbits.PEIE = 1;
  1857  0015EA  8CF2               	bsf	intcon,6,c	;volatile
  1858                           
  1859                           ;main.c: 480: TMR1 = 0;
  1860  0015EC  0E00               	movlw	0
  1861  0015EE  6ECF               	movwf	4047,c	;volatile
  1862  0015F0  0E00               	movlw	0
  1863  0015F2  6ECE               	movwf	4046,c	;volatile
  1864                           
  1865                           ;main.c: 481: TMR5 = 0;
  1866  0015F4  0E00               	movlw	0
  1867  0015F6  010F               	movlb	15	; () banked
  1868  0015F8  6F50               	movwf	80,b	;volatile
  1869  0015FA  0E00               	movlw	0
  1870  0015FC  6F4F               	movwf	79,b	;volatile
  1871                           
  1872                           ; BSR set to: 15
  1873                           ;main.c: 482: TMR1ON = 1;
  1874  0015FE  80CD               	bsf	4045,0,c	;volatile
  1875                           
  1876                           ; BSR set to: 15
  1877                           ;main.c: 483: TMR5ON = 1;
  1878  001600  010F               	movlb	15	; () banked
  1879  001602  814E               	bsf	78,0,b	;volatile
  1880                           
  1881                           ; BSR set to: 15
  1882                           ;main.c: 485: (INTCONbits.GIE = 1);
  1883  001604  8EF2               	bsf	intcon,7,c	;volatile
  1884                           
  1885                           ; BSR set to: 15
  1886                           ;main.c: 487: TRISDbits.TRISD0 = 0;
  1887  001606  9095               	bcf	3989,0,c	;volatile
  1888                           
  1889                           ; BSR set to: 15
  1890                           ;main.c: 488: TRISDbits.TRISD1 = 0;
  1891  001608  9295               	bcf	3989,1,c	;volatile
  1892                           
  1893                           ;main.c: 489: ANSELD = 0;
  1894  00160A  0E00               	movlw	0
  1895  00160C  010F               	movlb	15	; () banked
  1896  00160E  6F3B               	movwf	59,b	;volatile
  1897                           
  1898                           ; BSR set to: 15
  1899  001610  0012               	return		;funcret
  1900  001612                     __end_of_configureTimers:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           prodh	equ	0xFF4
  1907                           prodl	equ	0xFF3
  1908                           intcon	equ	0xFF2
  1909                           postinc0	equ	0xFEE
  1910                           wreg	equ	0xFE8
  1911                           postdec1	equ	0xFE5
  1912                           fsr1l	equ	0xFE1
  1913                           postinc2	equ	0xFDE
  1914                           postdec2	equ	0xFDD
  1915                           fsr2h	equ	0xFDA
  1916                           fsr2l	equ	0xFD9
  1917                           status	equ	0xFD8
  1918                           
  1919 ;; *************** function _configureComparators *****************
  1920 ;; Defined at:
  1921 ;;		line 493 in file "main.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;Total ram usage:        0 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    1
  1942 ;; This function calls:
  1943 ;;		Nothing
  1944 ;; This function is called by:
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text9
  1950  0017B8                     __ptext9:
  1951                           	opt stack 0
  1952  0017B8                     _configureComparators:
  1953                           	opt stack 29
  1954                           
  1955                           ;main.c: 497: VREFCON0bits.FVREN=1;
  1956                           
  1957                           ; BSR set to: 15
  1958                           ;incstack = 0
  1959  0017B8  010F               	movlb	15	; () banked
  1960  0017BA  8F42               	bsf	66,7,b	;volatile
  1961                           
  1962                           ;main.c: 498: VREFCON0bits.FVRST=0;
  1963  0017BC  010F               	movlb	15	; () banked
  1964  0017BE  9D42               	bcf	66,6,b	;volatile
  1965                           
  1966                           ; BSR set to: 15
  1967                           ;main.c: 499: VREFCON0bits.FVRS=0b01;
  1968  0017C0  010F               	movlb	15	; () banked
  1969  0017C2  5142               	movf	66,w,b	;volatile
  1970  0017C4  0BCF               	andlw	-49
  1971  0017C6  0910               	iorlw	16
  1972  0017C8  6F42               	movwf	66,b	;volatile
  1973                           
  1974                           ; BSR set to: 15
  1975                           ;main.c: 501: TRISBbits.TRISB1 = 1;
  1976  0017CA  8293               	bsf	3987,1,c	;volatile
  1977                           
  1978                           ; BSR set to: 15
  1979                           ;main.c: 502: ANSELBbits.ANSB1 = 1;
  1980  0017CC  010F               	movlb	15	; () banked
  1981  0017CE  8339               	bsf	57,1,b	;volatile
  1982                           
  1983                           ; BSR set to: 15
  1984                           ;main.c: 503: WPUBbits.WPUB1 = 1;
  1985  0017D0  8261               	bsf	3937,1,c	;volatile
  1986                           
  1987                           ; BSR set to: 15
  1988                           ;main.c: 506: CM2CON0bits.C2ON = 1;
  1989  0017D2  8E78               	bsf	3960,7,c	;volatile
  1990                           
  1991                           ; BSR set to: 15
  1992                           ;main.c: 507: CM2CON0bits.C2OUT = 0;
  1993  0017D4  9C78               	bcf	3960,6,c	;volatile
  1994                           
  1995                           ; BSR set to: 15
  1996                           ;main.c: 508: CM2CON0bits.C2OE = 0;
  1997  0017D6  9A78               	bcf	3960,5,c	;volatile
  1998                           
  1999                           ; BSR set to: 15
  2000                           ;main.c: 509: CM2CON0bits.C2POL = 1;
  2001  0017D8  8878               	bsf	3960,4,c	;volatile
  2002                           
  2003                           ; BSR set to: 15
  2004                           ;main.c: 510: CM2CON0bits.C2SP = 1;
  2005  0017DA  8678               	bsf	3960,3,c	;volatile
  2006                           
  2007                           ; BSR set to: 15
  2008                           ;main.c: 511: CM2CON0bits.C2R = 1;
  2009  0017DC  8478               	bsf	3960,2,c	;volatile
  2010                           
  2011                           ;main.c: 512: CM2CON0bits.C2CH = 0b11;
  2012  0017DE  0E03               	movlw	3
  2013  0017E0  1278               	iorwf	3960,f,c	;volatile
  2014                           
  2015                           ; BSR set to: 15
  2016                           ;main.c: 514: CM2CON1bits.C2RSEL = 1;
  2017  0017E2  8877               	bsf	3959,4,c	;volatile
  2018                           
  2019                           ; BSR set to: 15
  2020                           ;main.c: 515: CM2CON1bits.C2HYS = 0;
  2021  0017E4  9477               	bcf	3959,2,c	;volatile
  2022                           
  2023                           ; BSR set to: 15
  2024                           ;main.c: 516: CM2CON1bits.C2SYNC = 0;
  2025  0017E6  9077               	bcf	3959,0,c	;volatile
  2026                           
  2027                           ; BSR set to: 15
  2028                           ;main.c: 519: PIR2bits.C2IF = 0;
  2029  0017E8  9AA1               	bcf	4001,5,c	;volatile
  2030                           
  2031                           ; BSR set to: 15
  2032                           ;main.c: 520: PIE2bits.C2IE = 1;
  2033  0017EA  8AA0               	bsf	4000,5,c	;volatile
  2034                           
  2035                           ; BSR set to: 15
  2036                           ;main.c: 521: PIE2bits.C1IE = 0;
  2037  0017EC  9CA0               	bcf	4000,6,c	;volatile
  2038                           
  2039                           ; BSR set to: 15
  2040  0017EE  0012               	return		;funcret
  2041  0017F0                     __end_of_configureComparators:
  2042                           	opt stack 0
  2043                           tblptru	equ	0xFF8
  2044                           tblptrh	equ	0xFF7
  2045                           tblptrl	equ	0xFF6
  2046                           tablat	equ	0xFF5
  2047                           prodh	equ	0xFF4
  2048                           prodl	equ	0xFF3
  2049                           intcon	equ	0xFF2
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postdec1	equ	0xFE5
  2053                           fsr1l	equ	0xFE1
  2054                           postinc2	equ	0xFDE
  2055                           postdec2	equ	0xFDD
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function ___lmul *****************
  2061 ;; Defined at:
  2062 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul32.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  multiplier      4   17[COMRAM] unsigned long 
  2065 ;;  multiplicand    4   21[COMRAM] unsigned long 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  product         4   25[COMRAM] unsigned long 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  4   17[COMRAM] unsigned long 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2, status,0
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2077 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;Total ram usage:       12 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:    1
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_main
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text10
  2092  001694                     __ptext10:
  2093                           	opt stack 0
  2094  001694                     ___lmul:
  2095                           	opt stack 29
  2096                           
  2097                           ; BSR set to: 15
  2098                           ;incstack = 0
  2099  001694  0E00               	movlw	0
  2100  001696  6E1A               	movwf	___lmul@product,c
  2101  001698  0E00               	movlw	0
  2102  00169A  6E1B               	movwf	___lmul@product+1,c
  2103  00169C  0E00               	movlw	0
  2104  00169E  6E1C               	movwf	___lmul@product+2,c
  2105  0016A0  0E00               	movlw	0
  2106  0016A2  6E1D               	movwf	___lmul@product+3,c
  2107  0016A4                     l1934:
  2108  0016A4  A012               	btfss	___lmul@multiplier,0,c
  2109  0016A6  D008               	goto	l1938
  2110  0016A8  5016               	movf	___lmul@multiplicand,w,c
  2111  0016AA  261A               	addwf	___lmul@product,f,c
  2112  0016AC  5017               	movf	___lmul@multiplicand+1,w,c
  2113  0016AE  221B               	addwfc	___lmul@product+1,f,c
  2114  0016B0  5018               	movf	___lmul@multiplicand+2,w,c
  2115  0016B2  221C               	addwfc	___lmul@product+2,f,c
  2116  0016B4  5019               	movf	___lmul@multiplicand+3,w,c
  2117  0016B6  221D               	addwfc	___lmul@product+3,f,c
  2118  0016B8                     l1938:
  2119  0016B8  90D8               	bcf	status,0,c
  2120  0016BA  3616               	rlcf	___lmul@multiplicand,f,c
  2121  0016BC  3617               	rlcf	___lmul@multiplicand+1,f,c
  2122  0016BE  3618               	rlcf	___lmul@multiplicand+2,f,c
  2123  0016C0  3619               	rlcf	___lmul@multiplicand+3,f,c
  2124  0016C2  90D8               	bcf	status,0,c
  2125  0016C4  3215               	rrcf	___lmul@multiplier+3,f,c
  2126  0016C6  3214               	rrcf	___lmul@multiplier+2,f,c
  2127  0016C8  3213               	rrcf	___lmul@multiplier+1,f,c
  2128  0016CA  3212               	rrcf	___lmul@multiplier,f,c
  2129  0016CC  5012               	movf	___lmul@multiplier,w,c
  2130  0016CE  1013               	iorwf	___lmul@multiplier+1,w,c
  2131  0016D0  1014               	iorwf	___lmul@multiplier+2,w,c
  2132  0016D2  1015               	iorwf	___lmul@multiplier+3,w,c
  2133  0016D4  A4D8               	btfss	status,2,c
  2134  0016D6  D7E6               	goto	l1934
  2135  0016D8  C01A  F012         	movff	___lmul@product,?___lmul
  2136  0016DC  C01B  F013         	movff	___lmul@product+1,?___lmul+1
  2137  0016E0  C01C  F014         	movff	___lmul@product+2,?___lmul+2
  2138  0016E4  C01D  F015         	movff	___lmul@product+3,?___lmul+3
  2139  0016E8  0012               	return		;funcret
  2140  0016EA                     __end_of___lmul:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           prodh	equ	0xFF4
  2147                           prodl	equ	0xFF3
  2148                           intcon	equ	0xFF2
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           postdec1	equ	0xFE5
  2152                           fsr1l	equ	0xFE1
  2153                           postinc2	equ	0xFDE
  2154                           postdec2	equ	0xFDD
  2155                           fsr2h	equ	0xFDA
  2156                           fsr2l	equ	0xFD9
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function ___lldiv *****************
  2160 ;; Defined at:
  2161 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lldiv.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  dividend        4   29[COMRAM] unsigned long 
  2164 ;;  divisor         4   33[COMRAM] unsigned long 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  quotient        4   37[COMRAM] unsigned long 
  2167 ;;  counter         1   41[COMRAM] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  4   29[COMRAM] unsigned long 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2177 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;Total ram usage:       13 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    1
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text11
  2192  001612                     __ptext11:
  2193                           	opt stack 0
  2194  001612                     ___lldiv:
  2195                           	opt stack 29
  2196                           
  2197                           ;incstack = 0
  2198  001612  0E00               	movlw	0
  2199  001614  6E26               	movwf	___lldiv@quotient,c
  2200  001616  0E00               	movlw	0
  2201  001618  6E27               	movwf	___lldiv@quotient+1,c
  2202  00161A  0E00               	movlw	0
  2203  00161C  6E28               	movwf	___lldiv@quotient+2,c
  2204  00161E  0E00               	movlw	0
  2205  001620  6E29               	movwf	___lldiv@quotient+3,c
  2206  001622  5022               	movf	___lldiv@divisor,w,c
  2207  001624  1023               	iorwf	___lldiv@divisor+1,w,c
  2208  001626  1024               	iorwf	___lldiv@divisor+2,w,c
  2209  001628  1025               	iorwf	___lldiv@divisor+3,w,c
  2210  00162A  B4D8               	btfsc	status,2,c
  2211  00162C  D02A               	goto	l644
  2212  00162E  0E01               	movlw	1
  2213  001630  6E2A               	movwf	___lldiv@counter,c
  2214  001632  D006               	goto	l1950
  2215  001634                     l1948:
  2216  001634  90D8               	bcf	status,0,c
  2217  001636  3622               	rlcf	___lldiv@divisor,f,c
  2218  001638  3623               	rlcf	___lldiv@divisor+1,f,c
  2219  00163A  3624               	rlcf	___lldiv@divisor+2,f,c
  2220  00163C  3625               	rlcf	___lldiv@divisor+3,f,c
  2221  00163E  2A2A               	incf	___lldiv@counter,f,c
  2222  001640                     l1950:
  2223  001640  AE25               	btfss	___lldiv@divisor+3,7,c
  2224  001642  D7F8               	goto	l1948
  2225  001644                     l1952:
  2226  001644  90D8               	bcf	status,0,c
  2227  001646  3626               	rlcf	___lldiv@quotient,f,c
  2228  001648  3627               	rlcf	___lldiv@quotient+1,f,c
  2229  00164A  3628               	rlcf	___lldiv@quotient+2,f,c
  2230  00164C  3629               	rlcf	___lldiv@quotient+3,f,c
  2231  00164E  5022               	movf	___lldiv@divisor,w,c
  2232  001650  5C1E               	subwf	___lldiv@dividend,w,c
  2233  001652  5023               	movf	___lldiv@divisor+1,w,c
  2234  001654  581F               	subwfb	___lldiv@dividend+1,w,c
  2235  001656  5024               	movf	___lldiv@divisor+2,w,c
  2236  001658  5820               	subwfb	___lldiv@dividend+2,w,c
  2237  00165A  5025               	movf	___lldiv@divisor+3,w,c
  2238  00165C  5821               	subwfb	___lldiv@dividend+3,w,c
  2239  00165E  A0D8               	btfss	status,0,c
  2240  001660  D009               	goto	l1960
  2241  001662  5022               	movf	___lldiv@divisor,w,c
  2242  001664  5E1E               	subwf	___lldiv@dividend,f,c
  2243  001666  5023               	movf	___lldiv@divisor+1,w,c
  2244  001668  5A1F               	subwfb	___lldiv@dividend+1,f,c
  2245  00166A  5024               	movf	___lldiv@divisor+2,w,c
  2246  00166C  5A20               	subwfb	___lldiv@dividend+2,f,c
  2247  00166E  5025               	movf	___lldiv@divisor+3,w,c
  2248  001670  5A21               	subwfb	___lldiv@dividend+3,f,c
  2249  001672  8026               	bsf	___lldiv@quotient,0,c
  2250  001674                     l1960:
  2251  001674  90D8               	bcf	status,0,c
  2252  001676  3225               	rrcf	___lldiv@divisor+3,f,c
  2253  001678  3224               	rrcf	___lldiv@divisor+2,f,c
  2254  00167A  3223               	rrcf	___lldiv@divisor+1,f,c
  2255  00167C  3222               	rrcf	___lldiv@divisor,f,c
  2256  00167E  2E2A               	decfsz	___lldiv@counter,f,c
  2257  001680  D7E1               	goto	l1952
  2258  001682                     l644:
  2259  001682  C026  F01E         	movff	___lldiv@quotient,?___lldiv
  2260  001686  C027  F01F         	movff	___lldiv@quotient+1,?___lldiv+1
  2261  00168A  C028  F020         	movff	___lldiv@quotient+2,?___lldiv+2
  2262  00168E  C029  F021         	movff	___lldiv@quotient+3,?___lldiv+3
  2263  001692  0012               	return		;funcret
  2264  001694                     __end_of___lldiv:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           intcon	equ	0xFF2
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           postdec1	equ	0xFE5
  2276                           fsr1l	equ	0xFE1
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _LCDinit *****************
  2284 ;; Defined at:
  2285 ;;		line 60 in file "lcd.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;Total ram usage:        1 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    2
  2306 ;; This function calls:
  2307 ;;		_LCDcheckBF
  2308 ;;		_LCDcmd
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text12
  2315  0014A6                     __ptext12:
  2316                           	opt stack 0
  2317  0014A6                     _LCDinit:
  2318                           	opt stack 28
  2319                           
  2320                           ;lcd.c: 63: TRISA = 0;
  2321                           
  2322                           ;incstack = 0
  2323  0014A6  0E00               	movlw	0
  2324  0014A8  6E92               	movwf	3986,c	;volatile
  2325                           
  2326                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  2327  0014AA  9096               	bcf	3990,0,c	;volatile
  2328                           
  2329                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  2330  0014AC  9296               	bcf	3990,1,c	;volatile
  2331                           
  2332                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  2333  0014AE  9496               	bcf	3990,2,c	;volatile
  2334                           
  2335                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  2336  0014B0  908D               	bcf	3981,0,c	;volatile
  2337                           
  2338                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  2339  0014B2  928D               	bcf	3981,1,c	;volatile
  2340                           
  2341                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  2342  0014B4  848D               	bsf	3981,2,c	;volatile
  2343                           
  2344                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  2345  0014B6  0E21               	movlw	33
  2346  0014B8  6E13               	movwf	??_LCDinit& (0+255),c
  2347  0014BA  0E76               	movlw	118
  2348  0014BC                     u1347:
  2349  0014BC  2EE8               	decfsz	wreg,f,c
  2350  0014BE  D7FE               	goto	u1347
  2351  0014C0  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2352  0014C2  D7FC               	goto	u1347
  2353  0014C4  D000               	nop2	
  2354                           
  2355                           ;lcd.c: 74: LCDcmd(0b00110000);
  2356  0014C6  0E30               	movlw	48
  2357  0014C8  EC35  F00C         	call	_LCDcmd
  2358                           
  2359                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  2360  0014CC  0E27               	movlw	39
  2361  0014CE  6E13               	movwf	??_LCDinit& (0+255),c
  2362  0014D0  0EF5               	movlw	245
  2363  0014D2                     u1357:
  2364  0014D2  2EE8               	decfsz	wreg,f,c
  2365  0014D4  D7FE               	goto	u1357
  2366  0014D6  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2367  0014D8  D7FC               	goto	u1357
  2368  0014DA  F000               	nop	
  2369                           
  2370                           ;lcd.c: 76: LCDcmd(0b00110000);
  2371  0014DC  0E30               	movlw	48
  2372  0014DE  EC35  F00C         	call	_LCDcmd
  2373                           
  2374                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  2375  0014E2  0E27               	movlw	39
  2376  0014E4  6E13               	movwf	??_LCDinit& (0+255),c
  2377  0014E6  0EF5               	movlw	245
  2378  0014E8                     u1367:
  2379  0014E8  2EE8               	decfsz	wreg,f,c
  2380  0014EA  D7FE               	goto	u1367
  2381  0014EC  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2382  0014EE  D7FC               	goto	u1367
  2383  0014F0  F000               	nop	
  2384                           
  2385                           ;lcd.c: 78: LCDcmd(0b00110000);
  2386  0014F2  0E30               	movlw	48
  2387  0014F4  EC35  F00C         	call	_LCDcmd
  2388                           
  2389                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  2390  0014F8  0E27               	movlw	39
  2391  0014FA  6E13               	movwf	??_LCDinit& (0+255),c
  2392  0014FC  0EF5               	movlw	245
  2393  0014FE                     u1377:
  2394  0014FE  2EE8               	decfsz	wreg,f,c
  2395  001500  D7FE               	goto	u1377
  2396  001502  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2397  001504  D7FC               	goto	u1377
  2398  001506  F000               	nop	
  2399                           
  2400                           ;lcd.c: 80: LCDcmd(0b00111000);
  2401  001508  0E38               	movlw	56
  2402  00150A  EC35  F00C         	call	_LCDcmd
  2403                           
  2404                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  2405  00150E  0E27               	movlw	39
  2406  001510  6E13               	movwf	??_LCDinit& (0+255),c
  2407  001512  0EF5               	movlw	245
  2408  001514                     u1387:
  2409  001514  2EE8               	decfsz	wreg,f,c
  2410  001516  D7FE               	goto	u1387
  2411  001518  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2412  00151A  D7FC               	goto	u1387
  2413  00151C  F000               	nop	
  2414                           
  2415                           ;lcd.c: 82: LCDcmd(0b00001000);
  2416  00151E  0E08               	movlw	8
  2417  001520  EC35  F00C         	call	_LCDcmd
  2418                           
  2419                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  2420  001524  0E27               	movlw	39
  2421  001526  6E13               	movwf	??_LCDinit& (0+255),c
  2422  001528  0EF5               	movlw	245
  2423  00152A                     u1397:
  2424  00152A  2EE8               	decfsz	wreg,f,c
  2425  00152C  D7FE               	goto	u1397
  2426  00152E  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2427  001530  D7FC               	goto	u1397
  2428  001532  F000               	nop	
  2429                           
  2430                           ;lcd.c: 84: LCDcmd(0b00000001);
  2431  001534  0E01               	movlw	1
  2432  001536  EC35  F00C         	call	_LCDcmd
  2433                           
  2434                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  2435  00153A  0E27               	movlw	39
  2436  00153C  6E13               	movwf	??_LCDinit& (0+255),c
  2437  00153E  0EF5               	movlw	245
  2438  001540                     u1407:
  2439  001540  2EE8               	decfsz	wreg,f,c
  2440  001542  D7FE               	goto	u1407
  2441  001544  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2442  001546  D7FC               	goto	u1407
  2443  001548  F000               	nop	
  2444                           
  2445                           ;lcd.c: 86: LCDcmd(0b00000110);
  2446  00154A  0E06               	movlw	6
  2447  00154C  EC35  F00C         	call	_LCDcmd
  2448                           
  2449                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  2450  001550  0E27               	movlw	39
  2451  001552  6E13               	movwf	??_LCDinit& (0+255),c
  2452  001554  0EF5               	movlw	245
  2453  001556                     u1417:
  2454  001556  2EE8               	decfsz	wreg,f,c
  2455  001558  D7FE               	goto	u1417
  2456  00155A  2E13               	decfsz	??_LCDinit& (0+255),f,c
  2457  00155C  D7FC               	goto	u1417
  2458  00155E  F000               	nop	
  2459                           
  2460                           ;lcd.c: 90: LCDcmd(0b00001111);
  2461  001560  0E0F               	movlw	15
  2462  001562  EC35  F00C         	call	_LCDcmd
  2463                           
  2464                           ;lcd.c: 91: LCDcheckBF();
  2465  001566  EC1A  F00C         	call	_LCDcheckBF	;wreg free
  2466  00156A  0012               	return		;funcret
  2467  00156C                     __end_of_LCDinit:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           tblptrh	equ	0xFF7
  2471                           tblptrl	equ	0xFF6
  2472                           tablat	equ	0xFF5
  2473                           prodh	equ	0xFF4
  2474                           prodl	equ	0xFF3
  2475                           intcon	equ	0xFF2
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           postdec1	equ	0xFE5
  2479                           fsr1l	equ	0xFE1
  2480                           postinc2	equ	0xFDE
  2481                           postdec2	equ	0xFDD
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _LCDclear *****************
  2487 ;; Defined at:
  2488 ;;		line 126 in file "lcd.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		wreg, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;Total ram usage:        0 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    2
  2509 ;; This function calls:
  2510 ;;		_LCDcheckBF
  2511 ;;		_LCDcmd
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;;		_LCDputs
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text13
  2519  00185A                     __ptext13:
  2520                           	opt stack 0
  2521  00185A                     _LCDclear:
  2522                           	opt stack 28
  2523                           
  2524                           ;lcd.c: 128: LATEbits.LATE0 = 0;
  2525                           
  2526                           ;incstack = 0
  2527  00185A  908D               	bcf	3981,0,c	;volatile
  2528                           
  2529                           ;lcd.c: 129: LATEbits.LATE1 = 0;
  2530  00185C  928D               	bcf	3981,1,c	;volatile
  2531                           
  2532                           ;lcd.c: 130: LCDcmd(0b00000001);
  2533  00185E  0E01               	movlw	1
  2534  001860  EC35  F00C         	call	_LCDcmd
  2535                           
  2536                           ;lcd.c: 131: LCDcheckBF();
  2537  001864  EC1A  F00C         	call	_LCDcheckBF	;wreg free
  2538  001868  0012               	return		;funcret
  2539  00186A                     __end_of_LCDclear:
  2540                           	opt stack 0
  2541                           tblptru	equ	0xFF8
  2542                           tblptrh	equ	0xFF7
  2543                           tblptrl	equ	0xFF6
  2544                           tablat	equ	0xFF5
  2545                           prodh	equ	0xFF4
  2546                           prodl	equ	0xFF3
  2547                           intcon	equ	0xFF2
  2548                           postinc0	equ	0xFEE
  2549                           wreg	equ	0xFE8
  2550                           postdec1	equ	0xFE5
  2551                           fsr1l	equ	0xFE1
  2552                           postinc2	equ	0xFDE
  2553                           postdec2	equ	0xFDD
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function _LCDcmd *****************
  2559 ;; Defined at:
  2560 ;;		line 94 in file "lcd.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;  command         1    wreg     unsigned char 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  command         1   17[COMRAM] unsigned char 
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		wreg
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;Total ram usage:        1 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    1
  2581 ;; This function calls:
  2582 ;;		Nothing
  2583 ;; This function is called by:
  2584 ;;		_LCDinit
  2585 ;;		_LCDwrite
  2586 ;;		_LCDclear
  2587 ;;		_LCDgotoLineOne
  2588 ;;		_LCDgotoLineTwo
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text14
  2593  00186A                     __ptext14:
  2594                           	opt stack 0
  2595  00186A                     _LCDcmd:
  2596                           	opt stack 26
  2597                           
  2598                           ;incstack = 0
  2599                           ;LCDcmd@command stored from wreg
  2600  00186A  6E12               	movwf	LCDcmd@command,c
  2601                           
  2602                           ;lcd.c: 96: LATA = command;
  2603  00186C  C012  FF89         	movff	LCDcmd@command,3977	;volatile
  2604                           
  2605                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  2606  001870  948D               	bcf	3981,2,c	;volatile
  2607                           
  2608                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  2609  001872  848D               	bsf	3981,2,c	;volatile
  2610  001874  0012               	return		;funcret
  2611  001876                     __end_of_LCDcmd:
  2612                           	opt stack 0
  2613                           tblptru	equ	0xFF8
  2614                           tblptrh	equ	0xFF7
  2615                           tblptrl	equ	0xFF6
  2616                           tablat	equ	0xFF5
  2617                           prodh	equ	0xFF4
  2618                           prodl	equ	0xFF3
  2619                           intcon	equ	0xFF2
  2620                           postinc0	equ	0xFEE
  2621                           wreg	equ	0xFE8
  2622                           postdec1	equ	0xFE5
  2623                           fsr1l	equ	0xFE1
  2624                           postinc2	equ	0xFDE
  2625                           postdec2	equ	0xFDD
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function _LCDcheckBF *****************
  2631 ;; Defined at:
  2632 ;;		line 101 in file "lcd.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		None
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;Total ram usage:        0 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    1
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_LCDinit
  2657 ;;		_LCDwrite
  2658 ;;		_LCDclear
  2659 ;;		_LCDgotoLineOne
  2660 ;;		_LCDgotoLineTwo
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text15
  2665  001834                     __ptext15:
  2666                           	opt stack 0
  2667  001834                     _LCDcheckBF:
  2668                           	opt stack 26
  2669                           
  2670                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  2671                           
  2672                           ;incstack = 0
  2673  001834  8E92               	bsf	3986,7,c	;volatile
  2674                           
  2675                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  2676  001836  908D               	bcf	3981,0,c	;volatile
  2677                           
  2678                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  2679  001838  828D               	bsf	3981,1,c	;volatile
  2680  00183A                     l215:
  2681                           
  2682                           ;lcd.c: 110: {
  2683                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  2684  00183A  948D               	bcf	3981,2,c	;volatile
  2685                           
  2686                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  2687  00183C  848D               	bsf	3981,2,c	;volatile
  2688  00183E  BE80               	btfsc	3968,7,c	;volatile
  2689  001840  D7FC               	goto	l215
  2690                           
  2691                           ;lcd.c: 113: }
  2692                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  2693  001842  848D               	bsf	3981,2,c	;volatile
  2694                           
  2695                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  2696  001844  9E92               	bcf	3986,7,c	;volatile
  2697  001846  0012               	return		;funcret
  2698  001848                     __end_of_LCDcheckBF:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           intcon	equ	0xFF2
  2707                           postinc0	equ	0xFEE
  2708                           wreg	equ	0xFE8
  2709                           postdec1	equ	0xFE5
  2710                           fsr1l	equ	0xFE1
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _ISR *****************
  2718 ;; Defined at:
  2719 ;;		line 234 in file "main.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;		None
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  dummy           1   16[COMRAM] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;Total ram usage:       17 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		Interrupt level 2
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	intcode
  2747  000008                     __pintcode:
  2748                           	opt stack 0
  2749  000008                     _ISR:
  2750                           	opt stack 26
  2751                           
  2752                           ;incstack = 0
  2753  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2754  00000A  CFFA F003          	movff	pclath,??_ISR+2
  2755  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  2756  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  2757  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  2758  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  2759  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  2760  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  2761  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  2762  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  2763  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  2764  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  2765  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  2766  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  2767  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  2768                           
  2769                           ;main.c: 237: if (CCP2IE && CCP2IF)
  2770  000042  B0A0               	btfsc	4000,0,c	;volatile
  2771  000044  A0A1               	btfss	4001,0,c	;volatile
  2772  000046  D01E               	goto	i2l137
  2773                           
  2774                           ;main.c: 238: {
  2775                           ;main.c: 240: if(LATDbits.LATD1 == 1)
  2776  000048  A28C               	btfss	3980,1,c	;volatile
  2777  00004A  D010               	goto	i2l138
  2778                           
  2779                           ;main.c: 241: {
  2780                           ;main.c: 242: LATDbits.LATD1 = 0;
  2781  00004C  928C               	bcf	3980,1,c	;volatile
  2782                           
  2783                           ;main.c: 243: CCPR2 = 8000 - CCPR2;
  2784  00004E  CF67 F001          	movff	3943,??_ISR	;volatile
  2785  000052  CF68 F002          	movff	3944,??_ISR+1	;volatile
  2786  000056  1E01               	comf	??_ISR,f,c
  2787  000058  1E02               	comf	??_ISR+1,f,c
  2788  00005A  4A01               	infsnz	??_ISR,f,c
  2789  00005C  2A02               	incf	??_ISR+1,f,c
  2790  00005E  0E40               	movlw	64
  2791  000060  2401               	addwf	??_ISR,w,c
  2792  000062  6E67               	movwf	3943,c	;volatile
  2793  000064  0E1F               	movlw	31
  2794  000066  2002               	addwfc	??_ISR+1,w,c
  2795  000068  6E68               	movwf	3944,c	;volatile
  2796                           
  2797                           ;main.c: 244: }
  2798  00006A  D005               	goto	i2l1284
  2799  00006C                     i2l138:
  2800                           
  2801                           ;main.c: 245: else
  2802                           ;main.c: 246: {
  2803                           ;main.c: 247: LATDbits.LATD1 = 1;
  2804  00006C  828C               	bsf	3980,1,c	;volatile
  2805                           
  2806                           ;main.c: 248: CCPR2 = leftWheelCommandedPW;
  2807  00006E  C04A  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  2808  000072  C04B  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  2809  000076                     i2l1284:
  2810                           
  2811                           ;main.c: 249: }
  2812                           ;main.c: 250: TMR5 = 0;
  2813  000076  0E00               	movlw	0
  2814  000078  010F               	movlb	15	; () banked
  2815  00007A  6F50               	movwf	80,b	;volatile
  2816  00007C  0E00               	movlw	0
  2817  00007E  6F4F               	movwf	79,b	;volatile
  2818                           
  2819                           ; BSR set to: 15
  2820                           ;main.c: 251: CCP2IF = 0;
  2821  000080  90A1               	bcf	4001,0,c	;volatile
  2822                           
  2823                           ; BSR set to: 15
  2824                           ;main.c: 252: return;
  2825  000082  D038               	goto	i2l140
  2826  000084                     i2l137:
  2827                           
  2828                           ;main.c: 253: }
  2829                           ;main.c: 257: if (CCP3IE && CCP3IF)
  2830  000084  B07A               	btfsc	3962,0,c	;volatile
  2831  000086  A07B               	btfss	3963,0,c	;volatile
  2832  000088  D01F               	goto	i2l141
  2833                           
  2834                           ;main.c: 258: {
  2835                           ;main.c: 260: if(LATDbits.LATD0 == 1)
  2836  00008A  A08C               	btfss	3980,0,c	;volatile
  2837  00008C  D012               	goto	i2l142
  2838                           
  2839                           ;main.c: 261: {
  2840                           ;main.c: 262: LATDbits.LATD0 = 0;
  2841  00008E  908C               	bcf	3980,0,c	;volatile
  2842                           
  2843                           ;main.c: 263: CCPR3 = 8000 - CCPR3;
  2844  000090  CF5E F001          	movff	3934,??_ISR	;volatile
  2845  000094  CF5F F002          	movff	3935,??_ISR+1	;volatile
  2846  000098  1E01               	comf	??_ISR,f,c
  2847  00009A  1E02               	comf	??_ISR+1,f,c
  2848  00009C  4A01               	infsnz	??_ISR,f,c
  2849  00009E  2A02               	incf	??_ISR+1,f,c
  2850  0000A0  0E40               	movlw	64
  2851  0000A2  2401               	addwf	??_ISR,w,c
  2852  0000A4  010F               	movlb	15	; () banked
  2853  0000A6  6F5E               	movwf	94,b	;volatile
  2854  0000A8  0E1F               	movlw	31
  2855  0000AA  2002               	addwfc	??_ISR+1,w,c
  2856  0000AC  010F               	movlb	15	; () banked
  2857  0000AE  6F5F               	movwf	95,b	;volatile
  2858                           
  2859                           ;main.c: 264: }
  2860  0000B0  D005               	goto	i2l143
  2861  0000B2                     i2l142:
  2862                           
  2863                           ;main.c: 265: else
  2864                           ;main.c: 266: {
  2865                           ;main.c: 267: LATDbits.LATD0 = 1;
  2866  0000B2  808C               	bsf	3980,0,c	;volatile
  2867                           
  2868                           ;main.c: 268: CCPR3 = rightWheelCommandedPW;
  2869  0000B4  C04C  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  2870  0000B8  C04D  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  2871  0000BC                     i2l143:
  2872                           
  2873                           ;main.c: 269: }
  2874                           ;main.c: 270: CCP3IF = 0;
  2875  0000BC  907B               	bcf	3963,0,c	;volatile
  2876                           
  2877                           ;main.c: 271: TMR1 = 0;
  2878  0000BE  0E00               	movlw	0
  2879  0000C0  6ECF               	movwf	4047,c	;volatile
  2880  0000C2  0E00               	movlw	0
  2881  0000C4  6ECE               	movwf	4046,c	;volatile
  2882                           
  2883                           ;main.c: 273: return;
  2884  0000C6  D016               	goto	i2l140
  2885  0000C8                     i2l141:
  2886                           
  2887                           ;main.c: 276: }
  2888                           ;main.c: 286: if(C2IF && C2IE)
  2889  0000C8  BAA1               	btfsc	4001,5,c	;volatile
  2890  0000CA  AAA0               	btfss	4000,5,c	;volatile
  2891  0000CC  D009               	goto	i2l1310
  2892                           
  2893                           ;main.c: 287: {
  2894                           ;main.c: 288: rightWheelCount++;
  2895  0000CE  0E01               	movlw	1
  2896  0000D0  263F               	addwf	_rightWheelCount,f,c
  2897  0000D2  0E00               	movlw	0
  2898  0000D4  2240               	addwfc	_rightWheelCount+1,f,c
  2899  0000D6  2241               	addwfc	_rightWheelCount+2,f,c
  2900  0000D8  2242               	addwfc	_rightWheelCount+3,f,c
  2901                           
  2902                           ;main.c: 289: char dummy = CM2CON0;
  2903  0000DA  CF78 F011          	movff	3960,ISR@dummy	;volatile
  2904                           
  2905                           ;main.c: 290: C2IF = 0;
  2906  0000DE  9AA1               	bcf	4001,5,c	;volatile
  2907  0000E0                     i2l1310:
  2908                           
  2909                           ;main.c: 291: }
  2910                           ;main.c: 296: if (TMR2IE && TMR2IF)
  2911  0000E0  B29D               	btfsc	3997,1,c	;volatile
  2912  0000E2  A29E               	btfss	3998,1,c	;volatile
  2913  0000E4  D007               	goto	i2l140
  2914                           
  2915                           ;main.c: 297: {
  2916                           ;main.c: 298: elapsedMillis++;
  2917  0000E6  0E01               	movlw	1
  2918  0000E8  2637               	addwf	_elapsedMillis,f,c
  2919  0000EA  0E00               	movlw	0
  2920  0000EC  2238               	addwfc	_elapsedMillis+1,f,c
  2921  0000EE  2239               	addwfc	_elapsedMillis+2,f,c
  2922  0000F0  223A               	addwfc	_elapsedMillis+3,f,c
  2923                           
  2924                           ;main.c: 299: PIR1bits.TMR2IF = 0;
  2925  0000F2  929E               	bcf	3998,1,c	;volatile
  2926  0000F4                     i2l140:
  2927  0000F4  C010  FFF5         	movff	??_ISR+15,tablat
  2928  0000F8  C00F  FFF8         	movff	??_ISR+14,tblptru
  2929  0000FC  C00E  FFF7         	movff	??_ISR+13,tblptrh
  2930  000100  C00D  FFF6         	movff	??_ISR+12,tblptrl
  2931  000104  C00C  FFF4         	movff	??_ISR+11,prodh
  2932  000108  C00B  FFF3         	movff	??_ISR+10,prodl
  2933  00010C  C00A  FFDA         	movff	??_ISR+9,fsr2h
  2934  000110  C009  FFD9         	movff	??_ISR+8,fsr2l
  2935  000114  C008  FFE2         	movff	??_ISR+7,fsr1h
  2936  000118  C007  FFE1         	movff	??_ISR+6,fsr1l
  2937  00011C  C006  FFEA         	movff	??_ISR+5,fsr0h
  2938  000120  C005  FFE9         	movff	??_ISR+4,fsr0l
  2939  000124  C004  FFFB         	movff	??_ISR+3,pclatu
  2940  000128  C003  FFFA         	movff	??_ISR+2,pclath
  2941  00012C  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2942  00012E  0011               	retfie		f
  2943  000130                     __end_of_ISR:
  2944                           	opt stack 0
  2945                           pclatu	equ	0xFFB
  2946                           pclath	equ	0xFFA
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           postinc0	equ	0xFEE
  2955                           fsr0h	equ	0xFEA
  2956                           fsr0l	equ	0xFE9
  2957                           wreg	equ	0xFE8
  2958                           postdec1	equ	0xFE5
  2959                           fsr1h	equ	0xFE2
  2960                           fsr1l	equ	0xFE1
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           pclatu	equ	0xFFB
  2967                           pclath	equ	0xFFA
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           intcon	equ	0xFF2
  2975                           postinc0	equ	0xFEE
  2976                           fsr0h	equ	0xFEA
  2977                           fsr0l	equ	0xFE9
  2978                           wreg	equ	0xFE8
  2979                           postdec1	equ	0xFE5
  2980                           fsr1h	equ	0xFE2
  2981                           fsr1l	equ	0xFE1
  2982                           postinc2	equ	0xFDE
  2983                           postdec2	equ	0xFDD
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988                           	psect	rparam
  2989  0000                     pclatu	equ	0xFFB
  2990                           pclath	equ	0xFFA
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           prodh	equ	0xFF4
  2996                           prodl	equ	0xFF3
  2997                           intcon	equ	0xFF2
  2998                           postinc0	equ	0xFEE
  2999                           fsr0h	equ	0xFEA
  3000                           fsr0l	equ	0xFE9
  3001                           wreg	equ	0xFE8
  3002                           postdec1	equ	0xFE5
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           postinc2	equ	0xFDE
  3006                           postdec2	equ	0xFDD
  3007                           fsr2h	equ	0xFDA
  3008                           fsr2l	equ	0xFD9
  3009                           status	equ	0xFD8
  3010                           
  3011                           	psect	temp
  3012  00004E                     btemp:
  3013                           	opt stack 0
  3014  00004E                     	ds	1
  3015  0000                     int$flags	set	btemp
  3016                           pclatu	equ	0xFFB
  3017                           pclath	equ	0xFFA
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           prodh	equ	0xFF4
  3023                           prodl	equ	0xFF3
  3024                           intcon	equ	0xFF2
  3025                           postinc0	equ	0xFEE
  3026                           fsr0h	equ	0xFEA
  3027                           fsr0l	equ	0xFE9
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           postinc2	equ	0xFDE
  3033                           postdec2	equ	0xFDD
  3034                           fsr2h	equ	0xFDA
  3035                           fsr2l	equ	0xFD9
  3036                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    10
    Data        4
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      77
    BANK0           160     16      16
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[10]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    ___lldiv->___lmul
    _LCDinit->_LCDcmd
    _LCDclear->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    3781
                                             46 COMRAM     8     8      0
                                              0 BANK0     16    16      0
                           _LCDclear
                            _LCDinit
                            ___lldiv
                             ___lmul
               _configureComparators
                    _configureTimers
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    2414
                                             29 COMRAM    17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             19 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             18 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _configureTimers                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureComparators                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     558
                                             17 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             13     5      8     549
                                             29 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             18 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDclear                                             0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___lldiv
     ___lmul (ARG)
   ___lmul
   _configureComparators
   _configureTimers
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      10       5       10.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      4D       1       81.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D      12        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Apr 22 13:11:06 2016

          ___wmul@multiplicand 0014                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_LVP$ON 000000  
                          l215 183A                            l707 1774                            l644 1682  
                          l697 1732                   __CFG_CPB$OFF 000000                            _PR2 000FBB  
                 __CFG_CPD$OFF 000000                            _ISR 0008                    ?_LCDcheckBF 0001  
                          wreg 000FE8                           ?_ISR 0001                           _C2IE 007D05  
                         _C2IF 007D0D                           l1706 1728                           l1722 176A  
                         l1714 174A                           l1716 1752                           l1900 1424  
                         l1718 1756                           l1910 1484                           l1904 1436  
                         l1840 12C0                           l1912 148C                           l1906 143C  
                         l1836 12B0                           l1950 1640                           l1934 16A4  
                         l1694 1700                           l1678 182C                           l1870 1396  
                         l1846 12E8                           l1960 1674                           l1952 1644  
                         l1696 1708                           l1856 1344                           l1938 16B8  
                         l1698 170C                           l1882 13C2                           l1858 136A  
                         l1948 1634                           l1892 1400                           l1868 1392  
                         l1894 1408                           l1896 1410                           l1888 13DC  
              __end_of_LCDinit 156C                           l1986 10F4                           l1978 1098  
                         STR_1 100B                           STR_2 1016                           _LATA 000F89  
                         u1407 1540                           u1417 1556                           u1347 14BC  
                         u1357 14D2                           u1367 14E8                           u1377 14FE  
                         u1387 1514                           u1397 152A                           _TMR1 000FCE  
                         _TMR5 000F4F               ?_configureTimers 0001                           _main 1022  
                         fsr0h 000FEA                           fsr1h 000FE2                           fsr0l 000FE9  
                         fsr2h 000FDA                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 004E                  __CFG_BORV$190 000000                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 0130  
                __CFG_IESO$OFF 000000                   ___param_bank 000010                          ??_ISR 0001  
             __end_of_LCDclear 186A                          ?_main 0001                          _CCPR2 000F67  
                        _CCPR3 000F5E                __end_of___lldiv 1694                          _T1CON 000FCD  
                        _T2CON 000FBA                          _T5CON 000F4E                __end_of___lwdiv 173C  
              __end_of___lwmod 177E                          i2l140 00F4                          i2l141 00C8  
                        i2l142 00B2                          i2l143 00BC                          i2l137 0084  
                        i2l138 006C               __end_of_LCDwrite 185A                          _TRISA 000F92  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
          ___lmul@multiplicand 0016                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                __end_of_dpowers 100B  
                        _event 0045                __end_of_isdigit 1834             __CFG_MCLRE$EXTMCLR 000000  
                        _putch 1876                          tablat 000FF5                          status 000FD8  
               __CFG_HFOFST$ON 000000            __size_of_LCDcheckBF 0014                __initialization 177E  
                 __end_of_main 12A6                         ??_main 002F                  __activetblptr 000002  
                    ??_LCDinit 0013            main@speedLastMillis 006C   __end_of_configureComparators 17F0  
                       _CCP2IE 007D00                         _CCP2IF 007D08                         _CCP3IE 007BD0  
                       _CCP3IF 007BD8                         ?_putch 0001                         _ANSELD 000F3B  
                       i2l1310 00E0                         i2l1284 0076                 __CFG_WDTEN$OFF 000000  
                       _LCDcmd 186A                         _TMR2IE 007CE9                         _TMR2IF 007CF1  
                       _TMR1ON 007E68                         _TMR5ON 007A70                 __CFG_PWRTEN$ON 000000  
               __CFG_XINST$OFF 000000                   _CCPTMRS0bits 000F49                         ___lmul 1694  
                       ___wmul 17F0                 __CFG_STVREN$ON 000000                      ??___lldiv 0026  
                    ??___lwdiv 0016                      ??___lwmod 001D                 _leftWheelCount 003B  
                       clear_0 1784                         _printf 12A6                   __pdataCOMRAM 004A  
                    ??_isdigit 0012                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8          main@controlLastMillis 0060  
                   __accesstop 0060        __end_of__initialization 17AA                __CFG_PBADEN$OFF 000000  
                    ?_LCDclear 0001                  ___rparam_used 000001                      ?_LCDwrite 0001  
               __pcstackCOMRAM 0001                  __end_of_putch 1880                   ??_LCDcheckBF 0012  
                      ??_putch 0014                        ?_LCDcmd 0001          _rightWheelCommandedPW 004C  
              __CFG_PLLCFG$OFF 000000                     ??_LCDclear 0013                     ??_LCDwrite 0013  
           __end_of_LCDcheckBF 1848             __CFG_CCP2MX$PORTB3 000000                        ?___lmul 0012  
                      ?___wmul 0012             __CFG_CCP3MX$PORTB5 000000           main@leftCountTracker 0068  
         _configureComparators 17B8                        _CM2CON0 000F78                        _CCP2CON 000F66  
                      _CCP3CON 000F5D                 ___lmul@product 001A                        ?_printf 001E  
                      _LCDinit 14A6                __size_of_LCDcmd 000C                        __Hparam 0000  
                      __Lparam 0000       __size_of_configureTimers 00A6                __size_of___lmul 0056  
        ?_configureComparators 0001                        ___lldiv 1612                __size_of___wmul 0026  
                      ___lwdiv 16EA                        ___lwmod 173C                   __psmallconst 1000  
                      __pcinit 177E                        __ramtop 1000                        __ptext0 1022  
                      __ptext1 12A6                        __ptext2 1876                        __ptext3 1848  
                      __ptext4 1816                        __ptext5 17F0                        __ptext6 173C  
                      __ptext7 16EA                        __ptext8 156C                        __ptext9 17B8  
              __size_of_printf 0200                   __size_of_ISR 0128                      _T1CONbits 000FCD  
                      _dpowers 1001                      _T2CONbits 000FBA                        _isdigit 1816  
                    _T5CONbits 000F4E           end_of_initialization 17AA                  __Lmediumconst 0000  
       _leftWheelMeasuredSpeed 0046                ___lldiv@divisor 0022                ___lldiv@counter 002A  
                      printf@c 002E                        printf@f 001E              main@lcdLastMillis 0064  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                      _PORTAbits 000F80                      _PORTBbits 000F81  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISDbits 000F95  
                    _TRISEbits 000F96                  LCDcmd@command 0012                    _CM2CON0bits 000F78  
                  _CM2CON1bits 000F77                 __end_of_LCDcmd 1876                    printf@width 002C  
                  _CCP2CONbits 000F66                    _CCP3CONbits 000F5D              __size_of_LCDclear 0010  
       ??_configureComparators 0012              __size_of_LCDwrite 0012        _rightWheelMeasuredSpeed 0048  
         _leftWheelCommandedPW 004A                 __end_of___lmul 16EA                 __end_of___wmul 1816  
                __pidataCOMRAM 1880              ??_configureTimers 0012                 __end_of_printf 14A6  
          start_initialization 177E                    __end_of_ISR 0130                       ??_LCDcmd 0012  
                     ??___lmul 001A                       ??___wmul 0016                _rightWheelCount 003F  
                     ??_printf 0022                    __pbssCOMRAM 0037                       ?_LCDinit 0001  
                __pcstackBANK0 0060                   _isdigit$1662 0013                       ISR@dummy 0011  
             ___lwdiv@dividend 0012                      __pintcode 0008                       ?___lldiv 001E  
                     ?___lwdiv 0012                       ?___lwmod 0019               __CFG_PRICLKEN$ON 000000  
                  __smallconst 1000                       ?_isdigit 0001               ___lwdiv@quotient 0017  
               __size_of_putch 000A                 ___wmul@product 0016                       _LATDbits 000F8C  
                     _LATEbits 000F8D                       _LCDclear 185A                       _PIE1bits 000F9D  
                     _PIE2bits 000FA0                       _LCDwrite 1848                       _PIR1bits 000F9E  
                     _PIR2bits 000FA1               __CFG_WDTPS$32768 000000              ___wmul@multiplier 0012  
                   printf@flag 0029                     printf@prec 0028                       _WPUBbits 000F61  
             __size_of_LCDinit 00C6              ___lmul@multiplier 0012                      copy_data0 179E  
                     __Hrparam 0000                _configureTimers 156C                       __Lrparam 0000  
           __CFG_BOREN$SBORDIS 000000          main@rightCountTracker 006A              __CFG_P2BMX$PORTD2 000000  
             __size_of___lldiv 0082               __size_of___lwdiv 0052               __size_of___lwmod 0042  
                   _ANSELBbits 000F39               __size_of_isdigit 001E                ___lwdiv@divisor 0014  
              ___lwdiv@counter 0016                       __ptext10 1694                       __ptext11 1612  
                     __ptext12 14A6                       __ptext13 185A                       __ptext14 186A  
                     __ptext15 1834                  _elapsedMillis 0037                  __size_of_main 0284  
                     int$flags 004E  __size_of_configureComparators 0038                      printf@val 002A  
            _speedCompensation 0043                     _LCDcheckBF 1834                      putch@data 0014  
                   _INTCONbits 000FF2                       isdigit@c 0014                       intlevel2 0000  
      __end_of_configureTimers 1612               ___lwmod@dividend 0019                   _VREFCON0bits 000F42  
             ___lldiv@dividend 001E                     _OSCCONbits 000FD3                       printf@ap 0026  
             ___lldiv@quotient 0026                ___lwmod@divisor 001B                ___lwmod@counter 001D  
            __CFG_T3CMX$PORTB5 000000              __CFG_FOSC$INTIO67 000000                  LCDwrite@input 0013  

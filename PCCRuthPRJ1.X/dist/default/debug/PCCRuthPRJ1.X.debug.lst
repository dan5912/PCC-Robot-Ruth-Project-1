

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Apr 22 19:22:31 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataCOMRAM
    43  00251C                     __pidataCOMRAM:
    44                           	opt stack 0
    45                           
    46                           ;initializer for _leftWheelCommandedPW
    47  00251C  02DF               	dw	735
    48                           
    49                           ;initializer for _rightWheelCommandedPW
    50  00251E  02D0               	dw	720
    51                           
    52                           ;initializer for excerciseControl@leftWheelCommandedSpeed
    53  002520  001E               	dw	30
    54                           
    55                           ;initializer for excerciseControl@rightWheelCommandedSpeed
    56  002522  001E               	dw	30
    57                           
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt stack 0
    61  001000  00                 	db	0
    62  001001                     _dpowers:
    63                           	opt stack 0
    64  001001  0001               	dw	1
    65  001003  000A               	dw	10
    66  001005  0064               	dw	100
    67  001007  03E8               	dw	1000
    68  001009  2710               	dw	10000
    69  00100B                     __end_of_dpowers:
    70                           	opt stack 0
    71  0000                     _CCPR3	set	3934
    72  0000                     _TMR5	set	3919
    73  0000                     _ANSELBbits	set	3897
    74  0000                     _ANSELD	set	3899
    75  0000                     _CCP3CON	set	3933
    76  0000                     _CCP3CONbits	set	3933
    77  0000                     _CCPTMRS0bits	set	3913
    78  0000                     _T5CON	set	3918
    79  0000                     _T5CONbits	set	3918
    80  0000                     _VREFCON0bits	set	3906
    81  0000                     _TMR5ON	set	31344
    82  0000                     _CCPR2	set	3943
    83  0000                     _TMR1	set	4046
    84  0000                     _CCP2CON	set	3942
    85  0000                     _CCP2CONbits	set	3942
    86  0000                     _CM1CON0	set	3961
    87  0000                     _CM1CON0bits	set	3961
    88  0000                     _CM2CON0	set	3960
    89  0000                     _CM2CON0bits	set	3960
    90  0000                     _CM2CON1bits	set	3959
    91  0000                     _INTCONbits	set	4082
    92  0000                     _LATA	set	3977
    93  0000                     _LATDbits	set	3980
    94  0000                     _LATEbits	set	3981
    95  0000                     _OSCCONbits	set	4051
    96  0000                     _PIE1bits	set	3997
    97  0000                     _PIE2bits	set	4000
    98  0000                     _PIR1bits	set	3998
    99  0000                     _PIR2bits	set	4001
   100  0000                     _PORTAbits	set	3968
   101  0000                     _PORTBbits	set	3969
   102  0000                     _PR2	set	4027
   103  0000                     _T1CON	set	4045
   104  0000                     _T1CONbits	set	4045
   105  0000                     _T2CON	set	4026
   106  0000                     _T2CONbits	set	4026
   107  0000                     _TRISA	set	3986
   108  0000                     _TRISAbits	set	3986
   109  0000                     _TRISBbits	set	3987
   110  0000                     _TRISDbits	set	3989
   111  0000                     _TRISEbits	set	3990
   112  0000                     _C1IE	set	32006
   113  0000                     _C1IF	set	32014
   114  0000                     _C2IE	set	32005
   115  0000                     _C2IF	set	32013
   116  0000                     _CCP2IE	set	32000
   117  0000                     _CCP2IF	set	32008
   118  0000                     _CCP3IE	set	31696
   119  0000                     _CCP3IF	set	31704
   120  0000                     _TMR1ON	set	32360
   121  0000                     _TMR2IE	set	31977
   122  0000                     _TMR2IF	set	31985
   123  00100B                     STR_1:
   124  00100B  45                 	db	69	;'E'
   125  00100C  76                 	db	118	;'v'
   126  00100D  65                 	db	101	;'e'
   127  00100E  6E                 	db	110	;'n'
   128  00100F  74                 	db	116	;'t'
   129  001010  3A                 	db	58	;':'
   130  001011  20                 	db	32
   131  001012  25                 	db	37
   132  001013  33                 	db	51	;'3'
   133  001014  64                 	db	100	;'d'
   134  001015  00                 	db	0
   135  001016                     STR_2:
   136  001016  53                 	db	83	;'S'
   137  001017  70                 	db	112	;'p'
   138  001018  65                 	db	101	;'e'
   139  001019  65                 	db	101	;'e'
   140  00101A  64                 	db	100	;'d'
   141  00101B  3A                 	db	58	;':'
   142  00101C  20                 	db	32
   143  00101D  25                 	db	37
   144  00101E  64                 	db	100	;'d'
   145  00101F  00                 	db	0
   146  001020                     STR_3:
   147  001020  4C                 	db	76	;'L'
   148  001021  57                 	db	87	;'W'
   149  001022  3A                 	db	58	;':'
   150  001023  20                 	db	32
   151  001024  25                 	db	37
   152  001025  64                 	db	100	;'d'
   153  001026  20                 	db	32
   154  001027  00                 	db	0
   155  001028                     STR_4:
   156  001028  20                 	db	32
   157  001029  52                 	db	82	;'R'
   158  00102A  57                 	db	87	;'W'
   159  00102B  3A                 	db	58	;':'
   160  00102C  20                 	db	32
   161  00102D  25                 	db	37
   162  00102E  64                 	db	100	;'d'
   163  00102F  00                 	db	0
   164                           
   165                           ; #config settings
   166  001030  00                 	db	0	; dummy byte at the end
   167  0000                     
   168                           	psect	cinit
   169  00243E                     __pcinit:
   170                           	opt stack 0
   171  00243E                     start_initialization:
   172                           	opt stack 0
   173  00243E                     __initialization:
   174                           	opt stack 0
   175                           
   176                           ; Clear objects allocated to BANK0 (17 bytes)
   177  00243E  EE00  F087         	lfsr	0,__pbssBANK0
   178  002442  0E11               	movlw	17
   179  002444                     clear_0:
   180  002444  6AEE               	clrf	postinc0,c
   181  002446  06E8               	decf	wreg,f,c
   182  002448  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to COMRAM (2 bytes)
   185  00244A  6A4B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   186  00244C  6A4A               	clrf	__pbssCOMRAM& (0+255),c
   187                           
   188                           ; Initialize objects allocated to COMRAM (8 bytes)
   189                           ; load TBLPTR registers with __pidataCOMRAM
   190  00244E  0E1C               	movlw	low __pidataCOMRAM
   191  002450  6EF6               	movwf	tblptrl,c
   192  002452  0E25               	movlw	high __pidataCOMRAM
   193  002454  6EF7               	movwf	tblptrh,c
   194  002456  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   195  002458  6EF8               	movwf	tblptru,c
   196  00245A  EE00  F042         	lfsr	0,__pdataCOMRAM
   197  00245E  EE10 F008          	lfsr	1,8
   198  002462                     copy_data0:
   199  002462  0009               	tblrd		*+
   200  002464  CFF5 FFEE          	movff	tablat,postinc0
   201  002468  50E5               	movf	postdec1,w,c
   202  00246A  50E1               	movf	fsr1l,w,c
   203  00246C  E1FA               	bnz	copy_data0
   204  00246E                     end_of_initialization:
   205                           	opt stack 0
   206  00246E                     __end_of__initialization:
   207                           	opt stack 0
   208  00246E  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   209  002470  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   210  002472  0E00               	movlw	low (__Lmediumconst shr (0+16))
   211  002474  6EF8               	movwf	tblptru,c
   212  002476  0100               	movlb	0
   213  002478  EF1B  F00B         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	bssCOMRAM
   224  00004A                     __pbssCOMRAM:
   225                           	opt stack 0
   226  00004A                     _speedCompensation:
   227                           	opt stack 0
   228  00004A                     	ds	2
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	dataCOMRAM
   239  000042                     __pdataCOMRAM:
   240                           	opt stack 0
   241  000042                     _leftWheelCommandedPW:
   242                           	opt stack 0
   243  000042                     	ds	2
   244  000044                     _rightWheelCommandedPW:
   245                           	opt stack 0
   246  000044                     	ds	2
   247  000046                     excerciseControl@leftWheelCommandedSpeed:
   248                           	opt stack 0
   249  000046                     	ds	2
   250  000048                     excerciseControl@rightWheelCommandedSpeed:
   251                           	opt stack 0
   252  000048                     	ds	2
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           postdec1	equ	0xFE5
   260                           fsr1l	equ	0xFE1
   261                           
   262                           	psect	bssBANK0
   263  000087                     __pbssBANK0:
   264                           	opt stack 0
   265  000087                     _elapsedMillis:
   266                           	opt stack 0
   267  000087                     	ds	4
   268  00008B                     _leftWheelCount:
   269                           	opt stack 0
   270  00008B                     	ds	4
   271  00008F                     _rightWheelCount:
   272                           	opt stack 0
   273  00008F                     	ds	4
   274  000093                     _leftWheelMeasuredSpeed:
   275                           	opt stack 0
   276  000093                     	ds	2
   277  000095                     _rightWheelMeasuredSpeed:
   278                           	opt stack 0
   279  000095                     	ds	2
   280  000097                     _event:
   281                           	opt stack 0
   282  000097                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           postdec1	equ	0xFE5
   290                           fsr1l	equ	0xFE1
   291                           
   292                           	psect	cstackBANK0
   293  000060                     __pcstackBANK0:
   294                           	opt stack 0
   295  000060                     ?___fttol:
   296                           	opt stack 0
   297  000060                     ___fttol@f1:
   298                           	opt stack 0
   299                           
   300                           ; 3 bytes @ 0x0
   301  000060                     	ds	4
   302  000064                     ??___fttol:
   303                           
   304                           ; 1 bytes @ 0x4
   305  000064                     	ds	5
   306  000069                     ___fttol@sign1:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0x9
   310  000069                     	ds	1
   311  00006A                     ___fttol@lval:
   312                           	opt stack 0
   313                           
   314                           ; 4 bytes @ 0xA
   315  00006A                     	ds	4
   316  00006E                     ___fttol@exp1:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0xE
   320  00006E                     	ds	1
   321  00006F                     ??_main:
   322                           
   323                           ; 1 bytes @ 0xF
   324  00006F                     	ds	8
   325  000077                     main@controlLastMillis:
   326                           	opt stack 0
   327                           
   328                           ; 4 bytes @ 0x17
   329  000077                     	ds	4
   330  00007B                     main@lcdLastMillis:
   331                           	opt stack 0
   332                           
   333                           ; 4 bytes @ 0x1B
   334  00007B                     	ds	4
   335  00007F                     main@leftCountTracker:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x1F
   339  00007F                     	ds	2
   340  000081                     main@rightCountTracker:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x21
   344  000081                     	ds	2
   345  000083                     main@speedLastMillis:
   346                           	opt stack 0
   347                           
   348                           ; 4 bytes @ 0x23
   349  000083                     	ds	4
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	cstackCOMRAM
   360  000001                     __pcstackCOMRAM:
   361                           	opt stack 0
   362  000001                     ??_ISR:
   363  000001                     
   364                           ; 1 bytes @ 0x0
   365  000001                     	ds	16
   366  000011                     ISR@dummy:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x10
   370  000011                     	ds	1
   371  000012                     ISR@dummy_1123:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x11
   375  000012                     	ds	1
   376  000013                     ??_isdigit:
   377  000013                     ?___wmul:
   378                           	opt stack 0
   379  000013                     ?___lwdiv:
   380                           	opt stack 0
   381  000013                     ?___ftpack:
   382                           	opt stack 0
   383  000013                     LCDcmd@command:
   384                           	opt stack 0
   385  000013                     limitWheelSpeeds@leftWheelSpeed:
   386                           	opt stack 0
   387  000013                     wheelVelocity@speed:
   388                           	opt stack 0
   389  000013                     ___wmul@multiplier:
   390                           	opt stack 0
   391  000013                     ___lwdiv@dividend:
   392                           	opt stack 0
   393  000013                     ___ftpack@arg:
   394                           	opt stack 0
   395                           
   396                           ; 3 bytes @ 0x12
   397  000013                     	ds	1
   398  000014                     ??_LCDinit:
   399  000014                     LCDwrite@input:
   400                           	opt stack 0
   401  000014                     _isdigit$1790:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x13
   405  000014                     	ds	1
   406  000015                     putch@data:
   407                           	opt stack 0
   408  000015                     isdigit@c:
   409                           	opt stack 0
   410  000015                     limitWheelSpeeds@rightWheelSpeed:
   411                           	opt stack 0
   412  000015                     wheelVelocity@speedCompensation:
   413                           	opt stack 0
   414  000015                     ___wmul@multiplicand:
   415                           	opt stack 0
   416  000015                     ___lwdiv@divisor:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x14
   420  000015                     	ds	1
   421  000016                     ___ftpack@exp:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x15
   425  000016                     	ds	1
   426  000017                     ??_wheelVelocity:
   427  000017                     ___ftpack@sign:
   428                           	opt stack 0
   429  000017                     limitWheelSpeeds@speedCompensation:
   430                           	opt stack 0
   431  000017                     ___wmul@product:
   432                           	opt stack 0
   433  000017                     ___lwdiv@quotient:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x16
   437  000017                     	ds	1
   438  000018                     ??___ftpack:
   439                           
   440                           ; 1 bytes @ 0x17
   441  000018                     	ds	1
   442  000019                     wheelVelocity@wheel:
   443                           	opt stack 0
   444  000019                     ___lwdiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x18
   448  000019                     	ds	1
   449  00001A                     ?___lwmod:
   450                           	opt stack 0
   451  00001A                     ___lwmod@dividend:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x19
   455  00001A                     	ds	1
   456  00001B                     ?___lltoft:
   457                           	opt stack 0
   458  00001B                     ___lltoft@c:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0x1A
   462  00001B                     	ds	1
   463  00001C                     ___lwmod@divisor:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x1B
   467  00001C                     	ds	2
   468  00001E                     ___lwmod@counter:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x1D
   472  00001E                     	ds	1
   473  00001F                     ??___lltoft:
   474  00001F                     ?_printf:
   475                           	opt stack 0
   476  00001F                     printf@f:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x1E
   480  00001F                     	ds	4
   481  000023                     ___lltoft@exp:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x22
   485  000023                     	ds	1
   486  000024                     ?___ftmul:
   487                           	opt stack 0
   488  000024                     ___ftmul@f1:
   489                           	opt stack 0
   490                           
   491                           ; 3 bytes @ 0x23
   492  000024                     	ds	1
   493  000025                     ??_printf:
   494                           
   495                           ; 1 bytes @ 0x24
   496  000025                     	ds	2
   497  000027                     ___ftmul@f2:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x26
   501  000027                     	ds	2
   502  000029                     printf@ap:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x28
   506  000029                     	ds	1
   507  00002A                     ??___ftmul:
   508                           
   509                           ; 1 bytes @ 0x29
   510  00002A                     	ds	1
   511  00002B                     printf@prec:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x2A
   515  00002B                     	ds	1
   516  00002C                     printf@flag:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x2B
   520  00002C                     	ds	1
   521  00002D                     ___ftmul@exp:
   522                           	opt stack 0
   523  00002D                     printf@val:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x2C
   527  00002D                     	ds	1
   528  00002E                     ___ftmul@f3_as_product:
   529                           	opt stack 0
   530                           
   531                           ; 3 bytes @ 0x2D
   532  00002E                     	ds	1
   533  00002F                     printf@width:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x2E
   537  00002F                     	ds	2
   538  000031                     printf@c:
   539                           	opt stack 0
   540  000031                     ___ftmul@cntr:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x30
   544  000031                     	ds	1
   545  000032                     ___ftmul@sign:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x31
   549  000032                     	ds	1
   550  000033                     ?___ftdiv:
   551                           	opt stack 0
   552  000033                     ___ftdiv@f1:
   553                           	opt stack 0
   554  000033                     ___ftge@ff1:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x32
   558  000033                     	ds	3
   559  000036                     ___ftdiv@f2:
   560                           	opt stack 0
   561  000036                     ___ftge@ff2:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x35
   565  000036                     	ds	3
   566  000039                     ??___ftdiv:
   567  000039                     ??___ftge:
   568                           
   569                           ; 1 bytes @ 0x38
   570  000039                     	ds	3
   571  00003C                     ??_excerciseControl:
   572  00003C                     ___ftdiv@cntr:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x3B
   576  00003C                     	ds	1
   577  00003D                     ___ftdiv@f3:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x3C
   581  00003D                     	ds	3
   582  000040                     ___ftdiv@exp:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x3F
   586  000040                     	ds	1
   587  000041                     ___ftdiv@sign:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x40
   591  000041                     	ds	1
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           postdec1	equ	0xFE5
   599                           fsr1l	equ	0xFE1
   600                           
   601 ;;
   602 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   603 ;;
   604 ;; *************** function _main *****************
   605 ;; Defined at:
   606 ;;		line 133 in file "main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  speedLastMil    4   35[BANK0 ] unsigned long 
   611 ;;  lcdLastMilli    4   27[BANK0 ] unsigned long 
   612 ;;  controlLastM    4   23[BANK0 ] unsigned long 
   613 ;;  rightCountTr    2   33[BANK0 ] int 
   614 ;;  leftCountTra    2   31[BANK0 ] int 
   615 ;; Return value:  Size  Location     Type
   616 ;;                  1    wreg      void 
   617 ;; Registers used:
   618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   625 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   626 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;Total ram usage:       24 bytes
   629 ;; Hardware stack levels required when called:    5
   630 ;; This function calls:
   631 ;;		_LCDclear
   632 ;;		_LCDgotoLineTwo
   633 ;;		_LCDinit
   634 ;;		___ftdiv
   635 ;;		___ftmul
   636 ;;		___fttol
   637 ;;		___lltoft
   638 ;;		_configureComparators
   639 ;;		_configureTimers
   640 ;;		_excerciseControl
   641 ;;		_printf
   642 ;; This function is called by:
   643 ;;		Startup code after reset
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           	psect	text0
   648  001636                     __ptext0:
   649                           	opt stack 0
   650  001636                     _main:
   651                           	opt stack 26
   652                           
   653                           ;main.c: 135: OSCCONbits.IRCF = 0b110;
   654                           
   655                           ;incstack = 0
   656  001636  50D3               	movf	4051,w,c	;volatile
   657  001638  0B8F               	andlw	-113
   658  00163A  0960               	iorlw	96
   659  00163C  6ED3               	movwf	4051,c	;volatile
   660                           
   661                           ;main.c: 138: configureComparators();
   662  00163E  EC89  F011         	call	_configureComparators	;wreg free
   663                           
   664                           ;main.c: 139: configureTimers();
   665  001642  ECBF  F010         	call	_configureTimers	;wreg free
   666                           
   667                           ;main.c: 141: TRISBbits.TRISB4 = 1;
   668  001646  8893               	bsf	3987,4,c	;volatile
   669                           
   670                           ;main.c: 142: ANSELBbits.ANSB4 = 0;
   671  001648  010F               	movlb	15	; () banked
   672  00164A  9939               	bcf	57,4,b	;volatile
   673                           
   674                           ;main.c: 146: unsigned long controlLastMillis = 0;
   675  00164C  0E00               	movlw	0
   676  00164E  0100               	movlb	0	; () banked
   677  001650  6F77               	movwf	main@controlLastMillis& (0+255),b
   678  001652  0E00               	movlw	0
   679  001654  6F78               	movwf	(main@controlLastMillis+1)& (0+255),b
   680  001656  0E00               	movlw	0
   681  001658  6F79               	movwf	(main@controlLastMillis+2)& (0+255),b
   682  00165A  0E00               	movlw	0
   683  00165C  6F7A               	movwf	(main@controlLastMillis+3)& (0+255),b
   684                           
   685                           ;main.c: 147: unsigned long lcdLastMillis = 0;
   686  00165E  0E00               	movlw	0
   687  001660  0100               	movlb	0	; () banked
   688  001662  6F7B               	movwf	main@lcdLastMillis& (0+255),b
   689  001664  0E00               	movlw	0
   690  001666  6F7C               	movwf	(main@lcdLastMillis+1)& (0+255),b
   691  001668  0E00               	movlw	0
   692  00166A  6F7D               	movwf	(main@lcdLastMillis+2)& (0+255),b
   693  00166C  0E00               	movlw	0
   694  00166E  6F7E               	movwf	(main@lcdLastMillis+3)& (0+255),b
   695                           
   696                           ;main.c: 148: unsigned long speedLastMillis = 0;
   697  001670  0E00               	movlw	0
   698  001672  0100               	movlb	0	; () banked
   699  001674  6F83               	movwf	main@speedLastMillis& (0+255),b
   700  001676  0E00               	movlw	0
   701  001678  6F84               	movwf	(main@speedLastMillis+1)& (0+255),b
   702  00167A  0E00               	movlw	0
   703  00167C  6F85               	movwf	(main@speedLastMillis+2)& (0+255),b
   704  00167E  0E00               	movlw	0
   705  001680  6F86               	movwf	(main@speedLastMillis+3)& (0+255),b
   706                           
   707                           ;main.c: 149: int leftCountTracker = 0;
   708  001682  0E00               	movlw	0
   709  001684  0100               	movlb	0	; () banked
   710  001686  6F80               	movwf	(main@leftCountTracker+1)& (0+255),b
   711  001688  0E00               	movlw	0
   712  00168A  6F7F               	movwf	main@leftCountTracker& (0+255),b
   713                           
   714                           ;main.c: 150: int rightCountTracker = 0;
   715  00168C  0E00               	movlw	0
   716  00168E  0100               	movlb	0	; () banked
   717  001690  6F82               	movwf	(main@rightCountTracker+1)& (0+255),b
   718  001692  0E00               	movlw	0
   719  001694  6F81               	movwf	main@rightCountTracker& (0+255),b
   720                           
   721                           ; BSR set to: 0
   722                           ;main.c: 153: LCDinit();
   723  001696  EC05  F010         	call	_LCDinit	;wreg free
   724                           
   725                           ;main.c: 154: printf("Event: %3d", event);
   726  00169A  0E0B               	movlw	low STR_1
   727  00169C  6E1F               	movwf	printf@f,c
   728  00169E  0E10               	movlw	high STR_1
   729  0016A0  6E20               	movwf	printf@f+1,c
   730  0016A2  C097  F021         	movff	_event,?_printf+2
   731  0016A6  6A22               	clrf	?_printf+3,c
   732  0016A8  EC09  F00D         	call	_printf	;wreg free
   733  0016AC                     l2530:
   734                           
   735                           ;main.c: 159: {
   736                           ;main.c: 164: if(lcdLastMillis + 250 < elapsedMillis)
   737  0016AC  0EFA               	movlw	250
   738  0016AE  0100               	movlb	0	; () banked
   739  0016B0  257B               	addwf	main@lcdLastMillis& (0+255),w,b
   740  0016B2  0100               	movlb	0	; () banked
   741  0016B4  6F6F               	movwf	??_main& (0+255),b
   742  0016B6  0E00               	movlw	0
   743  0016B8  0100               	movlb	0	; () banked
   744  0016BA  217C               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
   745  0016BC  0100               	movlb	0	; () banked
   746  0016BE  6F70               	movwf	(??_main+1)& (0+255),b
   747  0016C0  0E00               	movlw	0
   748  0016C2  0100               	movlb	0	; () banked
   749  0016C4  217D               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
   750  0016C6  0100               	movlb	0	; () banked
   751  0016C8  6F71               	movwf	(??_main+2)& (0+255),b
   752  0016CA  0E00               	movlw	0
   753  0016CC  0100               	movlb	0	; () banked
   754  0016CE  217E               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
   755  0016D0  0100               	movlb	0	; () banked
   756  0016D2  6F72               	movwf	(??_main+3)& (0+255),b
   757  0016D4  0100               	movlb	0	; () banked
   758  0016D6  5187               	movf	_elapsedMillis& (0+255),w,b
   759  0016D8  0100               	movlb	0	; () banked
   760  0016DA  5D6F               	subwf	??_main& (0+255),w,b
   761  0016DC  0100               	movlb	0	; () banked
   762  0016DE  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   763  0016E0  0100               	movlb	0	; () banked
   764  0016E2  5970               	subwfb	(??_main+1)& (0+255),w,b
   765  0016E4  0100               	movlb	0	; () banked
   766  0016E6  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   767  0016E8  0100               	movlb	0	; () banked
   768  0016EA  5971               	subwfb	(??_main+2)& (0+255),w,b
   769  0016EC  0100               	movlb	0	; () banked
   770  0016EE  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   771  0016F0  0100               	movlb	0	; () banked
   772  0016F2  5972               	subwfb	(??_main+3)& (0+255),w,b
   773  0016F4  B0D8               	btfsc	status,0,c
   774  0016F6  D032               	goto	l2540
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 165: {
   778                           ;main.c: 166: LCDclear();
   779  0016F8  EC7B  F012         	call	_LCDclear	;wreg free
   780                           
   781                           ;main.c: 167: printf("Speed: %d", rightWheelMeasuredSpeed);
   782  0016FC  0E16               	movlw	low STR_2
   783  0016FE  6E1F               	movwf	printf@f,c
   784  001700  0E10               	movlw	high STR_2
   785  001702  6E20               	movwf	printf@f+1,c
   786  001704  C095  F021         	movff	_rightWheelMeasuredSpeed,?_printf+2
   787  001708  C096  F022         	movff	_rightWheelMeasuredSpeed+1,?_printf+3
   788  00170C  EC09  F00D         	call	_printf	;wreg free
   789                           
   790                           ;main.c: 168: lcdLastMillis = elapsedMillis;
   791  001710  C087  F07B         	movff	_elapsedMillis,main@lcdLastMillis
   792  001714  C088  F07C         	movff	_elapsedMillis+1,main@lcdLastMillis+1
   793  001718  C089  F07D         	movff	_elapsedMillis+2,main@lcdLastMillis+2
   794  00171C  C08A  F07E         	movff	_elapsedMillis+3,main@lcdLastMillis+3
   795                           
   796                           ;main.c: 169: LCDgotoLineTwo();
   797  001720  EC73  F012         	call	_LCDgotoLineTwo	;wreg free
   798                           
   799                           ;main.c: 170: printf("LW: %d ", leftWheelCount);
   800  001724  0E20               	movlw	low STR_3
   801  001726  6E1F               	movwf	printf@f,c
   802  001728  0E10               	movlw	high STR_3
   803  00172A  6E20               	movwf	printf@f+1,c
   804  00172C  C08B  F021         	movff	_leftWheelCount,?_printf+2
   805  001730  C08C  F022         	movff	_leftWheelCount+1,?_printf+3
   806  001734  C08D  F023         	movff	_leftWheelCount+2,?_printf+4
   807  001738  C08E  F024         	movff	_leftWheelCount+3,?_printf+5
   808  00173C  EC09  F00D         	call	_printf	;wreg free
   809                           
   810                           ;main.c: 171: printf(" RW: %d", rightWheelCount);
   811  001740  0E28               	movlw	low STR_4
   812  001742  6E1F               	movwf	printf@f,c
   813  001744  0E10               	movlw	high STR_4
   814  001746  6E20               	movwf	printf@f+1,c
   815  001748  C08F  F021         	movff	_rightWheelCount,?_printf+2
   816  00174C  C090  F022         	movff	_rightWheelCount+1,?_printf+3
   817  001750  C091  F023         	movff	_rightWheelCount+2,?_printf+4
   818  001754  C092  F024         	movff	_rightWheelCount+3,?_printf+5
   819  001758  EC09  F00D         	call	_printf	;wreg free
   820  00175C                     l2540:
   821                           
   822                           ;main.c: 172: }
   823                           ;main.c: 176: if(controlLastMillis + 250 < elapsedMillis)
   824  00175C  0EFA               	movlw	250
   825  00175E  0100               	movlb	0	; () banked
   826  001760  2577               	addwf	main@controlLastMillis& (0+255),w,b
   827  001762  0100               	movlb	0	; () banked
   828  001764  6F6F               	movwf	??_main& (0+255),b
   829  001766  0E00               	movlw	0
   830  001768  0100               	movlb	0	; () banked
   831  00176A  2178               	addwfc	(main@controlLastMillis+1)& (0+255),w,b
   832  00176C  0100               	movlb	0	; () banked
   833  00176E  6F70               	movwf	(??_main+1)& (0+255),b
   834  001770  0E00               	movlw	0
   835  001772  0100               	movlb	0	; () banked
   836  001774  2179               	addwfc	(main@controlLastMillis+2)& (0+255),w,b
   837  001776  0100               	movlb	0	; () banked
   838  001778  6F71               	movwf	(??_main+2)& (0+255),b
   839  00177A  0E00               	movlw	0
   840  00177C  0100               	movlb	0	; () banked
   841  00177E  217A               	addwfc	(main@controlLastMillis+3)& (0+255),w,b
   842  001780  0100               	movlb	0	; () banked
   843  001782  6F72               	movwf	(??_main+3)& (0+255),b
   844  001784  0100               	movlb	0	; () banked
   845  001786  5187               	movf	_elapsedMillis& (0+255),w,b
   846  001788  0100               	movlb	0	; () banked
   847  00178A  5D6F               	subwf	??_main& (0+255),w,b
   848  00178C  0100               	movlb	0	; () banked
   849  00178E  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   850  001790  0100               	movlb	0	; () banked
   851  001792  5970               	subwfb	(??_main+1)& (0+255),w,b
   852  001794  0100               	movlb	0	; () banked
   853  001796  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   854  001798  0100               	movlb	0	; () banked
   855  00179A  5971               	subwfb	(??_main+2)& (0+255),w,b
   856  00179C  0100               	movlb	0	; () banked
   857  00179E  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   858  0017A0  0100               	movlb	0	; () banked
   859  0017A2  5972               	subwfb	(??_main+3)& (0+255),w,b
   860  0017A4  B0D8               	btfsc	status,0,c
   861  0017A6  D00A               	goto	l2546
   862                           
   863                           ; BSR set to: 0
   864                           ;main.c: 177: {
   865                           ;main.c: 178: controlLastMillis = elapsedMillis;
   866  0017A8  C087  F077         	movff	_elapsedMillis,main@controlLastMillis
   867  0017AC  C088  F078         	movff	_elapsedMillis+1,main@controlLastMillis+1
   868  0017B0  C089  F079         	movff	_elapsedMillis+2,main@controlLastMillis+2
   869  0017B4  C08A  F07A         	movff	_elapsedMillis+3,main@controlLastMillis+3
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 179: excerciseControl();
   873  0017B8  EC19  F008         	call	_excerciseControl	;wreg free
   874  0017BC                     l2546:
   875                           
   876                           ;main.c: 180: }
   877                           ;main.c: 183: if(speedLastMillis + 750 < elapsedMillis)
   878  0017BC  0EEE               	movlw	238
   879  0017BE  0100               	movlb	0	; () banked
   880  0017C0  2583               	addwf	main@speedLastMillis& (0+255),w,b
   881  0017C2  0100               	movlb	0	; () banked
   882  0017C4  6F6F               	movwf	??_main& (0+255),b
   883  0017C6  0E02               	movlw	2
   884  0017C8  0100               	movlb	0	; () banked
   885  0017CA  2184               	addwfc	(main@speedLastMillis+1)& (0+255),w,b
   886  0017CC  0100               	movlb	0	; () banked
   887  0017CE  6F70               	movwf	(??_main+1)& (0+255),b
   888  0017D0  0E00               	movlw	0
   889  0017D2  0100               	movlb	0	; () banked
   890  0017D4  2185               	addwfc	(main@speedLastMillis+2)& (0+255),w,b
   891  0017D6  0100               	movlb	0	; () banked
   892  0017D8  6F71               	movwf	(??_main+2)& (0+255),b
   893  0017DA  0E00               	movlw	0
   894  0017DC  0100               	movlb	0	; () banked
   895  0017DE  2186               	addwfc	(main@speedLastMillis+3)& (0+255),w,b
   896  0017E0  0100               	movlb	0	; () banked
   897  0017E2  6F72               	movwf	(??_main+3)& (0+255),b
   898  0017E4  0100               	movlb	0	; () banked
   899  0017E6  5187               	movf	_elapsedMillis& (0+255),w,b
   900  0017E8  0100               	movlb	0	; () banked
   901  0017EA  5D6F               	subwf	??_main& (0+255),w,b
   902  0017EC  0100               	movlb	0	; () banked
   903  0017EE  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   904  0017F0  0100               	movlb	0	; () banked
   905  0017F2  5970               	subwfb	(??_main+1)& (0+255),w,b
   906  0017F4  0100               	movlb	0	; () banked
   907  0017F6  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   908  0017F8  0100               	movlb	0	; () banked
   909  0017FA  5971               	subwfb	(??_main+2)& (0+255),w,b
   910  0017FC  0100               	movlb	0	; () banked
   911  0017FE  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   912  001800  0100               	movlb	0	; () banked
   913  001802  5972               	subwfb	(??_main+3)& (0+255),w,b
   914  001804  B0D8               	btfsc	status,0,c
   915  001806  D752               	goto	l2530
   916                           
   917                           ; BSR set to: 0
   918                           ;main.c: 184: {
   919                           ;main.c: 189: rightWheelMeasuredSpeed = (int) ((rightWheelCount - rightCountTracker) * (
      +                          3.4 * 750 ) / (elapsedMillis - speedLastMillis));
   920  001808  C083  F06F         	movff	main@speedLastMillis,??_main
   921  00180C  C084  F070         	movff	main@speedLastMillis+1,??_main+1
   922  001810  C085  F071         	movff	main@speedLastMillis+2,??_main+2
   923  001814  C086  F072         	movff	main@speedLastMillis+3,??_main+3
   924  001818  0100               	movlb	0	; () banked
   925  00181A  1F6F               	comf	??_main& (0+255),f,b
   926  00181C  1F70               	comf	(??_main+1)& (0+255),f,b
   927  00181E  1F71               	comf	(??_main+2)& (0+255),f,b
   928  001820  1F72               	comf	(??_main+3)& (0+255),f,b
   929  001822  2B6F               	incf	??_main& (0+255),f,b
   930  001824  0E00               	movlw	0
   931  001826  2370               	addwfc	(??_main+1)& (0+255),f,b
   932  001828  2371               	addwfc	(??_main+2)& (0+255),f,b
   933  00182A  2372               	addwfc	(??_main+3)& (0+255),f,b
   934  00182C  0100               	movlb	0	; () banked
   935  00182E  5187               	movf	_elapsedMillis& (0+255),w,b
   936  001830  0100               	movlb	0	; () banked
   937  001832  256F               	addwf	??_main& (0+255),w,b
   938  001834  6E1B               	movwf	___lltoft@c,c
   939  001836  0100               	movlb	0	; () banked
   940  001838  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   941  00183A  0100               	movlb	0	; () banked
   942  00183C  2170               	addwfc	(??_main+1)& (0+255),w,b
   943  00183E  6E1C               	movwf	___lltoft@c+1,c
   944  001840  0100               	movlb	0	; () banked
   945  001842  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   946  001844  0100               	movlb	0	; () banked
   947  001846  2171               	addwfc	(??_main+2)& (0+255),w,b
   948  001848  6E1D               	movwf	___lltoft@c+2,c
   949  00184A  0100               	movlb	0	; () banked
   950  00184C  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   951  00184E  0100               	movlb	0	; () banked
   952  001850  2172               	addwfc	(??_main+3)& (0+255),w,b
   953  001852  6E1E               	movwf	___lltoft@c+3,c
   954  001854  EC5B  F011         	call	___lltoft	;wreg free
   955  001858  C01B  F036         	movff	?___lltoft,___ftdiv@f2
   956  00185C  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
   957  001860  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
   958  001864  0E60               	movlw	96
   959  001866  6E27               	movwf	___ftmul@f2,c
   960  001868  0E1F               	movlw	31
   961  00186A  6E28               	movwf	___ftmul@f2+1,c
   962  00186C  0E45               	movlw	69
   963  00186E  6E29               	movwf	___ftmul@f2+2,c
   964  001870  C081  F073         	movff	main@rightCountTracker,??_main+4
   965  001874  C082  F074         	movff	main@rightCountTracker+1,??_main+5
   966  001878  0E00               	movlw	0
   967  00187A  0100               	movlb	0	; () banked
   968  00187C  BF74               	btfsc	(??_main+5)& (0+255),7,b
   969  00187E  0EFF               	movlw	255
   970  001880  6F75               	movwf	(??_main+6)& (0+255),b
   971  001882  6F76               	movwf	(??_main+7)& (0+255),b
   972  001884  0100               	movlb	0	; () banked
   973  001886  1F73               	comf	(??_main+4)& (0+255),f,b
   974  001888  1F74               	comf	(??_main+5)& (0+255),f,b
   975  00188A  1F75               	comf	(??_main+6)& (0+255),f,b
   976  00188C  1F76               	comf	(??_main+7)& (0+255),f,b
   977  00188E  2B73               	incf	(??_main+4)& (0+255),f,b
   978  001890  0E00               	movlw	0
   979  001892  2374               	addwfc	(??_main+5)& (0+255),f,b
   980  001894  2375               	addwfc	(??_main+6)& (0+255),f,b
   981  001896  2376               	addwfc	(??_main+7)& (0+255),f,b
   982  001898  0100               	movlb	0	; () banked
   983  00189A  518F               	movf	_rightWheelCount& (0+255),w,b
   984  00189C  0100               	movlb	0	; () banked
   985  00189E  2573               	addwf	(??_main+4)& (0+255),w,b
   986  0018A0  6E1B               	movwf	___lltoft@c,c
   987  0018A2  0100               	movlb	0	; () banked
   988  0018A4  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
   989  0018A6  0100               	movlb	0	; () banked
   990  0018A8  2174               	addwfc	(??_main+5)& (0+255),w,b
   991  0018AA  6E1C               	movwf	___lltoft@c+1,c
   992  0018AC  0100               	movlb	0	; () banked
   993  0018AE  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
   994  0018B0  0100               	movlb	0	; () banked
   995  0018B2  2175               	addwfc	(??_main+6)& (0+255),w,b
   996  0018B4  6E1D               	movwf	___lltoft@c+2,c
   997  0018B6  0100               	movlb	0	; () banked
   998  0018B8  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
   999  0018BA  0100               	movlb	0	; () banked
  1000  0018BC  2176               	addwfc	(??_main+7)& (0+255),w,b
  1001  0018BE  6E1E               	movwf	___lltoft@c+3,c
  1002  0018C0  EC5B  F011         	call	___lltoft	;wreg free
  1003  0018C4  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1004  0018C8  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1005  0018CC  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1006  0018D0  ECAB  F00E         	call	___ftmul	;wreg free
  1007  0018D4  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1008  0018D8  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1009  0018DC  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1010  0018E0  EC25  F00F         	call	___ftdiv	;wreg free
  1011  0018E4  C033  F060         	movff	?___ftdiv,___fttol@f1
  1012  0018E8  C034  F061         	movff	?___ftdiv+1,___fttol@f1+1
  1013  0018EC  C035  F062         	movff	?___ftdiv+2,___fttol@f1+2
  1014  0018F0  EC09  F00E         	call	___fttol	;wreg free
  1015  0018F4  C060  F095         	movff	?___fttol,_rightWheelMeasuredSpeed
  1016  0018F8  C061  F096         	movff	?___fttol+1,_rightWheelMeasuredSpeed+1
  1017                           
  1018                           ;main.c: 191: leftWheelMeasuredSpeed = (int) ((leftWheelCount - leftCountTracker) * (3.4
      +                           * 750) / (elapsedMillis - speedLastMillis));
  1019  0018FC  C083  F06F         	movff	main@speedLastMillis,??_main
  1020  001900  C084  F070         	movff	main@speedLastMillis+1,??_main+1
  1021  001904  C085  F071         	movff	main@speedLastMillis+2,??_main+2
  1022  001908  C086  F072         	movff	main@speedLastMillis+3,??_main+3
  1023  00190C  0100               	movlb	0	; () banked
  1024  00190E  1F6F               	comf	??_main& (0+255),f,b
  1025  001910  1F70               	comf	(??_main+1)& (0+255),f,b
  1026  001912  1F71               	comf	(??_main+2)& (0+255),f,b
  1027  001914  1F72               	comf	(??_main+3)& (0+255),f,b
  1028  001916  2B6F               	incf	??_main& (0+255),f,b
  1029  001918  0E00               	movlw	0
  1030  00191A  2370               	addwfc	(??_main+1)& (0+255),f,b
  1031  00191C  2371               	addwfc	(??_main+2)& (0+255),f,b
  1032  00191E  2372               	addwfc	(??_main+3)& (0+255),f,b
  1033  001920  0100               	movlb	0	; () banked
  1034  001922  5187               	movf	_elapsedMillis& (0+255),w,b
  1035  001924  0100               	movlb	0	; () banked
  1036  001926  256F               	addwf	??_main& (0+255),w,b
  1037  001928  6E1B               	movwf	___lltoft@c,c
  1038  00192A  0100               	movlb	0	; () banked
  1039  00192C  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
  1040  00192E  0100               	movlb	0	; () banked
  1041  001930  2170               	addwfc	(??_main+1)& (0+255),w,b
  1042  001932  6E1C               	movwf	___lltoft@c+1,c
  1043  001934  0100               	movlb	0	; () banked
  1044  001936  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
  1045  001938  0100               	movlb	0	; () banked
  1046  00193A  2171               	addwfc	(??_main+2)& (0+255),w,b
  1047  00193C  6E1D               	movwf	___lltoft@c+2,c
  1048  00193E  0100               	movlb	0	; () banked
  1049  001940  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
  1050  001942  0100               	movlb	0	; () banked
  1051  001944  2172               	addwfc	(??_main+3)& (0+255),w,b
  1052  001946  6E1E               	movwf	___lltoft@c+3,c
  1053  001948  EC5B  F011         	call	___lltoft	;wreg free
  1054  00194C  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1055  001950  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1056  001954  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1057  001958  0E60               	movlw	96
  1058  00195A  6E27               	movwf	___ftmul@f2,c
  1059  00195C  0E1F               	movlw	31
  1060  00195E  6E28               	movwf	___ftmul@f2+1,c
  1061  001960  0E45               	movlw	69
  1062  001962  6E29               	movwf	___ftmul@f2+2,c
  1063  001964  C07F  F073         	movff	main@leftCountTracker,??_main+4
  1064  001968  C080  F074         	movff	main@leftCountTracker+1,??_main+5
  1065  00196C  0E00               	movlw	0
  1066  00196E  0100               	movlb	0	; () banked
  1067  001970  BF74               	btfsc	(??_main+5)& (0+255),7,b
  1068  001972  0EFF               	movlw	255
  1069  001974  6F75               	movwf	(??_main+6)& (0+255),b
  1070  001976  6F76               	movwf	(??_main+7)& (0+255),b
  1071  001978  0100               	movlb	0	; () banked
  1072  00197A  1F73               	comf	(??_main+4)& (0+255),f,b
  1073  00197C  1F74               	comf	(??_main+5)& (0+255),f,b
  1074  00197E  1F75               	comf	(??_main+6)& (0+255),f,b
  1075  001980  1F76               	comf	(??_main+7)& (0+255),f,b
  1076  001982  2B73               	incf	(??_main+4)& (0+255),f,b
  1077  001984  0E00               	movlw	0
  1078  001986  2374               	addwfc	(??_main+5)& (0+255),f,b
  1079  001988  2375               	addwfc	(??_main+6)& (0+255),f,b
  1080  00198A  2376               	addwfc	(??_main+7)& (0+255),f,b
  1081  00198C  0100               	movlb	0	; () banked
  1082  00198E  518B               	movf	_leftWheelCount& (0+255),w,b
  1083  001990  0100               	movlb	0	; () banked
  1084  001992  2573               	addwf	(??_main+4)& (0+255),w,b
  1085  001994  6E1B               	movwf	___lltoft@c,c
  1086  001996  0100               	movlb	0	; () banked
  1087  001998  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  1088  00199A  0100               	movlb	0	; () banked
  1089  00199C  2174               	addwfc	(??_main+5)& (0+255),w,b
  1090  00199E  6E1C               	movwf	___lltoft@c+1,c
  1091  0019A0  0100               	movlb	0	; () banked
  1092  0019A2  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  1093  0019A4  0100               	movlb	0	; () banked
  1094  0019A6  2175               	addwfc	(??_main+6)& (0+255),w,b
  1095  0019A8  6E1D               	movwf	___lltoft@c+2,c
  1096  0019AA  0100               	movlb	0	; () banked
  1097  0019AC  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  1098  0019AE  0100               	movlb	0	; () banked
  1099  0019B0  2176               	addwfc	(??_main+7)& (0+255),w,b
  1100  0019B2  6E1E               	movwf	___lltoft@c+3,c
  1101  0019B4  EC5B  F011         	call	___lltoft	;wreg free
  1102  0019B8  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1103  0019BC  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1104  0019C0  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1105  0019C4  ECAB  F00E         	call	___ftmul	;wreg free
  1106  0019C8  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1107  0019CC  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1108  0019D0  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1109  0019D4  EC25  F00F         	call	___ftdiv	;wreg free
  1110  0019D8  C033  F060         	movff	?___ftdiv,___fttol@f1
  1111  0019DC  C034  F061         	movff	?___ftdiv+1,___fttol@f1+1
  1112  0019E0  C035  F062         	movff	?___ftdiv+2,___fttol@f1+2
  1113  0019E4  EC09  F00E         	call	___fttol	;wreg free
  1114  0019E8  C060  F093         	movff	?___fttol,_leftWheelMeasuredSpeed
  1115  0019EC  C061  F094         	movff	?___fttol+1,_leftWheelMeasuredSpeed+1
  1116                           
  1117                           ;main.c: 193: speedLastMillis = elapsedMillis;
  1118  0019F0  C087  F083         	movff	_elapsedMillis,main@speedLastMillis
  1119  0019F4  C088  F084         	movff	_elapsedMillis+1,main@speedLastMillis+1
  1120  0019F8  C089  F085         	movff	_elapsedMillis+2,main@speedLastMillis+2
  1121  0019FC  C08A  F086         	movff	_elapsedMillis+3,main@speedLastMillis+3
  1122                           
  1123                           ;main.c: 195: rightCountTracker = rightWheelCount;
  1124  001A00  C08F  F081         	movff	_rightWheelCount,main@rightCountTracker
  1125  001A04  C090  F082         	movff	_rightWheelCount+1,main@rightCountTracker+1
  1126                           
  1127                           ;main.c: 197: leftCountTracker = leftWheelCount;
  1128  001A08  C08B  F07F         	movff	_leftWheelCount,main@leftCountTracker
  1129  001A0C  C08C  F080         	movff	_leftWheelCount+1,main@leftCountTracker+1
  1130  001A10  D64D               	goto	l2530
  1131  001A12                     __end_of_main:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           postdec1	equ	0xFE5
  1140                           fsr1l	equ	0xFE1
  1141                           status	equ	0xFD8
  1142                           
  1143 ;; *************** function _printf *****************
  1144 ;; Defined at:
  1145 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1148 ;;		 -> STR_4(8), STR_3(8), STR_2(10), STR_1(11), 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  tmpval          4    0        struct .
  1151 ;;  cp              3    0        PTR const unsigned char 
  1152 ;;  width           2   46[COMRAM] int 
  1153 ;;  val             2   44[COMRAM] unsigned int 
  1154 ;;  ap              2   40[COMRAM] PTR void [1]
  1155 ;;		 -> ?_printf(2), 
  1156 ;;  len             2    0        unsigned int 
  1157 ;;  c               1   48[COMRAM] char 
  1158 ;;  flag            1   43[COMRAM] unsigned char 
  1159 ;;  prec            1   42[COMRAM] char 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  2   30[COMRAM] int 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1169 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;Total ram usage:       19 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    4
  1176 ;; This function calls:
  1177 ;;		___lwdiv
  1178 ;;		___lwmod
  1179 ;;		___wmul
  1180 ;;		_isdigit
  1181 ;;		_putch
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text1
  1188  001A12                     __ptext1:
  1189                           	opt stack 0
  1190  001A12                     _printf:
  1191                           	opt stack 26
  1192                           
  1193                           ;doprnt.c: 466: va_list ap;
  1194                           ;doprnt.c: 499: signed char c;
  1195                           ;doprnt.c: 501: int width;
  1196                           ;doprnt.c: 506: signed char prec;
  1197                           ;doprnt.c: 508: unsigned char flag;
  1198                           ;doprnt.c: 523: union {
  1199                           ;doprnt.c: 524: unsigned long vd;
  1200                           ;doprnt.c: 525: double integ;
  1201                           ;doprnt.c: 526: } tmpval;
  1202                           ;doprnt.c: 528: unsigned int val;
  1203                           ;doprnt.c: 529: unsigned len;
  1204                           ;doprnt.c: 530: const char * cp;
  1205                           ;doprnt.c: 533: *ap = __va_start();
  1206                           
  1207                           ;incstack = 0
  1208  001A12  0E21               	movlw	low (?_printf+2)
  1209  001A14  6E29               	movwf	printf@ap,c
  1210  001A16  0E00               	movlw	high (?_printf+2)
  1211  001A18  6E2A               	movwf	printf@ap+1,c
  1212                           
  1213                           ;doprnt.c: 536: while(c = *f++) {
  1214  001A1A  D0EE               	goto	l2122
  1215  001A1C                     l2046:
  1216                           
  1217                           ;doprnt.c: 538: if(c != '%')
  1218  001A1C  0E25               	movlw	37
  1219  001A1E  1831               	xorwf	printf@c,w,c
  1220  001A20  B4D8               	btfsc	status,2,c
  1221  001A22  D004               	goto	l2050
  1222                           
  1223                           ;doprnt.c: 540: {
  1224                           ;doprnt.c: 541: (putch(c) );
  1225  001A24  5031               	movf	printf@c,w,c
  1226  001A26  EC89  F012         	call	_putch
  1227                           
  1228                           ;doprnt.c: 542: continue;
  1229  001A2A  D0E6               	goto	l2122
  1230  001A2C                     l2050:
  1231                           
  1232                           ;doprnt.c: 543: }
  1233                           ;doprnt.c: 546: width = 0;
  1234  001A2C  0E00               	movlw	0
  1235  001A2E  6E30               	movwf	printf@width+1,c
  1236  001A30  0E00               	movlw	0
  1237  001A32  6E2F               	movwf	printf@width,c
  1238                           
  1239                           ;doprnt.c: 548: flag = 0;
  1240  001A34  0E00               	movlw	0
  1241  001A36  6E2C               	movwf	printf@flag,c
  1242                           
  1243                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1244  001A38  C01F  FFF6         	movff	printf@f,tblptrl
  1245  001A3C  C020  FFF7         	movff	printf@f+1,tblptrh
  1246  001A40                     	if	0	;tblptru may be non-zero
  1247  001A40                     	endif
  1248  001A40                     	if	0	;tblptru may be non-zero
  1249  001A40                     	endif
  1250  001A40  0008               	tblrd		*
  1251  001A42  50F5               	movf	tablat,w,c
  1252  001A44  EC51  F012         	call	_isdigit
  1253  001A48  A0D8               	btfss	status,0,c
  1254  001A4A  D032               	goto	l2066
  1255                           
  1256                           ;doprnt.c: 598: width = 0;
  1257  001A4C  0E00               	movlw	0
  1258  001A4E  6E30               	movwf	printf@width+1,c
  1259  001A50  0E00               	movlw	0
  1260  001A52  6E2F               	movwf	printf@width,c
  1261  001A54                     l2056:
  1262                           
  1263                           ;doprnt.c: 600: width *= 10;
  1264  001A54  C02F  F013         	movff	printf@width,___wmul@multiplier
  1265  001A58  C030  F014         	movff	printf@width+1,___wmul@multiplier+1
  1266  001A5C  0E00               	movlw	0
  1267  001A5E  6E16               	movwf	___wmul@multiplicand+1,c
  1268  001A60  0E0A               	movlw	10
  1269  001A62  6E15               	movwf	___wmul@multiplicand,c
  1270  001A64  EC3E  F012         	call	___wmul	;wreg free
  1271  001A68  C013  F02F         	movff	?___wmul,printf@width
  1272  001A6C  C014  F030         	movff	?___wmul+1,printf@width+1
  1273                           
  1274                           ;doprnt.c: 601: width += *f++ - '0';
  1275  001A70  0ED0               	movlw	208
  1276  001A72  6E25               	movwf	??_printf& (0+255),c
  1277  001A74  0EFF               	movlw	255
  1278  001A76  6E26               	movwf	(??_printf+1)& (0+255),c
  1279  001A78  C01F  FFF6         	movff	printf@f,tblptrl
  1280  001A7C  C020  FFF7         	movff	printf@f+1,tblptrh
  1281  001A80                     	if	0	;tblptru may be non-zero
  1282  001A80                     	endif
  1283  001A80                     	if	0	;tblptru may be non-zero
  1284  001A80                     	endif
  1285  001A80  0008               	tblrd		*
  1286  001A82  50F5               	movf	tablat,w,c
  1287  001A84  6E27               	movwf	(??_printf+2)& (0+255),c
  1288  001A86  6A28               	clrf	(??_printf+3)& (0+255),c
  1289  001A88  5025               	movf	??_printf,w,c
  1290  001A8A  2627               	addwf	??_printf+2,f,c
  1291  001A8C  5026               	movf	??_printf+1,w,c
  1292  001A8E  2228               	addwfc	??_printf+3,f,c
  1293  001A90  5027               	movf	??_printf+2,w,c
  1294  001A92  262F               	addwf	printf@width,f,c
  1295  001A94  5028               	movf	??_printf+3,w,c
  1296  001A96  2230               	addwfc	printf@width+1,f,c
  1297  001A98  4A1F               	infsnz	printf@f,f,c
  1298  001A9A  2A20               	incf	printf@f+1,f,c
  1299                           
  1300                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1301  001A9C  C01F  FFF6         	movff	printf@f,tblptrl
  1302  001AA0  C020  FFF7         	movff	printf@f+1,tblptrh
  1303  001AA4                     	if	0	;tblptru may be non-zero
  1304  001AA4                     	endif
  1305  001AA4                     	if	0	;tblptru may be non-zero
  1306  001AA4                     	endif
  1307  001AA4  0008               	tblrd		*
  1308  001AA6  50F5               	movf	tablat,w,c
  1309  001AA8  EC51  F012         	call	_isdigit
  1310  001AAC  B0D8               	btfsc	status,0,c
  1311  001AAE  D7D2               	goto	l2056
  1312  001AB0                     l2066:
  1313  001AB0  C01F  FFF6         	movff	printf@f,tblptrl
  1314  001AB4  C020  FFF7         	movff	printf@f+1,tblptrh
  1315  001AB8  4A1F               	infsnz	printf@f,f,c
  1316  001ABA  2A20               	incf	printf@f+1,f,c
  1317  001ABC                     	if	0	;tblptru may be non-zero
  1318  001ABC                     	endif
  1319  001ABC                     	if	0	;tblptru may be non-zero
  1320  001ABC                     	endif
  1321  001ABC  0008               	tblrd		*
  1322  001ABE  CFF5 F031          	movff	tablat,printf@c
  1323  001AC2  5031               	movf	printf@c,w,c
  1324                           
  1325                           ; Switch size 1, requested type "space"
  1326                           ; Number of cases is 3, Range of values is 0 to 105
  1327                           ; switch strategies available:
  1328                           ; Name         Instructions Cycles
  1329                           ; simple_byte           10     6 (average)
  1330                           ;	Chosen strategy is simple_byte
  1331  001AC4  0A00               	xorlw	0	; case 0
  1332  001AC6  B4D8               	btfsc	status,2,c
  1333  001AC8  0012               	return	
  1334  001ACA  0A64               	xorlw	100	; case 100
  1335  001ACC  B4D8               	btfsc	status,2,c
  1336  001ACE  D003               	goto	l2068
  1337  001AD0  0A0D               	xorlw	13	; case 105
  1338  001AD2  A4D8               	btfss	status,2,c
  1339  001AD4  D091               	goto	l2122
  1340  001AD6                     l2068:
  1341                           
  1342                           ;doprnt.c: 1253: {
  1343                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1344  001AD6  C029  FFD9         	movff	printf@ap,fsr2l
  1345  001ADA  C02A  FFDA         	movff	printf@ap+1,fsr2h
  1346  001ADE  CFDE F02D          	movff	postinc2,printf@val
  1347  001AE2  CFDD F02E          	movff	postdec2,printf@val+1
  1348  001AE6  0E02               	movlw	2
  1349  001AE8  2629               	addwf	printf@ap,f,c
  1350  001AEA  0E00               	movlw	0
  1351  001AEC  222A               	addwfc	printf@ap+1,f,c
  1352                           
  1353                           ;doprnt.c: 1261: if((int)val < 0) {
  1354  001AEE  AE2E               	btfss	printf@val+1,7,c
  1355  001AF0  D006               	goto	l2078
  1356                           
  1357                           ;doprnt.c: 1262: flag |= 0x03;
  1358  001AF2  0E03               	movlw	3
  1359  001AF4  122C               	iorwf	printf@flag,f,c
  1360                           
  1361                           ;doprnt.c: 1263: val = -val;
  1362  001AF6  6C2D               	negf	printf@val,c
  1363  001AF8  1E2E               	comf	printf@val+1,f,c
  1364  001AFA  B0D8               	btfsc	status,0,c
  1365  001AFC  2A2E               	incf	printf@val+1,f,c
  1366  001AFE                     l2078:
  1367                           
  1368                           ;doprnt.c: 1264: }
  1369                           ;doprnt.c: 1266: }
  1370                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1371  001AFE  0E01               	movlw	1
  1372  001B00  6E31               	movwf	printf@c,c
  1373  001B02                     l2080:
  1374  001B02  0E05               	movlw	5
  1375  001B04  1831               	xorwf	printf@c,w,c
  1376  001B06  B4D8               	btfsc	status,2,c
  1377  001B08  D012               	goto	l2092
  1378                           
  1379                           ;doprnt.c: 1306: if(val < dpowers[c])
  1380  001B0A  5031               	movf	printf@c,w,c
  1381  001B0C  0D02               	mullw	2
  1382  001B0E  0E01               	movlw	low _dpowers
  1383  001B10  24F3               	addwf	prodl,w,c
  1384  001B12  6EF6               	movwf	tblptrl,c
  1385  001B14  0E10               	movlw	high _dpowers
  1386  001B16  20F4               	addwfc	prodh,w,c
  1387  001B18  6EF7               	movwf	tblptrh,c
  1388  001B1A                     	if	0	;There are less than 3 active tblptr bytes
  1389  001B1A                     	endif
  1390  001B1A  0009               	tblrd		*+
  1391  001B1C  50F5               	movf	tablat,w,c
  1392  001B1E  5C2D               	subwf	printf@val,w,c
  1393  001B20  0009               	tblrd		*+
  1394  001B22  50F5               	movf	tablat,w,c
  1395  001B24  582E               	subwfb	printf@val+1,w,c
  1396  001B26  A0D8               	btfss	status,0,c
  1397  001B28  D002               	goto	l2092
  1398                           
  1399                           ;doprnt.c: 1307: break;
  1400  001B2A  2A31               	incf	printf@c,f,c
  1401  001B2C  D7EA               	goto	l2080
  1402  001B2E                     l2092:
  1403                           
  1404                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1405  001B2E  502F               	movf	printf@width,w,c
  1406  001B30  1030               	iorwf	printf@width+1,w,c
  1407  001B32  B4D8               	btfsc	status,2,c
  1408  001B34  D009               	goto	l2098
  1409  001B36  C02C  F025         	movff	printf@flag,??_printf
  1410  001B3A  0E03               	movlw	3
  1411  001B3C  1625               	andwf	??_printf,f,c
  1412  001B3E  B4D8               	btfsc	status,2,c
  1413  001B40  D003               	goto	l2098
  1414                           
  1415                           ;doprnt.c: 1346: width--;
  1416  001B42  062F               	decf	printf@width,f,c
  1417  001B44  A0D8               	btfss	status,0,c
  1418  001B46  0630               	decf	printf@width+1,f,c
  1419  001B48                     l2098:
  1420                           
  1421                           ;doprnt.c: 1381: if(width > c)
  1422  001B48  0E80               	movlw	128
  1423  001B4A  BE31               	btfsc	printf@c,7,c
  1424  001B4C  0E7F               	movlw	127
  1425  001B4E  6E25               	movwf	??_printf& (0+255),c
  1426  001B50  502F               	movf	printf@width,w,c
  1427  001B52  5C31               	subwf	printf@c,w,c
  1428  001B54  5030               	movf	printf@width+1,w,c
  1429  001B56  0A80               	xorlw	128
  1430  001B58  5825               	subwfb	??_printf& (0+255),w,c
  1431  001B5A  B0D8               	btfsc	status,0,c
  1432  001B5C  D007               	goto	l2102
  1433                           
  1434                           ;doprnt.c: 1382: width -= c;
  1435  001B5E  5031               	movf	printf@c,w,c
  1436  001B60  5E2F               	subwf	printf@width,f,c
  1437  001B62  0E00               	movlw	0
  1438  001B64  BE31               	btfsc	printf@c,7,c
  1439  001B66  0EFF               	movlw	255
  1440  001B68  5A30               	subwfb	printf@width+1,f,c
  1441  001B6A  D004               	goto	l2104
  1442  001B6C                     l2102:
  1443                           
  1444                           ;doprnt.c: 1383: else
  1445                           ;doprnt.c: 1384: width = 0;
  1446  001B6C  0E00               	movlw	0
  1447  001B6E  6E30               	movwf	printf@width+1,c
  1448  001B70  0E00               	movlw	0
  1449  001B72  6E2F               	movwf	printf@width,c
  1450  001B74                     l2104:
  1451                           
  1452                           ;doprnt.c: 1422: {
  1453                           ;doprnt.c: 1424: if(width
  1454                           ;doprnt.c: 1428: )
  1455  001B74  502F               	movf	printf@width,w,c
  1456  001B76  1030               	iorwf	printf@width+1,w,c
  1457  001B78  B4D8               	btfsc	status,2,c
  1458  001B7A  D00A               	goto	l2110
  1459  001B7C                     l2106:
  1460                           
  1461                           ;doprnt.c: 1430: (putch(' ') );
  1462  001B7C  0E20               	movlw	32
  1463  001B7E  EC89  F012         	call	_putch
  1464                           
  1465                           ;doprnt.c: 1431: while(--width);
  1466  001B82  062F               	decf	printf@width,f,c
  1467  001B84  A0D8               	btfss	status,0,c
  1468  001B86  0630               	decf	printf@width+1,f,c
  1469  001B88  502F               	movf	printf@width,w,c
  1470  001B8A  1030               	iorwf	printf@width+1,w,c
  1471  001B8C  A4D8               	btfss	status,2,c
  1472  001B8E  D7F6               	goto	l2106
  1473  001B90                     l2110:
  1474                           
  1475                           ;doprnt.c: 1438: if(flag & 0x03)
  1476  001B90  C02C  F025         	movff	printf@flag,??_printf
  1477  001B94  0E03               	movlw	3
  1478  001B96  1625               	andwf	??_printf,f,c
  1479  001B98  B4D8               	btfsc	status,2,c
  1480  001B9A  D003               	goto	l2114
  1481                           
  1482                           ;doprnt.c: 1439: (putch('-') );
  1483  001B9C  0E2D               	movlw	45
  1484  001B9E  EC89  F012         	call	_putch
  1485  001BA2                     l2114:
  1486                           
  1487                           ;doprnt.c: 1469: }
  1488                           ;doprnt.c: 1472: prec = c;
  1489  001BA2  C031  F02B         	movff	printf@c,printf@prec
  1490                           
  1491                           ;doprnt.c: 1474: while(prec--) {
  1492  001BA6  D024               	goto	l2120
  1493  001BA8                     l2116:
  1494                           
  1495                           ;doprnt.c: 1478: {
  1496                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1497  001BA8  502B               	movf	printf@prec,w,c
  1498  001BAA  0D02               	mullw	2
  1499  001BAC  0E01               	movlw	low _dpowers
  1500  001BAE  24F3               	addwf	prodl,w,c
  1501  001BB0  6EF6               	movwf	tblptrl,c
  1502  001BB2  0E10               	movlw	high _dpowers
  1503  001BB4  20F4               	addwfc	prodh,w,c
  1504  001BB6  6EF7               	movwf	tblptrh,c
  1505  001BB8                     	if	0	;There are less than 3 active tblptr bytes
  1506  001BB8                     	endif
  1507  001BB8  0009               	tblrd		*+
  1508  001BBA  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1509  001BBE  000A               	tblrd		*-
  1510  001BC0  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1511  001BC4  C02D  F013         	movff	printf@val,___lwdiv@dividend
  1512  001BC8  C02E  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1513  001BCC  ECB5  F011         	call	___lwdiv	;wreg free
  1514  001BD0  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1515  001BD4  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1516  001BD8  0E00               	movlw	0
  1517  001BDA  6E1D               	movwf	___lwmod@divisor+1,c
  1518  001BDC  0E0A               	movlw	10
  1519  001BDE  6E1C               	movwf	___lwmod@divisor,c
  1520  001BE0  ECDE  F011         	call	___lwmod	;wreg free
  1521  001BE4  501A               	movf	?___lwmod,w,c
  1522  001BE6  0F30               	addlw	48
  1523  001BE8  6E31               	movwf	printf@c,c
  1524                           
  1525                           ;doprnt.c: 1523: }
  1526                           ;doprnt.c: 1524: (putch(c) );
  1527  001BEA  5031               	movf	printf@c,w,c
  1528  001BEC  EC89  F012         	call	_putch
  1529  001BF0                     l2120:
  1530  001BF0  062B               	decf	printf@prec,f,c
  1531  001BF2  282B               	incf	printf@prec,w,c
  1532  001BF4  A4D8               	btfss	status,2,c
  1533  001BF6  D7D8               	goto	l2116
  1534  001BF8                     l2122:
  1535  001BF8  C01F  FFF6         	movff	printf@f,tblptrl
  1536  001BFC  C020  FFF7         	movff	printf@f+1,tblptrh
  1537  001C00  4A1F               	infsnz	printf@f,f,c
  1538  001C02  2A20               	incf	printf@f+1,f,c
  1539  001C04                     	if	0	;tblptru may be non-zero
  1540  001C04                     	endif
  1541  001C04                     	if	0	;tblptru may be non-zero
  1542  001C04                     	endif
  1543  001C04  0008               	tblrd		*
  1544  001C06  CFF5 F031          	movff	tablat,printf@c
  1545  001C0A  5031               	movf	printf@c,w,c
  1546  001C0C  B4D8               	btfsc	status,2,c
  1547  001C0E  0012               	return	
  1548  001C10  D705               	goto	l2046
  1549  001C12                     __end_of_printf:
  1550                           	opt stack 0
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           prodh	equ	0xFF4
  1556                           prodl	equ	0xFF3
  1557                           postinc0	equ	0xFEE
  1558                           wreg	equ	0xFE8
  1559                           postdec1	equ	0xFE5
  1560                           fsr1l	equ	0xFE1
  1561                           postinc2	equ	0xFDE
  1562                           postdec2	equ	0xFDD
  1563                           fsr2h	equ	0xFDA
  1564                           fsr2l	equ	0xFD9
  1565                           status	equ	0xFD8
  1566                           
  1567 ;; *************** function _putch *****************
  1568 ;; Defined at:
  1569 ;;		line 12 in file "printfLib.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;  data            1    wreg     unsigned char 
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;  data            1   20[COMRAM] unsigned char 
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, status,2, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;Total ram usage:        1 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    3
  1590 ;; This function calls:
  1591 ;;		_LCDwrite
  1592 ;; This function is called by:
  1593 ;;		_printf
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text2
  1598  002512                     __ptext2:
  1599                           	opt stack 0
  1600  002512                     _putch:
  1601                           	opt stack 26
  1602                           
  1603                           ;incstack = 0
  1604                           ;putch@data stored from wreg
  1605  002512  6E15               	movwf	putch@data,c
  1606                           
  1607                           ;printfLib.c: 13: LCDwrite(data);
  1608  002514  5015               	movf	putch@data,w,c
  1609  002516  EC6A  F012         	call	_LCDwrite
  1610  00251A  0012               	return		;funcret
  1611  00251C                     __end_of_putch:
  1612                           	opt stack 0
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           prodh	equ	0xFF4
  1618                           prodl	equ	0xFF3
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           postdec1	equ	0xFE5
  1622                           fsr1l	equ	0xFE1
  1623                           postinc2	equ	0xFDE
  1624                           postdec2	equ	0xFDD
  1625                           fsr2h	equ	0xFDA
  1626                           fsr2l	equ	0xFD9
  1627                           status	equ	0xFD8
  1628                           
  1629 ;; *************** function _LCDwrite *****************
  1630 ;; Defined at:
  1631 ;;		line 118 in file "lcd.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  input           1    wreg     unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  input           1   19[COMRAM] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;Total ram usage:        1 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    2
  1652 ;; This function calls:
  1653 ;;		_LCDcheckBF
  1654 ;;		_LCDcmd
  1655 ;; This function is called by:
  1656 ;;		_putch
  1657 ;;		_LCDputs
  1658 ;;		_LCDwriteLineOne
  1659 ;;		_LCDwriteLineTwo
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text3
  1664  0024D4                     __ptext3:
  1665                           	opt stack 0
  1666  0024D4                     _LCDwrite:
  1667                           	opt stack 26
  1668                           
  1669                           ;incstack = 0
  1670                           ;LCDwrite@input stored from wreg
  1671  0024D4  6E14               	movwf	LCDwrite@input,c
  1672                           
  1673                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  1674  0024D6  808D               	bsf	3981,0,c	;volatile
  1675                           
  1676                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  1677  0024D8  928D               	bcf	3981,1,c	;volatile
  1678                           
  1679                           ;lcd.c: 122: LCDcmd(input);
  1680  0024DA  5014               	movf	LCDwrite@input,w,c
  1681  0024DC  EC83  F012         	call	_LCDcmd
  1682                           
  1683                           ;lcd.c: 123: LCDcheckBF();
  1684  0024E0  EC60  F012         	call	_LCDcheckBF	;wreg free
  1685  0024E4  0012               	return		;funcret
  1686  0024E6                     __end_of_LCDwrite:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           prodh	equ	0xFF4
  1693                           prodl	equ	0xFF3
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1l	equ	0xFE1
  1698                           postinc2	equ	0xFDE
  1699                           postdec2	equ	0xFDD
  1700                           fsr2h	equ	0xFDA
  1701                           fsr2l	equ	0xFD9
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _isdigit *****************
  1705 ;; Defined at:
  1706 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  c               1    wreg     unsigned char 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  c               1   20[COMRAM] unsigned char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;		None               void
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;Total ram usage:        3 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    1
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_printf
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text4
  1735  0024A2                     __ptext4:
  1736                           	opt stack 0
  1737  0024A2                     _isdigit:
  1738                           	opt stack 28
  1739                           
  1740                           ;incstack = 0
  1741                           ;isdigit@c stored from wreg
  1742  0024A2  6E15               	movwf	isdigit@c,c
  1743  0024A4  0E00               	movlw	0
  1744  0024A6  6E14               	movwf	_isdigit$1790,c
  1745  0024A8  0E3A               	movlw	58
  1746  0024AA  6015               	cpfslt	isdigit@c,c
  1747  0024AC  D005               	goto	l1790
  1748  0024AE  0E2F               	movlw	47
  1749  0024B0  6415               	cpfsgt	isdigit@c,c
  1750  0024B2  D002               	goto	l1790
  1751  0024B4  0E01               	movlw	1
  1752  0024B6  6E14               	movwf	_isdigit$1790,c
  1753  0024B8                     l1790:
  1754  0024B8  C014  F013         	movff	_isdigit$1790,??_isdigit
  1755  0024BC  3013               	rrcf	??_isdigit,w,c
  1756  0024BE  0012               	return	
  1757  0024C0                     __end_of_isdigit:
  1758                           	opt stack 0
  1759                           tblptru	equ	0xFF8
  1760                           tblptrh	equ	0xFF7
  1761                           tblptrl	equ	0xFF6
  1762                           tablat	equ	0xFF5
  1763                           prodh	equ	0xFF4
  1764                           prodl	equ	0xFF3
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           postinc2	equ	0xFDE
  1770                           postdec2	equ	0xFDD
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function ___wmul *****************
  1776 ;; Defined at:
  1777 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  multiplier      2   18[COMRAM] unsigned int 
  1780 ;;  multiplicand    2   20[COMRAM] unsigned int 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  product         2   22[COMRAM] unsigned int 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  2   18[COMRAM] unsigned int 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0, prodl, prodh
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1792 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;Total ram usage:        6 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    1
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_printf
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text5
  1807  00247C                     __ptext5:
  1808                           	opt stack 0
  1809  00247C                     ___wmul:
  1810                           	opt stack 28
  1811                           
  1812                           ;incstack = 0
  1813  00247C  5013               	movf	___wmul@multiplier,w,c
  1814  00247E  0215               	mulwf	___wmul@multiplicand,c
  1815  002480  CFF3 F017          	movff	prodl,___wmul@product
  1816  002484  CFF4 F018          	movff	prodh,___wmul@product+1
  1817  002488  5013               	movf	___wmul@multiplier,w,c
  1818  00248A  0216               	mulwf	___wmul@multiplicand+1,c
  1819  00248C  50F3               	movf	prodl,w,c
  1820  00248E  2618               	addwf	___wmul@product+1,f,c
  1821  002490  5014               	movf	___wmul@multiplier+1,w,c
  1822  002492  0215               	mulwf	___wmul@multiplicand,c
  1823  002494  50F3               	movf	prodl,w,c
  1824  002496  2618               	addwf	___wmul@product+1,f,c
  1825  002498  C017  F013         	movff	___wmul@product,?___wmul
  1826  00249C  C018  F014         	movff	___wmul@product+1,?___wmul+1
  1827  0024A0  0012               	return	
  1828  0024A2                     __end_of___wmul:
  1829                           	opt stack 0
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           postdec1	equ	0xFE5
  1839                           fsr1l	equ	0xFE1
  1840                           postinc2	equ	0xFDE
  1841                           postdec2	equ	0xFDD
  1842                           fsr2h	equ	0xFDA
  1843                           fsr2l	equ	0xFD9
  1844                           status	equ	0xFD8
  1845                           
  1846 ;; *************** function ___lwmod *****************
  1847 ;; Defined at:
  1848 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  dividend        2   25[COMRAM] unsigned int 
  1851 ;;  divisor         2   27[COMRAM] unsigned int 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  counter         1   29[COMRAM] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  2   25[COMRAM] unsigned int 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2, status,0
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;Total ram usage:        5 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    1
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_printf
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           	psect	text6
  1878  0023BC                     __ptext6:
  1879                           	opt stack 0
  1880  0023BC                     ___lwmod:
  1881                           	opt stack 28
  1882                           
  1883                           ;incstack = 0
  1884  0023BC  501C               	movf	___lwmod@divisor,w,c
  1885  0023BE  101D               	iorwf	___lwmod@divisor+1,w,c
  1886  0023C0  B4D8               	btfsc	status,2,c
  1887  0023C2  D018               	goto	l721
  1888  0023C4  0E01               	movlw	1
  1889  0023C6  6E1E               	movwf	___lwmod@counter,c
  1890  0023C8  D004               	goto	l1904
  1891  0023CA                     l1902:
  1892  0023CA  90D8               	bcf	status,0,c
  1893  0023CC  361C               	rlcf	___lwmod@divisor,f,c
  1894  0023CE  361D               	rlcf	___lwmod@divisor+1,f,c
  1895  0023D0  2A1E               	incf	___lwmod@counter,f,c
  1896  0023D2                     l1904:
  1897  0023D2  AE1D               	btfss	___lwmod@divisor+1,7,c
  1898  0023D4  D7FA               	goto	l1902
  1899  0023D6                     l1906:
  1900  0023D6  501C               	movf	___lwmod@divisor,w,c
  1901  0023D8  5C1A               	subwf	___lwmod@dividend,w,c
  1902  0023DA  501D               	movf	___lwmod@divisor+1,w,c
  1903  0023DC  581B               	subwfb	___lwmod@dividend+1,w,c
  1904  0023DE  A0D8               	btfss	status,0,c
  1905  0023E0  D004               	goto	l1910
  1906  0023E2  501C               	movf	___lwmod@divisor,w,c
  1907  0023E4  5E1A               	subwf	___lwmod@dividend,f,c
  1908  0023E6  501D               	movf	___lwmod@divisor+1,w,c
  1909  0023E8  5A1B               	subwfb	___lwmod@dividend+1,f,c
  1910  0023EA                     l1910:
  1911  0023EA  90D8               	bcf	status,0,c
  1912  0023EC  321D               	rrcf	___lwmod@divisor+1,f,c
  1913  0023EE  321C               	rrcf	___lwmod@divisor,f,c
  1914  0023F0  2E1E               	decfsz	___lwmod@counter,f,c
  1915  0023F2  D7F1               	goto	l1906
  1916  0023F4                     l721:
  1917  0023F4  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  1918  0023F8  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  1919  0023FC  0012               	return		;funcret
  1920  0023FE                     __end_of___lwmod:
  1921                           	opt stack 0
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           prodh	equ	0xFF4
  1927                           prodl	equ	0xFF3
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           postdec1	equ	0xFE5
  1931                           fsr1l	equ	0xFE1
  1932                           postinc2	equ	0xFDE
  1933                           postdec2	equ	0xFDD
  1934                           fsr2h	equ	0xFDA
  1935                           fsr2l	equ	0xFD9
  1936                           status	equ	0xFD8
  1937                           
  1938 ;; *************** function ___lwdiv *****************
  1939 ;; Defined at:
  1940 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;  dividend        2   18[COMRAM] unsigned int 
  1943 ;;  divisor         2   20[COMRAM] unsigned int 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  quotient        2   22[COMRAM] unsigned int 
  1946 ;;  counter         1   24[COMRAM] unsigned char 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  2   18[COMRAM] unsigned int 
  1949 ;; Registers used:
  1950 ;;		wreg, status,2, status,0
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;Total ram usage:        7 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    1
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_printf
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text7
  1971  00236A                     __ptext7:
  1972                           	opt stack 0
  1973  00236A                     ___lwdiv:
  1974                           	opt stack 28
  1975                           
  1976                           ;incstack = 0
  1977  00236A  0E00               	movlw	0
  1978  00236C  6E18               	movwf	___lwdiv@quotient+1,c
  1979  00236E  0E00               	movlw	0
  1980  002370  6E17               	movwf	___lwdiv@quotient,c
  1981  002372  5015               	movf	___lwdiv@divisor,w,c
  1982  002374  1016               	iorwf	___lwdiv@divisor+1,w,c
  1983  002376  B4D8               	btfsc	status,2,c
  1984  002378  D01C               	goto	l711
  1985  00237A  0E01               	movlw	1
  1986  00237C  6E19               	movwf	___lwdiv@counter,c
  1987  00237E  D004               	goto	l1884
  1988  002380                     l1882:
  1989  002380  90D8               	bcf	status,0,c
  1990  002382  3615               	rlcf	___lwdiv@divisor,f,c
  1991  002384  3616               	rlcf	___lwdiv@divisor+1,f,c
  1992  002386  2A19               	incf	___lwdiv@counter,f,c
  1993  002388                     l1884:
  1994  002388  AE16               	btfss	___lwdiv@divisor+1,7,c
  1995  00238A  D7FA               	goto	l1882
  1996  00238C                     l1886:
  1997  00238C  90D8               	bcf	status,0,c
  1998  00238E  3617               	rlcf	___lwdiv@quotient,f,c
  1999  002390  3618               	rlcf	___lwdiv@quotient+1,f,c
  2000  002392  5015               	movf	___lwdiv@divisor,w,c
  2001  002394  5C13               	subwf	___lwdiv@dividend,w,c
  2002  002396  5016               	movf	___lwdiv@divisor+1,w,c
  2003  002398  5814               	subwfb	___lwdiv@dividend+1,w,c
  2004  00239A  A0D8               	btfss	status,0,c
  2005  00239C  D005               	goto	l1894
  2006  00239E  5015               	movf	___lwdiv@divisor,w,c
  2007  0023A0  5E13               	subwf	___lwdiv@dividend,f,c
  2008  0023A2  5016               	movf	___lwdiv@divisor+1,w,c
  2009  0023A4  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2010  0023A6  8017               	bsf	___lwdiv@quotient,0,c
  2011  0023A8                     l1894:
  2012  0023A8  90D8               	bcf	status,0,c
  2013  0023AA  3216               	rrcf	___lwdiv@divisor+1,f,c
  2014  0023AC  3215               	rrcf	___lwdiv@divisor,f,c
  2015  0023AE  2E19               	decfsz	___lwdiv@counter,f,c
  2016  0023B0  D7ED               	goto	l1886
  2017  0023B2                     l711:
  2018  0023B2  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2019  0023B6  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2020  0023BA  0012               	return		;funcret
  2021  0023BC                     __end_of___lwdiv:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1l	equ	0xFE1
  2033                           postinc2	equ	0xFDE
  2034                           postdec2	equ	0xFDD
  2035                           fsr2h	equ	0xFDA
  2036                           fsr2l	equ	0xFD9
  2037                           status	equ	0xFD8
  2038                           
  2039 ;; *************** function _excerciseControl *****************
  2040 ;; Defined at:
  2041 ;;		line 326 in file "main.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;		None
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;Total ram usage:        4 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    3
  2062 ;; This function calls:
  2063 ;;		___ftge
  2064 ;;		___ftmul
  2065 ;;		___lltoft
  2066 ;;		_limitWheelSpeeds
  2067 ;;		_wheelVelocity
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text8
  2074  001032                     __ptext8:
  2075                           	opt stack 0
  2076  001032                     _excerciseControl:
  2077                           	opt stack 27
  2078                           
  2079                           ;main.c: 328: static int leftWheelCommandedSpeed = 30;
  2080                           ;main.c: 329: static int rightWheelCommandedSpeed = 30;
  2081                           ;main.c: 331: switch(event){
  2082                           
  2083                           ;incstack = 0
  2084  001032  D2F5               	goto	l2240
  2085  001034                     l2138:
  2086                           
  2087                           ;main.c: 335: if(rightWheelMeasuredSpeed < 20)
  2088  001034  0100               	movlb	0	; () banked
  2089  001036  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2090  001038  D008               	goto	l2140
  2091  00103A  0100               	movlb	0	; () banked
  2092  00103C  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2093  00103E  E11F               	bnz	l2146
  2094  001040  0E14               	movlw	20
  2095  001042  0100               	movlb	0	; () banked
  2096  001044  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2097  001046  B0D8               	btfsc	status,0,c
  2098  001048  D01A               	goto	l2146
  2099  00104A                     l2140:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;main.c: 336: {
  2103                           ;main.c: 337: rightWheelCommandedSpeed += 1;
  2104  00104A  4A48               	infsnz	excerciseControl@rightWheelCommandedSpeed,f,c
  2105  00104C  2A49               	incf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2106                           
  2107                           ;main.c: 338: leftWheelCommandedSpeed += 1;
  2108  00104E  4A46               	infsnz	excerciseControl@leftWheelCommandedSpeed,f,c
  2109  001050  2A47               	incf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 339: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2113  001052  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2114  001056  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2115  00105A  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2116  00105E  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2117  001062  0E72               	movlw	114
  2118  001064  ECFF  F011         	call	_wheelVelocity
  2119                           
  2120                           ;main.c: 340: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2121  001068  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2122  00106C  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2123  001070  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2124  001074  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2125  001078  0E6C               	movlw	108
  2126  00107A  ECFF  F011         	call	_wheelVelocity
  2127  00107E                     l2146:
  2128                           
  2129                           ;main.c: 341: }
  2130                           ;main.c: 342: if(rightWheelMeasuredSpeed > 50)
  2131  00107E  0100               	movlb	0	; () banked
  2132  001080  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2133  001082  D02A               	goto	l2154
  2134  001084  0100               	movlb	0	; () banked
  2135  001086  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2136  001088  E105               	bnz	u1480
  2137  00108A  0E33               	movlw	51
  2138  00108C  0100               	movlb	0	; () banked
  2139  00108E  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2140  001090  A0D8               	btfss	status,0,c
  2141  001092  D022               	goto	l2154
  2142  001094                     u1480:
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;main.c: 343: {
  2146                           ;main.c: 344: rightWheelCommandedSpeed -= 1;
  2147  001094  0648               	decf	excerciseControl@rightWheelCommandedSpeed,f,c
  2148  001096  A0D8               	btfss	status,0,c
  2149  001098  0649               	decf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2150                           
  2151                           ;main.c: 345: leftWheelCommandedSpeed -= 1;
  2152  00109A  0646               	decf	excerciseControl@leftWheelCommandedSpeed,f,c
  2153  00109C  A0D8               	btfss	status,0,c
  2154  00109E  0647               	decf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;main.c: 346: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2158  0010A0  0648               	decf	excerciseControl@rightWheelCommandedSpeed,f,c
  2159  0010A2  A0D8               	btfss	status,0,c
  2160  0010A4  0649               	decf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2161  0010A6  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2162  0010AA  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2163  0010AE  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2164  0010B2  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2165  0010B6  0E72               	movlw	114
  2166  0010B8  ECFF  F011         	call	_wheelVelocity
  2167                           
  2168                           ;main.c: 347: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2169  0010BC  0646               	decf	excerciseControl@leftWheelCommandedSpeed,f,c
  2170  0010BE  A0D8               	btfss	status,0,c
  2171  0010C0  0647               	decf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2172  0010C2  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2173  0010C6  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2174  0010CA  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2175  0010CE  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2176  0010D2  0E6C               	movlw	108
  2177  0010D4  ECFF  F011         	call	_wheelVelocity
  2178  0010D8                     l2154:
  2179                           
  2180                           ;main.c: 348: }
  2181                           ;main.c: 349: if(leftWheelCount > rightWheelCount + 2)
  2182  0010D8  0E02               	movlw	2
  2183  0010DA  0100               	movlb	0	; () banked
  2184  0010DC  258F               	addwf	_rightWheelCount& (0+255),w,b
  2185  0010DE  6E3C               	movwf	??_excerciseControl& (0+255),c
  2186  0010E0  0E00               	movlw	0
  2187  0010E2  0100               	movlb	0	; () banked
  2188  0010E4  2190               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2189  0010E6  6E3D               	movwf	(??_excerciseControl+1)& (0+255),c
  2190  0010E8  0E00               	movlw	0
  2191  0010EA  0100               	movlb	0	; () banked
  2192  0010EC  2191               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2193  0010EE  6E3E               	movwf	(??_excerciseControl+2)& (0+255),c
  2194  0010F0  0E00               	movlw	0
  2195  0010F2  0100               	movlb	0	; () banked
  2196  0010F4  2192               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2197  0010F6  6E3F               	movwf	(??_excerciseControl+3)& (0+255),c
  2198  0010F8  0100               	movlb	0	; () banked
  2199  0010FA  518B               	movf	_leftWheelCount& (0+255),w,b
  2200  0010FC  5C3C               	subwf	??_excerciseControl,w,c
  2201  0010FE  0100               	movlb	0	; () banked
  2202  001100  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  2203  001102  583D               	subwfb	??_excerciseControl+1,w,c
  2204  001104  0100               	movlb	0	; () banked
  2205  001106  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  2206  001108  583E               	subwfb	??_excerciseControl+2,w,c
  2207  00110A  0100               	movlb	0	; () banked
  2208  00110C  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  2209  00110E  583F               	subwfb	??_excerciseControl+3,w,c
  2210  001110  B0D8               	btfsc	status,0,c
  2211  001112  D00F               	goto	l2160
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;main.c: 351: {
  2215                           ;main.c: 352: speedCompensation -= 5;
  2216  001114  0EFB               	movlw	251
  2217  001116  264A               	addwf	_speedCompensation,f,c
  2218  001118  0EFF               	movlw	255
  2219  00111A  224B               	addwfc	_speedCompensation+1,f,c
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;main.c: 353: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2223  00111C  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2224  001120  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2225  001124  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2226  001128  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2227  00112C  0E6C               	movlw	108
  2228  00112E  ECFF  F011         	call	_wheelVelocity
  2229  001132                     l2160:
  2230                           
  2231                           ;main.c: 354: }
  2232                           ;main.c: 355: if(rightWheelCount > leftWheelCount + 2)
  2233  001132  0E02               	movlw	2
  2234  001134  0100               	movlb	0	; () banked
  2235  001136  258B               	addwf	_leftWheelCount& (0+255),w,b
  2236  001138  6E3C               	movwf	??_excerciseControl& (0+255),c
  2237  00113A  0E00               	movlw	0
  2238  00113C  0100               	movlb	0	; () banked
  2239  00113E  218C               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2240  001140  6E3D               	movwf	(??_excerciseControl+1)& (0+255),c
  2241  001142  0E00               	movlw	0
  2242  001144  0100               	movlb	0	; () banked
  2243  001146  218D               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2244  001148  6E3E               	movwf	(??_excerciseControl+2)& (0+255),c
  2245  00114A  0E00               	movlw	0
  2246  00114C  0100               	movlb	0	; () banked
  2247  00114E  218E               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2248  001150  6E3F               	movwf	(??_excerciseControl+3)& (0+255),c
  2249  001152  0100               	movlb	0	; () banked
  2250  001154  518F               	movf	_rightWheelCount& (0+255),w,b
  2251  001156  5C3C               	subwf	??_excerciseControl,w,c
  2252  001158  0100               	movlb	0	; () banked
  2253  00115A  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
  2254  00115C  583D               	subwfb	??_excerciseControl+1,w,c
  2255  00115E  0100               	movlb	0	; () banked
  2256  001160  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
  2257  001162  583E               	subwfb	??_excerciseControl+2,w,c
  2258  001164  0100               	movlb	0	; () banked
  2259  001166  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2260  001168  583F               	subwfb	??_excerciseControl+3,w,c
  2261  00116A  B0D8               	btfsc	status,0,c
  2262  00116C  D00F               	goto	l2166
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;main.c: 357: {
  2266                           ;main.c: 358: speedCompensation += 5;
  2267  00116E  0E05               	movlw	5
  2268  001170  264A               	addwf	_speedCompensation,f,c
  2269  001172  0E00               	movlw	0
  2270  001174  224B               	addwfc	_speedCompensation+1,f,c
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;main.c: 359: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2274  001176  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2275  00117A  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2276  00117E  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2277  001182  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2278  001186  0E6C               	movlw	108
  2279  001188  ECFF  F011         	call	_wheelVelocity
  2280  00118C                     l2166:
  2281                           
  2282                           ;main.c: 360: }
  2283                           ;main.c: 361: if(rightWheelCount >= 500)
  2284  00118C  0100               	movlb	0	; () banked
  2285  00118E  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2286  001190  0100               	movlb	0	; () banked
  2287  001192  1191               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2288  001194  E108               	bnz	u1510
  2289  001196  0EF4               	movlw	244
  2290  001198  0100               	movlb	0	; () banked
  2291  00119A  5D8F               	subwf	_rightWheelCount& (0+255),w,b
  2292  00119C  0E01               	movlw	1
  2293  00119E  0100               	movlb	0	; () banked
  2294  0011A0  5990               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  2295  0011A2  A0D8               	btfss	status,0,c
  2296  0011A4  D037               	goto	l2178
  2297  0011A6                     u1510:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 362: {
  2301                           ;main.c: 363: rightWheelCount = 0;
  2302  0011A6  0E00               	movlw	0
  2303  0011A8  0100               	movlb	0	; () banked
  2304  0011AA  6F8F               	movwf	_rightWheelCount& (0+255),b
  2305  0011AC  0E00               	movlw	0
  2306  0011AE  6F90               	movwf	(_rightWheelCount+1)& (0+255),b
  2307  0011B0  0E00               	movlw	0
  2308  0011B2  6F91               	movwf	(_rightWheelCount+2)& (0+255),b
  2309  0011B4  0E00               	movlw	0
  2310  0011B6  6F92               	movwf	(_rightWheelCount+3)& (0+255),b
  2311                           
  2312                           ;main.c: 364: leftWheelCount = 0;
  2313  0011B8  0E00               	movlw	0
  2314  0011BA  0100               	movlb	0	; () banked
  2315  0011BC  6F8B               	movwf	_leftWheelCount& (0+255),b
  2316  0011BE  0E00               	movlw	0
  2317  0011C0  6F8C               	movwf	(_leftWheelCount+1)& (0+255),b
  2318  0011C2  0E00               	movlw	0
  2319  0011C4  6F8D               	movwf	(_leftWheelCount+2)& (0+255),b
  2320  0011C6  0E00               	movlw	0
  2321  0011C8  6F8E               	movwf	(_leftWheelCount+3)& (0+255),b
  2322                           
  2323                           ;main.c: 365: leftWheelCommandedSpeed = 0;
  2324  0011CA  0E00               	movlw	0
  2325  0011CC  6E47               	movwf	excerciseControl@leftWheelCommandedSpeed+1,c
  2326  0011CE  0E00               	movlw	0
  2327  0011D0  6E46               	movwf	excerciseControl@leftWheelCommandedSpeed,c
  2328                           
  2329                           ;main.c: 366: rightWheelCommandedSpeed = 0;
  2330  0011D2  0E00               	movlw	0
  2331  0011D4  6E49               	movwf	excerciseControl@rightWheelCommandedSpeed+1,c
  2332  0011D6  0E00               	movlw	0
  2333  0011D8  6E48               	movwf	excerciseControl@rightWheelCommandedSpeed,c
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;main.c: 367: event += 5;
  2337  0011DA  0E05               	movlw	5
  2338  0011DC  0100               	movlb	0	; () banked
  2339  0011DE  2797               	addwf	_event& (0+255),f,b
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;main.c: 368: speedCompensation = 0;
  2343  0011E0  0E00               	movlw	0
  2344  0011E2  6E4B               	movwf	_speedCompensation+1,c
  2345  0011E4  0E00               	movlw	0
  2346  0011E6  6E4A               	movwf	_speedCompensation,c
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;main.c: 369: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2350  0011E8  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2351  0011EC  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2352  0011F0  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2353  0011F4  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2354  0011F8  0E72               	movlw	114
  2355  0011FA  ECFF  F011         	call	_wheelVelocity
  2356                           
  2357                           ;main.c: 370: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2358  0011FE  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2359  001202  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2360  001206  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2361  00120A  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2362  00120E  0E6C               	movlw	108
  2363  001210  ECFF  F011         	call	_wheelVelocity
  2364  001214                     l2178:
  2365                           
  2366                           ;main.c: 372: }
  2367                           ;main.c: 373: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2368  001214  0E46               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2369  001216  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2370  001218  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  2371  00121A  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  2372  00121C  0E48               	movlw	low excerciseControl@rightWheelCommandedSpeed
  2373  00121E  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  2374  001220  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  2375  001222  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  2376  001224  0E4A               	movlw	low _speedCompensation
  2377  001226  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  2378  001228  0E00               	movlw	high _speedCompensation
  2379  00122A  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  2380  00122C  EC98  F00F         	call	_limitWheelSpeeds	;wreg free
  2381                           
  2382                           ;main.c: 374: break;
  2383  001230  0012               	return	
  2384  001232                     l2180:
  2385                           
  2386                           ;main.c: 381: if(rightWheelMeasuredSpeed < 10)
  2387  001232  0100               	movlb	0	; () banked
  2388  001234  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2389  001236  D008               	goto	l2182
  2390  001238  0100               	movlb	0	; () banked
  2391  00123A  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2392  00123C  E120               	bnz	l2184
  2393  00123E  0E0A               	movlw	10
  2394  001240  0100               	movlb	0	; () banked
  2395  001242  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2396  001244  B0D8               	btfsc	status,0,c
  2397  001246  D01B               	goto	l2184
  2398  001248                     l2182:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 382: {
  2402                           ;main.c: 383: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  2403  001248  4A48               	infsnz	excerciseControl@rightWheelCommandedSpeed,f,c
  2404  00124A  2A49               	incf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2405  00124C  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2406  001250  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2407  001254  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2408  001258  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2409  00125C  0E72               	movlw	114
  2410  00125E  ECFF  F011         	call	_wheelVelocity
  2411                           
  2412                           ;main.c: 384: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2413  001262  0646               	decf	excerciseControl@leftWheelCommandedSpeed,f,c
  2414  001264  A0D8               	btfss	status,0,c
  2415  001266  0647               	decf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2416  001268  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2417  00126C  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2418  001270  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2419  001274  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2420  001278  0E6C               	movlw	108
  2421  00127A  ECFF  F011         	call	_wheelVelocity
  2422  00127E                     l2184:
  2423                           
  2424                           ;main.c: 385: }
  2425                           ;main.c: 386: if(rightWheelMeasuredSpeed > 12)
  2426  00127E  0100               	movlb	0	; () banked
  2427  001280  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2428  001282  D023               	goto	l2188
  2429  001284  0100               	movlb	0	; () banked
  2430  001286  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2431  001288  E105               	bnz	u1530
  2432  00128A  0E0D               	movlw	13
  2433  00128C  0100               	movlb	0	; () banked
  2434  00128E  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2435  001290  A0D8               	btfss	status,0,c
  2436  001292  D01B               	goto	l2188
  2437  001294                     u1530:
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;main.c: 387: {
  2441                           ;main.c: 388: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2442  001294  0648               	decf	excerciseControl@rightWheelCommandedSpeed,f,c
  2443  001296  A0D8               	btfss	status,0,c
  2444  001298  0649               	decf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2445  00129A  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2446  00129E  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2447  0012A2  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2448  0012A6  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2449  0012AA  0E72               	movlw	114
  2450  0012AC  ECFF  F011         	call	_wheelVelocity
  2451                           
  2452                           ;main.c: 389: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  2453  0012B0  4A46               	infsnz	excerciseControl@leftWheelCommandedSpeed,f,c
  2454  0012B2  2A47               	incf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2455  0012B4  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2456  0012B8  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2457  0012BC  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2458  0012C0  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2459  0012C4  0E6C               	movlw	108
  2460  0012C6  ECFF  F011         	call	_wheelVelocity
  2461  0012CA                     l2188:
  2462                           
  2463                           ;main.c: 390: }
  2464                           ;main.c: 391: if(leftWheelCount > (rightWheelCount + 2))
  2465  0012CA  0E02               	movlw	2
  2466  0012CC  0100               	movlb	0	; () banked
  2467  0012CE  258F               	addwf	_rightWheelCount& (0+255),w,b
  2468  0012D0  6E3C               	movwf	??_excerciseControl& (0+255),c
  2469  0012D2  0E00               	movlw	0
  2470  0012D4  0100               	movlb	0	; () banked
  2471  0012D6  2190               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2472  0012D8  6E3D               	movwf	(??_excerciseControl+1)& (0+255),c
  2473  0012DA  0E00               	movlw	0
  2474  0012DC  0100               	movlb	0	; () banked
  2475  0012DE  2191               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2476  0012E0  6E3E               	movwf	(??_excerciseControl+2)& (0+255),c
  2477  0012E2  0E00               	movlw	0
  2478  0012E4  0100               	movlb	0	; () banked
  2479  0012E6  2192               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2480  0012E8  6E3F               	movwf	(??_excerciseControl+3)& (0+255),c
  2481  0012EA  0100               	movlb	0	; () banked
  2482  0012EC  518B               	movf	_leftWheelCount& (0+255),w,b
  2483  0012EE  5C3C               	subwf	??_excerciseControl,w,c
  2484  0012F0  0100               	movlb	0	; () banked
  2485  0012F2  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  2486  0012F4  583D               	subwfb	??_excerciseControl+1,w,c
  2487  0012F6  0100               	movlb	0	; () banked
  2488  0012F8  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  2489  0012FA  583E               	subwfb	??_excerciseControl+2,w,c
  2490  0012FC  0100               	movlb	0	; () banked
  2491  0012FE  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  2492  001300  583F               	subwfb	??_excerciseControl+3,w,c
  2493  001302  B0D8               	btfsc	status,0,c
  2494  001304  D00D               	goto	l2194
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;main.c: 393: {
  2498                           ;main.c: 394: speedCompensation++;
  2499  001306  4A4A               	infsnz	_speedCompensation,f,c
  2500  001308  2A4B               	incf	_speedCompensation+1,f,c
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 395: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2504  00130A  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2505  00130E  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2506  001312  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2507  001316  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2508  00131A  0E6C               	movlw	108
  2509  00131C  ECFF  F011         	call	_wheelVelocity
  2510  001320                     l2194:
  2511                           
  2512                           ;main.c: 396: }
  2513                           ;main.c: 397: if(rightWheelCount > leftWheelCount + 2)
  2514  001320  0E02               	movlw	2
  2515  001322  0100               	movlb	0	; () banked
  2516  001324  258B               	addwf	_leftWheelCount& (0+255),w,b
  2517  001326  6E3C               	movwf	??_excerciseControl& (0+255),c
  2518  001328  0E00               	movlw	0
  2519  00132A  0100               	movlb	0	; () banked
  2520  00132C  218C               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2521  00132E  6E3D               	movwf	(??_excerciseControl+1)& (0+255),c
  2522  001330  0E00               	movlw	0
  2523  001332  0100               	movlb	0	; () banked
  2524  001334  218D               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2525  001336  6E3E               	movwf	(??_excerciseControl+2)& (0+255),c
  2526  001338  0E00               	movlw	0
  2527  00133A  0100               	movlb	0	; () banked
  2528  00133C  218E               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2529  00133E  6E3F               	movwf	(??_excerciseControl+3)& (0+255),c
  2530  001340  0100               	movlb	0	; () banked
  2531  001342  518F               	movf	_rightWheelCount& (0+255),w,b
  2532  001344  5C3C               	subwf	??_excerciseControl,w,c
  2533  001346  0100               	movlb	0	; () banked
  2534  001348  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
  2535  00134A  583D               	subwfb	??_excerciseControl+1,w,c
  2536  00134C  0100               	movlb	0	; () banked
  2537  00134E  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
  2538  001350  583E               	subwfb	??_excerciseControl+2,w,c
  2539  001352  0100               	movlb	0	; () banked
  2540  001354  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2541  001356  583F               	subwfb	??_excerciseControl+3,w,c
  2542  001358  B0D8               	btfsc	status,0,c
  2543  00135A  D00E               	goto	l2200
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;main.c: 399: {
  2547                           ;main.c: 400: speedCompensation--;
  2548  00135C  064A               	decf	_speedCompensation,f,c
  2549  00135E  A0D8               	btfss	status,0,c
  2550  001360  064B               	decf	_speedCompensation+1,f,c
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;main.c: 401: wheelVelocity('l', leftWheelCommandedSpeed,speedCompensation);
  2554  001362  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2555  001366  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2556  00136A  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2557  00136E  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2558  001372  0E6C               	movlw	108
  2559  001374  ECFF  F011         	call	_wheelVelocity
  2560  001378                     l2200:
  2561                           
  2562                           ;main.c: 402: }
  2563                           ;main.c: 404: if(rightWheelCount >= 25)
  2564  001378  0100               	movlb	0	; () banked
  2565  00137A  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2566  00137C  0100               	movlb	0	; () banked
  2567  00137E  1191               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2568  001380  0100               	movlb	0	; () banked
  2569  001382  1190               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  2570  001384  E105               	bnz	u1560
  2571  001386  0E19               	movlw	25
  2572  001388  0100               	movlb	0	; () banked
  2573  00138A  5D8F               	subwf	_rightWheelCount& (0+255),w,b
  2574  00138C  A0D8               	btfss	status,0,c
  2575  00138E  D034               	goto	l2210
  2576  001390                     u1560:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;main.c: 405: {
  2580                           ;main.c: 406: rightWheelCount = 0;
  2581  001390  0E00               	movlw	0
  2582  001392  0100               	movlb	0	; () banked
  2583  001394  6F8F               	movwf	_rightWheelCount& (0+255),b
  2584  001396  0E00               	movlw	0
  2585  001398  6F90               	movwf	(_rightWheelCount+1)& (0+255),b
  2586  00139A  0E00               	movlw	0
  2587  00139C  6F91               	movwf	(_rightWheelCount+2)& (0+255),b
  2588  00139E  0E00               	movlw	0
  2589  0013A0  6F92               	movwf	(_rightWheelCount+3)& (0+255),b
  2590                           
  2591                           ;main.c: 407: leftWheelCount = 0;
  2592  0013A2  0E00               	movlw	0
  2593  0013A4  0100               	movlb	0	; () banked
  2594  0013A6  6F8B               	movwf	_leftWheelCount& (0+255),b
  2595  0013A8  0E00               	movlw	0
  2596  0013AA  6F8C               	movwf	(_leftWheelCount+1)& (0+255),b
  2597  0013AC  0E00               	movlw	0
  2598  0013AE  6F8D               	movwf	(_leftWheelCount+2)& (0+255),b
  2599  0013B0  0E00               	movlw	0
  2600  0013B2  6F8E               	movwf	(_leftWheelCount+3)& (0+255),b
  2601                           
  2602                           ;main.c: 408: leftWheelCommandedSpeed = 0;
  2603  0013B4  0E00               	movlw	0
  2604  0013B6  6E47               	movwf	excerciseControl@leftWheelCommandedSpeed+1,c
  2605  0013B8  0E00               	movlw	0
  2606  0013BA  6E46               	movwf	excerciseControl@leftWheelCommandedSpeed,c
  2607                           
  2608                           ;main.c: 409: rightWheelCommandedSpeed = 0;
  2609  0013BC  0E00               	movlw	0
  2610  0013BE  6E49               	movwf	excerciseControl@rightWheelCommandedSpeed+1,c
  2611  0013C0  0E00               	movlw	0
  2612  0013C2  6E48               	movwf	excerciseControl@rightWheelCommandedSpeed,c
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;main.c: 410: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2616  0013C4  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2617  0013C8  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2618  0013CC  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2619  0013D0  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2620  0013D4  0E72               	movlw	114
  2621  0013D6  ECFF  F011         	call	_wheelVelocity
  2622                           
  2623                           ;main.c: 411: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2624  0013DA  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2625  0013DE  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2626  0013E2  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2627  0013E6  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2628  0013EA  0E6C               	movlw	108
  2629  0013EC  ECFF  F011         	call	_wheelVelocity
  2630  0013F0                     l179:
  2631  0013F0  B081               	btfsc	3969,0,c	;volatile
  2632  0013F2  D7FE               	goto	l179
  2633                           
  2634                           ;main.c: 415: }
  2635                           ;main.c: 416: event++;
  2636  0013F4  0100               	movlb	0	; () banked
  2637  0013F6  2B97               	incf	_event& (0+255),f,b
  2638  0013F8                     l2210:
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 417: }
  2642                           ;main.c: 418: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2643  0013F8  0E46               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2644  0013FA  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2645  0013FC  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  2646  0013FE  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  2647  001400  0E48               	movlw	low excerciseControl@rightWheelCommandedSpeed
  2648  001402  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  2649  001404  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  2650  001406  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  2651  001408  0E4A               	movlw	low _speedCompensation
  2652  00140A  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  2653  00140C  0E00               	movlw	high _speedCompensation
  2654  00140E  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  2655  001410  EC98  F00F         	call	_limitWheelSpeeds	;wreg free
  2656                           
  2657                           ;main.c: 419: break;
  2658  001414  0012               	return	
  2659  001416                     l2212:
  2660                           
  2661                           ;main.c: 426: if(rightWheelMeasuredSpeed < 30)
  2662  001416  0100               	movlb	0	; () banked
  2663  001418  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2664  00141A  D008               	goto	l2214
  2665  00141C  0100               	movlb	0	; () banked
  2666  00141E  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2667  001420  E11F               	bnz	l183
  2668  001422  0E1E               	movlw	30
  2669  001424  0100               	movlb	0	; () banked
  2670  001426  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2671  001428  B0D8               	btfsc	status,0,c
  2672  00142A  D01A               	goto	l183
  2673  00142C                     l2214:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 427: {
  2677                           ;main.c: 428: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  2678  00142C  4A48               	infsnz	excerciseControl@rightWheelCommandedSpeed,f,c
  2679  00142E  2A49               	incf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2680  001430  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2681  001434  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2682  001438  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2683  00143C  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2684  001440  0E72               	movlw	114
  2685  001442  ECFF  F011         	call	_wheelVelocity
  2686                           
  2687                           ;main.c: 429: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  2688  001446  4A46               	infsnz	excerciseControl@leftWheelCommandedSpeed,f,c
  2689  001448  2A47               	incf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2690  00144A  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2691  00144E  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2692  001452  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2693  001456  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2694  00145A  0E6C               	movlw	108
  2695  00145C  ECFF  F011         	call	_wheelVelocity
  2696  001460                     l183:
  2697                           
  2698                           ;main.c: 430: }
  2699                           ;main.c: 431: if((leftWheelCount * 1.25f) > (rightWheelCount + 2) )
  2700  001460  0E02               	movlw	2
  2701  001462  0100               	movlb	0	; () banked
  2702  001464  258F               	addwf	_rightWheelCount& (0+255),w,b
  2703  001466  6E1B               	movwf	___lltoft@c,c
  2704  001468  0E00               	movlw	0
  2705  00146A  0100               	movlb	0	; () banked
  2706  00146C  2190               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2707  00146E  6E1C               	movwf	___lltoft@c+1,c
  2708  001470  0E00               	movlw	0
  2709  001472  0100               	movlb	0	; () banked
  2710  001474  2191               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2711  001476  6E1D               	movwf	___lltoft@c+2,c
  2712  001478  0E00               	movlw	0
  2713  00147A  0100               	movlb	0	; () banked
  2714  00147C  2192               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2715  00147E  6E1E               	movwf	___lltoft@c+3,c
  2716  001480  EC5B  F011         	call	___lltoft	;wreg free
  2717  001484  C01B  F033         	movff	?___lltoft,___ftge@ff1
  2718  001488  C01C  F034         	movff	?___lltoft+1,___ftge@ff1+1
  2719  00148C  C01D  F035         	movff	?___lltoft+2,___ftge@ff1+2
  2720  001490  0E00               	movlw	0
  2721  001492  6E27               	movwf	___ftmul@f2,c
  2722  001494  0EA0               	movlw	160
  2723  001496  6E28               	movwf	___ftmul@f2+1,c
  2724  001498  0E3F               	movlw	63
  2725  00149A  6E29               	movwf	___ftmul@f2+2,c
  2726  00149C  C08B  F01B         	movff	_leftWheelCount,___lltoft@c
  2727  0014A0  C08C  F01C         	movff	_leftWheelCount+1,___lltoft@c+1
  2728  0014A4  C08D  F01D         	movff	_leftWheelCount+2,___lltoft@c+2
  2729  0014A8  C08E  F01E         	movff	_leftWheelCount+3,___lltoft@c+3
  2730  0014AC  EC5B  F011         	call	___lltoft	;wreg free
  2731  0014B0  C01B  F024         	movff	?___lltoft,___ftmul@f1
  2732  0014B4  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  2733  0014B8  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  2734  0014BC  ECAB  F00E         	call	___ftmul	;wreg free
  2735  0014C0  C024  F036         	movff	?___ftmul,___ftge@ff2
  2736  0014C4  C025  F037         	movff	?___ftmul+1,___ftge@ff2+1
  2737  0014C8  C026  F038         	movff	?___ftmul+2,___ftge@ff2+2
  2738  0014CC  EC13  F011         	call	___ftge	;wreg free
  2739  0014D0  B0D8               	btfsc	status,0,c
  2740  0014D2  D00E               	goto	l2220
  2741                           
  2742                           ;main.c: 433: {
  2743                           ;main.c: 434: speedCompensation--;
  2744  0014D4  064A               	decf	_speedCompensation,f,c
  2745  0014D6  A0D8               	btfss	status,0,c
  2746  0014D8  064B               	decf	_speedCompensation+1,f,c
  2747                           
  2748                           ;main.c: 435: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2749  0014DA  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2750  0014DE  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2751  0014E2  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2752  0014E6  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2753  0014EA  0E6C               	movlw	108
  2754  0014EC  ECFF  F011         	call	_wheelVelocity
  2755  0014F0                     l2220:
  2756                           
  2757                           ;main.c: 436: }
  2758                           ;main.c: 437: if(rightWheelCount > ((leftWheelCount + 2)*1.25f))
  2759  0014F0  0E00               	movlw	0
  2760  0014F2  6E27               	movwf	___ftmul@f2,c
  2761  0014F4  0EA0               	movlw	160
  2762  0014F6  6E28               	movwf	___ftmul@f2+1,c
  2763  0014F8  0E3F               	movlw	63
  2764  0014FA  6E29               	movwf	___ftmul@f2+2,c
  2765  0014FC  0E02               	movlw	2
  2766  0014FE  0100               	movlb	0	; () banked
  2767  001500  258B               	addwf	_leftWheelCount& (0+255),w,b
  2768  001502  6E1B               	movwf	___lltoft@c,c
  2769  001504  0E00               	movlw	0
  2770  001506  0100               	movlb	0	; () banked
  2771  001508  218C               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2772  00150A  6E1C               	movwf	___lltoft@c+1,c
  2773  00150C  0E00               	movlw	0
  2774  00150E  0100               	movlb	0	; () banked
  2775  001510  218D               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2776  001512  6E1D               	movwf	___lltoft@c+2,c
  2777  001514  0E00               	movlw	0
  2778  001516  0100               	movlb	0	; () banked
  2779  001518  218E               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2780  00151A  6E1E               	movwf	___lltoft@c+3,c
  2781  00151C  EC5B  F011         	call	___lltoft	;wreg free
  2782  001520  C01B  F024         	movff	?___lltoft,___ftmul@f1
  2783  001524  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  2784  001528  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  2785  00152C  ECAB  F00E         	call	___ftmul	;wreg free
  2786  001530  C024  F033         	movff	?___ftmul,___ftge@ff1
  2787  001534  C025  F034         	movff	?___ftmul+1,___ftge@ff1+1
  2788  001538  C026  F035         	movff	?___ftmul+2,___ftge@ff1+2
  2789  00153C  C08F  F01B         	movff	_rightWheelCount,___lltoft@c
  2790  001540  C090  F01C         	movff	_rightWheelCount+1,___lltoft@c+1
  2791  001544  C091  F01D         	movff	_rightWheelCount+2,___lltoft@c+2
  2792  001548  C092  F01E         	movff	_rightWheelCount+3,___lltoft@c+3
  2793  00154C  EC5B  F011         	call	___lltoft	;wreg free
  2794  001550  C01B  F036         	movff	?___lltoft,___ftge@ff2
  2795  001554  C01C  F037         	movff	?___lltoft+1,___ftge@ff2+1
  2796  001558  C01D  F038         	movff	?___lltoft+2,___ftge@ff2+2
  2797  00155C  EC13  F011         	call	___ftge	;wreg free
  2798  001560  B0D8               	btfsc	status,0,c
  2799  001562  D00D               	goto	l2226
  2800                           
  2801                           ;main.c: 439: {
  2802                           ;main.c: 440: speedCompensation++;
  2803  001564  4A4A               	infsnz	_speedCompensation,f,c
  2804  001566  2A4B               	incf	_speedCompensation+1,f,c
  2805                           
  2806                           ;main.c: 441: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2807  001568  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2808  00156C  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2809  001570  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2810  001574  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2811  001578  0E6C               	movlw	108
  2812  00157A  ECFF  F011         	call	_wheelVelocity
  2813  00157E                     l2226:
  2814                           
  2815                           ;main.c: 442: }
  2816                           ;main.c: 443: if(rightWheelCount >= 500)
  2817  00157E  0100               	movlb	0	; () banked
  2818  001580  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2819  001582  0100               	movlb	0	; () banked
  2820  001584  1191               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2821  001586  E108               	bnz	u1610
  2822  001588  0EF4               	movlw	244
  2823  00158A  0100               	movlb	0	; () banked
  2824  00158C  5D8F               	subwf	_rightWheelCount& (0+255),w,b
  2825  00158E  0E01               	movlw	1
  2826  001590  0100               	movlb	0	; () banked
  2827  001592  5990               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  2828  001594  A0D8               	btfss	status,0,c
  2829  001596  D034               	goto	l2236
  2830  001598                     u1610:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 444: {
  2834                           ;main.c: 445: rightWheelCount = 0;
  2835  001598  0E00               	movlw	0
  2836  00159A  0100               	movlb	0	; () banked
  2837  00159C  6F8F               	movwf	_rightWheelCount& (0+255),b
  2838  00159E  0E00               	movlw	0
  2839  0015A0  6F90               	movwf	(_rightWheelCount+1)& (0+255),b
  2840  0015A2  0E00               	movlw	0
  2841  0015A4  6F91               	movwf	(_rightWheelCount+2)& (0+255),b
  2842  0015A6  0E00               	movlw	0
  2843  0015A8  6F92               	movwf	(_rightWheelCount+3)& (0+255),b
  2844                           
  2845                           ;main.c: 446: leftWheelCount = 0;
  2846  0015AA  0E00               	movlw	0
  2847  0015AC  0100               	movlb	0	; () banked
  2848  0015AE  6F8B               	movwf	_leftWheelCount& (0+255),b
  2849  0015B0  0E00               	movlw	0
  2850  0015B2  6F8C               	movwf	(_leftWheelCount+1)& (0+255),b
  2851  0015B4  0E00               	movlw	0
  2852  0015B6  6F8D               	movwf	(_leftWheelCount+2)& (0+255),b
  2853  0015B8  0E00               	movlw	0
  2854  0015BA  6F8E               	movwf	(_leftWheelCount+3)& (0+255),b
  2855                           
  2856                           ;main.c: 447: leftWheelCommandedSpeed = 0;
  2857  0015BC  0E00               	movlw	0
  2858  0015BE  6E47               	movwf	excerciseControl@leftWheelCommandedSpeed+1,c
  2859  0015C0  0E00               	movlw	0
  2860  0015C2  6E46               	movwf	excerciseControl@leftWheelCommandedSpeed,c
  2861                           
  2862                           ;main.c: 448: rightWheelCommandedSpeed = 0;
  2863  0015C4  0E00               	movlw	0
  2864  0015C6  6E49               	movwf	excerciseControl@rightWheelCommandedSpeed+1,c
  2865  0015C8  0E00               	movlw	0
  2866  0015CA  6E48               	movwf	excerciseControl@rightWheelCommandedSpeed,c
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;main.c: 449: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2870  0015CC  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2871  0015D0  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2872  0015D4  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2873  0015D8  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2874  0015DC  0E72               	movlw	114
  2875  0015DE  ECFF  F011         	call	_wheelVelocity
  2876                           
  2877                           ;main.c: 450: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2878  0015E2  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2879  0015E6  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2880  0015EA  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2881  0015EE  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2882  0015F2  0E6C               	movlw	108
  2883  0015F4  ECFF  F011         	call	_wheelVelocity
  2884  0015F8                     l187:
  2885  0015F8  B081               	btfsc	3969,0,c	;volatile
  2886  0015FA  D7FE               	goto	l187
  2887                           
  2888                           ;main.c: 454: }
  2889                           ;main.c: 455: event++;
  2890  0015FC  0100               	movlb	0	; () banked
  2891  0015FE  2B97               	incf	_event& (0+255),f,b
  2892  001600                     l2236:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 456: }
  2896                           ;main.c: 457: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2897  001600  0E46               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2898  001602  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2899  001604  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  2900  001606  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  2901  001608  0E48               	movlw	low excerciseControl@rightWheelCommandedSpeed
  2902  00160A  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  2903  00160C  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  2904  00160E  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  2905  001610  0E4A               	movlw	low _speedCompensation
  2906  001612  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  2907  001614  0E00               	movlw	high _speedCompensation
  2908  001616  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  2909  001618  EC98  F00F         	call	_limitWheelSpeeds	;wreg free
  2910                           
  2911                           ;main.c: 461: }
  2912                           
  2913                           ;main.c: 458: break;
  2914  00161C  0012               	return	
  2915  00161E                     l2240:
  2916  00161E  0100               	movlb	0	; () banked
  2917  001620  5197               	movf	_event& (0+255),w,b
  2918                           
  2919                           ; Switch size 1, requested type "space"
  2920                           ; Number of cases is 3, Range of values is 0 to 2
  2921                           ; switch strategies available:
  2922                           ; Name         Instructions Cycles
  2923                           ; simple_byte           10     6 (average)
  2924                           ;	Chosen strategy is simple_byte
  2925  001622  0A00               	xorlw	0	; case 0
  2926  001624  B4D8               	btfsc	status,2,c
  2927  001626  D506               	goto	l2138
  2928  001628  0A01               	xorlw	1	; case 1
  2929  00162A  B4D8               	btfsc	status,2,c
  2930  00162C  D602               	goto	l2180
  2931  00162E  0A03               	xorlw	3	; case 2
  2932  001630  A4D8               	btfss	status,2,c
  2933  001632  0012               	return	
  2934  001634  D6F0               	goto	l2212
  2935  001636                     __end_of_excerciseControl:
  2936                           	opt stack 0
  2937                           tblptru	equ	0xFF8
  2938                           tblptrh	equ	0xFF7
  2939                           tblptrl	equ	0xFF6
  2940                           tablat	equ	0xFF5
  2941                           prodh	equ	0xFF4
  2942                           prodl	equ	0xFF3
  2943                           postinc0	equ	0xFEE
  2944                           wreg	equ	0xFE8
  2945                           postdec1	equ	0xFE5
  2946                           fsr1l	equ	0xFE1
  2947                           postinc2	equ	0xFDE
  2948                           postdec2	equ	0xFDD
  2949                           fsr2h	equ	0xFDA
  2950                           fsr2l	equ	0xFD9
  2951                           status	equ	0xFD8
  2952                           
  2953 ;; *************** function _wheelVelocity *****************
  2954 ;; Defined at:
  2955 ;;		line 235 in file "main.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  wheel           1    wreg     unsigned char 
  2958 ;;  speed           2   18[COMRAM] int 
  2959 ;;  speedCompens    2   20[COMRAM] int 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  wheel           1   24[COMRAM] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, status,2, status,0
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2971 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;Total ram usage:        7 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_excerciseControl
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text9
  2986  0023FE                     __ptext9:
  2987                           	opt stack 0
  2988  0023FE                     _wheelVelocity:
  2989                           	opt stack 28
  2990                           
  2991                           ;incstack = 0
  2992                           ;wheelVelocity@wheel stored from wreg
  2993  0023FE  6E19               	movwf	wheelVelocity@wheel,c
  2994                           
  2995                           ;main.c: 237: if(wheel == 'r')
  2996  002400  0E72               	movlw	114
  2997  002402  1819               	xorwf	wheelVelocity@wheel,w,c
  2998  002404  A4D8               	btfss	status,2,c
  2999  002406  D006               	goto	l144
  3000                           
  3001                           ;main.c: 238: {
  3002                           ;main.c: 241: rightWheelCommandedPW = (int) (720 + speed * 1);
  3003  002408  0ED0               	movlw	208
  3004  00240A  2413               	addwf	wheelVelocity@speed,w,c
  3005  00240C  6E44               	movwf	_rightWheelCommandedPW,c
  3006  00240E  0E02               	movlw	2
  3007  002410  2014               	addwfc	wheelVelocity@speed+1,w,c
  3008  002412  6E45               	movwf	_rightWheelCommandedPW+1,c
  3009  002414                     l144:
  3010                           
  3011                           ;main.c: 242: }
  3012                           ;main.c: 244: if(wheel == 'l')
  3013  002414  0E6C               	movlw	108
  3014  002416  1819               	xorwf	wheelVelocity@wheel,w,c
  3015  002418  A4D8               	btfss	status,2,c
  3016  00241A  0012               	return	
  3017                           
  3018                           ;main.c: 245: {
  3019                           ;main.c: 248: leftWheelCommandedPW = (int) (735 - (speedCompensation + speed * 1));
  3020  00241C  5015               	movf	wheelVelocity@speedCompensation,w,c
  3021  00241E  2413               	addwf	wheelVelocity@speed,w,c
  3022  002420  6E17               	movwf	??_wheelVelocity& (0+255),c
  3023  002422  5016               	movf	wheelVelocity@speedCompensation+1,w,c
  3024  002424  2014               	addwfc	wheelVelocity@speed+1,w,c
  3025  002426  6E18               	movwf	(??_wheelVelocity+1)& (0+255),c
  3026  002428  1E17               	comf	??_wheelVelocity,f,c
  3027  00242A  1E18               	comf	??_wheelVelocity+1,f,c
  3028  00242C  4A17               	infsnz	??_wheelVelocity,f,c
  3029  00242E  2A18               	incf	??_wheelVelocity+1,f,c
  3030  002430  0EDF               	movlw	223
  3031  002432  2417               	addwf	??_wheelVelocity,w,c
  3032  002434  6E42               	movwf	_leftWheelCommandedPW,c
  3033  002436  0E02               	movlw	2
  3034  002438  2018               	addwfc	??_wheelVelocity+1,w,c
  3035  00243A  6E43               	movwf	_leftWheelCommandedPW+1,c
  3036  00243C  0012               	return	
  3037  00243E                     __end_of_wheelVelocity:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           postinc2	equ	0xFDE
  3050                           postdec2	equ	0xFDD
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _limitWheelSpeeds *****************
  3056 ;; Defined at:
  3057 ;;		line 207 in file "main.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  leftWheelSpe    2   18[COMRAM] PTR int 
  3060 ;;		 -> excerciseControl@leftWheelCommandedSpeed(2), 
  3061 ;;  rightWheelSp    2   20[COMRAM] PTR int 
  3062 ;;		 -> excerciseControl@rightWheelCommandedSpeed(2), 
  3063 ;;  speedCompens    2   22[COMRAM] PTR int 
  3064 ;;		 -> speedCompensation(2), 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;		None
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      void 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3076 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;Total ram usage:        8 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    1
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_excerciseControl
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text10
  3091  001F30                     __ptext10:
  3092                           	opt stack 0
  3093  001F30                     _limitWheelSpeeds:
  3094                           	opt stack 28
  3095                           
  3096                           ;main.c: 212: if (*leftWheelSpeed >= 100)
  3097                           
  3098                           ;incstack = 0
  3099  001F30  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3100  001F34  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3101  001F38  0E01               	movlw	1
  3102  001F3A  BEDB               	btfsc	plusw2,7,c
  3103  001F3C  D00F               	goto	l1758
  3104  001F3E  0E01               	movlw	1
  3105  001F40  50DB               	movf	plusw2,w,c
  3106  001F42  E104               	bnz	u1070
  3107  001F44  0E64               	movlw	100
  3108  001F46  5CDE               	subwf	postinc2,w,c
  3109  001F48  A0D8               	btfss	status,0,c
  3110  001F4A  D008               	goto	l1758
  3111  001F4C                     u1070:
  3112                           
  3113                           ;main.c: 213: {
  3114                           ;main.c: 214: *leftWheelSpeed = 100;
  3115  001F4C  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3116  001F50  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3117  001F54  0E64               	movlw	100
  3118  001F56  6EDE               	movwf	postinc2,c
  3119  001F58  0E00               	movlw	0
  3120  001F5A  6EDD               	movwf	postdec2,c
  3121  001F5C                     l1758:
  3122                           
  3123                           ;main.c: 215: }
  3124                           ;main.c: 216: if (*leftWheelSpeed <= -100)
  3125  001F5C  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3126  001F60  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3127  001F64  0E01               	movlw	1
  3128  001F66  AEDB               	btfss	plusw2,7,c
  3129  001F68  D00E               	goto	l1762
  3130  001F6A  0E9D               	movlw	157
  3131  001F6C  5CDE               	subwf	postinc2,w,c
  3132  001F6E  0EFF               	movlw	255
  3133  001F70  58DE               	subwfb	postinc2,w,c
  3134  001F72  B0D8               	btfsc	status,0,c
  3135  001F74  D008               	goto	l1762
  3136                           
  3137                           ;main.c: 217: {
  3138                           ;main.c: 218: *leftWheelSpeed = -100;
  3139  001F76  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3140  001F7A  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3141  001F7E  0E9C               	movlw	156
  3142  001F80  6EDE               	movwf	postinc2,c
  3143  001F82  0EFF               	movlw	255
  3144  001F84  6EDD               	movwf	postdec2,c
  3145  001F86                     l1762:
  3146                           
  3147                           ;main.c: 219: }
  3148                           ;main.c: 221: if (*rightWheelSpeed >= 50)
  3149  001F86  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3150  001F8A  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3151  001F8E  0E01               	movlw	1
  3152  001F90  BEDB               	btfsc	plusw2,7,c
  3153  001F92  D00F               	goto	l1766
  3154  001F94  0E01               	movlw	1
  3155  001F96  50DB               	movf	plusw2,w,c
  3156  001F98  E104               	bnz	u1090
  3157  001F9A  0E32               	movlw	50
  3158  001F9C  5CDE               	subwf	postinc2,w,c
  3159  001F9E  A0D8               	btfss	status,0,c
  3160  001FA0  D008               	goto	l1766
  3161  001FA2                     u1090:
  3162                           
  3163                           ;main.c: 222: {
  3164                           ;main.c: 223: *rightWheelSpeed = 60;
  3165  001FA2  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3166  001FA6  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3167  001FAA  0E3C               	movlw	60
  3168  001FAC  6EDE               	movwf	postinc2,c
  3169  001FAE  0E00               	movlw	0
  3170  001FB0  6EDD               	movwf	postdec2,c
  3171  001FB2                     l1766:
  3172                           
  3173                           ;main.c: 224: }
  3174                           ;main.c: 225: if (*rightWheelSpeed <= -50)
  3175  001FB2  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3176  001FB6  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3177  001FBA  0E01               	movlw	1
  3178  001FBC  AEDB               	btfss	plusw2,7,c
  3179  001FBE  D00E               	goto	l1770
  3180  001FC0  0ECF               	movlw	207
  3181  001FC2  5CDE               	subwf	postinc2,w,c
  3182  001FC4  0EFF               	movlw	255
  3183  001FC6  58DE               	subwfb	postinc2,w,c
  3184  001FC8  B0D8               	btfsc	status,0,c
  3185  001FCA  D008               	goto	l1770
  3186                           
  3187                           ;main.c: 226: {
  3188                           ;main.c: 227: *rightWheelSpeed = -50;
  3189  001FCC  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3190  001FD0  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3191  001FD4  0ECE               	movlw	206
  3192  001FD6  6EDE               	movwf	postinc2,c
  3193  001FD8  0EFF               	movlw	255
  3194  001FDA  6EDD               	movwf	postdec2,c
  3195  001FDC                     l1770:
  3196                           
  3197                           ;main.c: 228: }
  3198                           ;main.c: 229: if(*speedCompensation > 50)
  3199  001FDC  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  3200  001FE0  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  3201  001FE4  0E01               	movlw	1
  3202  001FE6  BEDB               	btfsc	plusw2,7,c
  3203  001FE8  0012               	return	
  3204  001FEA  0E01               	movlw	1
  3205  001FEC  50DB               	movf	plusw2,w,c
  3206  001FEE  E104               	bnz	u1110
  3207  001FF0  0E33               	movlw	51
  3208  001FF2  5CDE               	subwf	postinc2,w,c
  3209  001FF4  A0D8               	btfss	status,0,c
  3210  001FF6  0012               	return	
  3211  001FF8                     u1110:
  3212                           
  3213                           ;main.c: 230: {
  3214                           ;main.c: 231: *speedCompensation = 50;
  3215  001FF8  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  3216  001FFC  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  3217  002000  0E32               	movlw	50
  3218  002002  6EDE               	movwf	postinc2,c
  3219  002004  0E00               	movlw	0
  3220  002006  6EDD               	movwf	postdec2,c
  3221  002008  0012               	return	
  3222  00200A                     __end_of_limitWheelSpeeds:
  3223                           	opt stack 0
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postdec1	equ	0xFE5
  3233                           fsr1l	equ	0xFE1
  3234                           postinc2	equ	0xFDE
  3235                           postdec2	equ	0xFDD
  3236                           plusw2	equ	0xFDB
  3237                           fsr2h	equ	0xFDA
  3238                           fsr2l	equ	0xFD9
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function ___lltoft *****************
  3242 ;; Defined at:
  3243 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  c               4   26[COMRAM] unsigned long 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  exp             1   34[COMRAM] unsigned char 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  3   26[COMRAM] float 
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3257 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;Total ram usage:        9 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    2
  3264 ;; This function calls:
  3265 ;;		___ftpack
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;;		_excerciseControl
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text11
  3273  0022B6                     __ptext11:
  3274                           	opt stack 0
  3275  0022B6                     ___lltoft:
  3276                           	opt stack 27
  3277                           
  3278                           ;incstack = 0
  3279  0022B6  0E8E               	movlw	142
  3280  0022B8  6E23               	movwf	___lltoft@exp,c
  3281  0022BA  D006               	goto	l1870
  3282  0022BC                     l1868:
  3283  0022BC  90D8               	bcf	status,0,c
  3284  0022BE  321E               	rrcf	___lltoft@c+3,f,c
  3285  0022C0  321D               	rrcf	___lltoft@c+2,f,c
  3286  0022C2  321C               	rrcf	___lltoft@c+1,f,c
  3287  0022C4  321B               	rrcf	___lltoft@c,f,c
  3288  0022C6  2A23               	incf	___lltoft@exp,f,c
  3289  0022C8                     l1870:
  3290  0022C8  0E00               	movlw	0
  3291  0022CA  141B               	andwf	___lltoft@c,w,c
  3292  0022CC  6E1F               	movwf	??___lltoft& (0+255),c
  3293  0022CE  0E00               	movlw	0
  3294  0022D0  141C               	andwf	___lltoft@c+1,w,c
  3295  0022D2  6E20               	movwf	(??___lltoft+1)& (0+255),c
  3296  0022D4  0E00               	movlw	0
  3297  0022D6  141D               	andwf	___lltoft@c+2,w,c
  3298  0022D8  6E21               	movwf	(??___lltoft+2)& (0+255),c
  3299  0022DA  0EFF               	movlw	255
  3300  0022DC  141E               	andwf	___lltoft@c+3,w,c
  3301  0022DE  6E22               	movwf	(??___lltoft+3)& (0+255),c
  3302  0022E0  501F               	movf	??___lltoft,w,c
  3303  0022E2  1020               	iorwf	??___lltoft+1,w,c
  3304  0022E4  1021               	iorwf	??___lltoft+2,w,c
  3305  0022E6  1022               	iorwf	??___lltoft+3,w,c
  3306  0022E8  A4D8               	btfss	status,2,c
  3307  0022EA  D7E8               	goto	l1868
  3308  0022EC  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  3309  0022F0  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  3310  0022F4  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  3311  0022F8  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  3312  0022FC  0E00               	movlw	0
  3313  0022FE  6E17               	movwf	___ftpack@sign,c
  3314  002300  EC68  F010         	call	___ftpack	;wreg free
  3315  002304  C013  F01B         	movff	?___ftpack,?___lltoft
  3316  002308  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  3317  00230C  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  3318  002310  0012               	return	
  3319  002312                     __end_of___lltoft:
  3320                           	opt stack 0
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           prodh	equ	0xFF4
  3326                           prodl	equ	0xFF3
  3327                           postinc0	equ	0xFEE
  3328                           wreg	equ	0xFE8
  3329                           postdec1	equ	0xFE5
  3330                           fsr1l	equ	0xFE1
  3331                           postinc2	equ	0xFDE
  3332                           postdec2	equ	0xFDD
  3333                           plusw2	equ	0xFDB
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function ___ftmul *****************
  3339 ;; Defined at:
  3340 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  f1              3   35[COMRAM] float 
  3343 ;;  f2              3   38[COMRAM] float 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  3346 ;;  sign            1   49[COMRAM] unsigned char 
  3347 ;;  cntr            1   48[COMRAM] unsigned char 
  3348 ;;  exp             1   44[COMRAM] unsigned char 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  3   35[COMRAM] float 
  3351 ;; Registers used:
  3352 ;;		wreg, status,2, status,0, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3358 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;Total ram usage:       15 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; Hardware stack levels required when called:    2
  3365 ;; This function calls:
  3366 ;;		___ftpack
  3367 ;; This function is called by:
  3368 ;;		_main
  3369 ;;		_excerciseControl
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text12
  3374  001D56                     __ptext12:
  3375                           	opt stack 0
  3376  001D56                     ___ftmul:
  3377                           	opt stack 27
  3378                           
  3379                           ;incstack = 0
  3380  001D56  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  3381  001D5A  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  3382  001D5C  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  3383  001D5E  3425               	rlcf	___ftmul@f1+1,w,c
  3384  001D60  362A               	rlcf	??___ftmul& (0+255),f,c
  3385  001D62  E301               	bnc	u1161
  3386  001D64  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  3387  001D66                     u1161:
  3388  001D66  502A               	movf	??___ftmul,w,c
  3389  001D68  6E2D               	movwf	___ftmul@exp,c
  3390  001D6A  502D               	movf	___ftmul@exp,w,c
  3391  001D6C  A4D8               	btfss	status,2,c
  3392  001D6E  D007               	goto	l1806
  3393  001D70  0E00               	movlw	0
  3394  001D72  6E24               	movwf	?___ftmul,c
  3395  001D74  0E00               	movlw	0
  3396  001D76  6E25               	movwf	?___ftmul+1,c
  3397  001D78  0E00               	movlw	0
  3398  001D7A  6E26               	movwf	?___ftmul+2,c
  3399  001D7C  0012               	return	
  3400  001D7E                     l1806:
  3401  001D7E  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  3402  001D82  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  3403  001D84  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  3404  001D86  3428               	rlcf	___ftmul@f2+1,w,c
  3405  001D88  362A               	rlcf	??___ftmul& (0+255),f,c
  3406  001D8A  E301               	bnc	u1181
  3407  001D8C  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  3408  001D8E                     u1181:
  3409  001D8E  502A               	movf	??___ftmul,w,c
  3410  001D90  6E32               	movwf	___ftmul@sign,c
  3411  001D92  5032               	movf	___ftmul@sign,w,c
  3412  001D94  A4D8               	btfss	status,2,c
  3413  001D96  D007               	goto	l1812
  3414  001D98  0E00               	movlw	0
  3415  001D9A  6E24               	movwf	?___ftmul,c
  3416  001D9C  0E00               	movlw	0
  3417  001D9E  6E25               	movwf	?___ftmul+1,c
  3418  001DA0  0E00               	movlw	0
  3419  001DA2  6E26               	movwf	?___ftmul+2,c
  3420  001DA4  0012               	return	
  3421  001DA6                     l1812:
  3422  001DA6  5032               	movf	___ftmul@sign,w,c
  3423  001DA8  0F7B               	addlw	123
  3424  001DAA  262D               	addwf	___ftmul@exp,f,c
  3425  001DAC  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  3426  001DB0  5029               	movf	___ftmul@f2+2,w,c
  3427  001DB2  1A32               	xorwf	___ftmul@sign,f,c
  3428  001DB4  0E80               	movlw	128
  3429  001DB6  1632               	andwf	___ftmul@sign,f,c
  3430  001DB8  8E25               	bsf	___ftmul@f1+1,7,c
  3431  001DBA  8E28               	bsf	___ftmul@f2+1,7,c
  3432  001DBC  0EFF               	movlw	255
  3433  001DBE  1627               	andwf	___ftmul@f2,f,c
  3434  001DC0  0EFF               	movlw	255
  3435  001DC2  1628               	andwf	___ftmul@f2+1,f,c
  3436  001DC4  0E00               	movlw	0
  3437  001DC6  1629               	andwf	___ftmul@f2+2,f,c
  3438  001DC8  0E00               	movlw	0
  3439  001DCA  6E2E               	movwf	___ftmul@f3_as_product,c
  3440  001DCC  0E00               	movlw	0
  3441  001DCE  6E2F               	movwf	___ftmul@f3_as_product+1,c
  3442  001DD0  0E00               	movlw	0
  3443  001DD2  6E30               	movwf	___ftmul@f3_as_product+2,c
  3444  001DD4  0E07               	movlw	7
  3445  001DD6  6E31               	movwf	___ftmul@cntr,c
  3446  001DD8                     l1826:
  3447  001DD8  A024               	btfss	___ftmul@f1,0,c
  3448  001DDA  D006               	goto	l1830
  3449  001DDC  5027               	movf	___ftmul@f2,w,c
  3450  001DDE  262E               	addwf	___ftmul@f3_as_product,f,c
  3451  001DE0  5028               	movf	___ftmul@f2+1,w,c
  3452  001DE2  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  3453  001DE4  5029               	movf	___ftmul@f2+2,w,c
  3454  001DE6  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  3455  001DE8                     l1830:
  3456  001DE8  90D8               	bcf	status,0,c
  3457  001DEA  3226               	rrcf	___ftmul@f1+2,f,c
  3458  001DEC  3225               	rrcf	___ftmul@f1+1,f,c
  3459  001DEE  3224               	rrcf	___ftmul@f1,f,c
  3460  001DF0  90D8               	bcf	status,0,c
  3461  001DF2  3627               	rlcf	___ftmul@f2,f,c
  3462  001DF4  3628               	rlcf	___ftmul@f2+1,f,c
  3463  001DF6  3629               	rlcf	___ftmul@f2+2,f,c
  3464  001DF8  2E31               	decfsz	___ftmul@cntr,f,c
  3465  001DFA  D7EE               	goto	l1826
  3466  001DFC  0E09               	movlw	9
  3467  001DFE  6E31               	movwf	___ftmul@cntr,c
  3468  001E00                     l1836:
  3469  001E00  A024               	btfss	___ftmul@f1,0,c
  3470  001E02  D006               	goto	l1840
  3471  001E04  5027               	movf	___ftmul@f2,w,c
  3472  001E06  262E               	addwf	___ftmul@f3_as_product,f,c
  3473  001E08  5028               	movf	___ftmul@f2+1,w,c
  3474  001E0A  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  3475  001E0C  5029               	movf	___ftmul@f2+2,w,c
  3476  001E0E  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  3477  001E10                     l1840:
  3478  001E10  90D8               	bcf	status,0,c
  3479  001E12  3226               	rrcf	___ftmul@f1+2,f,c
  3480  001E14  3225               	rrcf	___ftmul@f1+1,f,c
  3481  001E16  3224               	rrcf	___ftmul@f1,f,c
  3482  001E18  90D8               	bcf	status,0,c
  3483  001E1A  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  3484  001E1C  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  3485  001E1E  322E               	rrcf	___ftmul@f3_as_product,f,c
  3486  001E20  2E31               	decfsz	___ftmul@cntr,f,c
  3487  001E22  D7EE               	goto	l1836
  3488  001E24  C02E  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3489  001E28  C02F  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3490  001E2C  C030  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3491  001E30  C02D  F016         	movff	___ftmul@exp,___ftpack@exp
  3492  001E34  C032  F017         	movff	___ftmul@sign,___ftpack@sign
  3493  001E38  EC68  F010         	call	___ftpack	;wreg free
  3494  001E3C  C013  F024         	movff	?___ftpack,?___ftmul
  3495  001E40  C014  F025         	movff	?___ftpack+1,?___ftmul+1
  3496  001E44  C015  F026         	movff	?___ftpack+2,?___ftmul+2
  3497  001E48  0012               	return	
  3498  001E4A                     __end_of___ftmul:
  3499                           	opt stack 0
  3500                           tblptru	equ	0xFF8
  3501                           tblptrh	equ	0xFF7
  3502                           tblptrl	equ	0xFF6
  3503                           tablat	equ	0xFF5
  3504                           prodh	equ	0xFF4
  3505                           prodl	equ	0xFF3
  3506                           postinc0	equ	0xFEE
  3507                           wreg	equ	0xFE8
  3508                           postdec1	equ	0xFE5
  3509                           fsr1l	equ	0xFE1
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           plusw2	equ	0xFDB
  3513                           fsr2h	equ	0xFDA
  3514                           fsr2l	equ	0xFD9
  3515                           status	equ	0xFD8
  3516                           
  3517 ;; *************** function ___ftge *****************
  3518 ;; Defined at:
  3519 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  ff1             3   50[COMRAM] float 
  3522 ;;  ff2             3   53[COMRAM] float 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;		None               void
  3527 ;; Registers used:
  3528 ;;		wreg, status,2, status,0
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        9 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    1
  3541 ;; This function calls:
  3542 ;;		Nothing
  3543 ;; This function is called by:
  3544 ;;		_excerciseControl
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text13
  3549  002226                     __ptext13:
  3550                           	opt stack 0
  3551  002226                     ___ftge:
  3552                           	opt stack 28
  3553                           
  3554                           ;incstack = 0
  3555  002226  AE35               	btfss	___ftge@ff1+2,7,c
  3556  002228  D016               	goto	l1852
  3557  00222A  C033  F039         	movff	___ftge@ff1,??___ftge
  3558  00222E  C034  F03A         	movff	___ftge@ff1+1,??___ftge+1
  3559  002232  C035  F03B         	movff	___ftge@ff1+2,??___ftge+2
  3560  002236  1E39               	comf	??___ftge,f,c
  3561  002238  1E3A               	comf	??___ftge+1,f,c
  3562  00223A  1E3B               	comf	??___ftge+2,f,c
  3563  00223C  2A39               	incf	??___ftge,f,c
  3564  00223E  0E00               	movlw	0
  3565  002240  223A               	addwfc	??___ftge+1,f,c
  3566  002242  223B               	addwfc	??___ftge+2,f,c
  3567  002244  0E00               	movlw	0
  3568  002246  2439               	addwf	??___ftge,w,c
  3569  002248  6E33               	movwf	___ftge@ff1,c
  3570  00224A  0E00               	movlw	0
  3571  00224C  203A               	addwfc	??___ftge+1,w,c
  3572  00224E  6E34               	movwf	___ftge@ff1+1,c
  3573  002250  0E80               	movlw	128
  3574  002252  203B               	addwfc	??___ftge+2,w,c
  3575  002254  6E35               	movwf	___ftge@ff1+2,c
  3576  002256                     l1852:
  3577  002256  AE38               	btfss	___ftge@ff2+2,7,c
  3578  002258  D016               	goto	l1856
  3579  00225A  C036  F039         	movff	___ftge@ff2,??___ftge
  3580  00225E  C037  F03A         	movff	___ftge@ff2+1,??___ftge+1
  3581  002262  C038  F03B         	movff	___ftge@ff2+2,??___ftge+2
  3582  002266  1E39               	comf	??___ftge,f,c
  3583  002268  1E3A               	comf	??___ftge+1,f,c
  3584  00226A  1E3B               	comf	??___ftge+2,f,c
  3585  00226C  2A39               	incf	??___ftge,f,c
  3586  00226E  0E00               	movlw	0
  3587  002270  223A               	addwfc	??___ftge+1,f,c
  3588  002272  223B               	addwfc	??___ftge+2,f,c
  3589  002274  0E00               	movlw	0
  3590  002276  2439               	addwf	??___ftge,w,c
  3591  002278  6E36               	movwf	___ftge@ff2,c
  3592  00227A  0E00               	movlw	0
  3593  00227C  203A               	addwfc	??___ftge+1,w,c
  3594  00227E  6E37               	movwf	___ftge@ff2+1,c
  3595  002280  0E80               	movlw	128
  3596  002282  203B               	addwfc	??___ftge+2,w,c
  3597  002284  6E38               	movwf	___ftge@ff2+2,c
  3598  002286                     l1856:
  3599  002286  0E00               	movlw	0
  3600  002288  1A33               	xorwf	___ftge@ff1,f,c
  3601  00228A  0E00               	movlw	0
  3602  00228C  1A34               	xorwf	___ftge@ff1+1,f,c
  3603  00228E  0E80               	movlw	128
  3604  002290  1A35               	xorwf	___ftge@ff1+2,f,c
  3605  002292  0E00               	movlw	0
  3606  002294  1A36               	xorwf	___ftge@ff2,f,c
  3607  002296  0E00               	movlw	0
  3608  002298  1A37               	xorwf	___ftge@ff2+1,f,c
  3609  00229A  0E80               	movlw	128
  3610  00229C  1A38               	xorwf	___ftge@ff2+2,f,c
  3611  00229E  5036               	movf	___ftge@ff2,w,c
  3612  0022A0  5C33               	subwf	___ftge@ff1,w,c
  3613  0022A2  5037               	movf	___ftge@ff2+1,w,c
  3614  0022A4  5834               	subwfb	___ftge@ff1+1,w,c
  3615  0022A6  5038               	movf	___ftge@ff2+2,w,c
  3616  0022A8  5835               	subwfb	___ftge@ff1+2,w,c
  3617  0022AA  B0D8               	btfsc	status,0,c
  3618  0022AC  D002               	goto	l1862
  3619  0022AE  90D8               	bcf	status,0,c
  3620  0022B0  0012               	return	
  3621  0022B2                     l1862:
  3622  0022B2  80D8               	bsf	status,0,c
  3623  0022B4  0012               	return	
  3624  0022B6                     __end_of___ftge:
  3625                           	opt stack 0
  3626                           tblptru	equ	0xFF8
  3627                           tblptrh	equ	0xFF7
  3628                           tblptrl	equ	0xFF6
  3629                           tablat	equ	0xFF5
  3630                           prodh	equ	0xFF4
  3631                           prodl	equ	0xFF3
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1l	equ	0xFE1
  3636                           postinc2	equ	0xFDE
  3637                           postdec2	equ	0xFDD
  3638                           plusw2	equ	0xFDB
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           status	equ	0xFD8
  3642                           
  3643 ;; *************** function _configureTimers *****************
  3644 ;; Defined at:
  3645 ;;		line 464 in file "main.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;		None
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;		None
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg, status,2
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;Total ram usage:        0 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    1
  3666 ;; This function calls:
  3667 ;;		Nothing
  3668 ;; This function is called by:
  3669 ;;		_main
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text14
  3674  00217E                     __ptext14:
  3675                           	opt stack 0
  3676  00217E                     _configureTimers:
  3677                           	opt stack 29
  3678                           
  3679                           ;main.c: 466: (INTCONbits.GIE = 0);
  3680                           
  3681                           ;incstack = 0
  3682  00217E  9EF2               	bcf	intcon,7,c	;volatile
  3683                           
  3684                           ;main.c: 468: T1CON = 0;
  3685  002180  0E00               	movlw	0
  3686  002182  6ECD               	movwf	4045,c	;volatile
  3687                           
  3688                           ;main.c: 469: T1CONbits.TMR1CS = 0b00;
  3689  002184  0E3F               	movlw	-193
  3690  002186  16CD               	andwf	4045,f,c	;volatile
  3691                           
  3692                           ;main.c: 470: T1CONbits.T1CKPS = 0b10;
  3693  002188  50CD               	movf	4045,w,c	;volatile
  3694  00218A  0BCF               	andlw	-49
  3695  00218C  0920               	iorlw	32
  3696  00218E  6ECD               	movwf	4045,c	;volatile
  3697                           
  3698                           ;main.c: 471: T5CON = 0;
  3699  002190  0E00               	movlw	0
  3700  002192  010F               	movlb	15	; () banked
  3701  002194  6F4E               	movwf	78,b	;volatile
  3702                           
  3703                           ;main.c: 472: T5CONbits.TMR5CS = 0b00;
  3704  002196  0E3F               	movlw	-193
  3705  002198  010F               	movlb	15	; () banked
  3706  00219A  174E               	andwf	78,f,b	;volatile
  3707                           
  3708                           ;main.c: 473: T5CONbits.T5CKPS = 0b10;
  3709  00219C  010F               	movlb	15	; () banked
  3710  00219E  514E               	movf	78,w,b	;volatile
  3711  0021A0  0BCF               	andlw	-49
  3712  0021A2  0920               	iorlw	32
  3713  0021A4  6F4E               	movwf	78,b	;volatile
  3714                           
  3715                           ;main.c: 478: CCP3CON = 0;
  3716  0021A6  0E00               	movlw	0
  3717  0021A8  010F               	movlb	15	; () banked
  3718  0021AA  6F5D               	movwf	93,b	;volatile
  3719                           
  3720                           ;main.c: 479: CCP2CON = 0;
  3721  0021AC  0E00               	movlw	0
  3722  0021AE  6E66               	movwf	3942,c	;volatile
  3723                           
  3724                           ;main.c: 480: CCP3CONbits.CCP3M = 0b1010;
  3725  0021B0  010F               	movlb	15	; () banked
  3726  0021B2  515D               	movf	93,w,b	;volatile
  3727  0021B4  0BF0               	andlw	-16
  3728  0021B6  090A               	iorlw	10
  3729  0021B8  6F5D               	movwf	93,b	;volatile
  3730                           
  3731                           ;main.c: 481: CCP2CONbits.CCP2M = 0b1010;
  3732  0021BA  5066               	movf	3942,w,c	;volatile
  3733  0021BC  0BF0               	andlw	-16
  3734  0021BE  090A               	iorlw	10
  3735  0021C0  6E66               	movwf	3942,c	;volatile
  3736                           
  3737                           ;main.c: 488: CCPTMRS0bits.C3TSEL = 0;
  3738  0021C2  0E3F               	movlw	-193
  3739  0021C4  010F               	movlb	15	; () banked
  3740  0021C6  1749               	andwf	73,f,b	;volatile
  3741                           
  3742                           ;main.c: 489: CCPTMRS0bits.C2TSEL = 0b10;
  3743  0021C8  010F               	movlb	15	; () banked
  3744  0021CA  5149               	movf	73,w,b	;volatile
  3745  0021CC  0BE7               	andlw	-25
  3746  0021CE  0910               	iorlw	16
  3747  0021D0  6F49               	movwf	73,b	;volatile
  3748                           
  3749                           ;main.c: 491: CCPR3 = 675;
  3750  0021D2  0E02               	movlw	2
  3751  0021D4  010F               	movlb	15	; () banked
  3752  0021D6  6F5F               	movwf	95,b	;volatile
  3753  0021D8  0EA3               	movlw	163
  3754  0021DA  6F5E               	movwf	94,b	;volatile
  3755                           
  3756                           ;main.c: 492: CCPR2 = 675;
  3757  0021DC  0E02               	movlw	2
  3758  0021DE  6E68               	movwf	3944,c	;volatile
  3759  0021E0  0EA3               	movlw	163
  3760  0021E2  6E67               	movwf	3943,c	;volatile
  3761                           
  3762                           ; BSR set to: 15
  3763                           ;main.c: 494: CCP3IE = 1;
  3764  0021E4  807A               	bsf	3962,0,c	;volatile
  3765                           
  3766                           ; BSR set to: 15
  3767                           ;main.c: 495: CCP2IE = 1;
  3768  0021E6  80A0               	bsf	4000,0,c	;volatile
  3769                           
  3770                           ; BSR set to: 15
  3771                           ;main.c: 498: PIE1bits.TMR2IE = 1;
  3772  0021E8  829D               	bsf	3997,1,c	;volatile
  3773                           
  3774                           ;main.c: 499: T2CON = 0;
  3775  0021EA  0E00               	movlw	0
  3776  0021EC  6EBA               	movwf	4026,c	;volatile
  3777                           
  3778                           ;main.c: 500: T2CONbits.T2CKPS = 0b10;
  3779  0021EE  50BA               	movf	4026,w,c	;volatile
  3780  0021F0  0BFC               	andlw	-4
  3781  0021F2  0902               	iorlw	2
  3782  0021F4  6EBA               	movwf	4026,c	;volatile
  3783                           
  3784                           ; BSR set to: 15
  3785                           ;main.c: 501: T2CONbits.TMR2ON = 1;
  3786  0021F6  84BA               	bsf	4026,2,c	;volatile
  3787                           
  3788                           ;main.c: 502: PR2 = 125;
  3789  0021F8  0E7D               	movlw	125
  3790  0021FA  6EBB               	movwf	4027,c	;volatile
  3791                           
  3792                           ; BSR set to: 15
  3793                           ;main.c: 508: INTCONbits.GIE = 1;
  3794  0021FC  8EF2               	bsf	intcon,7,c	;volatile
  3795                           
  3796                           ; BSR set to: 15
  3797                           ;main.c: 509: INTCONbits.PEIE = 1;
  3798  0021FE  8CF2               	bsf	intcon,6,c	;volatile
  3799                           
  3800                           ;main.c: 511: TMR1 = 0;
  3801  002200  0E00               	movlw	0
  3802  002202  6ECF               	movwf	4047,c	;volatile
  3803  002204  0E00               	movlw	0
  3804  002206  6ECE               	movwf	4046,c	;volatile
  3805                           
  3806                           ;main.c: 512: TMR5 = 0;
  3807  002208  0E00               	movlw	0
  3808  00220A  010F               	movlb	15	; () banked
  3809  00220C  6F50               	movwf	80,b	;volatile
  3810  00220E  0E00               	movlw	0
  3811  002210  6F4F               	movwf	79,b	;volatile
  3812                           
  3813                           ; BSR set to: 15
  3814                           ;main.c: 513: TMR1ON = 1;
  3815  002212  80CD               	bsf	4045,0,c	;volatile
  3816                           
  3817                           ; BSR set to: 15
  3818                           ;main.c: 514: TMR5ON = 1;
  3819  002214  010F               	movlb	15	; () banked
  3820  002216  814E               	bsf	78,0,b	;volatile
  3821                           
  3822                           ; BSR set to: 15
  3823                           ;main.c: 516: (INTCONbits.GIE = 1);
  3824  002218  8EF2               	bsf	intcon,7,c	;volatile
  3825                           
  3826                           ; BSR set to: 15
  3827                           ;main.c: 518: TRISDbits.TRISD0 = 0;
  3828  00221A  9095               	bcf	3989,0,c	;volatile
  3829                           
  3830                           ; BSR set to: 15
  3831                           ;main.c: 519: TRISDbits.TRISD1 = 0;
  3832  00221C  9295               	bcf	3989,1,c	;volatile
  3833                           
  3834                           ;main.c: 520: ANSELD = 0;
  3835  00221E  0E00               	movlw	0
  3836  002220  010F               	movlb	15	; () banked
  3837  002222  6F3B               	movwf	59,b	;volatile
  3838                           
  3839                           ; BSR set to: 15
  3840  002224  0012               	return		;funcret
  3841  002226                     __end_of_configureTimers:
  3842                           	opt stack 0
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           intcon	equ	0xFF2
  3850                           postinc0	equ	0xFEE
  3851                           wreg	equ	0xFE8
  3852                           postdec1	equ	0xFE5
  3853                           fsr1l	equ	0xFE1
  3854                           postinc2	equ	0xFDE
  3855                           postdec2	equ	0xFDD
  3856                           plusw2	equ	0xFDB
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _configureComparators *****************
  3862 ;; Defined at:
  3863 ;;		line 524 in file "main.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;Total ram usage:        0 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    1
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text15
  3892  002312                     __ptext15:
  3893                           	opt stack 0
  3894  002312                     _configureComparators:
  3895                           	opt stack 29
  3896                           
  3897                           ;main.c: 528: VREFCON0bits.FVREN=1;
  3898                           
  3899                           ; BSR set to: 15
  3900                           ;incstack = 0
  3901  002312  010F               	movlb	15	; () banked
  3902  002314  8F42               	bsf	66,7,b	;volatile
  3903                           
  3904                           ;main.c: 529: VREFCON0bits.FVRST=0;
  3905  002316  010F               	movlb	15	; () banked
  3906  002318  9D42               	bcf	66,6,b	;volatile
  3907                           
  3908                           ; BSR set to: 15
  3909                           ;main.c: 530: VREFCON0bits.FVRS=0b01;
  3910  00231A  010F               	movlb	15	; () banked
  3911  00231C  5142               	movf	66,w,b	;volatile
  3912  00231E  0BCF               	andlw	-49
  3913  002320  0910               	iorlw	16
  3914  002322  6F42               	movwf	66,b	;volatile
  3915                           
  3916                           ; BSR set to: 15
  3917                           ;main.c: 532: TRISBbits.TRISB1 = 1;
  3918  002324  8293               	bsf	3987,1,c	;volatile
  3919                           
  3920                           ; BSR set to: 15
  3921                           ;main.c: 533: ANSELBbits.ANSB1 = 1;
  3922  002326  010F               	movlb	15	; () banked
  3923  002328  8339               	bsf	57,1,b	;volatile
  3924                           
  3925                           ; BSR set to: 15
  3926                           ;main.c: 536: CM2CON0bits.C2ON = 1;
  3927  00232A  8E78               	bsf	3960,7,c	;volatile
  3928                           
  3929                           ; BSR set to: 15
  3930                           ;main.c: 537: CM2CON0bits.C2OUT = 0;
  3931  00232C  9C78               	bcf	3960,6,c	;volatile
  3932                           
  3933                           ; BSR set to: 15
  3934                           ;main.c: 538: CM2CON0bits.C2OE = 0;
  3935  00232E  9A78               	bcf	3960,5,c	;volatile
  3936                           
  3937                           ; BSR set to: 15
  3938                           ;main.c: 539: CM2CON0bits.C2POL = 1;
  3939  002330  8878               	bsf	3960,4,c	;volatile
  3940                           
  3941                           ; BSR set to: 15
  3942                           ;main.c: 540: CM2CON0bits.C2SP = 1;
  3943  002332  8678               	bsf	3960,3,c	;volatile
  3944                           
  3945                           ; BSR set to: 15
  3946                           ;main.c: 541: CM2CON0bits.C2R = 1;
  3947  002334  8478               	bsf	3960,2,c	;volatile
  3948                           
  3949                           ;main.c: 542: CM2CON0bits.C2CH = 0b11;
  3950  002336  0E03               	movlw	3
  3951  002338  1278               	iorwf	3960,f,c	;volatile
  3952                           
  3953                           ; BSR set to: 15
  3954                           ;main.c: 544: CM2CON1bits.C2RSEL = 1;
  3955  00233A  8877               	bsf	3959,4,c	;volatile
  3956                           
  3957                           ; BSR set to: 15
  3958                           ;main.c: 545: CM2CON1bits.C2HYS = 0;
  3959  00233C  9477               	bcf	3959,2,c	;volatile
  3960                           
  3961                           ; BSR set to: 15
  3962                           ;main.c: 546: CM2CON1bits.C2SYNC = 0;
  3963  00233E  9077               	bcf	3959,0,c	;volatile
  3964                           
  3965                           ; BSR set to: 15
  3966                           ;main.c: 552: TRISBbits.TRISB3 = 1;
  3967  002340  8693               	bsf	3987,3,c	;volatile
  3968                           
  3969                           ; BSR set to: 15
  3970                           ;main.c: 553: ANSELBbits.ANSB3 = 1;
  3971  002342  010F               	movlb	15	; () banked
  3972  002344  8739               	bsf	57,3,b	;volatile
  3973                           
  3974                           ; BSR set to: 15
  3975                           ;main.c: 556: CM1CON0bits.C1ON = 1;
  3976  002346  8E79               	bsf	3961,7,c	;volatile
  3977                           
  3978                           ; BSR set to: 15
  3979                           ;main.c: 557: CM1CON0bits.C1OUT = 0;
  3980  002348  9C79               	bcf	3961,6,c	;volatile
  3981                           
  3982                           ; BSR set to: 15
  3983                           ;main.c: 558: CM1CON0bits.C1OE = 0;
  3984  00234A  9A79               	bcf	3961,5,c	;volatile
  3985                           
  3986                           ; BSR set to: 15
  3987                           ;main.c: 559: CM1CON0bits.C1POL = 1;
  3988  00234C  8879               	bsf	3961,4,c	;volatile
  3989                           
  3990                           ; BSR set to: 15
  3991                           ;main.c: 560: CM1CON0bits.C1SP = 1;
  3992  00234E  8679               	bsf	3961,3,c	;volatile
  3993                           
  3994                           ; BSR set to: 15
  3995                           ;main.c: 561: CM1CON0bits.C1R = 1;
  3996  002350  8479               	bsf	3961,2,c	;volatile
  3997                           
  3998                           ;main.c: 562: CM1CON0bits.C1CH = 0b10;
  3999  002352  5079               	movf	3961,w,c	;volatile
  4000  002354  0BFC               	andlw	-4
  4001  002356  0902               	iorlw	2
  4002  002358  6E79               	movwf	3961,c	;volatile
  4003                           
  4004                           ; BSR set to: 15
  4005                           ;main.c: 564: CM2CON1bits.C1RSEL = 1;
  4006  00235A  8A77               	bsf	3959,5,c	;volatile
  4007                           
  4008                           ; BSR set to: 15
  4009                           ;main.c: 565: CM2CON1bits.C1HYS = 0;
  4010  00235C  9677               	bcf	3959,3,c	;volatile
  4011                           
  4012                           ; BSR set to: 15
  4013                           ;main.c: 566: CM2CON1bits.C1SYNC = 0;
  4014  00235E  9277               	bcf	3959,1,c	;volatile
  4015                           
  4016                           ; BSR set to: 15
  4017                           ;main.c: 569: PIR2bits.C1IF = 0;
  4018  002360  9CA1               	bcf	4001,6,c	;volatile
  4019                           
  4020                           ; BSR set to: 15
  4021                           ;main.c: 570: PIR2bits.C2IF = 0;
  4022  002362  9AA1               	bcf	4001,5,c	;volatile
  4023                           
  4024                           ; BSR set to: 15
  4025                           ;main.c: 571: PIE2bits.C2IE = 1;
  4026  002364  8AA0               	bsf	4000,5,c	;volatile
  4027                           
  4028                           ; BSR set to: 15
  4029                           ;main.c: 572: PIE2bits.C1IE = 1;
  4030  002366  8CA0               	bsf	4000,6,c	;volatile
  4031                           
  4032                           ; BSR set to: 15
  4033  002368  0012               	return		;funcret
  4034  00236A                     __end_of_configureComparators:
  4035                           	opt stack 0
  4036                           tblptru	equ	0xFF8
  4037                           tblptrh	equ	0xFF7
  4038                           tblptrl	equ	0xFF6
  4039                           tablat	equ	0xFF5
  4040                           prodh	equ	0xFF4
  4041                           prodl	equ	0xFF3
  4042                           intcon	equ	0xFF2
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           postdec1	equ	0xFE5
  4046                           fsr1l	equ	0xFE1
  4047                           postinc2	equ	0xFDE
  4048                           postdec2	equ	0xFDD
  4049                           plusw2	equ	0xFDB
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function ___fttol *****************
  4055 ;; Defined at:
  4056 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  f1              3    0[BANK0 ] float 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  lval            4   10[BANK0 ] unsigned long 
  4061 ;;  exp1            1   14[BANK0 ] unsigned char 
  4062 ;;  sign1           1    9[BANK0 ] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  4    0[BANK0 ] long 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4072 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;Total ram usage:       15 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_main
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text16
  4087  001C12                     __ptext16:
  4088                           	opt stack 0
  4089  001C12                     ___fttol:
  4090                           	opt stack 29
  4091                           
  4092                           ; BSR set to: 15
  4093                           ;incstack = 0
  4094  001C12  C062  F064         	movff	___fttol@f1+2,??___fttol
  4095  001C16  0100               	movlb	0	; () banked
  4096  001C18  6B65               	clrf	(??___fttol+1)& (0+255),b
  4097  001C1A  6B66               	clrf	(??___fttol+2)& (0+255),b
  4098  001C1C  0100               	movlb	0	; () banked
  4099  001C1E  3561               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4100  001C20  0100               	movlb	0	; () banked
  4101  001C22  3764               	rlcf	??___fttol& (0+255),f,b
  4102  001C24  E301               	bnc	u1951
  4103  001C26  8165               	bsf	(??___fttol+1)& (0+255),0,b
  4104  001C28                     u1951:
  4105  001C28  0100               	movlb	0	; () banked
  4106  001C2A  5164               	movf	??___fttol& (0+255),w,b
  4107  001C2C  0100               	movlb	0	; () banked
  4108  001C2E  6F6E               	movwf	___fttol@exp1& (0+255),b
  4109  001C30  0100               	movlb	0	; () banked
  4110  001C32  516E               	movf	___fttol@exp1& (0+255),w,b
  4111  001C34  A4D8               	btfss	status,2,c
  4112  001C36  D00A               	goto	l2476
  4113                           
  4114                           ; BSR set to: 0
  4115  001C38  0E00               	movlw	0
  4116  001C3A  0100               	movlb	0	; () banked
  4117  001C3C  6F60               	movwf	?___fttol& (0+255),b
  4118  001C3E  0E00               	movlw	0
  4119  001C40  6F61               	movwf	(?___fttol+1)& (0+255),b
  4120  001C42  0E00               	movlw	0
  4121  001C44  6F62               	movwf	(?___fttol+2)& (0+255),b
  4122  001C46  0E00               	movlw	0
  4123  001C48  6F63               	movwf	(?___fttol+3)& (0+255),b
  4124                           
  4125                           ; BSR set to: 0
  4126  001C4A  0012               	return	
  4127  001C4C                     l2476:
  4128                           
  4129                           ; BSR set to: 0
  4130  001C4C  0E17               	movlw	23
  4131  001C4E  0100               	movlb	0	; () banked
  4132  001C50  6F64               	movwf	??___fttol& (0+255),b
  4133  001C52  C060  F065         	movff	___fttol@f1,??___fttol+1
  4134  001C56  C061  F066         	movff	___fttol@f1+1,??___fttol+2
  4135  001C5A  C062  F067         	movff	___fttol@f1+2,??___fttol+3
  4136  001C5E  0100               	movlb	0	; () banked
  4137  001C60  2964               	incf	??___fttol& (0+255),w,b
  4138  001C62  0100               	movlb	0	; () banked
  4139  001C64  6F68               	movwf	(??___fttol+4)& (0+255),b
  4140  001C66  D005               	goto	u1970
  4141  001C68                     u1975:
  4142  001C68  0100               	movlb	0	; () banked
  4143  001C6A  90D8               	bcf	status,0,c
  4144  001C6C  3367               	rrcf	(??___fttol+3)& (0+255),f,b
  4145  001C6E  3366               	rrcf	(??___fttol+2)& (0+255),f,b
  4146  001C70  3365               	rrcf	(??___fttol+1)& (0+255),f,b
  4147  001C72                     u1970:
  4148  001C72  0100               	movlb	0	; () banked
  4149  001C74  2F68               	decfsz	(??___fttol+4)& (0+255),f,b
  4150  001C76  D7F8               	goto	u1975
  4151  001C78  0100               	movlb	0	; () banked
  4152  001C7A  5165               	movf	(??___fttol+1)& (0+255),w,b
  4153  001C7C  0100               	movlb	0	; () banked
  4154  001C7E  6F69               	movwf	___fttol@sign1& (0+255),b
  4155                           
  4156                           ; BSR set to: 0
  4157  001C80  0100               	movlb	0	; () banked
  4158  001C82  8F61               	bsf	(___fttol@f1+1)& (0+255),7,b
  4159                           
  4160                           ; BSR set to: 0
  4161  001C84  0EFF               	movlw	255
  4162  001C86  0100               	movlb	0	; () banked
  4163  001C88  1760               	andwf	___fttol@f1& (0+255),f,b
  4164  001C8A  0EFF               	movlw	255
  4165  001C8C  0100               	movlb	0	; () banked
  4166  001C8E  1761               	andwf	(___fttol@f1+1)& (0+255),f,b
  4167  001C90  0E00               	movlw	0
  4168  001C92  0100               	movlb	0	; () banked
  4169  001C94  1762               	andwf	(___fttol@f1+2)& (0+255),f,b
  4170                           
  4171                           ; BSR set to: 0
  4172  001C96  0100               	movlb	0	; () banked
  4173  001C98  5160               	movf	___fttol@f1& (0+255),w,b
  4174  001C9A  0100               	movlb	0	; () banked
  4175  001C9C  6F6A               	movwf	___fttol@lval& (0+255),b
  4176  001C9E  0100               	movlb	0	; () banked
  4177  001CA0  5161               	movf	(___fttol@f1+1)& (0+255),w,b
  4178  001CA2  0100               	movlb	0	; () banked
  4179  001CA4  6F6B               	movwf	(___fttol@lval+1)& (0+255),b
  4180  001CA6  0100               	movlb	0	; () banked
  4181  001CA8  5162               	movf	(___fttol@f1+2)& (0+255),w,b
  4182  001CAA  0100               	movlb	0	; () banked
  4183  001CAC  6F6C               	movwf	(___fttol@lval+2)& (0+255),b
  4184  001CAE  0100               	movlb	0	; () banked
  4185  001CB0  6B6D               	clrf	(___fttol@lval+3)& (0+255),b
  4186                           
  4187                           ; BSR set to: 0
  4188  001CB2  0E8E               	movlw	142
  4189  001CB4  0100               	movlb	0	; () banked
  4190  001CB6  5F6E               	subwf	___fttol@exp1& (0+255),f,b
  4191                           
  4192                           ; BSR set to: 0
  4193  001CB8  0100               	movlb	0	; () banked
  4194  001CBA  AF6E               	btfss	___fttol@exp1& (0+255),7,b
  4195  001CBC  D01A               	goto	l2498
  4196                           
  4197                           ; BSR set to: 0
  4198  001CBE  0100               	movlb	0	; () banked
  4199  001CC0  516E               	movf	___fttol@exp1& (0+255),w,b
  4200  001CC2  0A80               	xorlw	128
  4201  001CC4  0F8F               	addlw	143
  4202  001CC6  B0D8               	btfsc	status,0,c
  4203  001CC8  D00A               	goto	l2494
  4204                           
  4205                           ; BSR set to: 0
  4206  001CCA  0E00               	movlw	0
  4207  001CCC  0100               	movlb	0	; () banked
  4208  001CCE  6F60               	movwf	?___fttol& (0+255),b
  4209  001CD0  0E00               	movlw	0
  4210  001CD2  6F61               	movwf	(?___fttol+1)& (0+255),b
  4211  001CD4  0E00               	movlw	0
  4212  001CD6  6F62               	movwf	(?___fttol+2)& (0+255),b
  4213  001CD8  0E00               	movlw	0
  4214  001CDA  6F63               	movwf	(?___fttol+3)& (0+255),b
  4215                           
  4216                           ; BSR set to: 0
  4217  001CDC  0012               	return	
  4218  001CDE                     l2494:
  4219                           
  4220                           ; BSR set to: 0
  4221  001CDE  0100               	movlb	0	; () banked
  4222  001CE0  90D8               	bcf	status,0,c
  4223  001CE2  336D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4224  001CE4  336C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4225  001CE6  336B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4226  001CE8  336A               	rrcf	___fttol@lval& (0+255),f,b
  4227                           
  4228                           ; BSR set to: 0
  4229  001CEA  0100               	movlb	0	; () banked
  4230  001CEC  3F6E               	incfsz	___fttol@exp1& (0+255),f,b
  4231  001CEE  D7F7               	goto	l2494
  4232                           
  4233                           ; BSR set to: 0
  4234  001CF0  D01B               	goto	l2508
  4235  001CF2                     l2498:
  4236                           
  4237                           ; BSR set to: 0
  4238  001CF2  0E17               	movlw	23
  4239  001CF4  0100               	movlb	0	; () banked
  4240  001CF6  656E               	cpfsgt	___fttol@exp1& (0+255),b
  4241  001CF8  D012               	goto	l2506
  4242                           
  4243                           ; BSR set to: 0
  4244  001CFA  0E00               	movlw	0
  4245  001CFC  0100               	movlb	0	; () banked
  4246  001CFE  6F60               	movwf	?___fttol& (0+255),b
  4247  001D00  0E00               	movlw	0
  4248  001D02  6F61               	movwf	(?___fttol+1)& (0+255),b
  4249  001D04  0E00               	movlw	0
  4250  001D06  6F62               	movwf	(?___fttol+2)& (0+255),b
  4251  001D08  0E00               	movlw	0
  4252  001D0A  6F63               	movwf	(?___fttol+3)& (0+255),b
  4253                           
  4254                           ; BSR set to: 0
  4255  001D0C  0012               	return	
  4256  001D0E                     l2504:
  4257                           
  4258                           ; BSR set to: 0
  4259  001D0E  0100               	movlb	0	; () banked
  4260  001D10  90D8               	bcf	status,0,c
  4261  001D12  376A               	rlcf	___fttol@lval& (0+255),f,b
  4262  001D14  376B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4263  001D16  376C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4264  001D18  376D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4265  001D1A  0100               	movlb	0	; () banked
  4266  001D1C  076E               	decf	___fttol@exp1& (0+255),f,b
  4267  001D1E                     l2506:
  4268                           
  4269                           ; BSR set to: 0
  4270  001D1E  0100               	movlb	0	; () banked
  4271  001D20  516E               	movf	___fttol@exp1& (0+255),w,b
  4272  001D22  0100               	movlb	0	; () banked
  4273  001D24  A4D8               	btfss	status,2,c
  4274  001D26  D7F3               	goto	l2504
  4275  001D28                     l2508:
  4276                           
  4277                           ; BSR set to: 0
  4278  001D28  0100               	movlb	0	; () banked
  4279  001D2A  5169               	movf	___fttol@sign1& (0+255),w,b
  4280  001D2C  0100               	movlb	0	; () banked
  4281  001D2E  B4D8               	btfsc	status,2,c
  4282  001D30  D009               	goto	l2512
  4283                           
  4284                           ; BSR set to: 0
  4285  001D32  0100               	movlb	0	; () banked
  4286  001D34  1F6D               	comf	(___fttol@lval+3)& (0+255),f,b
  4287  001D36  1F6C               	comf	(___fttol@lval+2)& (0+255),f,b
  4288  001D38  1F6B               	comf	(___fttol@lval+1)& (0+255),f,b
  4289  001D3A  6D6A               	negf	___fttol@lval& (0+255),b
  4290  001D3C  0E00               	movlw	0
  4291  001D3E  236B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4292  001D40  236C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4293  001D42  236D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4294  001D44                     l2512:
  4295                           
  4296                           ; BSR set to: 0
  4297  001D44  C06A  F060         	movff	___fttol@lval,?___fttol
  4298  001D48  C06B  F061         	movff	___fttol@lval+1,?___fttol+1
  4299  001D4C  C06C  F062         	movff	___fttol@lval+2,?___fttol+2
  4300  001D50  C06D  F063         	movff	___fttol@lval+3,?___fttol+3
  4301  001D54  0012               	return	
  4302  001D56                     __end_of___fttol:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon	equ	0xFF2
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           postdec1	equ	0xFE5
  4314                           fsr1l	equ	0xFE1
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           plusw2	equ	0xFDB
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function ___ftdiv *****************
  4323 ;; Defined at:
  4324 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  f1              3   50[COMRAM] float 
  4327 ;;  f2              3   53[COMRAM] float 
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  f3              3   60[COMRAM] float 
  4330 ;;  sign            1   64[COMRAM] unsigned char 
  4331 ;;  exp             1   63[COMRAM] unsigned char 
  4332 ;;  cntr            1   59[COMRAM] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  3   50[COMRAM] float 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4342 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;Total ram usage:       15 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    2
  4349 ;; This function calls:
  4350 ;;		___ftpack
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text17
  4357  001E4A                     __ptext17:
  4358                           	opt stack 0
  4359  001E4A                     ___ftdiv:
  4360                           	opt stack 28
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;incstack = 0
  4364  001E4A  C035  F039         	movff	___ftdiv@f1+2,??___ftdiv
  4365  001E4E  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  4366  001E50  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  4367  001E52  3434               	rlcf	___ftdiv@f1+1,w,c
  4368  001E54  3639               	rlcf	??___ftdiv& (0+255),f,c
  4369  001E56  E301               	bnc	u1631
  4370  001E58  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4371  001E5A                     u1631:
  4372  001E5A  5039               	movf	??___ftdiv,w,c
  4373  001E5C  6E40               	movwf	___ftdiv@exp,c
  4374  001E5E  5040               	movf	___ftdiv@exp,w,c
  4375  001E60  A4D8               	btfss	status,2,c
  4376  001E62  D007               	goto	l2254
  4377  001E64  0E00               	movlw	0
  4378  001E66  6E33               	movwf	?___ftdiv,c
  4379  001E68  0E00               	movlw	0
  4380  001E6A  6E34               	movwf	?___ftdiv+1,c
  4381  001E6C  0E00               	movlw	0
  4382  001E6E  6E35               	movwf	?___ftdiv+2,c
  4383  001E70  0012               	return	
  4384  001E72                     l2254:
  4385  001E72  C038  F039         	movff	___ftdiv@f2+2,??___ftdiv
  4386  001E76  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  4387  001E78  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  4388  001E7A  3437               	rlcf	___ftdiv@f2+1,w,c
  4389  001E7C  3639               	rlcf	??___ftdiv& (0+255),f,c
  4390  001E7E  E301               	bnc	u1651
  4391  001E80  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4392  001E82                     u1651:
  4393  001E82  5039               	movf	??___ftdiv,w,c
  4394  001E84  6E41               	movwf	___ftdiv@sign,c
  4395  001E86  5041               	movf	___ftdiv@sign,w,c
  4396  001E88  A4D8               	btfss	status,2,c
  4397  001E8A  D007               	goto	l2260
  4398  001E8C  0E00               	movlw	0
  4399  001E8E  6E33               	movwf	?___ftdiv,c
  4400  001E90  0E00               	movlw	0
  4401  001E92  6E34               	movwf	?___ftdiv+1,c
  4402  001E94  0E00               	movlw	0
  4403  001E96  6E35               	movwf	?___ftdiv+2,c
  4404  001E98  0012               	return	
  4405  001E9A                     l2260:
  4406  001E9A  0E00               	movlw	0
  4407  001E9C  6E3D               	movwf	___ftdiv@f3,c
  4408  001E9E  0E00               	movlw	0
  4409  001EA0  6E3E               	movwf	___ftdiv@f3+1,c
  4410  001EA2  0E00               	movlw	0
  4411  001EA4  6E3F               	movwf	___ftdiv@f3+2,c
  4412  001EA6  5041               	movf	___ftdiv@sign,w,c
  4413  001EA8  0F89               	addlw	137
  4414  001EAA  5E40               	subwf	___ftdiv@exp,f,c
  4415  001EAC  C035  F041         	movff	___ftdiv@f1+2,___ftdiv@sign
  4416  001EB0  5038               	movf	___ftdiv@f2+2,w,c
  4417  001EB2  1A41               	xorwf	___ftdiv@sign,f,c
  4418  001EB4  0E80               	movlw	128
  4419  001EB6  1641               	andwf	___ftdiv@sign,f,c
  4420  001EB8  8E34               	bsf	___ftdiv@f1+1,7,c
  4421  001EBA  0EFF               	movlw	255
  4422  001EBC  1633               	andwf	___ftdiv@f1,f,c
  4423  001EBE  0EFF               	movlw	255
  4424  001EC0  1634               	andwf	___ftdiv@f1+1,f,c
  4425  001EC2  0E00               	movlw	0
  4426  001EC4  1635               	andwf	___ftdiv@f1+2,f,c
  4427  001EC6  8E37               	bsf	___ftdiv@f2+1,7,c
  4428  001EC8  0EFF               	movlw	255
  4429  001ECA  1636               	andwf	___ftdiv@f2,f,c
  4430  001ECC  0EFF               	movlw	255
  4431  001ECE  1637               	andwf	___ftdiv@f2+1,f,c
  4432  001ED0  0E00               	movlw	0
  4433  001ED2  1638               	andwf	___ftdiv@f2+2,f,c
  4434  001ED4  0E18               	movlw	24
  4435  001ED6  6E3C               	movwf	___ftdiv@cntr,c
  4436  001ED8                     l2280:
  4437  001ED8  90D8               	bcf	status,0,c
  4438  001EDA  363D               	rlcf	___ftdiv@f3,f,c
  4439  001EDC  363E               	rlcf	___ftdiv@f3+1,f,c
  4440  001EDE  363F               	rlcf	___ftdiv@f3+2,f,c
  4441  001EE0  5036               	movf	___ftdiv@f2,w,c
  4442  001EE2  5C33               	subwf	___ftdiv@f1,w,c
  4443  001EE4  5037               	movf	___ftdiv@f2+1,w,c
  4444  001EE6  5834               	subwfb	___ftdiv@f1+1,w,c
  4445  001EE8  5038               	movf	___ftdiv@f2+2,w,c
  4446  001EEA  5835               	subwfb	___ftdiv@f1+2,w,c
  4447  001EEC  A0D8               	btfss	status,0,c
  4448  001EEE  D007               	goto	l586
  4449  001EF0  5036               	movf	___ftdiv@f2,w,c
  4450  001EF2  5E33               	subwf	___ftdiv@f1,f,c
  4451  001EF4  5037               	movf	___ftdiv@f2+1,w,c
  4452  001EF6  5A34               	subwfb	___ftdiv@f1+1,f,c
  4453  001EF8  5038               	movf	___ftdiv@f2+2,w,c
  4454  001EFA  5A35               	subwfb	___ftdiv@f1+2,f,c
  4455  001EFC  803D               	bsf	___ftdiv@f3,0,c
  4456  001EFE                     l586:
  4457  001EFE  90D8               	bcf	status,0,c
  4458  001F00  3633               	rlcf	___ftdiv@f1,f,c
  4459  001F02  3634               	rlcf	___ftdiv@f1+1,f,c
  4460  001F04  3635               	rlcf	___ftdiv@f1+2,f,c
  4461  001F06  2E3C               	decfsz	___ftdiv@cntr,f,c
  4462  001F08  D7E7               	goto	l2280
  4463  001F0A  C03D  F013         	movff	___ftdiv@f3,___ftpack@arg
  4464  001F0E  C03E  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4465  001F12  C03F  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4466  001F16  C040  F016         	movff	___ftdiv@exp,___ftpack@exp
  4467  001F1A  C041  F017         	movff	___ftdiv@sign,___ftpack@sign
  4468  001F1E  EC68  F010         	call	___ftpack	;wreg free
  4469  001F22  C013  F033         	movff	?___ftpack,?___ftdiv
  4470  001F26  C014  F034         	movff	?___ftpack+1,?___ftdiv+1
  4471  001F2A  C015  F035         	movff	?___ftpack+2,?___ftdiv+2
  4472  001F2E  0012               	return	
  4473  001F30                     __end_of___ftdiv:
  4474                           	opt stack 0
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           intcon	equ	0xFF2
  4482                           postinc0	equ	0xFEE
  4483                           wreg	equ	0xFE8
  4484                           postdec1	equ	0xFE5
  4485                           fsr1l	equ	0xFE1
  4486                           postinc2	equ	0xFDE
  4487                           postdec2	equ	0xFDD
  4488                           plusw2	equ	0xFDB
  4489                           fsr2h	equ	0xFDA
  4490                           fsr2l	equ	0xFD9
  4491                           status	equ	0xFD8
  4492                           
  4493 ;; *************** function ___ftpack *****************
  4494 ;; Defined at:
  4495 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  arg             3   18[COMRAM] unsigned um
  4498 ;;  exp             1   21[COMRAM] unsigned char 
  4499 ;;  sign            1   22[COMRAM] unsigned char 
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  3   18[COMRAM] float 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4511 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;Total ram usage:        8 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    1
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		___ftdiv
  4522 ;;		___ftmul
  4523 ;;		___lltoft
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text18
  4528  0020D0                     __ptext18:
  4529                           	opt stack 0
  4530  0020D0                     ___ftpack:
  4531                           	opt stack 27
  4532                           
  4533                           ;incstack = 0
  4534  0020D0  5016               	movf	___ftpack@exp,w,c
  4535  0020D2  B4D8               	btfsc	status,2,c
  4536  0020D4  D005               	goto	l1722
  4537  0020D6  5013               	movf	___ftpack@arg,w,c
  4538  0020D8  1014               	iorwf	___ftpack@arg+1,w,c
  4539  0020DA  1015               	iorwf	___ftpack@arg+2,w,c
  4540  0020DC  A4D8               	btfss	status,2,c
  4541  0020DE  D00C               	goto	l1728
  4542  0020E0                     l1722:
  4543  0020E0  0E00               	movlw	0
  4544  0020E2  6E13               	movwf	?___ftpack,c
  4545  0020E4  0E00               	movlw	0
  4546  0020E6  6E14               	movwf	?___ftpack+1,c
  4547  0020E8  0E00               	movlw	0
  4548  0020EA  6E15               	movwf	?___ftpack+2,c
  4549  0020EC  0012               	return	
  4550  0020EE                     l1726:
  4551  0020EE  2A16               	incf	___ftpack@exp,f,c
  4552  0020F0  90D8               	bcf	status,0,c
  4553  0020F2  3215               	rrcf	___ftpack@arg+2,f,c
  4554  0020F4  3214               	rrcf	___ftpack@arg+1,f,c
  4555  0020F6  3213               	rrcf	___ftpack@arg,f,c
  4556  0020F8                     l1728:
  4557  0020F8  0E00               	movlw	0
  4558  0020FA  1413               	andwf	___ftpack@arg,w,c
  4559  0020FC  6E18               	movwf	??___ftpack& (0+255),c
  4560  0020FE  0E00               	movlw	0
  4561  002100  1414               	andwf	___ftpack@arg+1,w,c
  4562  002102  6E19               	movwf	(??___ftpack+1)& (0+255),c
  4563  002104  0EFE               	movlw	254
  4564  002106  1415               	andwf	___ftpack@arg+2,w,c
  4565  002108  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  4566  00210A  5018               	movf	??___ftpack,w,c
  4567  00210C  1019               	iorwf	??___ftpack+1,w,c
  4568  00210E  101A               	iorwf	??___ftpack+2,w,c
  4569  002110  B4D8               	btfsc	status,2,c
  4570  002112  D00C               	goto	l1734
  4571  002114  D7EC               	goto	l1726
  4572  002116                     l1730:
  4573  002116  2A16               	incf	___ftpack@exp,f,c
  4574  002118  0E01               	movlw	1
  4575  00211A  2613               	addwf	___ftpack@arg,f,c
  4576  00211C  0E00               	movlw	0
  4577  00211E  2214               	addwfc	___ftpack@arg+1,f,c
  4578  002120  0E00               	movlw	0
  4579  002122  2215               	addwfc	___ftpack@arg+2,f,c
  4580  002124  90D8               	bcf	status,0,c
  4581  002126  3215               	rrcf	___ftpack@arg+2,f,c
  4582  002128  3214               	rrcf	___ftpack@arg+1,f,c
  4583  00212A  3213               	rrcf	___ftpack@arg,f,c
  4584  00212C                     l1734:
  4585  00212C  0E00               	movlw	0
  4586  00212E  1413               	andwf	___ftpack@arg,w,c
  4587  002130  6E18               	movwf	??___ftpack& (0+255),c
  4588  002132  0E00               	movlw	0
  4589  002134  1414               	andwf	___ftpack@arg+1,w,c
  4590  002136  6E19               	movwf	(??___ftpack+1)& (0+255),c
  4591  002138  0EFF               	movlw	255
  4592  00213A  1415               	andwf	___ftpack@arg+2,w,c
  4593  00213C  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  4594  00213E  5018               	movf	??___ftpack,w,c
  4595  002140  1019               	iorwf	??___ftpack+1,w,c
  4596  002142  101A               	iorwf	??___ftpack+2,w,c
  4597  002144  B4D8               	btfsc	status,2,c
  4598  002146  D006               	goto	l1738
  4599  002148  D7E6               	goto	l1730
  4600  00214A                     l1736:
  4601  00214A  0616               	decf	___ftpack@exp,f,c
  4602  00214C  90D8               	bcf	status,0,c
  4603  00214E  3613               	rlcf	___ftpack@arg,f,c
  4604  002150  3614               	rlcf	___ftpack@arg+1,f,c
  4605  002152  3615               	rlcf	___ftpack@arg+2,f,c
  4606  002154                     l1738:
  4607  002154  BE14               	btfsc	___ftpack@arg+1,7,c
  4608  002156  D003               	goto	l528
  4609  002158  0E02               	movlw	2
  4610  00215A  6016               	cpfslt	___ftpack@exp,c
  4611  00215C  D7F6               	goto	l1736
  4612  00215E                     l528:
  4613  00215E  A016               	btfss	___ftpack@exp,0,c
  4614  002160  9E14               	bcf	___ftpack@arg+1,7,c
  4615  002162  90D8               	bcf	status,0,c
  4616  002164  3216               	rrcf	___ftpack@exp,f,c
  4617  002166  5016               	movf	___ftpack@exp,w,c
  4618  002168  1215               	iorwf	___ftpack@arg+2,f,c
  4619  00216A  5017               	movf	___ftpack@sign,w,c
  4620  00216C  A4D8               	btfss	status,2,c
  4621  00216E  8E15               	bsf	___ftpack@arg+2,7,c
  4622  002170  C013  F013         	movff	___ftpack@arg,?___ftpack
  4623  002174  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  4624  002178  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  4625  00217C  0012               	return	
  4626  00217E                     __end_of___ftpack:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon	equ	0xFF2
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           postdec1	equ	0xFE5
  4638                           fsr1l	equ	0xFE1
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           plusw2	equ	0xFDB
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _LCDinit *****************
  4647 ;; Defined at:
  4648 ;;		line 60 in file "lcd.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:        1 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    2
  4669 ;; This function calls:
  4670 ;;		_LCDcheckBF
  4671 ;;		_LCDcmd
  4672 ;; This function is called by:
  4673 ;;		_main
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text19
  4678  00200A                     __ptext19:
  4679                           	opt stack 0
  4680  00200A                     _LCDinit:
  4681                           	opt stack 28
  4682                           
  4683                           ;lcd.c: 63: TRISA = 0;
  4684                           
  4685                           ;incstack = 0
  4686  00200A  0E00               	movlw	0
  4687  00200C  6E92               	movwf	3986,c	;volatile
  4688                           
  4689                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  4690  00200E  9096               	bcf	3990,0,c	;volatile
  4691                           
  4692                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  4693  002010  9296               	bcf	3990,1,c	;volatile
  4694                           
  4695                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  4696  002012  9496               	bcf	3990,2,c	;volatile
  4697                           
  4698                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  4699  002014  908D               	bcf	3981,0,c	;volatile
  4700                           
  4701                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  4702  002016  928D               	bcf	3981,1,c	;volatile
  4703                           
  4704                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  4705  002018  848D               	bsf	3981,2,c	;volatile
  4706                           
  4707                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  4708  00201A  0E21               	movlw	33
  4709  00201C  6E14               	movwf	??_LCDinit& (0+255),c
  4710  00201E  0E76               	movlw	118
  4711  002020                     u2067:
  4712  002020  2EE8               	decfsz	wreg,f,c
  4713  002022  D7FE               	goto	u2067
  4714  002024  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4715  002026  D7FC               	goto	u2067
  4716  002028  D000               	nop2	
  4717                           
  4718                           ;lcd.c: 74: LCDcmd(0b00110000);
  4719  00202A  0E30               	movlw	48
  4720  00202C  EC83  F012         	call	_LCDcmd
  4721                           
  4722                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  4723  002030  0E27               	movlw	39
  4724  002032  6E14               	movwf	??_LCDinit& (0+255),c
  4725  002034  0EF5               	movlw	245
  4726  002036                     u2077:
  4727  002036  2EE8               	decfsz	wreg,f,c
  4728  002038  D7FE               	goto	u2077
  4729  00203A  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4730  00203C  D7FC               	goto	u2077
  4731  00203E  F000               	nop	
  4732                           
  4733                           ;lcd.c: 76: LCDcmd(0b00110000);
  4734  002040  0E30               	movlw	48
  4735  002042  EC83  F012         	call	_LCDcmd
  4736                           
  4737                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  4738  002046  0E27               	movlw	39
  4739  002048  6E14               	movwf	??_LCDinit& (0+255),c
  4740  00204A  0EF5               	movlw	245
  4741  00204C                     u2087:
  4742  00204C  2EE8               	decfsz	wreg,f,c
  4743  00204E  D7FE               	goto	u2087
  4744  002050  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4745  002052  D7FC               	goto	u2087
  4746  002054  F000               	nop	
  4747                           
  4748                           ;lcd.c: 78: LCDcmd(0b00110000);
  4749  002056  0E30               	movlw	48
  4750  002058  EC83  F012         	call	_LCDcmd
  4751                           
  4752                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  4753  00205C  0E27               	movlw	39
  4754  00205E  6E14               	movwf	??_LCDinit& (0+255),c
  4755  002060  0EF5               	movlw	245
  4756  002062                     u2097:
  4757  002062  2EE8               	decfsz	wreg,f,c
  4758  002064  D7FE               	goto	u2097
  4759  002066  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4760  002068  D7FC               	goto	u2097
  4761  00206A  F000               	nop	
  4762                           
  4763                           ;lcd.c: 80: LCDcmd(0b00111000);
  4764  00206C  0E38               	movlw	56
  4765  00206E  EC83  F012         	call	_LCDcmd
  4766                           
  4767                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  4768  002072  0E27               	movlw	39
  4769  002074  6E14               	movwf	??_LCDinit& (0+255),c
  4770  002076  0EF5               	movlw	245
  4771  002078                     u2107:
  4772  002078  2EE8               	decfsz	wreg,f,c
  4773  00207A  D7FE               	goto	u2107
  4774  00207C  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4775  00207E  D7FC               	goto	u2107
  4776  002080  F000               	nop	
  4777                           
  4778                           ;lcd.c: 82: LCDcmd(0b00001000);
  4779  002082  0E08               	movlw	8
  4780  002084  EC83  F012         	call	_LCDcmd
  4781                           
  4782                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  4783  002088  0E27               	movlw	39
  4784  00208A  6E14               	movwf	??_LCDinit& (0+255),c
  4785  00208C  0EF5               	movlw	245
  4786  00208E                     u2117:
  4787  00208E  2EE8               	decfsz	wreg,f,c
  4788  002090  D7FE               	goto	u2117
  4789  002092  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4790  002094  D7FC               	goto	u2117
  4791  002096  F000               	nop	
  4792                           
  4793                           ;lcd.c: 84: LCDcmd(0b00000001);
  4794  002098  0E01               	movlw	1
  4795  00209A  EC83  F012         	call	_LCDcmd
  4796                           
  4797                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  4798  00209E  0E27               	movlw	39
  4799  0020A0  6E14               	movwf	??_LCDinit& (0+255),c
  4800  0020A2  0EF5               	movlw	245
  4801  0020A4                     u2127:
  4802  0020A4  2EE8               	decfsz	wreg,f,c
  4803  0020A6  D7FE               	goto	u2127
  4804  0020A8  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4805  0020AA  D7FC               	goto	u2127
  4806  0020AC  F000               	nop	
  4807                           
  4808                           ;lcd.c: 86: LCDcmd(0b00000110);
  4809  0020AE  0E06               	movlw	6
  4810  0020B0  EC83  F012         	call	_LCDcmd
  4811                           
  4812                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  4813  0020B4  0E27               	movlw	39
  4814  0020B6  6E14               	movwf	??_LCDinit& (0+255),c
  4815  0020B8  0EF5               	movlw	245
  4816  0020BA                     u2137:
  4817  0020BA  2EE8               	decfsz	wreg,f,c
  4818  0020BC  D7FE               	goto	u2137
  4819  0020BE  2E14               	decfsz	??_LCDinit& (0+255),f,c
  4820  0020C0  D7FC               	goto	u2137
  4821  0020C2  F000               	nop	
  4822                           
  4823                           ;lcd.c: 90: LCDcmd(0b00001111);
  4824  0020C4  0E0F               	movlw	15
  4825  0020C6  EC83  F012         	call	_LCDcmd
  4826                           
  4827                           ;lcd.c: 91: LCDcheckBF();
  4828  0020CA  EC60  F012         	call	_LCDcheckBF	;wreg free
  4829  0020CE  0012               	return		;funcret
  4830  0020D0                     __end_of_LCDinit:
  4831                           	opt stack 0
  4832                           tblptru	equ	0xFF8
  4833                           tblptrh	equ	0xFF7
  4834                           tblptrl	equ	0xFF6
  4835                           tablat	equ	0xFF5
  4836                           prodh	equ	0xFF4
  4837                           prodl	equ	0xFF3
  4838                           intcon	equ	0xFF2
  4839                           postinc0	equ	0xFEE
  4840                           wreg	equ	0xFE8
  4841                           postdec1	equ	0xFE5
  4842                           fsr1l	equ	0xFE1
  4843                           postinc2	equ	0xFDE
  4844                           postdec2	equ	0xFDD
  4845                           plusw2	equ	0xFDB
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function _LCDgotoLineTwo *****************
  4851 ;; Defined at:
  4852 ;;		line 142 in file "lcd.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      void 
  4859 ;; Registers used:
  4860 ;;		wreg, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;Total ram usage:        0 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    2
  4873 ;; This function calls:
  4874 ;;		_LCDcheckBF
  4875 ;;		_LCDcmd
  4876 ;; This function is called by:
  4877 ;;		_main
  4878 ;;		_LCDputs
  4879 ;;		_LCDwriteLineTwo
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text20
  4884  0024E6                     __ptext20:
  4885                           	opt stack 0
  4886  0024E6                     _LCDgotoLineTwo:
  4887                           	opt stack 28
  4888                           
  4889                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  4890                           
  4891                           ;incstack = 0
  4892  0024E6  908D               	bcf	3981,0,c	;volatile
  4893                           
  4894                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  4895  0024E8  928D               	bcf	3981,1,c	;volatile
  4896                           
  4897                           ;lcd.c: 146: LCDcmd(0b11000000);
  4898  0024EA  0EC0               	movlw	192
  4899  0024EC  EC83  F012         	call	_LCDcmd
  4900                           
  4901                           ;lcd.c: 147: LCDcheckBF();
  4902  0024F0  EC60  F012         	call	_LCDcheckBF	;wreg free
  4903  0024F4  0012               	return		;funcret
  4904  0024F6                     __end_of_LCDgotoLineTwo:
  4905                           	opt stack 0
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           prodh	equ	0xFF4
  4911                           prodl	equ	0xFF3
  4912                           intcon	equ	0xFF2
  4913                           postinc0	equ	0xFEE
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1l	equ	0xFE1
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           plusw2	equ	0xFDB
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _LCDclear *****************
  4925 ;; Defined at:
  4926 ;;		line 126 in file "lcd.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;Total ram usage:        0 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    2
  4947 ;; This function calls:
  4948 ;;		_LCDcheckBF
  4949 ;;		_LCDcmd
  4950 ;; This function is called by:
  4951 ;;		_main
  4952 ;;		_LCDputs
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text21
  4957  0024F6                     __ptext21:
  4958                           	opt stack 0
  4959  0024F6                     _LCDclear:
  4960                           	opt stack 28
  4961                           
  4962                           ;lcd.c: 128: LATEbits.LATE0 = 0;
  4963                           
  4964                           ;incstack = 0
  4965  0024F6  908D               	bcf	3981,0,c	;volatile
  4966                           
  4967                           ;lcd.c: 129: LATEbits.LATE1 = 0;
  4968  0024F8  928D               	bcf	3981,1,c	;volatile
  4969                           
  4970                           ;lcd.c: 130: LCDcmd(0b00000001);
  4971  0024FA  0E01               	movlw	1
  4972  0024FC  EC83  F012         	call	_LCDcmd
  4973                           
  4974                           ;lcd.c: 131: LCDcheckBF();
  4975  002500  EC60  F012         	call	_LCDcheckBF	;wreg free
  4976  002504  0012               	return		;funcret
  4977  002506                     __end_of_LCDclear:
  4978                           	opt stack 0
  4979                           tblptru	equ	0xFF8
  4980                           tblptrh	equ	0xFF7
  4981                           tblptrl	equ	0xFF6
  4982                           tablat	equ	0xFF5
  4983                           prodh	equ	0xFF4
  4984                           prodl	equ	0xFF3
  4985                           intcon	equ	0xFF2
  4986                           postinc0	equ	0xFEE
  4987                           wreg	equ	0xFE8
  4988                           postdec1	equ	0xFE5
  4989                           fsr1l	equ	0xFE1
  4990                           postinc2	equ	0xFDE
  4991                           postdec2	equ	0xFDD
  4992                           plusw2	equ	0xFDB
  4993                           fsr2h	equ	0xFDA
  4994                           fsr2l	equ	0xFD9
  4995                           status	equ	0xFD8
  4996                           
  4997 ;; *************** function _LCDcmd *****************
  4998 ;; Defined at:
  4999 ;;		line 94 in file "lcd.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  command         1    wreg     unsigned char 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  command         1   18[COMRAM] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;Total ram usage:        1 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    1
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_LCDinit
  5024 ;;		_LCDwrite
  5025 ;;		_LCDclear
  5026 ;;		_LCDgotoLineTwo
  5027 ;;		_LCDgotoLineOne
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text22
  5032  002506                     __ptext22:
  5033                           	opt stack 0
  5034  002506                     _LCDcmd:
  5035                           	opt stack 26
  5036                           
  5037                           ;incstack = 0
  5038                           ;LCDcmd@command stored from wreg
  5039  002506  6E13               	movwf	LCDcmd@command,c
  5040                           
  5041                           ;lcd.c: 96: LATA = command;
  5042  002508  C013  FF89         	movff	LCDcmd@command,3977	;volatile
  5043                           
  5044                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  5045  00250C  948D               	bcf	3981,2,c	;volatile
  5046                           
  5047                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  5048  00250E  848D               	bsf	3981,2,c	;volatile
  5049  002510  0012               	return		;funcret
  5050  002512                     __end_of_LCDcmd:
  5051                           	opt stack 0
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           postinc0	equ	0xFEE
  5060                           wreg	equ	0xFE8
  5061                           postdec1	equ	0xFE5
  5062                           fsr1l	equ	0xFE1
  5063                           postinc2	equ	0xFDE
  5064                           postdec2	equ	0xFDD
  5065                           plusw2	equ	0xFDB
  5066                           fsr2h	equ	0xFDA
  5067                           fsr2l	equ	0xFD9
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _LCDcheckBF *****************
  5071 ;; Defined at:
  5072 ;;		line 101 in file "lcd.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;		None
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		None
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;Total ram usage:        0 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    1
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_LCDinit
  5097 ;;		_LCDwrite
  5098 ;;		_LCDclear
  5099 ;;		_LCDgotoLineTwo
  5100 ;;		_LCDgotoLineOne
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           	psect	text23
  5105  0024C0                     __ptext23:
  5106                           	opt stack 0
  5107  0024C0                     _LCDcheckBF:
  5108                           	opt stack 26
  5109                           
  5110                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  5111                           
  5112                           ;incstack = 0
  5113  0024C0  8E92               	bsf	3986,7,c	;volatile
  5114                           
  5115                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  5116  0024C2  908D               	bcf	3981,0,c	;volatile
  5117                           
  5118                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  5119  0024C4  828D               	bsf	3981,1,c	;volatile
  5120  0024C6                     l229:
  5121                           
  5122                           ;lcd.c: 110: {
  5123                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  5124  0024C6  948D               	bcf	3981,2,c	;volatile
  5125                           
  5126                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  5127  0024C8  848D               	bsf	3981,2,c	;volatile
  5128  0024CA  BE80               	btfsc	3968,7,c	;volatile
  5129  0024CC  D7FC               	goto	l229
  5130                           
  5131                           ;lcd.c: 113: }
  5132                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  5133  0024CE  848D               	bsf	3981,2,c	;volatile
  5134                           
  5135                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  5136  0024D0  9E92               	bcf	3986,7,c	;volatile
  5137  0024D2  0012               	return		;funcret
  5138  0024D4                     __end_of_LCDcheckBF:
  5139                           	opt stack 0
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           prodh	equ	0xFF4
  5145                           prodl	equ	0xFF3
  5146                           intcon	equ	0xFF2
  5147                           postinc0	equ	0xFEE
  5148                           wreg	equ	0xFE8
  5149                           postdec1	equ	0xFE5
  5150                           fsr1l	equ	0xFE1
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           plusw2	equ	0xFDB
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _ISR *****************
  5159 ;; Defined at:
  5160 ;;		line 253 in file "main.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  dummy           1   17[COMRAM] unsigned char 
  5165 ;;  dummy           1   16[COMRAM] unsigned char 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;Total ram usage:       18 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; This function calls:
  5182 ;;		Nothing
  5183 ;; This function is called by:
  5184 ;;		Interrupt level 2
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	intcode
  5189  000008                     __pintcode:
  5190                           	opt stack 0
  5191  000008                     _ISR:
  5192                           	opt stack 26
  5193                           
  5194                           ;incstack = 0
  5195  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5196  00000A  CFFA F003          	movff	pclath,??_ISR+2
  5197  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  5198  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  5199  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  5200  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  5201  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  5202  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  5203  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  5204  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  5205  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  5206  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  5207  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  5208  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  5209  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  5210                           
  5211                           ;main.c: 256: if (CCP2IE && CCP2IF)
  5212  000042  B0A0               	btfsc	4000,0,c	;volatile
  5213  000044  A0A1               	btfss	4001,0,c	;volatile
  5214  000046  D01E               	goto	i2l149
  5215                           
  5216                           ;main.c: 257: {
  5217                           ;main.c: 259: if(LATDbits.LATD1 == 1)
  5218  000048  A28C               	btfss	3980,1,c	;volatile
  5219  00004A  D010               	goto	i2l150
  5220                           
  5221                           ;main.c: 260: {
  5222                           ;main.c: 261: LATDbits.LATD1 = 0;
  5223  00004C  928C               	bcf	3980,1,c	;volatile
  5224                           
  5225                           ;main.c: 262: CCPR2 = 8000 - CCPR2;
  5226  00004E  CF67 F001          	movff	3943,??_ISR	;volatile
  5227  000052  CF68 F002          	movff	3944,??_ISR+1	;volatile
  5228  000056  1E01               	comf	??_ISR,f,c
  5229  000058  1E02               	comf	??_ISR+1,f,c
  5230  00005A  4A01               	infsnz	??_ISR,f,c
  5231  00005C  2A02               	incf	??_ISR+1,f,c
  5232  00005E  0E40               	movlw	64
  5233  000060  2401               	addwf	??_ISR,w,c
  5234  000062  6E67               	movwf	3943,c	;volatile
  5235  000064  0E1F               	movlw	31
  5236  000066  2002               	addwfc	??_ISR+1,w,c
  5237  000068  6E68               	movwf	3944,c	;volatile
  5238                           
  5239                           ;main.c: 263: }
  5240  00006A  D005               	goto	i2l2390
  5241  00006C                     i2l150:
  5242                           
  5243                           ;main.c: 264: else
  5244                           ;main.c: 265: {
  5245                           ;main.c: 266: LATDbits.LATD1 = 1;
  5246  00006C  828C               	bsf	3980,1,c	;volatile
  5247                           
  5248                           ;main.c: 267: CCPR2 = leftWheelCommandedPW;
  5249  00006E  C042  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  5250  000072  C043  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  5251  000076                     i2l2390:
  5252                           
  5253                           ;main.c: 268: }
  5254                           ;main.c: 269: TMR5 = 0;
  5255  000076  0E00               	movlw	0
  5256  000078  010F               	movlb	15	; () banked
  5257  00007A  6F50               	movwf	80,b	;volatile
  5258  00007C  0E00               	movlw	0
  5259  00007E  6F4F               	movwf	79,b	;volatile
  5260                           
  5261                           ; BSR set to: 15
  5262                           ;main.c: 270: CCP2IF = 0;
  5263  000080  90A1               	bcf	4001,0,c	;volatile
  5264                           
  5265                           ; BSR set to: 15
  5266                           ;main.c: 271: return;
  5267  000082  D047               	goto	i2l152
  5268  000084                     i2l149:
  5269                           
  5270                           ;main.c: 272: }
  5271                           ;main.c: 276: if (CCP3IE && CCP3IF)
  5272  000084  B07A               	btfsc	3962,0,c	;volatile
  5273  000086  A07B               	btfss	3963,0,c	;volatile
  5274  000088  D01F               	goto	i2l153
  5275                           
  5276                           ;main.c: 277: {
  5277                           ;main.c: 279: if(LATDbits.LATD0 == 1)
  5278  00008A  A08C               	btfss	3980,0,c	;volatile
  5279  00008C  D012               	goto	i2l154
  5280                           
  5281                           ;main.c: 280: {
  5282                           ;main.c: 281: LATDbits.LATD0 = 0;
  5283  00008E  908C               	bcf	3980,0,c	;volatile
  5284                           
  5285                           ;main.c: 282: CCPR3 = 8000 - CCPR3;
  5286  000090  CF5E F001          	movff	3934,??_ISR	;volatile
  5287  000094  CF5F F002          	movff	3935,??_ISR+1	;volatile
  5288  000098  1E01               	comf	??_ISR,f,c
  5289  00009A  1E02               	comf	??_ISR+1,f,c
  5290  00009C  4A01               	infsnz	??_ISR,f,c
  5291  00009E  2A02               	incf	??_ISR+1,f,c
  5292  0000A0  0E40               	movlw	64
  5293  0000A2  2401               	addwf	??_ISR,w,c
  5294  0000A4  010F               	movlb	15	; () banked
  5295  0000A6  6F5E               	movwf	94,b	;volatile
  5296  0000A8  0E1F               	movlw	31
  5297  0000AA  2002               	addwfc	??_ISR+1,w,c
  5298  0000AC  010F               	movlb	15	; () banked
  5299  0000AE  6F5F               	movwf	95,b	;volatile
  5300                           
  5301                           ;main.c: 283: }
  5302  0000B0  D005               	goto	i2l155
  5303  0000B2                     i2l154:
  5304                           
  5305                           ;main.c: 284: else
  5306                           ;main.c: 285: {
  5307                           ;main.c: 286: LATDbits.LATD0 = 1;
  5308  0000B2  808C               	bsf	3980,0,c	;volatile
  5309                           
  5310                           ;main.c: 287: CCPR3 = rightWheelCommandedPW;
  5311  0000B4  C044  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  5312  0000B8  C045  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  5313  0000BC                     i2l155:
  5314                           
  5315                           ;main.c: 288: }
  5316                           ;main.c: 289: CCP3IF = 0;
  5317  0000BC  907B               	bcf	3963,0,c	;volatile
  5318                           
  5319                           ;main.c: 290: TMR1 = 0;
  5320  0000BE  0E00               	movlw	0
  5321  0000C0  6ECF               	movwf	4047,c	;volatile
  5322  0000C2  0E00               	movlw	0
  5323  0000C4  6ECE               	movwf	4046,c	;volatile
  5324                           
  5325                           ;main.c: 292: return;
  5326  0000C6  D025               	goto	i2l152
  5327  0000C8                     i2l153:
  5328                           
  5329                           ;main.c: 295: }
  5330                           ;main.c: 300: if(C1IF && C1IE)
  5331  0000C8  BCA1               	btfsc	4001,6,c	;volatile
  5332  0000CA  ACA0               	btfss	4000,6,c	;volatile
  5333  0000CC  D00A               	goto	i2l2416
  5334                           
  5335                           ;main.c: 301: {
  5336                           ;main.c: 302: leftWheelCount++;
  5337  0000CE  0E01               	movlw	1
  5338  0000D0  0100               	movlb	0	; () banked
  5339  0000D2  278B               	addwf	_leftWheelCount& (0+255),f,b
  5340  0000D4  0E00               	movlw	0
  5341  0000D6  238C               	addwfc	(_leftWheelCount+1)& (0+255),f,b
  5342  0000D8  238D               	addwfc	(_leftWheelCount+2)& (0+255),f,b
  5343  0000DA  238E               	addwfc	(_leftWheelCount+3)& (0+255),f,b
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;main.c: 303: char dummy = CM1CON0;
  5347  0000DC  CF79 F011          	movff	3961,ISR@dummy	;volatile
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;main.c: 304: C1IF = 0;
  5351  0000E0  9CA1               	bcf	4001,6,c	;volatile
  5352  0000E2                     i2l2416:
  5353                           
  5354                           ;main.c: 305: }
  5355                           ;main.c: 306: if(C2IF && C2IE)
  5356  0000E2  BAA1               	btfsc	4001,5,c	;volatile
  5357  0000E4  AAA0               	btfss	4000,5,c	;volatile
  5358  0000E6  D00A               	goto	i2l2426
  5359                           
  5360                           ;main.c: 307: {
  5361                           ;main.c: 308: rightWheelCount++;
  5362  0000E8  0E01               	movlw	1
  5363  0000EA  0100               	movlb	0	; () banked
  5364  0000EC  278F               	addwf	_rightWheelCount& (0+255),f,b
  5365  0000EE  0E00               	movlw	0
  5366  0000F0  2390               	addwfc	(_rightWheelCount+1)& (0+255),f,b
  5367  0000F2  2391               	addwfc	(_rightWheelCount+2)& (0+255),f,b
  5368  0000F4  2392               	addwfc	(_rightWheelCount+3)& (0+255),f,b
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;main.c: 309: char dummy = CM2CON0;
  5372  0000F6  CF78 F012          	movff	3960,ISR@dummy_1123	;volatile
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;main.c: 310: C2IF = 0;
  5376  0000FA  9AA1               	bcf	4001,5,c	;volatile
  5377  0000FC                     i2l2426:
  5378                           
  5379                           ;main.c: 311: }
  5380                           ;main.c: 316: if (TMR2IE && TMR2IF)
  5381  0000FC  B29D               	btfsc	3997,1,c	;volatile
  5382  0000FE  A29E               	btfss	3998,1,c	;volatile
  5383  000100  D008               	goto	i2l152
  5384                           
  5385                           ;main.c: 317: {
  5386                           ;main.c: 318: elapsedMillis++;
  5387  000102  0E01               	movlw	1
  5388  000104  0100               	movlb	0	; () banked
  5389  000106  2787               	addwf	_elapsedMillis& (0+255),f,b
  5390  000108  0E00               	movlw	0
  5391  00010A  2388               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  5392  00010C  2389               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  5393  00010E  238A               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;main.c: 319: PIR1bits.TMR2IF = 0;
  5397  000110  929E               	bcf	3998,1,c	;volatile
  5398  000112                     i2l152:
  5399  000112  C010  FFF5         	movff	??_ISR+15,tablat
  5400  000116  C00F  FFF8         	movff	??_ISR+14,tblptru
  5401  00011A  C00E  FFF7         	movff	??_ISR+13,tblptrh
  5402  00011E  C00D  FFF6         	movff	??_ISR+12,tblptrl
  5403  000122  C00C  FFF4         	movff	??_ISR+11,prodh
  5404  000126  C00B  FFF3         	movff	??_ISR+10,prodl
  5405  00012A  C00A  FFDA         	movff	??_ISR+9,fsr2h
  5406  00012E  C009  FFD9         	movff	??_ISR+8,fsr2l
  5407  000132  C008  FFE2         	movff	??_ISR+7,fsr1h
  5408  000136  C007  FFE1         	movff	??_ISR+6,fsr1l
  5409  00013A  C006  FFEA         	movff	??_ISR+5,fsr0h
  5410  00013E  C005  FFE9         	movff	??_ISR+4,fsr0l
  5411  000142  C004  FFFB         	movff	??_ISR+3,pclatu
  5412  000146  C003  FFFA         	movff	??_ISR+2,pclath
  5413  00014A  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5414  00014C  0011               	retfie		f
  5415  00014E                     __end_of_ISR:
  5416                           	opt stack 0
  5417                           pclatu	equ	0xFFB
  5418                           pclath	equ	0xFFA
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           intcon	equ	0xFF2
  5426                           postinc0	equ	0xFEE
  5427                           fsr0h	equ	0xFEA
  5428                           fsr0l	equ	0xFE9
  5429                           wreg	equ	0xFE8
  5430                           postdec1	equ	0xFE5
  5431                           fsr1h	equ	0xFE2
  5432                           fsr1l	equ	0xFE1
  5433                           postinc2	equ	0xFDE
  5434                           postdec2	equ	0xFDD
  5435                           plusw2	equ	0xFDB
  5436                           fsr2h	equ	0xFDA
  5437                           fsr2l	equ	0xFD9
  5438                           status	equ	0xFD8
  5439                           pclatu	equ	0xFFB
  5440                           pclath	equ	0xFFA
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           prodh	equ	0xFF4
  5446                           prodl	equ	0xFF3
  5447                           intcon	equ	0xFF2
  5448                           postinc0	equ	0xFEE
  5449                           fsr0h	equ	0xFEA
  5450                           fsr0l	equ	0xFE9
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           plusw2	equ	0xFDB
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462                           	psect	rparam
  5463  0000                     pclatu	equ	0xFFB
  5464                           pclath	equ	0xFFA
  5465                           tblptru	equ	0xFF8
  5466                           tblptrh	equ	0xFF7
  5467                           tblptrl	equ	0xFF6
  5468                           tablat	equ	0xFF5
  5469                           prodh	equ	0xFF4
  5470                           prodl	equ	0xFF3
  5471                           intcon	equ	0xFF2
  5472                           postinc0	equ	0xFEE
  5473                           fsr0h	equ	0xFEA
  5474                           fsr0l	equ	0xFE9
  5475                           wreg	equ	0xFE8
  5476                           postdec1	equ	0xFE5
  5477                           fsr1h	equ	0xFE2
  5478                           fsr1l	equ	0xFE1
  5479                           postinc2	equ	0xFDE
  5480                           postdec2	equ	0xFDD
  5481                           plusw2	equ	0xFDB
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486                           	psect	temp
  5487  00004C                     btemp:
  5488                           	opt stack 0
  5489  00004C                     	ds	1
  5490  0000                     int$flags	set	btemp
  5491                           pclatu	equ	0xFFB
  5492                           pclath	equ	0xFFA
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           intcon	equ	0xFF2
  5500                           postinc0	equ	0xFEE
  5501                           fsr0h	equ	0xFEA
  5502                           fsr0l	equ	0xFE9
  5503                           wreg	equ	0xFE8
  5504                           postdec1	equ	0xFE5
  5505                           fsr1h	equ	0xFE2
  5506                           fsr1l	equ	0xFE1
  5507                           postinc2	equ	0xFDE
  5508                           postdec2	equ	0xFDD
  5509                           plusw2	equ	0xFDB
  5510                           fsr2h	equ	0xFDA
  5511                           fsr2l	equ	0xFD9
  5512                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    10
    Data        8
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      75
    BANK0           160     39      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[8]), STR_3(CODE[8]), STR_2(CODE[10]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@speedCompensation	PTR int  size(2) Largest target is 2
		 -> speedCompensation(COMRAM[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@rightWheelCommandedSpeed(COMRAM[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@leftWheelCommandedSpeed(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->___ftdiv
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    _excerciseControl->___ftge
    ___lltoft->___ftpack
    ___ftmul->___lltoft
    ___ftge->___ftmul
    ___fttol->___ftdiv
    ___ftdiv->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd
    _LCDclear->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   20677
                                             15 BANK0     24    24      0
                           _LCDclear
                     _LCDgotoLineTwo
                            _LCDinit
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
               _configureComparators
                    _configureTimers
                   _excerciseControl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              28    22      6    1890
                                             30 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             20 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _excerciseControl                                     4     4      0    9697
                                             59 COMRAM     4     4      0
                             ___ftge
                            ___ftmul
                           ___lltoft
                   _limitWheelSpeeds
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (2) _wheelVelocity                                        7     3      4    2926
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _limitWheelSpeeds                                     8     2      6     796
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2612
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2971
                                             35 COMRAM    15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             50 COMRAM     9     3      6
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _configureTimers                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureComparators                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     525
                                              0 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2669
                                             50 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2031
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDclear                                             0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       2
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDcheckBF
     _LCDcmd
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___lltoft
     ___ftpack
   _configureComparators
   _configureTimers
   _excerciseControl
     ___ftge
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft
       ___ftpack
     _limitWheelSpeeds
     _wheelVelocity
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      38       5       35.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      4B       1       79.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      83      12        0.0%
DATA                 0      0      83       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Apr 22 19:22:31 2016

                     ___wmul@multiplicand 0015                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l144 2414                                       l229 24C6  
                                     l183 1460                                       l187 15F8  
                                     l179 13F0                                       l711 23B2  
                                     l528 215E                                       l721 23F4  
                                     l586 1EFE                              __CFG_CPB$OFF 000000  
                                     _PR2 000FBB                              __CFG_CPD$OFF 000000  
                                     _ISR 0008                               ?_LCDcheckBF 0001  
                                     wreg 000FE8                                      ?_ISR 0001  
                            ___ftdiv@cntr 003C                              ___ftdiv@sign 0041  
                                    _C1IE 007D06                                      _C1IF 007D0E  
                                    l2110 1B90                                      l2102 1B6C  
                                    _C2IE 007D05                                      l2200 1378  
                                    l2120 1BF0                                      l2104 1B74  
                                    _C2IF 007D0D                                      l2210 13F8  
                                    l2114 1BA2                                      l2106 1B7C  
                                    l2050 1A2C                                      l2122 1BF8  
                                    l2220 14F0                                      l2212 1416  
                                    l2140 104A                                      l2116 1BA8  
                                    l2214 142C                                      l2046 1A1C  
                                    l2160 1132                                      l2240 161E  
                                    l2080 1B02                                      l2056 1A54  
                                    l2226 157E                                      l2154 10D8  
                                    l2146 107E                                      l2138 1034  
                                    l2066 1AB0                                      l2260 1E9A  
                                    l2236 1600                                      l2180 1232  
                                    l2092 1B2E                                      l2068 1AD6  
                                    l2254 1E72                                      l2182 1248  
                                    l2166 118C                                      l2078 1AFE  
                                    l2280 1ED8                                      l2512 1D44  
                                    l2504 1D0E                                      l2184 127E  
                                    l1730 2116                                      l1722 20E0  
                                    l2506 1D1E                                      l2194 1320  
                                    l2178 1214                                      l2098 1B48  
                                    l2530 16AC                                      l2508 1D28  
                                    l1812 1DA6                                      l2188 12CA  
                                    l2540 175C                                      l1734 212C  
                                    l1726 20EE                                      l1830 1DE8  
                                    l1806 1D7E                                      l1910 23EA  
                                    l1902 23CA                                      l1736 214A  
                                    l1728 20F8                                      l1840 1E10  
                                    l1904 23D2                                      l1738 2154  
                                    l1826 1DD8                                      l1770 1FDC  
                                    l1762 1F86                                      l1906 23D6  
                                    l2546 17BC                                      l2476 1C4C  
                                    l1852 2256                                      l1836 1E00  
                                    l2494 1CDE                                      l1862 22B2  
                                    l1870 22C8                                      l1766 1FB2  
                                    l1758 1F5C                                      l1790 24B8  
                                    l1856 2286                                      l2498 1CF2  
                                    l1882 2380                                      l1868 22BC  
                                    l1884 2388                                      l1894 23A8  
                                    l1886 238C                           __end_of_LCDinit 20D0  
                                    STR_1 100B                                      STR_2 1016  
                                    STR_3 1020                                      STR_4 1028  
                                    u1110 1FF8                                      u1070 1F4C  
                                    u1161 1D66                                      u1090 1FA2  
                                    u2107 2078                                      u2117 208E  
                                    u1181 1D8E                                      _LATA 000F89  
                                    u1510 11A6                                      u2127 20A4  
                                    u2137 20BA                                      u1610 1598  
                                    u1530 1294                                      u2067 2020  
                                    u2077 2036                                      u2087 204C  
                                    u1631 1E5A                                      u1560 1390  
                                    u1480 1094                                      u2097 2062  
                                    u1651 1E82                                      u1951 1C28  
                                    u1970 1C72                                      u1975 1C68  
                                    _TMR1 000FCE                                      _TMR5 000F4F  
                        ?_configureTimers 0001                                      _main 1636  
                            ___ftpack@arg 0013                              ___ftpack@exp 0016  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr0l 000FE9                                      fsr2h 000FDA  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 004C                             __CFG_BORV$190 000000  
                                    pclat 000FFA                           ??_wheelVelocity 0017  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 014E                             __CFG_IESO$OFF 000000  
                            ___ftmul@cntr 0031                              ___param_bank 000010  
                            ___ftmul@sign 0032                                     ??_ISR 0001  
                            ___fttol@exp1 006E                              ___fttol@lval 006A  
                        __end_of_LCDclear 2506                                     ?_main 0001  
                                   _CCPR2 000F67                                     _CCPR3 000F5E  
                         __end_of___ftdiv 1F30                           __end_of___ftmul 1E4A  
                                   _T1CON 000FCD                           __end_of___fttol 1D56  
                                   _T2CON 000FBA                                     _T5CON 000F4E  
                         __end_of___lwdiv 23BC                           __end_of___lwmod 23FE  
                                   i2l150 006C                                     i2l152 0112  
                                   i2l153 00C8                                     i2l154 00B2  
                                   i2l155 00BC                                     i2l149 0084  
                        __end_of_LCDwrite 24E6                                     _TRISA 000F92  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0023                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                __end_of_limitWheelSpeeds 200A                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers 100B  
                                   _event 0097                           __end_of_isdigit 24C0  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0017  
                                   _putch 2512                                     tablat 000FF5  
                                   plusw2 000FDB                                     status 000FD8  
                          __CFG_HFOFST$ON 000000                       __size_of_LCDcheckBF 0014  
                         __initialization 243E                              __end_of_main 1A12  
                                  ??_main 006F                             ___fttol@sign1 0069  
                           ISR@dummy_1123 0012                             __activetblptr 000002  
                               ??_LCDinit 0014                       main@speedLastMillis 0083  
                      wheelVelocity@speed 0013                        wheelVelocity@wheel 0019  
            __end_of_configureComparators 236A                                    _CCP2IE 007D00  
                                  _CCP2IF 007D08                                    _CCP3IE 007BD0  
                                  _CCP3IF 007BD8                                    ?_putch 0001  
                                  _ANSELD 000F3B                          __end_of___ftpack 217E  
                        __end_of___lltoft 2312                                    i2l2416 00E2  
                                  i2l2426 00FC                                    i2l2390 0076  
                          __CFG_WDTEN$OFF 000000                                    _LCDcmd 2506  
                                  _TMR2IE 007CE9                                    _TMR2IF 007CF1  
                                  _TMR1ON 007E68                                    _TMR5ON 007A70  
                       ?_excerciseControl 0001                            __CFG_PWRTEN$ON 000000  
                          __CFG_XINST$OFF 000000                        ??_excerciseControl 003C  
                            _CCPTMRS0bits 000F49                                    ___ftge 2226  
                                  ___wmul 247C                            __CFG_STVREN$ON 000000  
                               ??___ftdiv 0039                                 ??___ftmul 002A  
                               ??___fttol 0064                                 ??___lwdiv 0017  
                               ??___lwmod 001E                            _leftWheelCount 008B  
                                  clear_0 2444                                    _printf 1A12  
                   ___ftmul@f3_as_product 002E                              __pdataCOMRAM 0042  
                               ??_isdigit 0013                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                     main@controlLastMillis 0077  
       limitWheelSpeeds@speedCompensation 0017                                __accesstop 0060  
                 __end_of__initialization 246E                           __CFG_PBADEN$OFF 000000  
                              ___ftge@ff1 0033                                ___ftge@ff2 0036  
                               ?_LCDclear 0001                             ___rparam_used 000001  
                              ___ftdiv@f1 0033                                ___ftdiv@f2 0036  
                              ___ftdiv@f3 003D                   __size_of_LCDgotoLineTwo 0010  
                               ?_LCDwrite 0001                                ___ftmul@f1 0024  
                              ___ftmul@f2 0027                                ___fttol@f1 0060  
                          __pcstackCOMRAM 0001                                ___lltoft@c 001B  
                           __end_of_putch 251C                              ??_LCDcheckBF 0013  
                                 ??_putch 0015                                __pbssBANK0 0087  
                                 ?_LCDcmd 0001                     _rightWheelCommandedPW 0044  
                         __CFG_PLLCFG$OFF 000000                                ??_LCDclear 0014  
                              ??_LCDwrite 0014                        __end_of_LCDcheckBF 24D4  
                      __CFG_CCP2MX$PORTB3 000000                                   ?___ftge 0033  
          limitWheelSpeeds@leftWheelSpeed 0013                                   ?___wmul 0013  
                      __CFG_CCP3MX$PORTB5 000000                      main@leftCountTracker 007F  
                    _configureComparators 2312                                   _CM1CON0 000F79  
                                 _CM2CON0 000F78                                   _CCP2CON 000F66  
                                 _CCP3CON 000F5D                                 ?___ftpack 0013  
                                 ?_printf 001F                                 ?___lltoft 001B  
                                 _LCDinit 200A                         ?_limitWheelSpeeds 0013  
                      ??_limitWheelSpeeds 0019                           __size_of_LCDcmd 000C  
                                 __Hparam 0000                     __end_of_wheelVelocity 243E  
                                 __Lparam 0000                  __size_of_configureTimers 00A8  
                         __size_of___ftge 0090                     ?_configureComparators 0001  
                                 ___ftdiv 1E4A                           __size_of___wmul 0026  
                                 ___ftmul 1D56                                   ___fttol 1C12  
                                 ___lwdiv 236A                                   ___lwmod 23BC  
                            __psmallconst 1000                                   __pcinit 243E  
                              ??___ftpack 0018                                   __ramtop 1000  
                              ??___lltoft 001F                                   __ptext0 1636  
                                 __ptext1 1A12                                   __ptext2 2512  
                                 __ptext3 24D4                                   __ptext4 24A2  
                                 __ptext5 247C                                   __ptext6 23BC  
                                 __ptext7 236A                                   __ptext8 1032  
                                 __ptext9 23FE                           __size_of_printf 0200  
                            __size_of_ISR 0146                                 _T1CONbits 000FCD  
                                 _dpowers 1001                                 _T2CONbits 000FBA  
                                 _isdigit 24A2                                 _T5CONbits 000F4E  
                    end_of_initialization 246E                             __Lmediumconst 0000  
                  _leftWheelMeasuredSpeed 0093           limitWheelSpeeds@rightWheelSpeed 0015  
                          _LCDgotoLineTwo 24E6                                   printf@c 0031  
                                 printf@f 001F                         main@lcdLastMillis 007B  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                               _PORTAbits 000F80                                 _PORTBbits 000F81  
               __size_of_excerciseControl 0604                                 _TRISAbits 000F92  
                               _TRISBbits 000F93                                 _TRISDbits 000F95  
                               _TRISEbits 000F96                             LCDcmd@command 0013  
                             _CM1CON0bits 000F79                    __end_of_LCDgotoLineTwo 24F6  
                             _CM2CON0bits 000F78                               _CM2CON1bits 000F77  
                             ___ftdiv@exp 0040                            __end_of_LCDcmd 2512  
                             printf@width 002F                               _CCP2CONbits 000F66  
                             _CCP3CONbits 000F5D                         __size_of_LCDclear 0010  
                             ___ftmul@exp 002D                    ??_configureComparators 0013  
                       __size_of_LCDwrite 0012                   _rightWheelMeasuredSpeed 0095  
                    _leftWheelCommandedPW 0042                            __end_of___ftge 22B6  
                          __end_of___wmul 24A2                             __pidataCOMRAM 251C  
                       ??_configureTimers 0013                            __end_of_printf 1C12  
                     start_initialization 243E                               __end_of_ISR 014E  
                                ??_LCDcmd 0013                           ?_LCDgotoLineTwo 0001  
                                ??___ftge 0039                                  ??___wmul 0017  
                         _rightWheelCount 008F                                  ??_printf 0025  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 004A                                  ?_LCDinit 0001  
                           __pcstackBANK0 0060                              _isdigit$1790 0014  
                                ISR@dummy 0011                          ___lwdiv@dividend 0013  
               __size_of_limitWheelSpeeds 00DA                                 __pintcode 0008  
                                ?___ftdiv 0033                                  ?___ftmul 0024  
                                ?___fttol 0060                                  ?___lwdiv 0013  
                                ?___lwmod 001A  excerciseControl@rightWheelCommandedSpeed 0048  
                        __CFG_PRICLKEN$ON 000000                          _excerciseControl 1032  
                             __smallconst 1000                                  ?_isdigit 0001  
                        ___lwdiv@quotient 0017                            __size_of_putch 000A  
                          ___wmul@product 0017                                  _LATDbits 000F8C  
                                _LATEbits 000F8D                                  _LCDclear 24F6  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                                _LCDwrite 24D4                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                          __CFG_WDTPS$32768 000000  
                       ___wmul@multiplier 0013                                printf@flag 002C  
                              printf@prec 002B                          __size_of_LCDinit 00C6  
                  __size_of_wheelVelocity 0040                                 copy_data0 2462  
                                __Hrparam 0000                           _configureTimers 217E  
                                __Lrparam 0000                        __CFG_BOREN$SBORDIS 000000  
                   main@rightCountTracker 0081                         __CFG_P2BMX$PORTD2 000000  
                        __size_of___ftdiv 00E6                          __size_of___ftmul 00F4  
                        __size_of___fttol 0144                          __size_of___lwdiv 0052  
                        __size_of___lwmod 0042                                  ___ftpack 20D0  
                                ___lltoft 22B6                                _ANSELBbits 000F39  
                        __size_of_isdigit 001E                           ___lwdiv@divisor 0015  
                         ___lwdiv@counter 0019                                  __ptext10 1F30  
                                __ptext11 22B6                                  __ptext20 24E6  
                                __ptext12 1D56                                  __ptext21 24F6  
                                __ptext13 2226                                  __ptext22 2506  
                                __ptext14 217E                                  __ptext23 24C0  
                                __ptext15 2312                                  __ptext16 1C12  
                                __ptext17 1E4A                                  __ptext18 20D0  
                                __ptext19 200A                          ??_LCDgotoLineTwo 0014  
                           _elapsedMillis 0087                             __size_of_main 03DC  
          wheelVelocity@speedCompensation 0015                          _limitWheelSpeeds 1F30  
                           _wheelVelocity 23FE                                  int$flags 004C  
           __size_of_configureComparators 0058                                 printf@val 002D  
                       _speedCompensation 004A                                _LCDcheckBF 24C0  
                               putch@data 0015                                _INTCONbits 000FF2  
                                isdigit@c 0015                                  intlevel2 0000  
                 __end_of_configureTimers 2226                          ___lwmod@dividend 001A  
                            _VREFCON0bits 000F42                  __end_of_excerciseControl 1636  
 excerciseControl@leftWheelCommandedSpeed 0046                                _OSCCONbits 000FD3  
                          ?_wheelVelocity 0013                                  printf@ap 0029  
                         ___lwmod@divisor 001C                           ___lwmod@counter 001E  
                       __CFG_T3CMX$PORTB5 000000                         __CFG_FOSC$INTIO67 000000  
                           LCDwrite@input 0014  

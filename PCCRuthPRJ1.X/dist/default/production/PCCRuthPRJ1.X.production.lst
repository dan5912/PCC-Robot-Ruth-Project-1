

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Apr 23 14:55:20 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           	psect	idataCOMRAM
    50  002F78                     __pidataCOMRAM:
    51                           	opt stack 0
    52                           
    53                           ;initializer for _leftWheelCommandedPW
    54  002F78  02E9               	dw	745
    55                           
    56                           ;initializer for _rightWheelCommandedPW
    57  002F7A  02D5               	dw	725
    58                           
    59                           	psect	idataBANK0
    60  002F7C                     __pidataBANK0:
    61                           	opt stack 0
    62                           
    63                           ;initializer for excerciseControl@leftWheelCommandedSpeed
    64  002F7C  0023               	dw	35
    65                           
    66                           ;initializer for excerciseControl@rightWheelCommandedSpeed
    67  002F7E  0019               	dw	25
    68                           
    69                           	psect	smallconst
    70  001000                     __psmallconst:
    71                           	opt stack 0
    72  001000  00                 	db	0
    73  001001                     _dpowers:
    74                           	opt stack 0
    75  001001  0001               	dw	1
    76  001003  000A               	dw	10
    77  001005  0064               	dw	100
    78  001007  03E8               	dw	1000
    79  001009  2710               	dw	10000
    80  00100B                     __end_of_dpowers:
    81                           	opt stack 0
    82  0000                     _CCPR3	set	3934
    83  0000                     _TMR5	set	3919
    84  0000                     _ANSELBbits	set	3897
    85  0000                     _ANSELD	set	3899
    86  0000                     _CCP3CON	set	3933
    87  0000                     _CCP3CONbits	set	3933
    88  0000                     _CCPTMRS0bits	set	3913
    89  0000                     _T5CON	set	3918
    90  0000                     _T5CONbits	set	3918
    91  0000                     _VREFCON0bits	set	3906
    92  0000                     _TMR5ON	set	31344
    93  0000                     _CCPR2	set	3943
    94  0000                     _TMR1	set	4046
    95  0000                     _CCP2CON	set	3942
    96  0000                     _CCP2CONbits	set	3942
    97  0000                     _CM1CON0	set	3961
    98  0000                     _CM1CON0bits	set	3961
    99  0000                     _CM2CON0	set	3960
   100  0000                     _CM2CON0bits	set	3960
   101  0000                     _CM2CON1bits	set	3959
   102  0000                     _INTCONbits	set	4082
   103  0000                     _LATA	set	3977
   104  0000                     _LATDbits	set	3980
   105  0000                     _LATEbits	set	3981
   106  0000                     _OSCCONbits	set	4051
   107  0000                     _PIE1bits	set	3997
   108  0000                     _PIE2bits	set	4000
   109  0000                     _PIR1bits	set	3998
   110  0000                     _PIR2bits	set	4001
   111  0000                     _PORTAbits	set	3968
   112  0000                     _PR2	set	4027
   113  0000                     _T1CON	set	4045
   114  0000                     _T1CONbits	set	4045
   115  0000                     _T2CON	set	4026
   116  0000                     _T2CONbits	set	4026
   117  0000                     _TRISA	set	3986
   118  0000                     _TRISAbits	set	3986
   119  0000                     _TRISBbits	set	3987
   120  0000                     _TRISDbits	set	3989
   121  0000                     _TRISEbits	set	3990
   122  0000                     _C1IE	set	32006
   123  0000                     _C1IF	set	32014
   124  0000                     _C2IE	set	32005
   125  0000                     _C2IF	set	32013
   126  0000                     _CCP2IE	set	32000
   127  0000                     _CCP2IF	set	32008
   128  0000                     _CCP3IE	set	31696
   129  0000                     _CCP3IF	set	31704
   130  0000                     _TMR1ON	set	32360
   131  0000                     _TMR2IE	set	31977
   132  0000                     _TMR2IF	set	31985
   133  00100B                     STR_1:
   134  00100B  45                 	db	69	;'E'
   135  00100C  76                 	db	118	;'v'
   136  00100D  65                 	db	101	;'e'
   137  00100E  6E                 	db	110	;'n'
   138  00100F  74                 	db	116	;'t'
   139  001010  3A                 	db	58	;':'
   140  001011  20                 	db	32
   141  001012  25                 	db	37
   142  001013  33                 	db	51	;'3'
   143  001014  64                 	db	100	;'d'
   144  001015  00                 	db	0
   145  001016                     STR_2:
   146  001016  53                 	db	83	;'S'
   147  001017  70                 	db	112	;'p'
   148  001018  65                 	db	101	;'e'
   149  001019  65                 	db	101	;'e'
   150  00101A  64                 	db	100	;'d'
   151  00101B  3A                 	db	58	;':'
   152  00101C  20                 	db	32
   153  00101D  25                 	db	37
   154  00101E  64                 	db	100	;'d'
   155  00101F  00                 	db	0
   156  001020                     STR_3:
   157  001020  4C                 	db	76	;'L'
   158  001021  57                 	db	87	;'W'
   159  001022  3A                 	db	58	;':'
   160  001023  20                 	db	32
   161  001024  25                 	db	37
   162  001025  64                 	db	100	;'d'
   163  001026  20                 	db	32
   164  001027  00                 	db	0
   165  001028                     STR_4:
   166  001028  20                 	db	32
   167  001029  52                 	db	82	;'R'
   168  00102A  57                 	db	87	;'W'
   169  00102B  3A                 	db	58	;':'
   170  00102C  20                 	db	32
   171  00102D  25                 	db	37
   172  00102E  64                 	db	100	;'d'
   173  00102F  00                 	db	0
   174                           
   175                           ; #config settings
   176  001030  00                 	db	0	; dummy byte at the end
   177  0000                     
   178                           	psect	cinit
   179  002C62                     __pcinit:
   180                           	opt stack 0
   181  002C62                     start_initialization:
   182                           	opt stack 0
   183  002C62                     __initialization:
   184                           	opt stack 0
   185                           
   186                           ; Clear objects allocated to BANK0 (19 bytes)
   187  002C62  EE00  F0A1         	lfsr	0,__pbssBANK0
   188  002C66  0E13               	movlw	19
   189  002C68                     clear_0:
   190  002C68  6AEE               	clrf	postinc0,c
   191  002C6A  06E8               	decf	wreg,f,c
   192  002C6C  E1FD               	bnz	clear_0
   193                           
   194                           ; Clear objects allocated to COMRAM (2 bytes)
   195  002C6E  6A4B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   196  002C70  6A4A               	clrf	__pbssCOMRAM& (0+255),c
   197                           
   198                           ; Initialize objects allocated to BANK0 (4 bytes)
   199                           ; load TBLPTR registers with __pidataBANK0
   200  002C72  0E7C               	movlw	low __pidataBANK0
   201  002C74  6EF6               	movwf	tblptrl,c
   202  002C76  0E2F               	movlw	high __pidataBANK0
   203  002C78  6EF7               	movwf	tblptrh,c
   204  002C7A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   205  002C7C  6EF8               	movwf	tblptru,c
   206  002C7E  EE00  F0B4         	lfsr	0,__pdataBANK0
   207  002C82  EE10 F004          	lfsr	1,4
   208  002C86                     copy_data0:
   209  002C86  0009               	tblrd		*+
   210  002C88  CFF5 FFEE          	movff	tablat,postinc0
   211  002C8C  50E5               	movf	postdec1,w,c
   212  002C8E  50E1               	movf	fsr1l,w,c
   213  002C90  E1FA               	bnz	copy_data0
   214                           
   215                           ; Initialize objects allocated to COMRAM (4 bytes)
   216                           ; load TBLPTR registers with __pidataCOMRAM
   217  002C92  0E78               	movlw	low __pidataCOMRAM
   218  002C94  6EF6               	movwf	tblptrl,c
   219  002C96  0E2F               	movlw	high __pidataCOMRAM
   220  002C98  6EF7               	movwf	tblptrh,c
   221  002C9A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   222  002C9C  6EF8               	movwf	tblptru,c
   223  002C9E  EE00  F046         	lfsr	0,__pdataCOMRAM
   224  002CA2  EE10 F004          	lfsr	1,4
   225  002CA6                     copy_data1:
   226  002CA6  0009               	tblrd		*+
   227  002CA8  CFF5 FFEE          	movff	tablat,postinc0
   228  002CAC  50E5               	movf	postdec1,w,c
   229  002CAE  50E1               	movf	fsr1l,w,c
   230  002CB0  E1FA               	bnz	copy_data1
   231  002CB2                     end_of_initialization:
   232                           	opt stack 0
   233  002CB2                     __end_of__initialization:
   234                           	opt stack 0
   235  002CB2  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   236  002CB4  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   237  002CB6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   238  002CB8  6EF8               	movwf	tblptru,c
   239  002CBA  0100               	movlb	0
   240  002CBC  EF0F  F00E         	goto	_main	;jump to C main() function
   241                           tblptru	equ	0xFF8
   242                           tblptrh	equ	0xFF7
   243                           tblptrl	equ	0xFF6
   244                           tablat	equ	0xFF5
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           postdec1	equ	0xFE5
   248                           fsr1l	equ	0xFE1
   249                           
   250                           	psect	bssCOMRAM
   251  00004A                     __pbssCOMRAM:
   252                           	opt stack 0
   253  00004A                     _errno:
   254                           	opt stack 0
   255  00004A                     	ds	2
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           postdec1	equ	0xFE5
   263                           fsr1l	equ	0xFE1
   264                           
   265                           	psect	dataCOMRAM
   266  000046                     __pdataCOMRAM:
   267                           	opt stack 0
   268  000046                     _leftWheelCommandedPW:
   269                           	opt stack 0
   270  000046                     	ds	2
   271  000048                     _rightWheelCommandedPW:
   272                           	opt stack 0
   273  000048                     	ds	2
   274                           tblptru	equ	0xFF8
   275                           tblptrh	equ	0xFF7
   276                           tblptrl	equ	0xFF6
   277                           tablat	equ	0xFF5
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           postdec1	equ	0xFE5
   281                           fsr1l	equ	0xFE1
   282                           
   283                           	psect	bssBANK0
   284  0000A1                     __pbssBANK0:
   285                           	opt stack 0
   286  0000A1                     _elapsedMillis:
   287                           	opt stack 0
   288  0000A1                     	ds	4
   289  0000A5                     _leftWheelCount:
   290                           	opt stack 0
   291  0000A5                     	ds	4
   292  0000A9                     _rightWheelCount:
   293                           	opt stack 0
   294  0000A9                     	ds	4
   295  0000AD                     _leftWheelMeasuredSpeed:
   296                           	opt stack 0
   297  0000AD                     	ds	2
   298  0000AF                     _rightWheelMeasuredSpeed:
   299                           	opt stack 0
   300  0000AF                     	ds	2
   301  0000B1                     _event:
   302                           	opt stack 0
   303  0000B1                     	ds	1
   304  0000B2                     _speedCompensation:
   305                           	opt stack 0
   306  0000B2                     	ds	2
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           postdec1	equ	0xFE5
   314                           fsr1l	equ	0xFE1
   315                           
   316                           	psect	dataBANK0
   317  0000B4                     __pdataBANK0:
   318                           	opt stack 0
   319  0000B4                     excerciseControl@leftWheelCommandedSpeed:
   320                           	opt stack 0
   321  0000B4                     	ds	2
   322  0000B6                     excerciseControl@rightWheelCommandedSpeed:
   323                           	opt stack 0
   324  0000B6                     	ds	2
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           postdec1	equ	0xFE5
   332                           fsr1l	equ	0xFE1
   333                           
   334                           	psect	cstackBANK0
   335  000060                     __pcstackBANK0:
   336                           	opt stack 0
   337  000060                     sqrt@og:
   338                           	opt stack 0
   339                           
   340                           ; 3 bytes @ 0x0
   341  000060                     	ds	3
   342  000063                     sqrt@z:
   343                           	opt stack 0
   344                           
   345                           ; 3 bytes @ 0x3
   346  000063                     	ds	3
   347  000066                     sqrt@i:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x6
   351  000066                     	ds	1
   352  000067                     sqrt@q:
   353                           	opt stack 0
   354                           
   355                           ; 3 bytes @ 0x7
   356  000067                     	ds	3
   357  00006A                     sqrt@x:
   358                           	opt stack 0
   359                           
   360                           ; 3 bytes @ 0xA
   361  00006A                     	ds	3
   362  00006D                     ??___fttol:
   363                           
   364                           ; 1 bytes @ 0xD
   365  00006D                     	ds	5
   366  000072                     ___fttol@sign1:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x12
   370  000072                     	ds	1
   371  000073                     ___fttol@lval:
   372                           	opt stack 0
   373                           
   374                           ; 4 bytes @ 0x13
   375  000073                     	ds	4
   376  000077                     ___fttol@exp1:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x17
   380  000077                     	ds	1
   381  000078                     ??_excerciseControl:
   382                           
   383                           ; 1 bytes @ 0x18
   384  000078                     	ds	4
   385  00007C                     _excerciseControl$2013:
   386                           	opt stack 0
   387                           
   388                           ; 3 bytes @ 0x1C
   389  00007C                     	ds	3
   390  00007F                     excerciseControl@i:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x1F
   394  00007F                     	ds	2
   395  000081                     excerciseControl@i_1028:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x21
   399  000081                     	ds	2
   400  000083                     _excerciseControl$2011:
   401                           	opt stack 0
   402                           
   403                           ; 3 bytes @ 0x23
   404  000083                     	ds	3
   405  000086                     _excerciseControl$2012:
   406                           	opt stack 0
   407                           
   408                           ; 3 bytes @ 0x26
   409  000086                     	ds	3
   410  000089                     ??_main:
   411                           
   412                           ; 1 bytes @ 0x29
   413  000089                     	ds	8
   414  000091                     main@controlLastMillis:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0x31
   418  000091                     	ds	4
   419  000095                     main@lcdLastMillis:
   420                           	opt stack 0
   421                           
   422                           ; 4 bytes @ 0x35
   423  000095                     	ds	4
   424  000099                     main@leftCountTracker:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x39
   428  000099                     	ds	2
   429  00009B                     main@rightCountTracker:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x3B
   433  00009B                     	ds	2
   434  00009D                     main@speedLastMillis:
   435                           	opt stack 0
   436                           
   437                           ; 4 bytes @ 0x3D
   438  00009D                     	ds	4
   439                           tblptru	equ	0xFF8
   440                           tblptrh	equ	0xFF7
   441                           tblptrl	equ	0xFF6
   442                           tablat	equ	0xFF5
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1l	equ	0xFE1
   447                           
   448                           	psect	cstackCOMRAM
   449  000001                     __pcstackCOMRAM:
   450                           	opt stack 0
   451  000001                     ??_ISR:
   452  000001                     
   453                           ; 1 bytes @ 0x0
   454  000001                     	ds	16
   455  000011                     ISR@dummy:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x10
   459  000011                     	ds	1
   460  000012                     ISR@dummy_1014:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x11
   464  000012                     	ds	1
   465  000013                     ??_isdigit:
   466  000013                     ?___wmul:
   467                           	opt stack 0
   468  000013                     ?___lwdiv:
   469                           	opt stack 0
   470  000013                     ?___ftpack:
   471                           	opt stack 0
   472  000013                     ?___llmod:
   473                           	opt stack 0
   474  000013                     LCDcmd@command:
   475                           	opt stack 0
   476  000013                     limitWheelSpeeds@leftWheelSpeed:
   477                           	opt stack 0
   478  000013                     wheelVelocity@speed:
   479                           	opt stack 0
   480  000013                     ___wmul@multiplier:
   481                           	opt stack 0
   482  000013                     ___lwdiv@dividend:
   483                           	opt stack 0
   484  000013                     ___ftpack@arg:
   485                           	opt stack 0
   486  000013                     ___ftge@ff1:
   487                           	opt stack 0
   488  000013                     ___llmod@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x12
   492  000013                     	ds	1
   493  000014                     ??_LCDinit:
   494  000014                     LCDwrite@input:
   495                           	opt stack 0
   496  000014                     _isdigit$1671:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x13
   500  000014                     	ds	1
   501  000015                     putch@data:
   502                           	opt stack 0
   503  000015                     isdigit@c:
   504                           	opt stack 0
   505  000015                     limitWheelSpeeds@rightWheelSpeed:
   506                           	opt stack 0
   507  000015                     wheelVelocity@speedCompensation:
   508                           	opt stack 0
   509  000015                     ___wmul@multiplicand:
   510                           	opt stack 0
   511  000015                     ___lwdiv@divisor:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x14
   515  000015                     	ds	1
   516  000016                     ___ftpack@exp:
   517                           	opt stack 0
   518  000016                     ___ftge@ff2:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x15
   522  000016                     	ds	1
   523  000017                     ??_wheelVelocity:
   524  000017                     ___ftpack@sign:
   525                           	opt stack 0
   526  000017                     limitWheelSpeeds@speedCompensation:
   527                           	opt stack 0
   528  000017                     ___wmul@product:
   529                           	opt stack 0
   530  000017                     ___lwdiv@quotient:
   531                           	opt stack 0
   532  000017                     ___llmod@divisor:
   533                           	opt stack 0
   534                           
   535                           ; 4 bytes @ 0x16
   536  000017                     	ds	1
   537  000018                     ??___ftpack:
   538                           
   539                           ; 1 bytes @ 0x17
   540  000018                     	ds	1
   541  000019                     ??___ftge:
   542  000019                     wheelVelocity@wheel:
   543                           	opt stack 0
   544  000019                     ___lwdiv@counter:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x18
   548  000019                     	ds	1
   549  00001A                     ?___lwmod:
   550                           	opt stack 0
   551  00001A                     ___lwmod@dividend:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x19
   555  00001A                     	ds	1
   556  00001B                     ?___awtoft:
   557                           	opt stack 0
   558  00001B                     ?___lltoft:
   559                           	opt stack 0
   560  00001B                     ___llmod@counter:
   561                           	opt stack 0
   562  00001B                     ___awtoft@c:
   563                           	opt stack 0
   564  00001B                     ___lltoft@c:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0x1A
   568  00001B                     	ds	1
   569  00001C                     ___lwmod@divisor:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x1B
   573  00001C                     	ds	2
   574  00001E                     ___awtoft@sign:
   575                           	opt stack 0
   576  00001E                     ___lwmod@counter:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x1D
   580  00001E                     	ds	1
   581  00001F                     ??___lltoft:
   582  00001F                     ?_printf:
   583                           	opt stack 0
   584  00001F                     printf@f:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x1E
   588  00001F                     	ds	4
   589  000023                     ___lltoft@exp:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x22
   593  000023                     	ds	1
   594  000024                     ?___ftadd:
   595                           	opt stack 0
   596  000024                     ?___ftmul:
   597                           	opt stack 0
   598  000024                     ___ftadd@f1:
   599                           	opt stack 0
   600  000024                     ___ftmul@f1:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x23
   604  000024                     	ds	1
   605  000025                     ??_printf:
   606                           
   607                           ; 1 bytes @ 0x24
   608  000025                     	ds	2
   609  000027                     ___ftadd@f2:
   610                           	opt stack 0
   611  000027                     ___ftmul@f2:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x26
   615  000027                     	ds	2
   616  000029                     printf@ap:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x28
   620  000029                     	ds	1
   621  00002A                     ??___ftadd:
   622  00002A                     ??___ftmul:
   623                           
   624                           ; 1 bytes @ 0x29
   625  00002A                     	ds	1
   626  00002B                     printf@prec:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x2A
   630  00002B                     	ds	1
   631  00002C                     printf@flag:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x2B
   635  00002C                     	ds	1
   636  00002D                     ___ftadd@sign:
   637                           	opt stack 0
   638  00002D                     ___ftmul@exp:
   639                           	opt stack 0
   640  00002D                     printf@val:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x2C
   644  00002D                     	ds	1
   645  00002E                     ___ftadd@exp2:
   646                           	opt stack 0
   647  00002E                     ___ftmul@f3_as_product:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x2D
   651  00002E                     	ds	1
   652  00002F                     ___ftadd@exp1:
   653                           	opt stack 0
   654  00002F                     printf@width:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x2E
   658  00002F                     	ds	1
   659  000030                     ?___ftsub:
   660                           	opt stack 0
   661  000030                     ___ftsub@f1:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x2F
   665  000030                     	ds	1
   666  000031                     printf@c:
   667                           	opt stack 0
   668  000031                     ___ftmul@cntr:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x30
   672  000031                     	ds	1
   673  000032                     ___ftmul@sign:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x31
   677  000032                     	ds	1
   678  000033                     ?___ftdiv:
   679                           	opt stack 0
   680  000033                     ___ftdiv@f1:
   681                           	opt stack 0
   682  000033                     ___ftsub@f2:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x32
   686  000033                     	ds	3
   687  000036                     ?_sqrt:
   688                           	opt stack 0
   689  000036                     ___ftdiv@f2:
   690                           	opt stack 0
   691  000036                     sqrt@a:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0x35
   695  000036                     	ds	3
   696  000039                     ??_sqrt:
   697  000039                     ??___ftdiv:
   698                           
   699                           ; 1 bytes @ 0x38
   700  000039                     	ds	3
   701  00003C                     ___ftdiv@cntr:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x3B
   705  00003C                     	ds	1
   706  00003D                     ___ftdiv@f3:
   707                           	opt stack 0
   708                           
   709                           ; 3 bytes @ 0x3C
   710  00003D                     	ds	3
   711  000040                     ___ftdiv@exp:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x3F
   715  000040                     	ds	1
   716  000041                     ___ftdiv@sign:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x40
   720  000041                     	ds	1
   721  000042                     ?___fttol:
   722                           	opt stack 0
   723  000042                     ___fttol@f1:
   724                           	opt stack 0
   725                           
   726                           ; 3 bytes @ 0x41
   727  000042                     	ds	4
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           
   737 ;;
   738 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   739 ;;
   740 ;; *************** function _main *****************
   741 ;; Defined at:
   742 ;;		line 139 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  speedLastMil    4   61[BANK0 ] unsigned long 
   747 ;;  lcdLastMilli    4   53[BANK0 ] unsigned long 
   748 ;;  controlLastM    4   49[BANK0 ] unsigned long 
   749 ;;  rightCountTr    2   59[BANK0 ] int 
   750 ;;  leftCountTra    2   57[BANK0 ] int 
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;Total ram usage:       24 bytes
   765 ;; Hardware stack levels required when called:    6
   766 ;; This function calls:
   767 ;;		_LCDclear
   768 ;;		_LCDgotoLineTwo
   769 ;;		_LCDinit
   770 ;;		___ftdiv
   771 ;;		___ftmul
   772 ;;		___fttol
   773 ;;		___lltoft
   774 ;;		_configureComparators
   775 ;;		_configureTimers
   776 ;;		_excerciseControl
   777 ;;		_printf
   778 ;; This function is called by:
   779 ;;		Startup code after reset
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           	psect	text0
   784  001C1E                     __ptext0:
   785                           	opt stack 0
   786  001C1E                     _main:
   787                           	opt stack 25
   788                           
   789                           ;main.c: 141: OSCCONbits.IRCF = 0b110;
   790                           
   791                           ;incstack = 0
   792  001C1E  50D3               	movf	4051,w,c	;volatile
   793  001C20  0B8F               	andlw	-113
   794  001C22  0960               	iorlw	96
   795  001C24  6ED3               	movwf	4051,c	;volatile
   796                           
   797                           ;main.c: 144: configureComparators();
   798  001C26  ECBA  F016         	call	_configureComparators	;wreg free
   799                           
   800                           ;main.c: 145: configureTimers();
   801  001C2A  EC62  F015         	call	_configureTimers	;wreg free
   802                           
   803                           ;main.c: 147: TRISBbits.TRISB4 = 1;
   804  001C2E  8893               	bsf	3987,4,c	;volatile
   805                           
   806                           ;main.c: 148: ANSELBbits.ANSB4 = 0;
   807  001C30  010F               	movlb	15	; () banked
   808  001C32  9939               	bcf	57,4,b	;volatile
   809                           
   810                           ;main.c: 152: unsigned long controlLastMillis = 0;
   811  001C34  0E00               	movlw	0
   812  001C36  0100               	movlb	0	; () banked
   813  001C38  6F91               	movwf	main@controlLastMillis& (0+255),b
   814  001C3A  0E00               	movlw	0
   815  001C3C  6F92               	movwf	(main@controlLastMillis+1)& (0+255),b
   816  001C3E  0E00               	movlw	0
   817  001C40  6F93               	movwf	(main@controlLastMillis+2)& (0+255),b
   818  001C42  0E00               	movlw	0
   819  001C44  6F94               	movwf	(main@controlLastMillis+3)& (0+255),b
   820                           
   821                           ;main.c: 153: unsigned long lcdLastMillis = 0;
   822  001C46  0E00               	movlw	0
   823  001C48  0100               	movlb	0	; () banked
   824  001C4A  6F95               	movwf	main@lcdLastMillis& (0+255),b
   825  001C4C  0E00               	movlw	0
   826  001C4E  6F96               	movwf	(main@lcdLastMillis+1)& (0+255),b
   827  001C50  0E00               	movlw	0
   828  001C52  6F97               	movwf	(main@lcdLastMillis+2)& (0+255),b
   829  001C54  0E00               	movlw	0
   830  001C56  6F98               	movwf	(main@lcdLastMillis+3)& (0+255),b
   831                           
   832                           ;main.c: 154: unsigned long speedLastMillis = 0;
   833  001C58  0E00               	movlw	0
   834  001C5A  0100               	movlb	0	; () banked
   835  001C5C  6F9D               	movwf	main@speedLastMillis& (0+255),b
   836  001C5E  0E00               	movlw	0
   837  001C60  6F9E               	movwf	(main@speedLastMillis+1)& (0+255),b
   838  001C62  0E00               	movlw	0
   839  001C64  6F9F               	movwf	(main@speedLastMillis+2)& (0+255),b
   840  001C66  0E00               	movlw	0
   841  001C68  6FA0               	movwf	(main@speedLastMillis+3)& (0+255),b
   842                           
   843                           ;main.c: 155: int leftCountTracker = 0;
   844  001C6A  0E00               	movlw	0
   845  001C6C  0100               	movlb	0	; () banked
   846  001C6E  6F9A               	movwf	(main@leftCountTracker+1)& (0+255),b
   847  001C70  0E00               	movlw	0
   848  001C72  6F99               	movwf	main@leftCountTracker& (0+255),b
   849                           
   850                           ;main.c: 156: int rightCountTracker = 0;
   851  001C74  0E00               	movlw	0
   852  001C76  0100               	movlb	0	; () banked
   853  001C78  6F9C               	movwf	(main@rightCountTracker+1)& (0+255),b
   854  001C7A  0E00               	movlw	0
   855  001C7C  6F9B               	movwf	main@rightCountTracker& (0+255),b
   856                           
   857                           ; BSR set to: 0
   858                           ;main.c: 159: LCDinit();
   859  001C7E  ECA8  F014         	call	_LCDinit	;wreg free
   860                           
   861                           ;main.c: 160: printf("Event: %3d", event);
   862  001C82  0E0B               	movlw	low STR_1
   863  001C84  6E1F               	movwf	printf@f,c
   864  001C86  0E10               	movlw	high STR_1
   865  001C88  6E20               	movwf	printf@f+1,c
   866  001C8A  C0B1  F021         	movff	_event,?_printf+2
   867  001C8E  6A22               	clrf	?_printf+3,c
   868  001C90  ECFD  F00F         	call	_printf	;wreg free
   869  001C94                     l3271:
   870                           
   871                           ;main.c: 165: {
   872                           ;main.c: 170: if(lcdLastMillis + 250 < elapsedMillis)
   873  001C94  0EFA               	movlw	250
   874  001C96  0100               	movlb	0	; () banked
   875  001C98  2595               	addwf	main@lcdLastMillis& (0+255),w,b
   876  001C9A  0100               	movlb	0	; () banked
   877  001C9C  6F89               	movwf	??_main& (0+255),b
   878  001C9E  0E00               	movlw	0
   879  001CA0  0100               	movlb	0	; () banked
   880  001CA2  2196               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
   881  001CA4  0100               	movlb	0	; () banked
   882  001CA6  6F8A               	movwf	(??_main+1)& (0+255),b
   883  001CA8  0E00               	movlw	0
   884  001CAA  0100               	movlb	0	; () banked
   885  001CAC  2197               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
   886  001CAE  0100               	movlb	0	; () banked
   887  001CB0  6F8B               	movwf	(??_main+2)& (0+255),b
   888  001CB2  0E00               	movlw	0
   889  001CB4  0100               	movlb	0	; () banked
   890  001CB6  2198               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
   891  001CB8  0100               	movlb	0	; () banked
   892  001CBA  6F8C               	movwf	(??_main+3)& (0+255),b
   893  001CBC  0100               	movlb	0	; () banked
   894  001CBE  51A1               	movf	_elapsedMillis& (0+255),w,b
   895  001CC0  0100               	movlb	0	; () banked
   896  001CC2  5D89               	subwf	??_main& (0+255),w,b
   897  001CC4  0100               	movlb	0	; () banked
   898  001CC6  51A2               	movf	(_elapsedMillis+1)& (0+255),w,b
   899  001CC8  0100               	movlb	0	; () banked
   900  001CCA  598A               	subwfb	(??_main+1)& (0+255),w,b
   901  001CCC  0100               	movlb	0	; () banked
   902  001CCE  51A3               	movf	(_elapsedMillis+2)& (0+255),w,b
   903  001CD0  0100               	movlb	0	; () banked
   904  001CD2  598B               	subwfb	(??_main+2)& (0+255),w,b
   905  001CD4  0100               	movlb	0	; () banked
   906  001CD6  51A4               	movf	(_elapsedMillis+3)& (0+255),w,b
   907  001CD8  0100               	movlb	0	; () banked
   908  001CDA  598C               	subwfb	(??_main+3)& (0+255),w,b
   909  001CDC  B0D8               	btfsc	status,0,c
   910  001CDE  D032               	goto	l3281
   911                           
   912                           ; BSR set to: 0
   913                           ;main.c: 171: {
   914                           ;main.c: 172: LCDclear();
   915  001CE0  ECA9  F017         	call	_LCDclear	;wreg free
   916                           
   917                           ;main.c: 173: printf("Speed: %d", rightWheelMeasuredSpeed);
   918  001CE4  0E16               	movlw	low STR_2
   919  001CE6  6E1F               	movwf	printf@f,c
   920  001CE8  0E10               	movlw	high STR_2
   921  001CEA  6E20               	movwf	printf@f+1,c
   922  001CEC  C0AF  F021         	movff	_rightWheelMeasuredSpeed,?_printf+2
   923  001CF0  C0B0  F022         	movff	_rightWheelMeasuredSpeed+1,?_printf+3
   924  001CF4  ECFD  F00F         	call	_printf	;wreg free
   925                           
   926                           ;main.c: 174: lcdLastMillis = elapsedMillis;
   927  001CF8  C0A1  F095         	movff	_elapsedMillis,main@lcdLastMillis
   928  001CFC  C0A2  F096         	movff	_elapsedMillis+1,main@lcdLastMillis+1
   929  001D00  C0A3  F097         	movff	_elapsedMillis+2,main@lcdLastMillis+2
   930  001D04  C0A4  F098         	movff	_elapsedMillis+3,main@lcdLastMillis+3
   931                           
   932                           ;main.c: 175: LCDgotoLineTwo();
   933  001D08  ECA1  F017         	call	_LCDgotoLineTwo	;wreg free
   934                           
   935                           ;main.c: 176: printf("LW: %d ", leftWheelCount);
   936  001D0C  0E20               	movlw	low STR_3
   937  001D0E  6E1F               	movwf	printf@f,c
   938  001D10  0E10               	movlw	high STR_3
   939  001D12  6E20               	movwf	printf@f+1,c
   940  001D14  C0A5  F021         	movff	_leftWheelCount,?_printf+2
   941  001D18  C0A6  F022         	movff	_leftWheelCount+1,?_printf+3
   942  001D1C  C0A7  F023         	movff	_leftWheelCount+2,?_printf+4
   943  001D20  C0A8  F024         	movff	_leftWheelCount+3,?_printf+5
   944  001D24  ECFD  F00F         	call	_printf	;wreg free
   945                           
   946                           ;main.c: 177: printf(" RW: %d", rightWheelCount);
   947  001D28  0E28               	movlw	low STR_4
   948  001D2A  6E1F               	movwf	printf@f,c
   949  001D2C  0E10               	movlw	high STR_4
   950  001D2E  6E20               	movwf	printf@f+1,c
   951  001D30  C0A9  F021         	movff	_rightWheelCount,?_printf+2
   952  001D34  C0AA  F022         	movff	_rightWheelCount+1,?_printf+3
   953  001D38  C0AB  F023         	movff	_rightWheelCount+2,?_printf+4
   954  001D3C  C0AC  F024         	movff	_rightWheelCount+3,?_printf+5
   955  001D40  ECFD  F00F         	call	_printf	;wreg free
   956  001D44                     l3281:
   957                           
   958                           ;main.c: 178: }
   959                           ;main.c: 182: if(controlLastMillis + 100 < elapsedMillis)
   960  001D44  0E64               	movlw	100
   961  001D46  0100               	movlb	0	; () banked
   962  001D48  2591               	addwf	main@controlLastMillis& (0+255),w,b
   963  001D4A  0100               	movlb	0	; () banked
   964  001D4C  6F89               	movwf	??_main& (0+255),b
   965  001D4E  0E00               	movlw	0
   966  001D50  0100               	movlb	0	; () banked
   967  001D52  2192               	addwfc	(main@controlLastMillis+1)& (0+255),w,b
   968  001D54  0100               	movlb	0	; () banked
   969  001D56  6F8A               	movwf	(??_main+1)& (0+255),b
   970  001D58  0E00               	movlw	0
   971  001D5A  0100               	movlb	0	; () banked
   972  001D5C  2193               	addwfc	(main@controlLastMillis+2)& (0+255),w,b
   973  001D5E  0100               	movlb	0	; () banked
   974  001D60  6F8B               	movwf	(??_main+2)& (0+255),b
   975  001D62  0E00               	movlw	0
   976  001D64  0100               	movlb	0	; () banked
   977  001D66  2194               	addwfc	(main@controlLastMillis+3)& (0+255),w,b
   978  001D68  0100               	movlb	0	; () banked
   979  001D6A  6F8C               	movwf	(??_main+3)& (0+255),b
   980  001D6C  0100               	movlb	0	; () banked
   981  001D6E  51A1               	movf	_elapsedMillis& (0+255),w,b
   982  001D70  0100               	movlb	0	; () banked
   983  001D72  5D89               	subwf	??_main& (0+255),w,b
   984  001D74  0100               	movlb	0	; () banked
   985  001D76  51A2               	movf	(_elapsedMillis+1)& (0+255),w,b
   986  001D78  0100               	movlb	0	; () banked
   987  001D7A  598A               	subwfb	(??_main+1)& (0+255),w,b
   988  001D7C  0100               	movlb	0	; () banked
   989  001D7E  51A3               	movf	(_elapsedMillis+2)& (0+255),w,b
   990  001D80  0100               	movlb	0	; () banked
   991  001D82  598B               	subwfb	(??_main+2)& (0+255),w,b
   992  001D84  0100               	movlb	0	; () banked
   993  001D86  51A4               	movf	(_elapsedMillis+3)& (0+255),w,b
   994  001D88  0100               	movlb	0	; () banked
   995  001D8A  598C               	subwfb	(??_main+3)& (0+255),w,b
   996  001D8C  B0D8               	btfsc	status,0,c
   997  001D8E  D00A               	goto	l3287
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 183: {
  1001                           ;main.c: 184: controlLastMillis = elapsedMillis;
  1002  001D90  C0A1  F091         	movff	_elapsedMillis,main@controlLastMillis
  1003  001D94  C0A2  F092         	movff	_elapsedMillis+1,main@controlLastMillis+1
  1004  001D98  C0A3  F093         	movff	_elapsedMillis+2,main@controlLastMillis+2
  1005  001D9C  C0A4  F094         	movff	_elapsedMillis+3,main@controlLastMillis+3
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 185: excerciseControl();
  1009  001DA0  EC19  F008         	call	_excerciseControl	;wreg free
  1010  001DA4                     l3287:
  1011                           
  1012                           ;main.c: 186: }
  1013                           ;main.c: 189: if(speedLastMillis + 500 < elapsedMillis)
  1014  001DA4  0EF4               	movlw	244
  1015  001DA6  0100               	movlb	0	; () banked
  1016  001DA8  259D               	addwf	main@speedLastMillis& (0+255),w,b
  1017  001DAA  0100               	movlb	0	; () banked
  1018  001DAC  6F89               	movwf	??_main& (0+255),b
  1019  001DAE  0E01               	movlw	1
  1020  001DB0  0100               	movlb	0	; () banked
  1021  001DB2  219E               	addwfc	(main@speedLastMillis+1)& (0+255),w,b
  1022  001DB4  0100               	movlb	0	; () banked
  1023  001DB6  6F8A               	movwf	(??_main+1)& (0+255),b
  1024  001DB8  0E00               	movlw	0
  1025  001DBA  0100               	movlb	0	; () banked
  1026  001DBC  219F               	addwfc	(main@speedLastMillis+2)& (0+255),w,b
  1027  001DBE  0100               	movlb	0	; () banked
  1028  001DC0  6F8B               	movwf	(??_main+2)& (0+255),b
  1029  001DC2  0E00               	movlw	0
  1030  001DC4  0100               	movlb	0	; () banked
  1031  001DC6  21A0               	addwfc	(main@speedLastMillis+3)& (0+255),w,b
  1032  001DC8  0100               	movlb	0	; () banked
  1033  001DCA  6F8C               	movwf	(??_main+3)& (0+255),b
  1034  001DCC  0100               	movlb	0	; () banked
  1035  001DCE  51A1               	movf	_elapsedMillis& (0+255),w,b
  1036  001DD0  0100               	movlb	0	; () banked
  1037  001DD2  5D89               	subwf	??_main& (0+255),w,b
  1038  001DD4  0100               	movlb	0	; () banked
  1039  001DD6  51A2               	movf	(_elapsedMillis+1)& (0+255),w,b
  1040  001DD8  0100               	movlb	0	; () banked
  1041  001DDA  598A               	subwfb	(??_main+1)& (0+255),w,b
  1042  001DDC  0100               	movlb	0	; () banked
  1043  001DDE  51A3               	movf	(_elapsedMillis+2)& (0+255),w,b
  1044  001DE0  0100               	movlb	0	; () banked
  1045  001DE2  598B               	subwfb	(??_main+2)& (0+255),w,b
  1046  001DE4  0100               	movlb	0	; () banked
  1047  001DE6  51A4               	movf	(_elapsedMillis+3)& (0+255),w,b
  1048  001DE8  0100               	movlb	0	; () banked
  1049  001DEA  598C               	subwfb	(??_main+3)& (0+255),w,b
  1050  001DEC  B0D8               	btfsc	status,0,c
  1051  001DEE  D752               	goto	l3271
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;main.c: 190: {
  1055                           ;main.c: 195: rightWheelMeasuredSpeed = (int) ((rightWheelCount - rightCountTracker) * (
      +                          2.4 * 500 ) / (elapsedMillis - speedLastMillis));
  1056  001DF0  C09D  F089         	movff	main@speedLastMillis,??_main
  1057  001DF4  C09E  F08A         	movff	main@speedLastMillis+1,??_main+1
  1058  001DF8  C09F  F08B         	movff	main@speedLastMillis+2,??_main+2
  1059  001DFC  C0A0  F08C         	movff	main@speedLastMillis+3,??_main+3
  1060  001E00  0100               	movlb	0	; () banked
  1061  001E02  1F89               	comf	??_main& (0+255),f,b
  1062  001E04  1F8A               	comf	(??_main+1)& (0+255),f,b
  1063  001E06  1F8B               	comf	(??_main+2)& (0+255),f,b
  1064  001E08  1F8C               	comf	(??_main+3)& (0+255),f,b
  1065  001E0A  2B89               	incf	??_main& (0+255),f,b
  1066  001E0C  0E00               	movlw	0
  1067  001E0E  238A               	addwfc	(??_main+1)& (0+255),f,b
  1068  001E10  238B               	addwfc	(??_main+2)& (0+255),f,b
  1069  001E12  238C               	addwfc	(??_main+3)& (0+255),f,b
  1070  001E14  0100               	movlb	0	; () banked
  1071  001E16  51A1               	movf	_elapsedMillis& (0+255),w,b
  1072  001E18  0100               	movlb	0	; () banked
  1073  001E1A  2589               	addwf	??_main& (0+255),w,b
  1074  001E1C  6E1B               	movwf	___lltoft@c,c
  1075  001E1E  0100               	movlb	0	; () banked
  1076  001E20  51A2               	movf	(_elapsedMillis+1)& (0+255),w,b
  1077  001E22  0100               	movlb	0	; () banked
  1078  001E24  218A               	addwfc	(??_main+1)& (0+255),w,b
  1079  001E26  6E1C               	movwf	___lltoft@c+1,c
  1080  001E28  0100               	movlb	0	; () banked
  1081  001E2A  51A3               	movf	(_elapsedMillis+2)& (0+255),w,b
  1082  001E2C  0100               	movlb	0	; () banked
  1083  001E2E  218B               	addwfc	(??_main+2)& (0+255),w,b
  1084  001E30  6E1D               	movwf	___lltoft@c+2,c
  1085  001E32  0100               	movlb	0	; () banked
  1086  001E34  51A4               	movf	(_elapsedMillis+3)& (0+255),w,b
  1087  001E36  0100               	movlb	0	; () banked
  1088  001E38  218C               	addwfc	(??_main+3)& (0+255),w,b
  1089  001E3A  6E1E               	movwf	___lltoft@c+3,c
  1090  001E3C  EC60  F016         	call	___lltoft	;wreg free
  1091  001E40  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1092  001E44  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1093  001E48  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1094  001E4C  0E00               	movlw	0
  1095  001E4E  6E27               	movwf	___ftmul@f2,c
  1096  001E50  0E96               	movlw	150
  1097  001E52  6E28               	movwf	___ftmul@f2+1,c
  1098  001E54  0E44               	movlw	68
  1099  001E56  6E29               	movwf	___ftmul@f2+2,c
  1100  001E58  C09B  F08D         	movff	main@rightCountTracker,??_main+4
  1101  001E5C  C09C  F08E         	movff	main@rightCountTracker+1,??_main+5
  1102  001E60  0E00               	movlw	0
  1103  001E62  0100               	movlb	0	; () banked
  1104  001E64  BF8E               	btfsc	(??_main+5)& (0+255),7,b
  1105  001E66  0EFF               	movlw	255
  1106  001E68  6F8F               	movwf	(??_main+6)& (0+255),b
  1107  001E6A  6F90               	movwf	(??_main+7)& (0+255),b
  1108  001E6C  0100               	movlb	0	; () banked
  1109  001E6E  1F8D               	comf	(??_main+4)& (0+255),f,b
  1110  001E70  1F8E               	comf	(??_main+5)& (0+255),f,b
  1111  001E72  1F8F               	comf	(??_main+6)& (0+255),f,b
  1112  001E74  1F90               	comf	(??_main+7)& (0+255),f,b
  1113  001E76  2B8D               	incf	(??_main+4)& (0+255),f,b
  1114  001E78  0E00               	movlw	0
  1115  001E7A  238E               	addwfc	(??_main+5)& (0+255),f,b
  1116  001E7C  238F               	addwfc	(??_main+6)& (0+255),f,b
  1117  001E7E  2390               	addwfc	(??_main+7)& (0+255),f,b
  1118  001E80  0100               	movlb	0	; () banked
  1119  001E82  51A9               	movf	_rightWheelCount& (0+255),w,b
  1120  001E84  0100               	movlb	0	; () banked
  1121  001E86  258D               	addwf	(??_main+4)& (0+255),w,b
  1122  001E88  6E1B               	movwf	___lltoft@c,c
  1123  001E8A  0100               	movlb	0	; () banked
  1124  001E8C  51AA               	movf	(_rightWheelCount+1)& (0+255),w,b
  1125  001E8E  0100               	movlb	0	; () banked
  1126  001E90  218E               	addwfc	(??_main+5)& (0+255),w,b
  1127  001E92  6E1C               	movwf	___lltoft@c+1,c
  1128  001E94  0100               	movlb	0	; () banked
  1129  001E96  51AB               	movf	(_rightWheelCount+2)& (0+255),w,b
  1130  001E98  0100               	movlb	0	; () banked
  1131  001E9A  218F               	addwfc	(??_main+6)& (0+255),w,b
  1132  001E9C  6E1D               	movwf	___lltoft@c+2,c
  1133  001E9E  0100               	movlb	0	; () banked
  1134  001EA0  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  1135  001EA2  0100               	movlb	0	; () banked
  1136  001EA4  2190               	addwfc	(??_main+7)& (0+255),w,b
  1137  001EA6  6E1E               	movwf	___lltoft@c+3,c
  1138  001EA8  EC60  F016         	call	___lltoft	;wreg free
  1139  001EAC  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1140  001EB0  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1141  001EB4  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1142  001EB8  ECBB  F013         	call	___ftmul	;wreg free
  1143  001EBC  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1144  001EC0  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1145  001EC4  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1146  001EC8  EC35  F014         	call	___ftdiv	;wreg free
  1147  001ECC  C033  F042         	movff	?___ftdiv,___fttol@f1
  1148  001ED0  C034  F043         	movff	?___ftdiv+1,___fttol@f1+1
  1149  001ED4  C035  F044         	movff	?___ftdiv+2,___fttol@f1+2
  1150  001ED8  ECA2  F012         	call	___fttol	;wreg free
  1151  001EDC  C042  F0AF         	movff	?___fttol,_rightWheelMeasuredSpeed
  1152  001EE0  C043  F0B0         	movff	?___fttol+1,_rightWheelMeasuredSpeed+1
  1153                           
  1154                           ;main.c: 197: leftWheelMeasuredSpeed = (int) ((leftWheelCount - leftCountTracker) * (2.4
      +                           * 500) / (elapsedMillis - speedLastMillis));
  1155  001EE4  C09D  F089         	movff	main@speedLastMillis,??_main
  1156  001EE8  C09E  F08A         	movff	main@speedLastMillis+1,??_main+1
  1157  001EEC  C09F  F08B         	movff	main@speedLastMillis+2,??_main+2
  1158  001EF0  C0A0  F08C         	movff	main@speedLastMillis+3,??_main+3
  1159  001EF4  0100               	movlb	0	; () banked
  1160  001EF6  1F89               	comf	??_main& (0+255),f,b
  1161  001EF8  1F8A               	comf	(??_main+1)& (0+255),f,b
  1162  001EFA  1F8B               	comf	(??_main+2)& (0+255),f,b
  1163  001EFC  1F8C               	comf	(??_main+3)& (0+255),f,b
  1164  001EFE  2B89               	incf	??_main& (0+255),f,b
  1165  001F00  0E00               	movlw	0
  1166  001F02  238A               	addwfc	(??_main+1)& (0+255),f,b
  1167  001F04  238B               	addwfc	(??_main+2)& (0+255),f,b
  1168  001F06  238C               	addwfc	(??_main+3)& (0+255),f,b
  1169  001F08  0100               	movlb	0	; () banked
  1170  001F0A  51A1               	movf	_elapsedMillis& (0+255),w,b
  1171  001F0C  0100               	movlb	0	; () banked
  1172  001F0E  2589               	addwf	??_main& (0+255),w,b
  1173  001F10  6E1B               	movwf	___lltoft@c,c
  1174  001F12  0100               	movlb	0	; () banked
  1175  001F14  51A2               	movf	(_elapsedMillis+1)& (0+255),w,b
  1176  001F16  0100               	movlb	0	; () banked
  1177  001F18  218A               	addwfc	(??_main+1)& (0+255),w,b
  1178  001F1A  6E1C               	movwf	___lltoft@c+1,c
  1179  001F1C  0100               	movlb	0	; () banked
  1180  001F1E  51A3               	movf	(_elapsedMillis+2)& (0+255),w,b
  1181  001F20  0100               	movlb	0	; () banked
  1182  001F22  218B               	addwfc	(??_main+2)& (0+255),w,b
  1183  001F24  6E1D               	movwf	___lltoft@c+2,c
  1184  001F26  0100               	movlb	0	; () banked
  1185  001F28  51A4               	movf	(_elapsedMillis+3)& (0+255),w,b
  1186  001F2A  0100               	movlb	0	; () banked
  1187  001F2C  218C               	addwfc	(??_main+3)& (0+255),w,b
  1188  001F2E  6E1E               	movwf	___lltoft@c+3,c
  1189  001F30  EC60  F016         	call	___lltoft	;wreg free
  1190  001F34  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1191  001F38  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1192  001F3C  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1193  001F40  0E00               	movlw	0
  1194  001F42  6E27               	movwf	___ftmul@f2,c
  1195  001F44  0E96               	movlw	150
  1196  001F46  6E28               	movwf	___ftmul@f2+1,c
  1197  001F48  0E44               	movlw	68
  1198  001F4A  6E29               	movwf	___ftmul@f2+2,c
  1199  001F4C  C099  F08D         	movff	main@leftCountTracker,??_main+4
  1200  001F50  C09A  F08E         	movff	main@leftCountTracker+1,??_main+5
  1201  001F54  0E00               	movlw	0
  1202  001F56  0100               	movlb	0	; () banked
  1203  001F58  BF8E               	btfsc	(??_main+5)& (0+255),7,b
  1204  001F5A  0EFF               	movlw	255
  1205  001F5C  6F8F               	movwf	(??_main+6)& (0+255),b
  1206  001F5E  6F90               	movwf	(??_main+7)& (0+255),b
  1207  001F60  0100               	movlb	0	; () banked
  1208  001F62  1F8D               	comf	(??_main+4)& (0+255),f,b
  1209  001F64  1F8E               	comf	(??_main+5)& (0+255),f,b
  1210  001F66  1F8F               	comf	(??_main+6)& (0+255),f,b
  1211  001F68  1F90               	comf	(??_main+7)& (0+255),f,b
  1212  001F6A  2B8D               	incf	(??_main+4)& (0+255),f,b
  1213  001F6C  0E00               	movlw	0
  1214  001F6E  238E               	addwfc	(??_main+5)& (0+255),f,b
  1215  001F70  238F               	addwfc	(??_main+6)& (0+255),f,b
  1216  001F72  2390               	addwfc	(??_main+7)& (0+255),f,b
  1217  001F74  0100               	movlb	0	; () banked
  1218  001F76  51A5               	movf	_leftWheelCount& (0+255),w,b
  1219  001F78  0100               	movlb	0	; () banked
  1220  001F7A  258D               	addwf	(??_main+4)& (0+255),w,b
  1221  001F7C  6E1B               	movwf	___lltoft@c,c
  1222  001F7E  0100               	movlb	0	; () banked
  1223  001F80  51A6               	movf	(_leftWheelCount+1)& (0+255),w,b
  1224  001F82  0100               	movlb	0	; () banked
  1225  001F84  218E               	addwfc	(??_main+5)& (0+255),w,b
  1226  001F86  6E1C               	movwf	___lltoft@c+1,c
  1227  001F88  0100               	movlb	0	; () banked
  1228  001F8A  51A7               	movf	(_leftWheelCount+2)& (0+255),w,b
  1229  001F8C  0100               	movlb	0	; () banked
  1230  001F8E  218F               	addwfc	(??_main+6)& (0+255),w,b
  1231  001F90  6E1D               	movwf	___lltoft@c+2,c
  1232  001F92  0100               	movlb	0	; () banked
  1233  001F94  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  1234  001F96  0100               	movlb	0	; () banked
  1235  001F98  2190               	addwfc	(??_main+7)& (0+255),w,b
  1236  001F9A  6E1E               	movwf	___lltoft@c+3,c
  1237  001F9C  EC60  F016         	call	___lltoft	;wreg free
  1238  001FA0  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1239  001FA4  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1240  001FA8  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1241  001FAC  ECBB  F013         	call	___ftmul	;wreg free
  1242  001FB0  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1243  001FB4  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1244  001FB8  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1245  001FBC  EC35  F014         	call	___ftdiv	;wreg free
  1246  001FC0  C033  F042         	movff	?___ftdiv,___fttol@f1
  1247  001FC4  C034  F043         	movff	?___ftdiv+1,___fttol@f1+1
  1248  001FC8  C035  F044         	movff	?___ftdiv+2,___fttol@f1+2
  1249  001FCC  ECA2  F012         	call	___fttol	;wreg free
  1250  001FD0  C042  F0AD         	movff	?___fttol,_leftWheelMeasuredSpeed
  1251  001FD4  C043  F0AE         	movff	?___fttol+1,_leftWheelMeasuredSpeed+1
  1252                           
  1253                           ;main.c: 199: speedLastMillis = elapsedMillis;
  1254  001FD8  C0A1  F09D         	movff	_elapsedMillis,main@speedLastMillis
  1255  001FDC  C0A2  F09E         	movff	_elapsedMillis+1,main@speedLastMillis+1
  1256  001FE0  C0A3  F09F         	movff	_elapsedMillis+2,main@speedLastMillis+2
  1257  001FE4  C0A4  F0A0         	movff	_elapsedMillis+3,main@speedLastMillis+3
  1258                           
  1259                           ;main.c: 201: rightCountTracker = rightWheelCount;
  1260  001FE8  C0A9  F09B         	movff	_rightWheelCount,main@rightCountTracker
  1261  001FEC  C0AA  F09C         	movff	_rightWheelCount+1,main@rightCountTracker+1
  1262                           
  1263                           ;main.c: 203: leftCountTracker = leftWheelCount;
  1264  001FF0  C0A5  F099         	movff	_leftWheelCount,main@leftCountTracker
  1265  001FF4  C0A6  F09A         	movff	_leftWheelCount+1,main@leftCountTracker+1
  1266  001FF8  D64D               	goto	l3271
  1267  001FFA                     __end_of_main:
  1268                           	opt stack 0
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           postdec1	equ	0xFE5
  1276                           fsr1l	equ	0xFE1
  1277                           status	equ	0xFD8
  1278                           
  1279 ;; *************** function _printf *****************
  1280 ;; Defined at:
  1281 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1284 ;;		 -> STR_4(8), STR_3(8), STR_2(10), STR_1(11), 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  tmpval          4    0        struct .
  1287 ;;  cp              3    0        PTR const unsigned char 
  1288 ;;  width           2   46[COMRAM] int 
  1289 ;;  val             2   44[COMRAM] unsigned int 
  1290 ;;  ap              2   40[COMRAM] PTR void [1]
  1291 ;;		 -> ?_printf(2), 
  1292 ;;  len             2    0        unsigned int 
  1293 ;;  c               1   48[COMRAM] char 
  1294 ;;  flag            1   43[COMRAM] unsigned char 
  1295 ;;  prec            1   42[COMRAM] char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  2   30[COMRAM] int 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1305 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1308 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1309 ;;Total ram usage:       19 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    4
  1312 ;; This function calls:
  1313 ;;		___lwdiv
  1314 ;;		___lwmod
  1315 ;;		___wmul
  1316 ;;		_isdigit
  1317 ;;		_putch
  1318 ;; This function is called by:
  1319 ;;		_main
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text1
  1324  001FFA                     __ptext1:
  1325                           	opt stack 0
  1326  001FFA                     _printf:
  1327                           	opt stack 26
  1328                           
  1329                           ;doprnt.c: 466: va_list ap;
  1330                           ;doprnt.c: 499: signed char c;
  1331                           ;doprnt.c: 501: int width;
  1332                           ;doprnt.c: 506: signed char prec;
  1333                           ;doprnt.c: 508: unsigned char flag;
  1334                           ;doprnt.c: 523: union {
  1335                           ;doprnt.c: 524: unsigned long vd;
  1336                           ;doprnt.c: 525: double integ;
  1337                           ;doprnt.c: 526: } tmpval;
  1338                           ;doprnt.c: 528: unsigned int val;
  1339                           ;doprnt.c: 529: unsigned len;
  1340                           ;doprnt.c: 530: const char * cp;
  1341                           ;doprnt.c: 533: *ap = __va_start();
  1342                           
  1343                           ;incstack = 0
  1344  001FFA  0E21               	movlw	low (?_printf+2)
  1345  001FFC  6E29               	movwf	printf@ap,c
  1346  001FFE  0E00               	movlw	high (?_printf+2)
  1347  002000  6E2A               	movwf	printf@ap+1,c
  1348                           
  1349                           ;doprnt.c: 536: while(c = *f++) {
  1350  002002  D0EE               	goto	l2503
  1351  002004                     l2427:
  1352                           
  1353                           ;doprnt.c: 538: if(c != '%')
  1354  002004  0E25               	movlw	37
  1355  002006  1831               	xorwf	printf@c,w,c
  1356  002008  B4D8               	btfsc	status,2,c
  1357  00200A  D004               	goto	l2431
  1358                           
  1359                           ;doprnt.c: 540: {
  1360                           ;doprnt.c: 541: (putch(c) );
  1361  00200C  5031               	movf	printf@c,w,c
  1362  00200E  ECB7  F017         	call	_putch
  1363                           
  1364                           ;doprnt.c: 542: continue;
  1365  002012  D0E6               	goto	l2503
  1366  002014                     l2431:
  1367                           
  1368                           ;doprnt.c: 543: }
  1369                           ;doprnt.c: 546: width = 0;
  1370  002014  0E00               	movlw	0
  1371  002016  6E30               	movwf	printf@width+1,c
  1372  002018  0E00               	movlw	0
  1373  00201A  6E2F               	movwf	printf@width,c
  1374                           
  1375                           ;doprnt.c: 548: flag = 0;
  1376  00201C  0E00               	movlw	0
  1377  00201E  6E2C               	movwf	printf@flag,c
  1378                           
  1379                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1380  002020  C01F  FFF6         	movff	printf@f,tblptrl
  1381  002024  C020  FFF7         	movff	printf@f+1,tblptrh
  1382  002028                     	if	0	;tblptru may be non-zero
  1383  002028                     	endif
  1384  002028                     	if	0	;tblptru may be non-zero
  1385  002028                     	endif
  1386  002028  0008               	tblrd		*
  1387  00202A  50F5               	movf	tablat,w,c
  1388  00202C  EC7F  F017         	call	_isdigit
  1389  002030  A0D8               	btfss	status,0,c
  1390  002032  D032               	goto	l2447
  1391                           
  1392                           ;doprnt.c: 598: width = 0;
  1393  002034  0E00               	movlw	0
  1394  002036  6E30               	movwf	printf@width+1,c
  1395  002038  0E00               	movlw	0
  1396  00203A  6E2F               	movwf	printf@width,c
  1397  00203C                     l2437:
  1398                           
  1399                           ;doprnt.c: 600: width *= 10;
  1400  00203C  C02F  F013         	movff	printf@width,___wmul@multiplier
  1401  002040  C030  F014         	movff	printf@width+1,___wmul@multiplier+1
  1402  002044  0E00               	movlw	0
  1403  002046  6E16               	movwf	___wmul@multiplicand+1,c
  1404  002048  0E0A               	movlw	10
  1405  00204A  6E15               	movwf	___wmul@multiplicand,c
  1406  00204C  EC6C  F017         	call	___wmul	;wreg free
  1407  002050  C013  F02F         	movff	?___wmul,printf@width
  1408  002054  C014  F030         	movff	?___wmul+1,printf@width+1
  1409                           
  1410                           ;doprnt.c: 601: width += *f++ - '0';
  1411  002058  0ED0               	movlw	208
  1412  00205A  6E25               	movwf	??_printf& (0+255),c
  1413  00205C  0EFF               	movlw	255
  1414  00205E  6E26               	movwf	(??_printf+1)& (0+255),c
  1415  002060  C01F  FFF6         	movff	printf@f,tblptrl
  1416  002064  C020  FFF7         	movff	printf@f+1,tblptrh
  1417  002068                     	if	0	;tblptru may be non-zero
  1418  002068                     	endif
  1419  002068                     	if	0	;tblptru may be non-zero
  1420  002068                     	endif
  1421  002068  0008               	tblrd		*
  1422  00206A  50F5               	movf	tablat,w,c
  1423  00206C  6E27               	movwf	(??_printf+2)& (0+255),c
  1424  00206E  6A28               	clrf	(??_printf+3)& (0+255),c
  1425  002070  5025               	movf	??_printf,w,c
  1426  002072  2627               	addwf	??_printf+2,f,c
  1427  002074  5026               	movf	??_printf+1,w,c
  1428  002076  2228               	addwfc	??_printf+3,f,c
  1429  002078  5027               	movf	??_printf+2,w,c
  1430  00207A  262F               	addwf	printf@width,f,c
  1431  00207C  5028               	movf	??_printf+3,w,c
  1432  00207E  2230               	addwfc	printf@width+1,f,c
  1433  002080  4A1F               	infsnz	printf@f,f,c
  1434  002082  2A20               	incf	printf@f+1,f,c
  1435                           
  1436                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1437  002084  C01F  FFF6         	movff	printf@f,tblptrl
  1438  002088  C020  FFF7         	movff	printf@f+1,tblptrh
  1439  00208C                     	if	0	;tblptru may be non-zero
  1440  00208C                     	endif
  1441  00208C                     	if	0	;tblptru may be non-zero
  1442  00208C                     	endif
  1443  00208C  0008               	tblrd		*
  1444  00208E  50F5               	movf	tablat,w,c
  1445  002090  EC7F  F017         	call	_isdigit
  1446  002094  B0D8               	btfsc	status,0,c
  1447  002096  D7D2               	goto	l2437
  1448  002098                     l2447:
  1449  002098  C01F  FFF6         	movff	printf@f,tblptrl
  1450  00209C  C020  FFF7         	movff	printf@f+1,tblptrh
  1451  0020A0  4A1F               	infsnz	printf@f,f,c
  1452  0020A2  2A20               	incf	printf@f+1,f,c
  1453  0020A4                     	if	0	;tblptru may be non-zero
  1454  0020A4                     	endif
  1455  0020A4                     	if	0	;tblptru may be non-zero
  1456  0020A4                     	endif
  1457  0020A4  0008               	tblrd		*
  1458  0020A6  CFF5 F031          	movff	tablat,printf@c
  1459  0020AA  5031               	movf	printf@c,w,c
  1460                           
  1461                           ; Switch size 1, requested type "space"
  1462                           ; Number of cases is 3, Range of values is 0 to 105
  1463                           ; switch strategies available:
  1464                           ; Name         Instructions Cycles
  1465                           ; simple_byte           10     6 (average)
  1466                           ;	Chosen strategy is simple_byte
  1467  0020AC  0A00               	xorlw	0	; case 0
  1468  0020AE  B4D8               	btfsc	status,2,c
  1469  0020B0  0012               	return	
  1470  0020B2  0A64               	xorlw	100	; case 100
  1471  0020B4  B4D8               	btfsc	status,2,c
  1472  0020B6  D003               	goto	l2449
  1473  0020B8  0A0D               	xorlw	13	; case 105
  1474  0020BA  A4D8               	btfss	status,2,c
  1475  0020BC  D091               	goto	l2503
  1476  0020BE                     l2449:
  1477                           
  1478                           ;doprnt.c: 1253: {
  1479                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1480  0020BE  C029  FFD9         	movff	printf@ap,fsr2l
  1481  0020C2  C02A  FFDA         	movff	printf@ap+1,fsr2h
  1482  0020C6  CFDE F02D          	movff	postinc2,printf@val
  1483  0020CA  CFDD F02E          	movff	postdec2,printf@val+1
  1484  0020CE  0E02               	movlw	2
  1485  0020D0  2629               	addwf	printf@ap,f,c
  1486  0020D2  0E00               	movlw	0
  1487  0020D4  222A               	addwfc	printf@ap+1,f,c
  1488                           
  1489                           ;doprnt.c: 1261: if((int)val < 0) {
  1490  0020D6  AE2E               	btfss	printf@val+1,7,c
  1491  0020D8  D006               	goto	l2459
  1492                           
  1493                           ;doprnt.c: 1262: flag |= 0x03;
  1494  0020DA  0E03               	movlw	3
  1495  0020DC  122C               	iorwf	printf@flag,f,c
  1496                           
  1497                           ;doprnt.c: 1263: val = -val;
  1498  0020DE  6C2D               	negf	printf@val,c
  1499  0020E0  1E2E               	comf	printf@val+1,f,c
  1500  0020E2  B0D8               	btfsc	status,0,c
  1501  0020E4  2A2E               	incf	printf@val+1,f,c
  1502  0020E6                     l2459:
  1503                           
  1504                           ;doprnt.c: 1264: }
  1505                           ;doprnt.c: 1266: }
  1506                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1507  0020E6  0E01               	movlw	1
  1508  0020E8  6E31               	movwf	printf@c,c
  1509  0020EA                     l2461:
  1510  0020EA  0E05               	movlw	5
  1511  0020EC  1831               	xorwf	printf@c,w,c
  1512  0020EE  B4D8               	btfsc	status,2,c
  1513  0020F0  D012               	goto	l2473
  1514                           
  1515                           ;doprnt.c: 1306: if(val < dpowers[c])
  1516  0020F2  5031               	movf	printf@c,w,c
  1517  0020F4  0D02               	mullw	2
  1518  0020F6  0E01               	movlw	low _dpowers
  1519  0020F8  24F3               	addwf	prodl,w,c
  1520  0020FA  6EF6               	movwf	tblptrl,c
  1521  0020FC  0E10               	movlw	high _dpowers
  1522  0020FE  20F4               	addwfc	prodh,w,c
  1523  002100  6EF7               	movwf	tblptrh,c
  1524  002102                     	if	0	;There are less than 3 active tblptr bytes
  1525  002102                     	endif
  1526  002102  0009               	tblrd		*+
  1527  002104  50F5               	movf	tablat,w,c
  1528  002106  5C2D               	subwf	printf@val,w,c
  1529  002108  0009               	tblrd		*+
  1530  00210A  50F5               	movf	tablat,w,c
  1531  00210C  582E               	subwfb	printf@val+1,w,c
  1532  00210E  A0D8               	btfss	status,0,c
  1533  002110  D002               	goto	l2473
  1534                           
  1535                           ;doprnt.c: 1307: break;
  1536  002112  2A31               	incf	printf@c,f,c
  1537  002114  D7EA               	goto	l2461
  1538  002116                     l2473:
  1539                           
  1540                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1541  002116  502F               	movf	printf@width,w,c
  1542  002118  1030               	iorwf	printf@width+1,w,c
  1543  00211A  B4D8               	btfsc	status,2,c
  1544  00211C  D009               	goto	l2479
  1545  00211E  C02C  F025         	movff	printf@flag,??_printf
  1546  002122  0E03               	movlw	3
  1547  002124  1625               	andwf	??_printf,f,c
  1548  002126  B4D8               	btfsc	status,2,c
  1549  002128  D003               	goto	l2479
  1550                           
  1551                           ;doprnt.c: 1346: width--;
  1552  00212A  062F               	decf	printf@width,f,c
  1553  00212C  A0D8               	btfss	status,0,c
  1554  00212E  0630               	decf	printf@width+1,f,c
  1555  002130                     l2479:
  1556                           
  1557                           ;doprnt.c: 1381: if(width > c)
  1558  002130  0E80               	movlw	128
  1559  002132  BE31               	btfsc	printf@c,7,c
  1560  002134  0E7F               	movlw	127
  1561  002136  6E25               	movwf	??_printf& (0+255),c
  1562  002138  502F               	movf	printf@width,w,c
  1563  00213A  5C31               	subwf	printf@c,w,c
  1564  00213C  5030               	movf	printf@width+1,w,c
  1565  00213E  0A80               	xorlw	128
  1566  002140  5825               	subwfb	??_printf& (0+255),w,c
  1567  002142  B0D8               	btfsc	status,0,c
  1568  002144  D007               	goto	l2483
  1569                           
  1570                           ;doprnt.c: 1382: width -= c;
  1571  002146  5031               	movf	printf@c,w,c
  1572  002148  5E2F               	subwf	printf@width,f,c
  1573  00214A  0E00               	movlw	0
  1574  00214C  BE31               	btfsc	printf@c,7,c
  1575  00214E  0EFF               	movlw	255
  1576  002150  5A30               	subwfb	printf@width+1,f,c
  1577  002152  D004               	goto	l2485
  1578  002154                     l2483:
  1579                           
  1580                           ;doprnt.c: 1383: else
  1581                           ;doprnt.c: 1384: width = 0;
  1582  002154  0E00               	movlw	0
  1583  002156  6E30               	movwf	printf@width+1,c
  1584  002158  0E00               	movlw	0
  1585  00215A  6E2F               	movwf	printf@width,c
  1586  00215C                     l2485:
  1587                           
  1588                           ;doprnt.c: 1422: {
  1589                           ;doprnt.c: 1424: if(width
  1590                           ;doprnt.c: 1428: )
  1591  00215C  502F               	movf	printf@width,w,c
  1592  00215E  1030               	iorwf	printf@width+1,w,c
  1593  002160  B4D8               	btfsc	status,2,c
  1594  002162  D00A               	goto	l2491
  1595  002164                     l2487:
  1596                           
  1597                           ;doprnt.c: 1430: (putch(' ') );
  1598  002164  0E20               	movlw	32
  1599  002166  ECB7  F017         	call	_putch
  1600                           
  1601                           ;doprnt.c: 1431: while(--width);
  1602  00216A  062F               	decf	printf@width,f,c
  1603  00216C  A0D8               	btfss	status,0,c
  1604  00216E  0630               	decf	printf@width+1,f,c
  1605  002170  502F               	movf	printf@width,w,c
  1606  002172  1030               	iorwf	printf@width+1,w,c
  1607  002174  A4D8               	btfss	status,2,c
  1608  002176  D7F6               	goto	l2487
  1609  002178                     l2491:
  1610                           
  1611                           ;doprnt.c: 1438: if(flag & 0x03)
  1612  002178  C02C  F025         	movff	printf@flag,??_printf
  1613  00217C  0E03               	movlw	3
  1614  00217E  1625               	andwf	??_printf,f,c
  1615  002180  B4D8               	btfsc	status,2,c
  1616  002182  D003               	goto	l2495
  1617                           
  1618                           ;doprnt.c: 1439: (putch('-') );
  1619  002184  0E2D               	movlw	45
  1620  002186  ECB7  F017         	call	_putch
  1621  00218A                     l2495:
  1622                           
  1623                           ;doprnt.c: 1469: }
  1624                           ;doprnt.c: 1472: prec = c;
  1625  00218A  C031  F02B         	movff	printf@c,printf@prec
  1626                           
  1627                           ;doprnt.c: 1474: while(prec--) {
  1628  00218E  D024               	goto	l2501
  1629  002190                     l2497:
  1630                           
  1631                           ;doprnt.c: 1478: {
  1632                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1633  002190  502B               	movf	printf@prec,w,c
  1634  002192  0D02               	mullw	2
  1635  002194  0E01               	movlw	low _dpowers
  1636  002196  24F3               	addwf	prodl,w,c
  1637  002198  6EF6               	movwf	tblptrl,c
  1638  00219A  0E10               	movlw	high _dpowers
  1639  00219C  20F4               	addwfc	prodh,w,c
  1640  00219E  6EF7               	movwf	tblptrh,c
  1641  0021A0                     	if	0	;There are less than 3 active tblptr bytes
  1642  0021A0                     	endif
  1643  0021A0  0009               	tblrd		*+
  1644  0021A2  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1645  0021A6  000A               	tblrd		*-
  1646  0021A8  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1647  0021AC  C02D  F013         	movff	printf@val,___lwdiv@dividend
  1648  0021B0  C02E  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1649  0021B4  ECE6  F016         	call	___lwdiv	;wreg free
  1650  0021B8  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1651  0021BC  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1652  0021C0  0E00               	movlw	0
  1653  0021C2  6E1D               	movwf	___lwmod@divisor+1,c
  1654  0021C4  0E0A               	movlw	10
  1655  0021C6  6E1C               	movwf	___lwmod@divisor,c
  1656  0021C8  EC0F  F017         	call	___lwmod	;wreg free
  1657  0021CC  501A               	movf	?___lwmod,w,c
  1658  0021CE  0F30               	addlw	48
  1659  0021D0  6E31               	movwf	printf@c,c
  1660                           
  1661                           ;doprnt.c: 1523: }
  1662                           ;doprnt.c: 1524: (putch(c) );
  1663  0021D2  5031               	movf	printf@c,w,c
  1664  0021D4  ECB7  F017         	call	_putch
  1665  0021D8                     l2501:
  1666  0021D8  062B               	decf	printf@prec,f,c
  1667  0021DA  282B               	incf	printf@prec,w,c
  1668  0021DC  A4D8               	btfss	status,2,c
  1669  0021DE  D7D8               	goto	l2497
  1670  0021E0                     l2503:
  1671  0021E0  C01F  FFF6         	movff	printf@f,tblptrl
  1672  0021E4  C020  FFF7         	movff	printf@f+1,tblptrh
  1673  0021E8  4A1F               	infsnz	printf@f,f,c
  1674  0021EA  2A20               	incf	printf@f+1,f,c
  1675  0021EC                     	if	0	;tblptru may be non-zero
  1676  0021EC                     	endif
  1677  0021EC                     	if	0	;tblptru may be non-zero
  1678  0021EC                     	endif
  1679  0021EC  0008               	tblrd		*
  1680  0021EE  CFF5 F031          	movff	tablat,printf@c
  1681  0021F2  5031               	movf	printf@c,w,c
  1682  0021F4  B4D8               	btfsc	status,2,c
  1683  0021F6  0012               	return	
  1684  0021F8  D705               	goto	l2427
  1685  0021FA                     __end_of_printf:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           postdec1	equ	0xFE5
  1696                           fsr1l	equ	0xFE1
  1697                           postinc2	equ	0xFDE
  1698                           postdec2	equ	0xFDD
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _putch *****************
  1704 ;; Defined at:
  1705 ;;		line 12 in file "printfLib.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  data            1    wreg     unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  data            1   20[COMRAM] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, status,2, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        1 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		_LCDwrite
  1728 ;; This function is called by:
  1729 ;;		_printf
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text2
  1734  002F6E                     __ptext2:
  1735                           	opt stack 0
  1736  002F6E                     _putch:
  1737                           	opt stack 26
  1738                           
  1739                           ;incstack = 0
  1740                           ;putch@data stored from wreg
  1741  002F6E  6E15               	movwf	putch@data,c
  1742                           
  1743                           ;printfLib.c: 13: LCDwrite(data);
  1744  002F70  5015               	movf	putch@data,w,c
  1745  002F72  EC98  F017         	call	_LCDwrite
  1746  002F76  0012               	return		;funcret
  1747  002F78                     __end_of_putch:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           postinc2	equ	0xFDE
  1760                           postdec2	equ	0xFDD
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _LCDwrite *****************
  1766 ;; Defined at:
  1767 ;;		line 118 in file "lcd.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  input           1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  input           1   19[COMRAM] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    2
  1788 ;; This function calls:
  1789 ;;		_LCDcheckBF
  1790 ;;		_LCDcmd
  1791 ;; This function is called by:
  1792 ;;		_putch
  1793 ;;		_LCDputs
  1794 ;;		_LCDwriteLineOne
  1795 ;;		_LCDwriteLineTwo
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text3
  1800  002F30                     __ptext3:
  1801                           	opt stack 0
  1802  002F30                     _LCDwrite:
  1803                           	opt stack 26
  1804                           
  1805                           ;incstack = 0
  1806                           ;LCDwrite@input stored from wreg
  1807  002F30  6E14               	movwf	LCDwrite@input,c
  1808                           
  1809                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  1810  002F32  808D               	bsf	3981,0,c	;volatile
  1811                           
  1812                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  1813  002F34  928D               	bcf	3981,1,c	;volatile
  1814                           
  1815                           ;lcd.c: 122: LCDcmd(input);
  1816  002F36  5014               	movf	LCDwrite@input,w,c
  1817  002F38  ECB1  F017         	call	_LCDcmd
  1818                           
  1819                           ;lcd.c: 123: LCDcheckBF();
  1820  002F3C  EC8E  F017         	call	_LCDcheckBF	;wreg free
  1821  002F40  0012               	return		;funcret
  1822  002F42                     __end_of_LCDwrite:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           prodh	equ	0xFF4
  1829                           prodl	equ	0xFF3
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postdec1	equ	0xFE5
  1833                           fsr1l	equ	0xFE1
  1834                           postinc2	equ	0xFDE
  1835                           postdec2	equ	0xFDD
  1836                           fsr2h	equ	0xFDA
  1837                           fsr2l	equ	0xFD9
  1838                           status	equ	0xFD8
  1839                           
  1840 ;; *************** function _isdigit *****************
  1841 ;; Defined at:
  1842 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  c               1    wreg     unsigned char 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  c               1   20[COMRAM] unsigned char 
  1847 ;; Return value:  Size  Location     Type
  1848 ;;		None               void
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;Total ram usage:        3 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    1
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		_printf
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           	psect	text4
  1871  002EFE                     __ptext4:
  1872                           	opt stack 0
  1873  002EFE                     _isdigit:
  1874                           	opt stack 28
  1875                           
  1876                           ;incstack = 0
  1877                           ;isdigit@c stored from wreg
  1878  002EFE  6E15               	movwf	isdigit@c,c
  1879  002F00  0E00               	movlw	0
  1880  002F02  6E14               	movwf	_isdigit$1671,c
  1881  002F04  0E3A               	movlw	58
  1882  002F06  6015               	cpfslt	isdigit@c,c
  1883  002F08  D005               	goto	l2163
  1884  002F0A  0E2F               	movlw	47
  1885  002F0C  6415               	cpfsgt	isdigit@c,c
  1886  002F0E  D002               	goto	l2163
  1887  002F10  0E01               	movlw	1
  1888  002F12  6E14               	movwf	_isdigit$1671,c
  1889  002F14                     l2163:
  1890  002F14  C014  F013         	movff	_isdigit$1671,??_isdigit
  1891  002F18  3013               	rrcf	??_isdigit,w,c
  1892  002F1A  0012               	return	
  1893  002F1C                     __end_of_isdigit:
  1894                           	opt stack 0
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           postdec1	equ	0xFE5
  1904                           fsr1l	equ	0xFE1
  1905                           postinc2	equ	0xFDE
  1906                           postdec2	equ	0xFDD
  1907                           fsr2h	equ	0xFDA
  1908                           fsr2l	equ	0xFD9
  1909                           status	equ	0xFD8
  1910                           
  1911 ;; *************** function ___wmul *****************
  1912 ;; Defined at:
  1913 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  multiplier      2   18[COMRAM] unsigned int 
  1916 ;;  multiplicand    2   20[COMRAM] unsigned int 
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  product         2   22[COMRAM] unsigned int 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  2   18[COMRAM] unsigned int 
  1921 ;; Registers used:
  1922 ;;		wreg, status,2, status,0, prodl, prodh
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;Total ram usage:        6 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    1
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_printf
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text5
  1943  002ED8                     __ptext5:
  1944                           	opt stack 0
  1945  002ED8                     ___wmul:
  1946                           	opt stack 28
  1947                           
  1948                           ;incstack = 0
  1949  002ED8  5013               	movf	___wmul@multiplier,w,c
  1950  002EDA  0215               	mulwf	___wmul@multiplicand,c
  1951  002EDC  CFF3 F017          	movff	prodl,___wmul@product
  1952  002EE0  CFF4 F018          	movff	prodh,___wmul@product+1
  1953  002EE4  5013               	movf	___wmul@multiplier,w,c
  1954  002EE6  0216               	mulwf	___wmul@multiplicand+1,c
  1955  002EE8  50F3               	movf	prodl,w,c
  1956  002EEA  2618               	addwf	___wmul@product+1,f,c
  1957  002EEC  5014               	movf	___wmul@multiplier+1,w,c
  1958  002EEE  0215               	mulwf	___wmul@multiplicand,c
  1959  002EF0  50F3               	movf	prodl,w,c
  1960  002EF2  2618               	addwf	___wmul@product+1,f,c
  1961  002EF4  C017  F013         	movff	___wmul@product,?___wmul
  1962  002EF8  C018  F014         	movff	___wmul@product+1,?___wmul+1
  1963  002EFC  0012               	return	
  1964  002EFE                     __end_of___wmul:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           prodh	equ	0xFF4
  1971                           prodl	equ	0xFF3
  1972                           postinc0	equ	0xFEE
  1973                           wreg	equ	0xFE8
  1974                           postdec1	equ	0xFE5
  1975                           fsr1l	equ	0xFE1
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function ___lwmod *****************
  1983 ;; Defined at:
  1984 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  dividend        2   25[COMRAM] unsigned int 
  1987 ;;  divisor         2   27[COMRAM] unsigned int 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  counter         1   29[COMRAM] unsigned char 
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  2   25[COMRAM] unsigned int 
  1992 ;; Registers used:
  1993 ;;		wreg, status,2, status,0
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1999 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;Total ram usage:        5 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    1
  2006 ;; This function calls:
  2007 ;;		Nothing
  2008 ;; This function is called by:
  2009 ;;		_printf
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text6
  2014  002E1E                     __ptext6:
  2015                           	opt stack 0
  2016  002E1E                     ___lwmod:
  2017                           	opt stack 28
  2018                           
  2019                           ;incstack = 0
  2020  002E1E  501C               	movf	___lwmod@divisor,w,c
  2021  002E20  101D               	iorwf	___lwmod@divisor+1,w,c
  2022  002E22  B4D8               	btfsc	status,2,c
  2023  002E24  D018               	goto	l727
  2024  002E26  0E01               	movlw	1
  2025  002E28  6E1E               	movwf	___lwmod@counter,c
  2026  002E2A  D004               	goto	l2285
  2027  002E2C                     l2283:
  2028  002E2C  90D8               	bcf	status,0,c
  2029  002E2E  361C               	rlcf	___lwmod@divisor,f,c
  2030  002E30  361D               	rlcf	___lwmod@divisor+1,f,c
  2031  002E32  2A1E               	incf	___lwmod@counter,f,c
  2032  002E34                     l2285:
  2033  002E34  AE1D               	btfss	___lwmod@divisor+1,7,c
  2034  002E36  D7FA               	goto	l2283
  2035  002E38                     l2287:
  2036  002E38  501C               	movf	___lwmod@divisor,w,c
  2037  002E3A  5C1A               	subwf	___lwmod@dividend,w,c
  2038  002E3C  501D               	movf	___lwmod@divisor+1,w,c
  2039  002E3E  581B               	subwfb	___lwmod@dividend+1,w,c
  2040  002E40  A0D8               	btfss	status,0,c
  2041  002E42  D004               	goto	l2291
  2042  002E44  501C               	movf	___lwmod@divisor,w,c
  2043  002E46  5E1A               	subwf	___lwmod@dividend,f,c
  2044  002E48  501D               	movf	___lwmod@divisor+1,w,c
  2045  002E4A  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2046  002E4C                     l2291:
  2047  002E4C  90D8               	bcf	status,0,c
  2048  002E4E  321D               	rrcf	___lwmod@divisor+1,f,c
  2049  002E50  321C               	rrcf	___lwmod@divisor,f,c
  2050  002E52  2E1E               	decfsz	___lwmod@counter,f,c
  2051  002E54  D7F1               	goto	l2287
  2052  002E56                     l727:
  2053  002E56  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2054  002E5A  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2055  002E5E  0012               	return		;funcret
  2056  002E60                     __end_of___lwmod:
  2057                           	opt stack 0
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           prodh	equ	0xFF4
  2063                           prodl	equ	0xFF3
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           postdec1	equ	0xFE5
  2067                           fsr1l	equ	0xFE1
  2068                           postinc2	equ	0xFDE
  2069                           postdec2	equ	0xFDD
  2070                           fsr2h	equ	0xFDA
  2071                           fsr2l	equ	0xFD9
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function ___lwdiv *****************
  2075 ;; Defined at:
  2076 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  dividend        2   18[COMRAM] unsigned int 
  2079 ;;  divisor         2   20[COMRAM] unsigned int 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  quotient        2   22[COMRAM] unsigned int 
  2082 ;;  counter         1   24[COMRAM] unsigned char 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  2   18[COMRAM] unsigned int 
  2085 ;; Registers used:
  2086 ;;		wreg, status,2, status,0
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;Total ram usage:        7 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    1
  2099 ;; This function calls:
  2100 ;;		Nothing
  2101 ;; This function is called by:
  2102 ;;		_printf
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text7
  2107  002DCC                     __ptext7:
  2108                           	opt stack 0
  2109  002DCC                     ___lwdiv:
  2110                           	opt stack 28
  2111                           
  2112                           ;incstack = 0
  2113  002DCC  0E00               	movlw	0
  2114  002DCE  6E18               	movwf	___lwdiv@quotient+1,c
  2115  002DD0  0E00               	movlw	0
  2116  002DD2  6E17               	movwf	___lwdiv@quotient,c
  2117  002DD4  5015               	movf	___lwdiv@divisor,w,c
  2118  002DD6  1016               	iorwf	___lwdiv@divisor+1,w,c
  2119  002DD8  B4D8               	btfsc	status,2,c
  2120  002DDA  D01C               	goto	l717
  2121  002DDC  0E01               	movlw	1
  2122  002DDE  6E19               	movwf	___lwdiv@counter,c
  2123  002DE0  D004               	goto	l2265
  2124  002DE2                     l2263:
  2125  002DE2  90D8               	bcf	status,0,c
  2126  002DE4  3615               	rlcf	___lwdiv@divisor,f,c
  2127  002DE6  3616               	rlcf	___lwdiv@divisor+1,f,c
  2128  002DE8  2A19               	incf	___lwdiv@counter,f,c
  2129  002DEA                     l2265:
  2130  002DEA  AE16               	btfss	___lwdiv@divisor+1,7,c
  2131  002DEC  D7FA               	goto	l2263
  2132  002DEE                     l2267:
  2133  002DEE  90D8               	bcf	status,0,c
  2134  002DF0  3617               	rlcf	___lwdiv@quotient,f,c
  2135  002DF2  3618               	rlcf	___lwdiv@quotient+1,f,c
  2136  002DF4  5015               	movf	___lwdiv@divisor,w,c
  2137  002DF6  5C13               	subwf	___lwdiv@dividend,w,c
  2138  002DF8  5016               	movf	___lwdiv@divisor+1,w,c
  2139  002DFA  5814               	subwfb	___lwdiv@dividend+1,w,c
  2140  002DFC  A0D8               	btfss	status,0,c
  2141  002DFE  D005               	goto	l2275
  2142  002E00  5015               	movf	___lwdiv@divisor,w,c
  2143  002E02  5E13               	subwf	___lwdiv@dividend,f,c
  2144  002E04  5016               	movf	___lwdiv@divisor+1,w,c
  2145  002E06  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2146  002E08  8017               	bsf	___lwdiv@quotient,0,c
  2147  002E0A                     l2275:
  2148  002E0A  90D8               	bcf	status,0,c
  2149  002E0C  3216               	rrcf	___lwdiv@divisor+1,f,c
  2150  002E0E  3215               	rrcf	___lwdiv@divisor,f,c
  2151  002E10  2E19               	decfsz	___lwdiv@counter,f,c
  2152  002E12  D7ED               	goto	l2267
  2153  002E14                     l717:
  2154  002E14  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2155  002E18  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2156  002E1C  0012               	return		;funcret
  2157  002E1E                     __end_of___lwdiv:
  2158                           	opt stack 0
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           postdec1	equ	0xFE5
  2168                           fsr1l	equ	0xFE1
  2169                           postinc2	equ	0xFDE
  2170                           postdec2	equ	0xFDD
  2171                           fsr2h	equ	0xFDA
  2172                           fsr2l	equ	0xFD9
  2173                           status	equ	0xFD8
  2174                           
  2175 ;; *************** function _excerciseControl *****************
  2176 ;; Defined at:
  2177 ;;		line 337 in file "main.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  i               2   33[BANK0 ] int 
  2182 ;;  i               2   31[BANK0 ] int 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;Total ram usage:       17 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    5
  2199 ;; This function calls:
  2200 ;;		___awtoft
  2201 ;;		___ftadd
  2202 ;;		___ftsub
  2203 ;;		___fttol
  2204 ;;		___llmod
  2205 ;;		___lltoft
  2206 ;;		_limitWheelSpeeds
  2207 ;;		_sqrt
  2208 ;;		_wheelVelocity
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text8
  2215  001032                     __ptext8:
  2216                           	opt stack 0
  2217  001032                     _excerciseControl:
  2218                           	opt stack 25
  2219                           
  2220                           ;main.c: 339: static int leftWheelCommandedSpeed = 35;
  2221                           ;main.c: 340: static int rightWheelCommandedSpeed = 25;
  2222                           ;main.c: 342: switch(event){
  2223                           
  2224                           ;incstack = 0
  2225  001032  EF02  F00E         	goto	l3209
  2226  001036                     l3077:
  2227                           
  2228                           ;main.c: 347: if(rightWheelMeasuredSpeed < 20)
  2229  001036  0100               	movlb	0	; () banked
  2230  001038  BFB0               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2231  00103A  D008               	goto	l3079
  2232  00103C  0100               	movlb	0	; () banked
  2233  00103E  51B0               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2234  001040  E121               	bnz	l3085
  2235  001042  0E14               	movlw	20
  2236  001044  0100               	movlb	0	; () banked
  2237  001046  5DAF               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2238  001048  B0D8               	btfsc	status,0,c
  2239  00104A  D01C               	goto	l3085
  2240  00104C                     l3079:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 348: {
  2244                           ;main.c: 349: rightWheelCommandedSpeed += 1;
  2245  00104C  0100               	movlb	0	; () banked
  2246  00104E  4BB6               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2247  001050  2BB7               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2248                           
  2249                           ;main.c: 350: leftWheelCommandedSpeed += 1;
  2250  001052  0100               	movlb	0	; () banked
  2251  001054  4BB4               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2252  001056  2BB5               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;main.c: 351: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2256  001058  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2257  00105C  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2258  001060  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2259  001064  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2260  001068  0E72               	movlw	114
  2261  00106A  EC8E  F016         	call	_wheelVelocity
  2262                           
  2263                           ;main.c: 352: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2264  00106E  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2265  001072  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2266  001076  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2267  00107A  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2268  00107E  0E6C               	movlw	108
  2269  001080  EC8E  F016         	call	_wheelVelocity
  2270  001084                     l3085:
  2271                           
  2272                           ;main.c: 353: }
  2273                           ;main.c: 354: if(rightWheelMeasuredSpeed > 70)
  2274  001084  0100               	movlb	0	; () banked
  2275  001086  BFB0               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2276  001088  D02E               	goto	l3093
  2277  00108A  0100               	movlb	0	; () banked
  2278  00108C  51B0               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2279  00108E  E105               	bnz	u3070
  2280  001090  0E47               	movlw	71
  2281  001092  0100               	movlb	0	; () banked
  2282  001094  5DAF               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2283  001096  A0D8               	btfss	status,0,c
  2284  001098  D026               	goto	l3093
  2285  00109A                     u3070:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;main.c: 355: {
  2289                           ;main.c: 356: rightWheelCommandedSpeed -= 1;
  2290  00109A  0100               	movlb	0	; () banked
  2291  00109C  07B6               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2292  00109E  A0D8               	btfss	status,0,c
  2293  0010A0  07B7               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2294                           
  2295                           ;main.c: 357: leftWheelCommandedSpeed -= 1;
  2296  0010A2  0100               	movlb	0	; () banked
  2297  0010A4  07B4               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2298  0010A6  A0D8               	btfss	status,0,c
  2299  0010A8  07B5               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;main.c: 358: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2303  0010AA  0100               	movlb	0	; () banked
  2304  0010AC  07B6               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2305  0010AE  A0D8               	btfss	status,0,c
  2306  0010B0  07B7               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2307  0010B2  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2308  0010B6  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2309  0010BA  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2310  0010BE  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2311  0010C2  0E72               	movlw	114
  2312  0010C4  EC8E  F016         	call	_wheelVelocity
  2313                           
  2314                           ;main.c: 359: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2315  0010C8  0100               	movlb	0	; () banked
  2316  0010CA  07B4               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2317  0010CC  A0D8               	btfss	status,0,c
  2318  0010CE  07B5               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2319  0010D0  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2320  0010D4  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2321  0010D8  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2322  0010DC  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2323  0010E0  0E6C               	movlw	108
  2324  0010E2  EC8E  F016         	call	_wheelVelocity
  2325  0010E6                     l3093:
  2326                           
  2327                           ;main.c: 360: }
  2328                           ;main.c: 361: if(leftWheelCount > rightWheelCount + 1)
  2329  0010E6  0E01               	movlw	1
  2330  0010E8  0100               	movlb	0	; () banked
  2331  0010EA  25A9               	addwf	_rightWheelCount& (0+255),w,b
  2332  0010EC  0100               	movlb	0	; () banked
  2333  0010EE  6F78               	movwf	??_excerciseControl& (0+255),b
  2334  0010F0  0E00               	movlw	0
  2335  0010F2  0100               	movlb	0	; () banked
  2336  0010F4  21AA               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2337  0010F6  0100               	movlb	0	; () banked
  2338  0010F8  6F79               	movwf	(??_excerciseControl+1)& (0+255),b
  2339  0010FA  0E00               	movlw	0
  2340  0010FC  0100               	movlb	0	; () banked
  2341  0010FE  21AB               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2342  001100  0100               	movlb	0	; () banked
  2343  001102  6F7A               	movwf	(??_excerciseControl+2)& (0+255),b
  2344  001104  0E00               	movlw	0
  2345  001106  0100               	movlb	0	; () banked
  2346  001108  21AC               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2347  00110A  0100               	movlb	0	; () banked
  2348  00110C  6F7B               	movwf	(??_excerciseControl+3)& (0+255),b
  2349  00110E  0100               	movlb	0	; () banked
  2350  001110  51A5               	movf	_leftWheelCount& (0+255),w,b
  2351  001112  0100               	movlb	0	; () banked
  2352  001114  5D78               	subwf	??_excerciseControl& (0+255),w,b
  2353  001116  0100               	movlb	0	; () banked
  2354  001118  51A6               	movf	(_leftWheelCount+1)& (0+255),w,b
  2355  00111A  0100               	movlb	0	; () banked
  2356  00111C  5979               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2357  00111E  0100               	movlb	0	; () banked
  2358  001120  51A7               	movf	(_leftWheelCount+2)& (0+255),w,b
  2359  001122  0100               	movlb	0	; () banked
  2360  001124  597A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2361  001126  0100               	movlb	0	; () banked
  2362  001128  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  2363  00112A  0100               	movlb	0	; () banked
  2364  00112C  597B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2365  00112E  B0D8               	btfsc	status,0,c
  2366  001130  D061               	goto	l3097
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 363: {
  2370                           ;main.c: 364: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  2371  001132  C0A9  F078         	movff	_rightWheelCount,??_excerciseControl
  2372  001136  C0AA  F079         	movff	_rightWheelCount+1,??_excerciseControl+1
  2373  00113A  C0AB  F07A         	movff	_rightWheelCount+2,??_excerciseControl+2
  2374  00113E  C0AC  F07B         	movff	_rightWheelCount+3,??_excerciseControl+3
  2375  001142  0100               	movlb	0	; () banked
  2376  001144  1F78               	comf	??_excerciseControl& (0+255),f,b
  2377  001146  1F79               	comf	(??_excerciseControl+1)& (0+255),f,b
  2378  001148  1F7A               	comf	(??_excerciseControl+2)& (0+255),f,b
  2379  00114A  1F7B               	comf	(??_excerciseControl+3)& (0+255),f,b
  2380  00114C  2B78               	incf	??_excerciseControl& (0+255),f,b
  2381  00114E  0E00               	movlw	0
  2382  001150  2379               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2383  001152  237A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2384  001154  237B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2385  001156  0100               	movlb	0	; () banked
  2386  001158  51A5               	movf	_leftWheelCount& (0+255),w,b
  2387  00115A  0100               	movlb	0	; () banked
  2388  00115C  2578               	addwf	??_excerciseControl& (0+255),w,b
  2389  00115E  6E1B               	movwf	___lltoft@c,c
  2390  001160  0100               	movlb	0	; () banked
  2391  001162  51A6               	movf	(_leftWheelCount+1)& (0+255),w,b
  2392  001164  0100               	movlb	0	; () banked
  2393  001166  2179               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2394  001168  6E1C               	movwf	___lltoft@c+1,c
  2395  00116A  0100               	movlb	0	; () banked
  2396  00116C  51A7               	movf	(_leftWheelCount+2)& (0+255),w,b
  2397  00116E  0100               	movlb	0	; () banked
  2398  001170  217A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2399  001172  6E1D               	movwf	___lltoft@c+2,c
  2400  001174  0100               	movlb	0	; () banked
  2401  001176  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  2402  001178  0100               	movlb	0	; () banked
  2403  00117A  217B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2404  00117C  6E1E               	movwf	___lltoft@c+3,c
  2405  00117E  EC60  F016         	call	___lltoft	;wreg free
  2406  001182  C01B  F036         	movff	?___lltoft,sqrt@a
  2407  001186  C01C  F037         	movff	?___lltoft+1,sqrt@a+1
  2408  00118A  C01D  F038         	movff	?___lltoft+2,sqrt@a+2
  2409  00118E  ECD3  F011         	call	_sqrt	;wreg free
  2410  001192  C036  F083         	movff	?_sqrt,_excerciseControl$2011
  2411  001196  C037  F084         	movff	?_sqrt+1,_excerciseControl$2011+1
  2412  00119A  C038  F085         	movff	?_sqrt+2,_excerciseControl$2011+2
  2413                           
  2414                           ;main.c: 363: {
  2415                           ;main.c: 364: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  2416  00119E  C083  F033         	movff	_excerciseControl$2011,___ftsub@f2
  2417  0011A2  C084  F034         	movff	_excerciseControl$2011+1,___ftsub@f2+1
  2418  0011A6  C085  F035         	movff	_excerciseControl$2011+2,___ftsub@f2+2
  2419  0011AA  C0B2  F01B         	movff	_speedCompensation,___awtoft@c
  2420  0011AE  C0B3  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  2421  0011B2  EC50  F017         	call	___awtoft	;wreg free
  2422  0011B6  C01B  F030         	movff	?___awtoft,___ftsub@f1
  2423  0011BA  C01C  F031         	movff	?___awtoft+1,___ftsub@f1+1
  2424  0011BE  C01D  F032         	movff	?___awtoft+2,___ftsub@f1+2
  2425  0011C2  EC30  F017         	call	___ftsub	;wreg free
  2426  0011C6  C030  F042         	movff	?___ftsub,___fttol@f1
  2427  0011CA  C031  F043         	movff	?___ftsub+1,___fttol@f1+1
  2428  0011CE  C032  F044         	movff	?___ftsub+2,___fttol@f1+2
  2429  0011D2  ECA2  F012         	call	___fttol	;wreg free
  2430  0011D6  C042  F0B2         	movff	?___fttol,_speedCompensation
  2431  0011DA  C043  F0B3         	movff	?___fttol+1,_speedCompensation+1
  2432                           
  2433                           ;main.c: 365: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2434  0011DE  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2435  0011E2  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2436  0011E6  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2437  0011EA  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2438  0011EE  0E6C               	movlw	108
  2439  0011F0  EC8E  F016         	call	_wheelVelocity
  2440  0011F4                     l3097:
  2441                           
  2442                           ;main.c: 366: }
  2443                           ;main.c: 367: if(rightWheelCount > (leftWheelCount + 1) )
  2444  0011F4  0E01               	movlw	1
  2445  0011F6  0100               	movlb	0	; () banked
  2446  0011F8  25A5               	addwf	_leftWheelCount& (0+255),w,b
  2447  0011FA  0100               	movlb	0	; () banked
  2448  0011FC  6F78               	movwf	??_excerciseControl& (0+255),b
  2449  0011FE  0E00               	movlw	0
  2450  001200  0100               	movlb	0	; () banked
  2451  001202  21A6               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2452  001204  0100               	movlb	0	; () banked
  2453  001206  6F79               	movwf	(??_excerciseControl+1)& (0+255),b
  2454  001208  0E00               	movlw	0
  2455  00120A  0100               	movlb	0	; () banked
  2456  00120C  21A7               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2457  00120E  0100               	movlb	0	; () banked
  2458  001210  6F7A               	movwf	(??_excerciseControl+2)& (0+255),b
  2459  001212  0E00               	movlw	0
  2460  001214  0100               	movlb	0	; () banked
  2461  001216  21A8               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2462  001218  0100               	movlb	0	; () banked
  2463  00121A  6F7B               	movwf	(??_excerciseControl+3)& (0+255),b
  2464  00121C  0100               	movlb	0	; () banked
  2465  00121E  51A9               	movf	_rightWheelCount& (0+255),w,b
  2466  001220  0100               	movlb	0	; () banked
  2467  001222  5D78               	subwf	??_excerciseControl& (0+255),w,b
  2468  001224  0100               	movlb	0	; () banked
  2469  001226  51AA               	movf	(_rightWheelCount+1)& (0+255),w,b
  2470  001228  0100               	movlb	0	; () banked
  2471  00122A  5979               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2472  00122C  0100               	movlb	0	; () banked
  2473  00122E  51AB               	movf	(_rightWheelCount+2)& (0+255),w,b
  2474  001230  0100               	movlb	0	; () banked
  2475  001232  597A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2476  001234  0100               	movlb	0	; () banked
  2477  001236  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  2478  001238  0100               	movlb	0	; () banked
  2479  00123A  597B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2480  00123C  B0D8               	btfsc	status,0,c
  2481  00123E  D075               	goto	l3101
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;main.c: 369: {
  2485                           ;main.c: 370: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2486  001240  C0A5  F078         	movff	_leftWheelCount,??_excerciseControl
  2487  001244  C0A6  F079         	movff	_leftWheelCount+1,??_excerciseControl+1
  2488  001248  C0A7  F07A         	movff	_leftWheelCount+2,??_excerciseControl+2
  2489  00124C  C0A8  F07B         	movff	_leftWheelCount+3,??_excerciseControl+3
  2490  001250  0100               	movlb	0	; () banked
  2491  001252  1F78               	comf	??_excerciseControl& (0+255),f,b
  2492  001254  1F79               	comf	(??_excerciseControl+1)& (0+255),f,b
  2493  001256  1F7A               	comf	(??_excerciseControl+2)& (0+255),f,b
  2494  001258  1F7B               	comf	(??_excerciseControl+3)& (0+255),f,b
  2495  00125A  2B78               	incf	??_excerciseControl& (0+255),f,b
  2496  00125C  0E00               	movlw	0
  2497  00125E  2379               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2498  001260  237A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2499  001262  237B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2500  001264  0100               	movlb	0	; () banked
  2501  001266  51A9               	movf	_rightWheelCount& (0+255),w,b
  2502  001268  0100               	movlb	0	; () banked
  2503  00126A  2578               	addwf	??_excerciseControl& (0+255),w,b
  2504  00126C  6E1B               	movwf	___lltoft@c,c
  2505  00126E  0100               	movlb	0	; () banked
  2506  001270  51AA               	movf	(_rightWheelCount+1)& (0+255),w,b
  2507  001272  0100               	movlb	0	; () banked
  2508  001274  2179               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2509  001276  6E1C               	movwf	___lltoft@c+1,c
  2510  001278  0100               	movlb	0	; () banked
  2511  00127A  51AB               	movf	(_rightWheelCount+2)& (0+255),w,b
  2512  00127C  0100               	movlb	0	; () banked
  2513  00127E  217A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2514  001280  6E1D               	movwf	___lltoft@c+2,c
  2515  001282  0100               	movlb	0	; () banked
  2516  001284  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  2517  001286  0100               	movlb	0	; () banked
  2518  001288  217B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2519  00128A  6E1E               	movwf	___lltoft@c+3,c
  2520  00128C  EC60  F016         	call	___lltoft	;wreg free
  2521  001290  C01B  F036         	movff	?___lltoft,sqrt@a
  2522  001294  C01C  F037         	movff	?___lltoft+1,sqrt@a+1
  2523  001298  C01D  F038         	movff	?___lltoft+2,sqrt@a+2
  2524  00129C  ECD3  F011         	call	_sqrt	;wreg free
  2525  0012A0  C036  F086         	movff	?_sqrt,_excerciseControl$2012
  2526  0012A4  C037  F087         	movff	?_sqrt+1,_excerciseControl$2012+1
  2527  0012A8  C038  F088         	movff	?_sqrt+2,_excerciseControl$2012+2
  2528                           
  2529                           ;main.c: 369: {
  2530                           ;main.c: 370: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2531  0012AC  0E00               	movlw	0
  2532  0012AE  6E27               	movwf	___ftadd@f2,c
  2533  0012B0  0EA0               	movlw	160
  2534  0012B2  6E28               	movwf	___ftadd@f2+1,c
  2535  0012B4  0E40               	movlw	64
  2536  0012B6  6E29               	movwf	___ftadd@f2+2,c
  2537  0012B8  C086  F024         	movff	_excerciseControl$2012,___ftadd@f1
  2538  0012BC  C087  F025         	movff	_excerciseControl$2012+1,___ftadd@f1+1
  2539  0012C0  C088  F026         	movff	_excerciseControl$2012+2,___ftadd@f1+2
  2540  0012C4  ECFD  F010         	call	___ftadd	;wreg free
  2541  0012C8  C024  F07C         	movff	?___ftadd,_excerciseControl$2013
  2542  0012CC  C025  F07D         	movff	?___ftadd+1,_excerciseControl$2013+1
  2543  0012D0  C026  F07E         	movff	?___ftadd+2,_excerciseControl$2013+2
  2544                           
  2545                           ;main.c: 369: {
  2546                           ;main.c: 370: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2547  0012D4  C07C  F027         	movff	_excerciseControl$2013,___ftadd@f2
  2548  0012D8  C07D  F028         	movff	_excerciseControl$2013+1,___ftadd@f2+1
  2549  0012DC  C07E  F029         	movff	_excerciseControl$2013+2,___ftadd@f2+2
  2550  0012E0  C0B2  F01B         	movff	_speedCompensation,___awtoft@c
  2551  0012E4  C0B3  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  2552  0012E8  EC50  F017         	call	___awtoft	;wreg free
  2553  0012EC  C01B  F024         	movff	?___awtoft,___ftadd@f1
  2554  0012F0  C01C  F025         	movff	?___awtoft+1,___ftadd@f1+1
  2555  0012F4  C01D  F026         	movff	?___awtoft+2,___ftadd@f1+2
  2556  0012F8  ECFD  F010         	call	___ftadd	;wreg free
  2557  0012FC  C024  F042         	movff	?___ftadd,___fttol@f1
  2558  001300  C025  F043         	movff	?___ftadd+1,___fttol@f1+1
  2559  001304  C026  F044         	movff	?___ftadd+2,___fttol@f1+2
  2560  001308  ECA2  F012         	call	___fttol	;wreg free
  2561  00130C  C042  F0B2         	movff	?___fttol,_speedCompensation
  2562  001310  C043  F0B3         	movff	?___fttol+1,_speedCompensation+1
  2563                           
  2564                           ;main.c: 371: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2565  001314  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2566  001318  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2567  00131C  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2568  001320  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2569  001324  0E6C               	movlw	108
  2570  001326  EC8E  F016         	call	_wheelVelocity
  2571  00132A                     l3101:
  2572                           
  2573                           ;main.c: 372: }
  2574                           ;main.c: 374: if(rightWheelCount >= 115)
  2575  00132A  0100               	movlb	0	; () banked
  2576  00132C  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  2577  00132E  0100               	movlb	0	; () banked
  2578  001330  11AB               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2579  001332  0100               	movlb	0	; () banked
  2580  001334  11AA               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  2581  001336  E105               	bnz	u3100
  2582  001338  0E73               	movlw	115
  2583  00133A  0100               	movlb	0	; () banked
  2584  00133C  5DA9               	subwf	_rightWheelCount& (0+255),w,b
  2585  00133E  A0D8               	btfss	status,0,c
  2586  001340  D091               	goto	l3133
  2587  001342                     u3100:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 375: {
  2591                           ;main.c: 376: if(leftWheelCount >= 115)
  2592  001342  0100               	movlb	0	; () banked
  2593  001344  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  2594  001346  0100               	movlb	0	; () banked
  2595  001348  11A7               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  2596  00134A  0100               	movlb	0	; () banked
  2597  00134C  11A6               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  2598  00134E  E105               	bnz	u3110
  2599  001350  0E73               	movlw	115
  2600  001352  0100               	movlb	0	; () banked
  2601  001354  5DA5               	subwf	_leftWheelCount& (0+255),w,b
  2602  001356  A0D8               	btfss	status,0,c
  2603  001358  D060               	goto	l3127
  2604  00135A                     u3110:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;main.c: 377: {
  2608                           ;main.c: 378: rightWheelCount = 0;
  2609  00135A  0E00               	movlw	0
  2610  00135C  0100               	movlb	0	; () banked
  2611  00135E  6FA9               	movwf	_rightWheelCount& (0+255),b
  2612  001360  0E00               	movlw	0
  2613  001362  6FAA               	movwf	(_rightWheelCount+1)& (0+255),b
  2614  001364  0E00               	movlw	0
  2615  001366  6FAB               	movwf	(_rightWheelCount+2)& (0+255),b
  2616  001368  0E00               	movlw	0
  2617  00136A  6FAC               	movwf	(_rightWheelCount+3)& (0+255),b
  2618                           
  2619                           ;main.c: 379: leftWheelCount = 0;
  2620  00136C  0E00               	movlw	0
  2621  00136E  0100               	movlb	0	; () banked
  2622  001370  6FA5               	movwf	_leftWheelCount& (0+255),b
  2623  001372  0E00               	movlw	0
  2624  001374  6FA6               	movwf	(_leftWheelCount+1)& (0+255),b
  2625  001376  0E00               	movlw	0
  2626  001378  6FA7               	movwf	(_leftWheelCount+2)& (0+255),b
  2627  00137A  0E00               	movlw	0
  2628  00137C  6FA8               	movwf	(_leftWheelCount+3)& (0+255),b
  2629                           
  2630                           ;main.c: 380: leftWheelCommandedSpeed = 0;
  2631  00137E  0E00               	movlw	0
  2632  001380  0100               	movlb	0	; () banked
  2633  001382  6FB5               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2634  001384  0E00               	movlw	0
  2635  001386  6FB4               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2636                           
  2637                           ;main.c: 381: rightWheelCommandedSpeed = 0;
  2638  001388  0E00               	movlw	0
  2639  00138A  0100               	movlb	0	; () banked
  2640  00138C  6FB7               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2641  00138E  0E00               	movlw	0
  2642  001390  6FB6               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;main.c: 382: event += 1;
  2646  001392  0100               	movlb	0	; () banked
  2647  001394  2BB1               	incf	_event& (0+255),f,b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;main.c: 383: speedCompensation = 0;
  2651  001396  0E00               	movlw	0
  2652  001398  0100               	movlb	0	; () banked
  2653  00139A  6FB3               	movwf	(_speedCompensation+1)& (0+255),b
  2654  00139C  0E00               	movlw	0
  2655  00139E  6FB2               	movwf	_speedCompensation& (0+255),b
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 384: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2659  0013A0  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2660  0013A4  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2661  0013A8  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2662  0013AC  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2663  0013B0  0E72               	movlw	114
  2664  0013B2  EC8E  F016         	call	_wheelVelocity
  2665                           
  2666                           ;main.c: 385: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2667  0013B6  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2668  0013BA  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2669  0013BE  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2670  0013C2  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2671  0013C6  0E6C               	movlw	108
  2672  0013C8  EC8E  F016         	call	_wheelVelocity
  2673                           
  2674                           ;main.c: 386: for(int i = 0; i<20 ; i++)
  2675  0013CC  0E00               	movlw	0
  2676  0013CE  0100               	movlb	0	; () banked
  2677  0013D0  6F80               	movwf	(excerciseControl@i+1)& (0+255),b
  2678  0013D2  0E00               	movlw	0
  2679  0013D4  6F7F               	movwf	excerciseControl@i& (0+255),b
  2680  0013D6                     l3117:
  2681                           
  2682                           ; BSR set to: 0
  2683  0013D6  0100               	movlb	0	; () banked
  2684  0013D8  BF80               	btfsc	(excerciseControl@i+1)& (0+255),7,b
  2685  0013DA  D008               	goto	l3121
  2686  0013DC  0100               	movlb	0	; () banked
  2687  0013DE  5180               	movf	(excerciseControl@i+1)& (0+255),w,b
  2688  0013E0  E111               	bnz	l3125
  2689  0013E2  0E14               	movlw	20
  2690  0013E4  0100               	movlb	0	; () banked
  2691  0013E6  5D7F               	subwf	excerciseControl@i& (0+255),w,b
  2692  0013E8  B0D8               	btfsc	status,0,c
  2693  0013EA  D00C               	goto	l3125
  2694  0013EC                     l3121:
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;main.c: 387: {
  2698                           ;main.c: 388: _delay((unsigned long)((50)*(8000000/4000.0)));
  2699  0013EC  0E82               	movlw	130
  2700  0013EE  0100               	movlb	0	; () banked
  2701  0013F0  6F78               	movwf	??_excerciseControl& (0+255),b
  2702  0013F2  0EDE               	movlw	222
  2703  0013F4                     u3357:
  2704  0013F4  2EE8               	decfsz	wreg,f,c
  2705  0013F6  D7FE               	goto	u3357
  2706  0013F8  2F78               	decfsz	??_excerciseControl& (0+255),f,b
  2707  0013FA  D7FC               	goto	u3357
  2708  0013FC  0100               	movlb	0	; () banked
  2709  0013FE  4B7F               	infsnz	excerciseControl@i& (0+255),f,b
  2710  001400  2B80               	incf	(excerciseControl@i+1)& (0+255),f,b
  2711  001402  D7E9               	goto	l3117
  2712  001404                     l3125:
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;main.c: 389: }
  2716                           ;main.c: 390: rightWheelCommandedSpeed = 25;
  2717  001404  0E00               	movlw	0
  2718  001406  0100               	movlb	0	; () banked
  2719  001408  6FB7               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2720  00140A  0E19               	movlw	25
  2721  00140C  6FB6               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2722                           
  2723                           ;main.c: 391: leftWheelCommandedSpeed = -30;
  2724  00140E  0EFF               	movlw	255
  2725  001410  0100               	movlb	0	; () banked
  2726  001412  6FB5               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2727  001414  0EE2               	movlw	226
  2728  001416  6FB4               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2729                           
  2730                           ;main.c: 392: }
  2731  001418  D025               	goto	l3133
  2732  00141A                     l3127:
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 393: else
  2736                           ;main.c: 394: {
  2737                           ;main.c: 395: rightWheelCommandedSpeed = 0;
  2738  00141A  0E00               	movlw	0
  2739  00141C  0100               	movlb	0	; () banked
  2740  00141E  6FB7               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2741  001420  0E00               	movlw	0
  2742  001422  6FB6               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2743                           
  2744                           ;main.c: 396: leftWheelCommandedSpeed = 30;
  2745  001424  0E00               	movlw	0
  2746  001426  0100               	movlb	0	; () banked
  2747  001428  6FB5               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2748  00142A  0E1E               	movlw	30
  2749  00142C  6FB4               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2750                           
  2751                           ;main.c: 397: speedCompensation = 0;
  2752  00142E  0E00               	movlw	0
  2753  001430  0100               	movlb	0	; () banked
  2754  001432  6FB3               	movwf	(_speedCompensation+1)& (0+255),b
  2755  001434  0E00               	movlw	0
  2756  001436  6FB2               	movwf	_speedCompensation& (0+255),b
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;main.c: 398: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2760  001438  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2761  00143C  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2762  001440  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2763  001444  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2764  001448  0E72               	movlw	114
  2765  00144A  EC8E  F016         	call	_wheelVelocity
  2766                           
  2767                           ;main.c: 399: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2768  00144E  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2769  001452  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2770  001456  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2771  00145A  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2772  00145E  0E72               	movlw	114
  2773  001460  EC8E  F016         	call	_wheelVelocity
  2774  001464                     l3133:
  2775                           
  2776                           ;main.c: 400: }
  2777                           ;main.c: 403: }
  2778                           ;main.c: 405: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2779  001464  0EB4               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2780  001466  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2781  001468  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  2782  00146A  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  2783  00146C  0EB6               	movlw	low excerciseControl@rightWheelCommandedSpeed
  2784  00146E  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  2785  001470  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  2786  001472  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  2787  001474  0EB2               	movlw	low _speedCompensation
  2788  001476  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  2789  001478  0E00               	movlw	high _speedCompensation
  2790  00147A  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  2791  00147C  EC39  F013         	call	_limitWheelSpeeds	;wreg free
  2792                           
  2793                           ;main.c: 406: break;
  2794  001480  0012               	return	
  2795  001482                     l3135:
  2796                           
  2797                           ;main.c: 413: if(rightWheelMeasuredSpeed < 15)
  2798  001482  0100               	movlb	0	; () banked
  2799  001484  BFB0               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2800  001486  D008               	goto	l3137
  2801  001488  0100               	movlb	0	; () banked
  2802  00148A  51B0               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2803  00148C  E122               	bnz	l3139
  2804  00148E  0E0F               	movlw	15
  2805  001490  0100               	movlb	0	; () banked
  2806  001492  5DAF               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2807  001494  B0D8               	btfsc	status,0,c
  2808  001496  D01D               	goto	l3139
  2809  001498                     l3137:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 414: {
  2813                           ;main.c: 415: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  2814  001498  0100               	movlb	0	; () banked
  2815  00149A  4BB6               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2816  00149C  2BB7               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2817  00149E  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2818  0014A2  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2819  0014A6  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2820  0014AA  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2821  0014AE  0E72               	movlw	114
  2822  0014B0  EC8E  F016         	call	_wheelVelocity
  2823                           
  2824                           ;main.c: 416: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2825  0014B4  0100               	movlb	0	; () banked
  2826  0014B6  07B4               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2827  0014B8  A0D8               	btfss	status,0,c
  2828  0014BA  07B5               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2829  0014BC  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2830  0014C0  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2831  0014C4  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2832  0014C8  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2833  0014CC  0E6C               	movlw	108
  2834  0014CE  EC8E  F016         	call	_wheelVelocity
  2835  0014D2                     l3139:
  2836                           
  2837                           ;main.c: 417: }
  2838                           ;main.c: 418: if(rightWheelMeasuredSpeed > 30)
  2839  0014D2  0100               	movlb	0	; () banked
  2840  0014D4  BFB0               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2841  0014D6  D025               	goto	l3143
  2842  0014D8  0100               	movlb	0	; () banked
  2843  0014DA  51B0               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2844  0014DC  E105               	bnz	u3150
  2845  0014DE  0E1F               	movlw	31
  2846  0014E0  0100               	movlb	0	; () banked
  2847  0014E2  5DAF               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2848  0014E4  A0D8               	btfss	status,0,c
  2849  0014E6  D01D               	goto	l3143
  2850  0014E8                     u3150:
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;main.c: 419: {
  2854                           ;main.c: 420: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2855  0014E8  0100               	movlb	0	; () banked
  2856  0014EA  07B6               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2857  0014EC  A0D8               	btfss	status,0,c
  2858  0014EE  07B7               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2859  0014F0  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2860  0014F4  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2861  0014F8  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2862  0014FC  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2863  001500  0E72               	movlw	114
  2864  001502  EC8E  F016         	call	_wheelVelocity
  2865                           
  2866                           ;main.c: 421: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  2867  001506  0100               	movlb	0	; () banked
  2868  001508  4BB4               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2869  00150A  2BB5               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2870  00150C  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2871  001510  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2872  001514  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2873  001518  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2874  00151C  0E6C               	movlw	108
  2875  00151E  EC8E  F016         	call	_wheelVelocity
  2876  001522                     l3143:
  2877                           
  2878                           ;main.c: 422: }
  2879                           ;main.c: 423: if(leftWheelCount > (rightWheelCount + 1))
  2880  001522  0E01               	movlw	1
  2881  001524  0100               	movlb	0	; () banked
  2882  001526  25A9               	addwf	_rightWheelCount& (0+255),w,b
  2883  001528  0100               	movlb	0	; () banked
  2884  00152A  6F78               	movwf	??_excerciseControl& (0+255),b
  2885  00152C  0E00               	movlw	0
  2886  00152E  0100               	movlb	0	; () banked
  2887  001530  21AA               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2888  001532  0100               	movlb	0	; () banked
  2889  001534  6F79               	movwf	(??_excerciseControl+1)& (0+255),b
  2890  001536  0E00               	movlw	0
  2891  001538  0100               	movlb	0	; () banked
  2892  00153A  21AB               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2893  00153C  0100               	movlb	0	; () banked
  2894  00153E  6F7A               	movwf	(??_excerciseControl+2)& (0+255),b
  2895  001540  0E00               	movlw	0
  2896  001542  0100               	movlb	0	; () banked
  2897  001544  21AC               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2898  001546  0100               	movlb	0	; () banked
  2899  001548  6F7B               	movwf	(??_excerciseControl+3)& (0+255),b
  2900  00154A  0100               	movlb	0	; () banked
  2901  00154C  51A5               	movf	_leftWheelCount& (0+255),w,b
  2902  00154E  0100               	movlb	0	; () banked
  2903  001550  5D78               	subwf	??_excerciseControl& (0+255),w,b
  2904  001552  0100               	movlb	0	; () banked
  2905  001554  51A6               	movf	(_leftWheelCount+1)& (0+255),w,b
  2906  001556  0100               	movlb	0	; () banked
  2907  001558  5979               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2908  00155A  0100               	movlb	0	; () banked
  2909  00155C  51A7               	movf	(_leftWheelCount+2)& (0+255),w,b
  2910  00155E  0100               	movlb	0	; () banked
  2911  001560  597A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2912  001562  0100               	movlb	0	; () banked
  2913  001564  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  2914  001566  0100               	movlb	0	; () banked
  2915  001568  597B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2916  00156A  B0D8               	btfsc	status,0,c
  2917  00156C  D061               	goto	l3147
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;main.c: 425: {
  2921                           ;main.c: 426: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount));
  2922  00156E  C0A9  F078         	movff	_rightWheelCount,??_excerciseControl
  2923  001572  C0AA  F079         	movff	_rightWheelCount+1,??_excerciseControl+1
  2924  001576  C0AB  F07A         	movff	_rightWheelCount+2,??_excerciseControl+2
  2925  00157A  C0AC  F07B         	movff	_rightWheelCount+3,??_excerciseControl+3
  2926  00157E  0100               	movlb	0	; () banked
  2927  001580  1F78               	comf	??_excerciseControl& (0+255),f,b
  2928  001582  1F79               	comf	(??_excerciseControl+1)& (0+255),f,b
  2929  001584  1F7A               	comf	(??_excerciseControl+2)& (0+255),f,b
  2930  001586  1F7B               	comf	(??_excerciseControl+3)& (0+255),f,b
  2931  001588  2B78               	incf	??_excerciseControl& (0+255),f,b
  2932  00158A  0E00               	movlw	0
  2933  00158C  2379               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2934  00158E  237A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2935  001590  237B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2936  001592  0100               	movlb	0	; () banked
  2937  001594  51A5               	movf	_leftWheelCount& (0+255),w,b
  2938  001596  0100               	movlb	0	; () banked
  2939  001598  2578               	addwf	??_excerciseControl& (0+255),w,b
  2940  00159A  6E1B               	movwf	___lltoft@c,c
  2941  00159C  0100               	movlb	0	; () banked
  2942  00159E  51A6               	movf	(_leftWheelCount+1)& (0+255),w,b
  2943  0015A0  0100               	movlb	0	; () banked
  2944  0015A2  2179               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2945  0015A4  6E1C               	movwf	___lltoft@c+1,c
  2946  0015A6  0100               	movlb	0	; () banked
  2947  0015A8  51A7               	movf	(_leftWheelCount+2)& (0+255),w,b
  2948  0015AA  0100               	movlb	0	; () banked
  2949  0015AC  217A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2950  0015AE  6E1D               	movwf	___lltoft@c+2,c
  2951  0015B0  0100               	movlb	0	; () banked
  2952  0015B2  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  2953  0015B4  0100               	movlb	0	; () banked
  2954  0015B6  217B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2955  0015B8  6E1E               	movwf	___lltoft@c+3,c
  2956  0015BA  EC60  F016         	call	___lltoft	;wreg free
  2957  0015BE  C01B  F036         	movff	?___lltoft,sqrt@a
  2958  0015C2  C01C  F037         	movff	?___lltoft+1,sqrt@a+1
  2959  0015C6  C01D  F038         	movff	?___lltoft+2,sqrt@a+2
  2960  0015CA  ECD3  F011         	call	_sqrt	;wreg free
  2961  0015CE  C036  F083         	movff	?_sqrt,_excerciseControl$2011
  2962  0015D2  C037  F084         	movff	?_sqrt+1,_excerciseControl$2011+1
  2963  0015D6  C038  F085         	movff	?_sqrt+2,_excerciseControl$2011+2
  2964                           
  2965                           ;main.c: 425: {
  2966                           ;main.c: 426: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount));
  2967  0015DA  C083  F033         	movff	_excerciseControl$2011,___ftsub@f2
  2968  0015DE  C084  F034         	movff	_excerciseControl$2011+1,___ftsub@f2+1
  2969  0015E2  C085  F035         	movff	_excerciseControl$2011+2,___ftsub@f2+2
  2970  0015E6  C0B2  F01B         	movff	_speedCompensation,___awtoft@c
  2971  0015EA  C0B3  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  2972  0015EE  EC50  F017         	call	___awtoft	;wreg free
  2973  0015F2  C01B  F030         	movff	?___awtoft,___ftsub@f1
  2974  0015F6  C01C  F031         	movff	?___awtoft+1,___ftsub@f1+1
  2975  0015FA  C01D  F032         	movff	?___awtoft+2,___ftsub@f1+2
  2976  0015FE  EC30  F017         	call	___ftsub	;wreg free
  2977  001602  C030  F042         	movff	?___ftsub,___fttol@f1
  2978  001606  C031  F043         	movff	?___ftsub+1,___fttol@f1+1
  2979  00160A  C032  F044         	movff	?___ftsub+2,___fttol@f1+2
  2980  00160E  ECA2  F012         	call	___fttol	;wreg free
  2981  001612  C042  F0B2         	movff	?___fttol,_speedCompensation
  2982  001616  C043  F0B3         	movff	?___fttol+1,_speedCompensation+1
  2983                           
  2984                           ;main.c: 427: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2985  00161A  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2986  00161E  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2987  001622  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2988  001626  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2989  00162A  0E6C               	movlw	108
  2990  00162C  EC8E  F016         	call	_wheelVelocity
  2991  001630                     l3147:
  2992                           
  2993                           ;main.c: 428: }
  2994                           ;main.c: 429: if(rightWheelCount > leftWheelCount + 1)
  2995  001630  0E01               	movlw	1
  2996  001632  0100               	movlb	0	; () banked
  2997  001634  25A5               	addwf	_leftWheelCount& (0+255),w,b
  2998  001636  0100               	movlb	0	; () banked
  2999  001638  6F78               	movwf	??_excerciseControl& (0+255),b
  3000  00163A  0E00               	movlw	0
  3001  00163C  0100               	movlb	0	; () banked
  3002  00163E  21A6               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  3003  001640  0100               	movlb	0	; () banked
  3004  001642  6F79               	movwf	(??_excerciseControl+1)& (0+255),b
  3005  001644  0E00               	movlw	0
  3006  001646  0100               	movlb	0	; () banked
  3007  001648  21A7               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  3008  00164A  0100               	movlb	0	; () banked
  3009  00164C  6F7A               	movwf	(??_excerciseControl+2)& (0+255),b
  3010  00164E  0E00               	movlw	0
  3011  001650  0100               	movlb	0	; () banked
  3012  001652  21A8               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  3013  001654  0100               	movlb	0	; () banked
  3014  001656  6F7B               	movwf	(??_excerciseControl+3)& (0+255),b
  3015  001658  0100               	movlb	0	; () banked
  3016  00165A  51A9               	movf	_rightWheelCount& (0+255),w,b
  3017  00165C  0100               	movlb	0	; () banked
  3018  00165E  5D78               	subwf	??_excerciseControl& (0+255),w,b
  3019  001660  0100               	movlb	0	; () banked
  3020  001662  51AA               	movf	(_rightWheelCount+1)& (0+255),w,b
  3021  001664  0100               	movlb	0	; () banked
  3022  001666  5979               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  3023  001668  0100               	movlb	0	; () banked
  3024  00166A  51AB               	movf	(_rightWheelCount+2)& (0+255),w,b
  3025  00166C  0100               	movlb	0	; () banked
  3026  00166E  597A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  3027  001670  0100               	movlb	0	; () banked
  3028  001672  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  3029  001674  0100               	movlb	0	; () banked
  3030  001676  597B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  3031  001678  B0D8               	btfsc	status,0,c
  3032  00167A  D075               	goto	l3151
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;main.c: 431: {
  3036                           ;main.c: 432: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3037  00167C  C0A5  F078         	movff	_leftWheelCount,??_excerciseControl
  3038  001680  C0A6  F079         	movff	_leftWheelCount+1,??_excerciseControl+1
  3039  001684  C0A7  F07A         	movff	_leftWheelCount+2,??_excerciseControl+2
  3040  001688  C0A8  F07B         	movff	_leftWheelCount+3,??_excerciseControl+3
  3041  00168C  0100               	movlb	0	; () banked
  3042  00168E  1F78               	comf	??_excerciseControl& (0+255),f,b
  3043  001690  1F79               	comf	(??_excerciseControl+1)& (0+255),f,b
  3044  001692  1F7A               	comf	(??_excerciseControl+2)& (0+255),f,b
  3045  001694  1F7B               	comf	(??_excerciseControl+3)& (0+255),f,b
  3046  001696  2B78               	incf	??_excerciseControl& (0+255),f,b
  3047  001698  0E00               	movlw	0
  3048  00169A  2379               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3049  00169C  237A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3050  00169E  237B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3051  0016A0  0100               	movlb	0	; () banked
  3052  0016A2  51A9               	movf	_rightWheelCount& (0+255),w,b
  3053  0016A4  0100               	movlb	0	; () banked
  3054  0016A6  2578               	addwf	??_excerciseControl& (0+255),w,b
  3055  0016A8  6E1B               	movwf	___lltoft@c,c
  3056  0016AA  0100               	movlb	0	; () banked
  3057  0016AC  51AA               	movf	(_rightWheelCount+1)& (0+255),w,b
  3058  0016AE  0100               	movlb	0	; () banked
  3059  0016B0  2179               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3060  0016B2  6E1C               	movwf	___lltoft@c+1,c
  3061  0016B4  0100               	movlb	0	; () banked
  3062  0016B6  51AB               	movf	(_rightWheelCount+2)& (0+255),w,b
  3063  0016B8  0100               	movlb	0	; () banked
  3064  0016BA  217A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3065  0016BC  6E1D               	movwf	___lltoft@c+2,c
  3066  0016BE  0100               	movlb	0	; () banked
  3067  0016C0  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  3068  0016C2  0100               	movlb	0	; () banked
  3069  0016C4  217B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3070  0016C6  6E1E               	movwf	___lltoft@c+3,c
  3071  0016C8  EC60  F016         	call	___lltoft	;wreg free
  3072  0016CC  C01B  F036         	movff	?___lltoft,sqrt@a
  3073  0016D0  C01C  F037         	movff	?___lltoft+1,sqrt@a+1
  3074  0016D4  C01D  F038         	movff	?___lltoft+2,sqrt@a+2
  3075  0016D8  ECD3  F011         	call	_sqrt	;wreg free
  3076  0016DC  C036  F086         	movff	?_sqrt,_excerciseControl$2012
  3077  0016E0  C037  F087         	movff	?_sqrt+1,_excerciseControl$2012+1
  3078  0016E4  C038  F088         	movff	?_sqrt+2,_excerciseControl$2012+2
  3079                           
  3080                           ;main.c: 431: {
  3081                           ;main.c: 432: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3082  0016E8  0E00               	movlw	0
  3083  0016EA  6E27               	movwf	___ftadd@f2,c
  3084  0016EC  0EA0               	movlw	160
  3085  0016EE  6E28               	movwf	___ftadd@f2+1,c
  3086  0016F0  0E40               	movlw	64
  3087  0016F2  6E29               	movwf	___ftadd@f2+2,c
  3088  0016F4  C086  F024         	movff	_excerciseControl$2012,___ftadd@f1
  3089  0016F8  C087  F025         	movff	_excerciseControl$2012+1,___ftadd@f1+1
  3090  0016FC  C088  F026         	movff	_excerciseControl$2012+2,___ftadd@f1+2
  3091  001700  ECFD  F010         	call	___ftadd	;wreg free
  3092  001704  C024  F07C         	movff	?___ftadd,_excerciseControl$2013
  3093  001708  C025  F07D         	movff	?___ftadd+1,_excerciseControl$2013+1
  3094  00170C  C026  F07E         	movff	?___ftadd+2,_excerciseControl$2013+2
  3095                           
  3096                           ;main.c: 431: {
  3097                           ;main.c: 432: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3098  001710  C07C  F027         	movff	_excerciseControl$2013,___ftadd@f2
  3099  001714  C07D  F028         	movff	_excerciseControl$2013+1,___ftadd@f2+1
  3100  001718  C07E  F029         	movff	_excerciseControl$2013+2,___ftadd@f2+2
  3101  00171C  C0B2  F01B         	movff	_speedCompensation,___awtoft@c
  3102  001720  C0B3  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3103  001724  EC50  F017         	call	___awtoft	;wreg free
  3104  001728  C01B  F024         	movff	?___awtoft,___ftadd@f1
  3105  00172C  C01C  F025         	movff	?___awtoft+1,___ftadd@f1+1
  3106  001730  C01D  F026         	movff	?___awtoft+2,___ftadd@f1+2
  3107  001734  ECFD  F010         	call	___ftadd	;wreg free
  3108  001738  C024  F042         	movff	?___ftadd,___fttol@f1
  3109  00173C  C025  F043         	movff	?___ftadd+1,___fttol@f1+1
  3110  001740  C026  F044         	movff	?___ftadd+2,___fttol@f1+2
  3111  001744  ECA2  F012         	call	___fttol	;wreg free
  3112  001748  C042  F0B2         	movff	?___fttol,_speedCompensation
  3113  00174C  C043  F0B3         	movff	?___fttol+1,_speedCompensation+1
  3114                           
  3115                           ;main.c: 433: wheelVelocity('l', leftWheelCommandedSpeed,speedCompensation);
  3116  001750  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3117  001754  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3118  001758  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3119  00175C  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3120  001760  0E6C               	movlw	108
  3121  001762  EC8E  F016         	call	_wheelVelocity
  3122  001766                     l3151:
  3123                           
  3124                           ;main.c: 434: }
  3125                           ;main.c: 436: if(rightWheelCount >= 19)
  3126  001766  0100               	movlb	0	; () banked
  3127  001768  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  3128  00176A  0100               	movlb	0	; () banked
  3129  00176C  11AB               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3130  00176E  0100               	movlb	0	; () banked
  3131  001770  11AA               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  3132  001772  E105               	bnz	u3180
  3133  001774  0E13               	movlw	19
  3134  001776  0100               	movlb	0	; () banked
  3135  001778  5DA9               	subwf	_rightWheelCount& (0+255),w,b
  3136  00177A  A0D8               	btfss	status,0,c
  3137  00177C  D090               	goto	l3179
  3138  00177E                     u3180:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 437: {
  3142                           ;main.c: 438: if(leftWheelCount >= 19)
  3143  00177E  0100               	movlb	0	; () banked
  3144  001780  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  3145  001782  0100               	movlb	0	; () banked
  3146  001784  11A7               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  3147  001786  0100               	movlb	0	; () banked
  3148  001788  11A6               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  3149  00178A  E105               	bnz	u3190
  3150  00178C  0E13               	movlw	19
  3151  00178E  0100               	movlb	0	; () banked
  3152  001790  5DA5               	subwf	_leftWheelCount& (0+255),w,b
  3153  001792  A0D8               	btfss	status,0,c
  3154  001794  D05F               	goto	l3173
  3155  001796                     u3190:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 439: {
  3159                           ;main.c: 440: rightWheelCount = 0;
  3160  001796  0E00               	movlw	0
  3161  001798  0100               	movlb	0	; () banked
  3162  00179A  6FA9               	movwf	_rightWheelCount& (0+255),b
  3163  00179C  0E00               	movlw	0
  3164  00179E  6FAA               	movwf	(_rightWheelCount+1)& (0+255),b
  3165  0017A0  0E00               	movlw	0
  3166  0017A2  6FAB               	movwf	(_rightWheelCount+2)& (0+255),b
  3167  0017A4  0E00               	movlw	0
  3168  0017A6  6FAC               	movwf	(_rightWheelCount+3)& (0+255),b
  3169                           
  3170                           ;main.c: 441: leftWheelCount = 0;
  3171  0017A8  0E00               	movlw	0
  3172  0017AA  0100               	movlb	0	; () banked
  3173  0017AC  6FA5               	movwf	_leftWheelCount& (0+255),b
  3174  0017AE  0E00               	movlw	0
  3175  0017B0  6FA6               	movwf	(_leftWheelCount+1)& (0+255),b
  3176  0017B2  0E00               	movlw	0
  3177  0017B4  6FA7               	movwf	(_leftWheelCount+2)& (0+255),b
  3178  0017B6  0E00               	movlw	0
  3179  0017B8  6FA8               	movwf	(_leftWheelCount+3)& (0+255),b
  3180                           
  3181                           ;main.c: 442: leftWheelCommandedSpeed = 0;
  3182  0017BA  0E00               	movlw	0
  3183  0017BC  0100               	movlb	0	; () banked
  3184  0017BE  6FB5               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3185  0017C0  0E00               	movlw	0
  3186  0017C2  6FB4               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3187                           
  3188                           ;main.c: 443: rightWheelCommandedSpeed = 0;
  3189  0017C4  0E00               	movlw	0
  3190  0017C6  0100               	movlb	0	; () banked
  3191  0017C8  6FB7               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3192  0017CA  0E00               	movlw	0
  3193  0017CC  6FB6               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3194                           
  3195                           ;main.c: 444: speedCompensation = 0;
  3196  0017CE  0E00               	movlw	0
  3197  0017D0  0100               	movlb	0	; () banked
  3198  0017D2  6FB3               	movwf	(_speedCompensation+1)& (0+255),b
  3199  0017D4  0E00               	movlw	0
  3200  0017D6  6FB2               	movwf	_speedCompensation& (0+255),b
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;main.c: 445: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3204  0017D8  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3205  0017DC  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3206  0017E0  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3207  0017E4  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3208  0017E8  0E72               	movlw	114
  3209  0017EA  EC8E  F016         	call	_wheelVelocity
  3210                           
  3211                           ;main.c: 446: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3212  0017EE  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3213  0017F2  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3214  0017F6  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3215  0017FA  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3216  0017FE  0E6C               	movlw	108
  3217  001800  EC8E  F016         	call	_wheelVelocity
  3218                           
  3219                           ;main.c: 447: leftWheelCommandedSpeed = 35;
  3220  001804  0E00               	movlw	0
  3221  001806  0100               	movlb	0	; () banked
  3222  001808  6FB5               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3223  00180A  0E23               	movlw	35
  3224  00180C  6FB4               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3225                           
  3226                           ;main.c: 448: rightWheelCommandedSpeed = 25;
  3227  00180E  0E00               	movlw	0
  3228  001810  0100               	movlb	0	; () banked
  3229  001812  6FB7               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3230  001814  0E19               	movlw	25
  3231  001816  6FB6               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;main.c: 449: event++;
  3235  001818  0100               	movlb	0	; () banked
  3236  00181A  2BB1               	incf	_event& (0+255),f,b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 450: for(int i = 0; i<20 ; i++)
  3240  00181C  0E00               	movlw	0
  3241  00181E  0100               	movlb	0	; () banked
  3242  001820  6F82               	movwf	(excerciseControl@i_1028+1)& (0+255),b
  3243  001822  0E00               	movlw	0
  3244  001824  6F81               	movwf	excerciseControl@i_1028& (0+255),b
  3245  001826                     l3165:
  3246                           
  3247                           ; BSR set to: 0
  3248  001826  0100               	movlb	0	; () banked
  3249  001828  BF82               	btfsc	(excerciseControl@i_1028+1)& (0+255),7,b
  3250  00182A  D008               	goto	l3169
  3251  00182C  0100               	movlb	0	; () banked
  3252  00182E  5182               	movf	(excerciseControl@i_1028+1)& (0+255),w,b
  3253  001830  E136               	bnz	l3179
  3254  001832  0E14               	movlw	20
  3255  001834  0100               	movlb	0	; () banked
  3256  001836  5D81               	subwf	excerciseControl@i_1028& (0+255),w,b
  3257  001838  B0D8               	btfsc	status,0,c
  3258  00183A  D031               	goto	l3179
  3259  00183C                     l3169:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 451: {
  3263                           ;main.c: 452: _delay((unsigned long)((50)*(8000000/4000.0)));
  3264  00183C  0E82               	movlw	130
  3265  00183E  0100               	movlb	0	; () banked
  3266  001840  6F78               	movwf	??_excerciseControl& (0+255),b
  3267  001842  0EDE               	movlw	222
  3268  001844                     u3367:
  3269  001844  2EE8               	decfsz	wreg,f,c
  3270  001846  D7FE               	goto	u3367
  3271  001848  2F78               	decfsz	??_excerciseControl& (0+255),f,b
  3272  00184A  D7FC               	goto	u3367
  3273  00184C  0100               	movlb	0	; () banked
  3274  00184E  4B81               	infsnz	excerciseControl@i_1028& (0+255),f,b
  3275  001850  2B82               	incf	(excerciseControl@i_1028+1)& (0+255),f,b
  3276  001852  D7E9               	goto	l3165
  3277  001854                     l3173:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 455: else
  3281                           ;main.c: 456: {
  3282                           ;main.c: 457: rightWheelCommandedSpeed = 0;
  3283  001854  0E00               	movlw	0
  3284  001856  0100               	movlb	0	; () banked
  3285  001858  6FB7               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3286  00185A  0E00               	movlw	0
  3287  00185C  6FB6               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3288                           
  3289                           ;main.c: 458: leftWheelCommandedSpeed = -30;
  3290  00185E  0EFF               	movlw	255
  3291  001860  0100               	movlb	0	; () banked
  3292  001862  6FB5               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3293  001864  0EE2               	movlw	226
  3294  001866  6FB4               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3295                           
  3296                           ;main.c: 459: speedCompensation = 0;
  3297  001868  0E00               	movlw	0
  3298  00186A  0100               	movlb	0	; () banked
  3299  00186C  6FB3               	movwf	(_speedCompensation+1)& (0+255),b
  3300  00186E  0E00               	movlw	0
  3301  001870  6FB2               	movwf	_speedCompensation& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;main.c: 460: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3305  001872  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3306  001876  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3307  00187A  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3308  00187E  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3309  001882  0E72               	movlw	114
  3310  001884  EC8E  F016         	call	_wheelVelocity
  3311                           
  3312                           ;main.c: 461: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3313  001888  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3314  00188C  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3315  001890  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3316  001894  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3317  001898  0E72               	movlw	114
  3318  00189A  EC8E  F016         	call	_wheelVelocity
  3319  00189E                     l3179:
  3320                           
  3321                           ;main.c: 462: }
  3322                           ;main.c: 464: }
  3323                           ;main.c: 465: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3324  00189E  0EB4               	movlw	low excerciseControl@leftWheelCommandedSpeed
  3325  0018A0  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3326  0018A2  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3327  0018A4  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3328  0018A6  0EB6               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3329  0018A8  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3330  0018AA  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3331  0018AC  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3332  0018AE  0EB2               	movlw	low _speedCompensation
  3333  0018B0  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3334  0018B2  0E00               	movlw	high _speedCompensation
  3335  0018B4  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3336  0018B6  EC39  F013         	call	_limitWheelSpeeds	;wreg free
  3337                           
  3338                           ;main.c: 466: break;
  3339  0018BA  0012               	return	
  3340  0018BC                     l3181:
  3341                           
  3342                           ;main.c: 472: if(leftWheelCount % 6 == 0)
  3343  0018BC  C0A5  F013         	movff	_leftWheelCount,___llmod@dividend
  3344  0018C0  C0A6  F014         	movff	_leftWheelCount+1,___llmod@dividend+1
  3345  0018C4  C0A7  F015         	movff	_leftWheelCount+2,___llmod@dividend+2
  3346  0018C8  C0A8  F016         	movff	_leftWheelCount+3,___llmod@dividend+3
  3347  0018CC  0E06               	movlw	6
  3348  0018CE  6E17               	movwf	___llmod@divisor,c
  3349  0018D0  0E00               	movlw	0
  3350  0018D2  6E18               	movwf	___llmod@divisor+1,c
  3351  0018D4  0E00               	movlw	0
  3352  0018D6  6E19               	movwf	___llmod@divisor+2,c
  3353  0018D8  0E00               	movlw	0
  3354  0018DA  6E1A               	movwf	___llmod@divisor+3,c
  3355  0018DC  ECFE  F015         	call	___llmod	;wreg free
  3356  0018E0  5013               	movf	?___llmod,w,c
  3357  0018E2  1014               	iorwf	?___llmod+1,w,c
  3358  0018E4  1015               	iorwf	?___llmod+2,w,c
  3359  0018E6  1016               	iorwf	?___llmod+3,w,c
  3360  0018E8  A4D8               	btfss	status,2,c
  3361  0018EA  D007               	goto	l191
  3362                           
  3363                           ;main.c: 473: {
  3364                           ;main.c: 474: leftWheelCount += 1;
  3365  0018EC  0E01               	movlw	1
  3366  0018EE  0100               	movlb	0	; () banked
  3367  0018F0  27A5               	addwf	_leftWheelCount& (0+255),f,b
  3368  0018F2  0E00               	movlw	0
  3369  0018F4  23A6               	addwfc	(_leftWheelCount+1)& (0+255),f,b
  3370  0018F6  23A7               	addwfc	(_leftWheelCount+2)& (0+255),f,b
  3371  0018F8  23A8               	addwfc	(_leftWheelCount+3)& (0+255),f,b
  3372  0018FA                     l191:
  3373                           
  3374                           ;main.c: 475: }
  3375                           ;main.c: 477: if(rightWheelMeasuredSpeed < 20)
  3376  0018FA  0100               	movlb	0	; () banked
  3377  0018FC  BFB0               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  3378  0018FE  D008               	goto	l3185
  3379  001900  0100               	movlb	0	; () banked
  3380  001902  51B0               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  3381  001904  E121               	bnz	l3187
  3382  001906  0E14               	movlw	20
  3383  001908  0100               	movlb	0	; () banked
  3384  00190A  5DAF               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  3385  00190C  B0D8               	btfsc	status,0,c
  3386  00190E  D01C               	goto	l3187
  3387  001910                     l3185:
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;main.c: 478: {
  3391                           ;main.c: 479: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  3392  001910  0100               	movlb	0	; () banked
  3393  001912  4BB6               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  3394  001914  2BB7               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  3395  001916  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3396  00191A  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3397  00191E  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3398  001922  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3399  001926  0E72               	movlw	114
  3400  001928  EC8E  F016         	call	_wheelVelocity
  3401                           
  3402                           ;main.c: 480: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  3403  00192C  0100               	movlb	0	; () banked
  3404  00192E  4BB4               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  3405  001930  2BB5               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  3406  001932  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3407  001936  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3408  00193A  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3409  00193E  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3410  001942  0E6C               	movlw	108
  3411  001944  EC8E  F016         	call	_wheelVelocity
  3412  001948                     l3187:
  3413                           
  3414                           ;main.c: 481: }
  3415                           ;main.c: 482: if((leftWheelCount) > (rightWheelCount + 1) )
  3416  001948  0E01               	movlw	1
  3417  00194A  0100               	movlb	0	; () banked
  3418  00194C  25A9               	addwf	_rightWheelCount& (0+255),w,b
  3419  00194E  0100               	movlb	0	; () banked
  3420  001950  6F78               	movwf	??_excerciseControl& (0+255),b
  3421  001952  0E00               	movlw	0
  3422  001954  0100               	movlb	0	; () banked
  3423  001956  21AA               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  3424  001958  0100               	movlb	0	; () banked
  3425  00195A  6F79               	movwf	(??_excerciseControl+1)& (0+255),b
  3426  00195C  0E00               	movlw	0
  3427  00195E  0100               	movlb	0	; () banked
  3428  001960  21AB               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  3429  001962  0100               	movlb	0	; () banked
  3430  001964  6F7A               	movwf	(??_excerciseControl+2)& (0+255),b
  3431  001966  0E00               	movlw	0
  3432  001968  0100               	movlb	0	; () banked
  3433  00196A  21AC               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  3434  00196C  0100               	movlb	0	; () banked
  3435  00196E  6F7B               	movwf	(??_excerciseControl+3)& (0+255),b
  3436  001970  0100               	movlb	0	; () banked
  3437  001972  51A5               	movf	_leftWheelCount& (0+255),w,b
  3438  001974  0100               	movlb	0	; () banked
  3439  001976  5D78               	subwf	??_excerciseControl& (0+255),w,b
  3440  001978  0100               	movlb	0	; () banked
  3441  00197A  51A6               	movf	(_leftWheelCount+1)& (0+255),w,b
  3442  00197C  0100               	movlb	0	; () banked
  3443  00197E  5979               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  3444  001980  0100               	movlb	0	; () banked
  3445  001982  51A7               	movf	(_leftWheelCount+2)& (0+255),w,b
  3446  001984  0100               	movlb	0	; () banked
  3447  001986  597A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  3448  001988  0100               	movlb	0	; () banked
  3449  00198A  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  3450  00198C  0100               	movlb	0	; () banked
  3451  00198E  597B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  3452  001990  B0D8               	btfsc	status,0,c
  3453  001992  D061               	goto	l3191
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;main.c: 484: {
  3457                           ;main.c: 485: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  3458  001994  C0A9  F078         	movff	_rightWheelCount,??_excerciseControl
  3459  001998  C0AA  F079         	movff	_rightWheelCount+1,??_excerciseControl+1
  3460  00199C  C0AB  F07A         	movff	_rightWheelCount+2,??_excerciseControl+2
  3461  0019A0  C0AC  F07B         	movff	_rightWheelCount+3,??_excerciseControl+3
  3462  0019A4  0100               	movlb	0	; () banked
  3463  0019A6  1F78               	comf	??_excerciseControl& (0+255),f,b
  3464  0019A8  1F79               	comf	(??_excerciseControl+1)& (0+255),f,b
  3465  0019AA  1F7A               	comf	(??_excerciseControl+2)& (0+255),f,b
  3466  0019AC  1F7B               	comf	(??_excerciseControl+3)& (0+255),f,b
  3467  0019AE  2B78               	incf	??_excerciseControl& (0+255),f,b
  3468  0019B0  0E00               	movlw	0
  3469  0019B2  2379               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3470  0019B4  237A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3471  0019B6  237B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3472  0019B8  0100               	movlb	0	; () banked
  3473  0019BA  51A5               	movf	_leftWheelCount& (0+255),w,b
  3474  0019BC  0100               	movlb	0	; () banked
  3475  0019BE  2578               	addwf	??_excerciseControl& (0+255),w,b
  3476  0019C0  6E1B               	movwf	___lltoft@c,c
  3477  0019C2  0100               	movlb	0	; () banked
  3478  0019C4  51A6               	movf	(_leftWheelCount+1)& (0+255),w,b
  3479  0019C6  0100               	movlb	0	; () banked
  3480  0019C8  2179               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3481  0019CA  6E1C               	movwf	___lltoft@c+1,c
  3482  0019CC  0100               	movlb	0	; () banked
  3483  0019CE  51A7               	movf	(_leftWheelCount+2)& (0+255),w,b
  3484  0019D0  0100               	movlb	0	; () banked
  3485  0019D2  217A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3486  0019D4  6E1D               	movwf	___lltoft@c+2,c
  3487  0019D6  0100               	movlb	0	; () banked
  3488  0019D8  51A8               	movf	(_leftWheelCount+3)& (0+255),w,b
  3489  0019DA  0100               	movlb	0	; () banked
  3490  0019DC  217B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3491  0019DE  6E1E               	movwf	___lltoft@c+3,c
  3492  0019E0  EC60  F016         	call	___lltoft	;wreg free
  3493  0019E4  C01B  F036         	movff	?___lltoft,sqrt@a
  3494  0019E8  C01C  F037         	movff	?___lltoft+1,sqrt@a+1
  3495  0019EC  C01D  F038         	movff	?___lltoft+2,sqrt@a+2
  3496  0019F0  ECD3  F011         	call	_sqrt	;wreg free
  3497  0019F4  C036  F083         	movff	?_sqrt,_excerciseControl$2011
  3498  0019F8  C037  F084         	movff	?_sqrt+1,_excerciseControl$2011+1
  3499  0019FC  C038  F085         	movff	?_sqrt+2,_excerciseControl$2011+2
  3500                           
  3501                           ;main.c: 484: {
  3502                           ;main.c: 485: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  3503  001A00  C083  F033         	movff	_excerciseControl$2011,___ftsub@f2
  3504  001A04  C084  F034         	movff	_excerciseControl$2011+1,___ftsub@f2+1
  3505  001A08  C085  F035         	movff	_excerciseControl$2011+2,___ftsub@f2+2
  3506  001A0C  C0B2  F01B         	movff	_speedCompensation,___awtoft@c
  3507  001A10  C0B3  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3508  001A14  EC50  F017         	call	___awtoft	;wreg free
  3509  001A18  C01B  F030         	movff	?___awtoft,___ftsub@f1
  3510  001A1C  C01C  F031         	movff	?___awtoft+1,___ftsub@f1+1
  3511  001A20  C01D  F032         	movff	?___awtoft+2,___ftsub@f1+2
  3512  001A24  EC30  F017         	call	___ftsub	;wreg free
  3513  001A28  C030  F042         	movff	?___ftsub,___fttol@f1
  3514  001A2C  C031  F043         	movff	?___ftsub+1,___fttol@f1+1
  3515  001A30  C032  F044         	movff	?___ftsub+2,___fttol@f1+2
  3516  001A34  ECA2  F012         	call	___fttol	;wreg free
  3517  001A38  C042  F0B2         	movff	?___fttol,_speedCompensation
  3518  001A3C  C043  F0B3         	movff	?___fttol+1,_speedCompensation+1
  3519                           
  3520                           ;main.c: 486: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3521  001A40  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3522  001A44  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3523  001A48  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3524  001A4C  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3525  001A50  0E6C               	movlw	108
  3526  001A52  EC8E  F016         	call	_wheelVelocity
  3527  001A56                     l3191:
  3528                           
  3529                           ;main.c: 487: }
  3530                           ;main.c: 488: if(rightWheelCount > (leftWheelCount + 1))
  3531  001A56  0E01               	movlw	1
  3532  001A58  0100               	movlb	0	; () banked
  3533  001A5A  25A5               	addwf	_leftWheelCount& (0+255),w,b
  3534  001A5C  0100               	movlb	0	; () banked
  3535  001A5E  6F78               	movwf	??_excerciseControl& (0+255),b
  3536  001A60  0E00               	movlw	0
  3537  001A62  0100               	movlb	0	; () banked
  3538  001A64  21A6               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  3539  001A66  0100               	movlb	0	; () banked
  3540  001A68  6F79               	movwf	(??_excerciseControl+1)& (0+255),b
  3541  001A6A  0E00               	movlw	0
  3542  001A6C  0100               	movlb	0	; () banked
  3543  001A6E  21A7               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  3544  001A70  0100               	movlb	0	; () banked
  3545  001A72  6F7A               	movwf	(??_excerciseControl+2)& (0+255),b
  3546  001A74  0E00               	movlw	0
  3547  001A76  0100               	movlb	0	; () banked
  3548  001A78  21A8               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  3549  001A7A  0100               	movlb	0	; () banked
  3550  001A7C  6F7B               	movwf	(??_excerciseControl+3)& (0+255),b
  3551  001A7E  0100               	movlb	0	; () banked
  3552  001A80  51A9               	movf	_rightWheelCount& (0+255),w,b
  3553  001A82  0100               	movlb	0	; () banked
  3554  001A84  5D78               	subwf	??_excerciseControl& (0+255),w,b
  3555  001A86  0100               	movlb	0	; () banked
  3556  001A88  51AA               	movf	(_rightWheelCount+1)& (0+255),w,b
  3557  001A8A  0100               	movlb	0	; () banked
  3558  001A8C  5979               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  3559  001A8E  0100               	movlb	0	; () banked
  3560  001A90  51AB               	movf	(_rightWheelCount+2)& (0+255),w,b
  3561  001A92  0100               	movlb	0	; () banked
  3562  001A94  597A               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  3563  001A96  0100               	movlb	0	; () banked
  3564  001A98  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  3565  001A9A  0100               	movlb	0	; () banked
  3566  001A9C  597B               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  3567  001A9E  B0D8               	btfsc	status,0,c
  3568  001AA0  D061               	goto	l3195
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;main.c: 490: {
  3572                           ;main.c: 491: speedCompensation += sqrt(rightWheelCount - leftWheelCount);
  3573  001AA2  C0A5  F078         	movff	_leftWheelCount,??_excerciseControl
  3574  001AA6  C0A6  F079         	movff	_leftWheelCount+1,??_excerciseControl+1
  3575  001AAA  C0A7  F07A         	movff	_leftWheelCount+2,??_excerciseControl+2
  3576  001AAE  C0A8  F07B         	movff	_leftWheelCount+3,??_excerciseControl+3
  3577  001AB2  0100               	movlb	0	; () banked
  3578  001AB4  1F78               	comf	??_excerciseControl& (0+255),f,b
  3579  001AB6  1F79               	comf	(??_excerciseControl+1)& (0+255),f,b
  3580  001AB8  1F7A               	comf	(??_excerciseControl+2)& (0+255),f,b
  3581  001ABA  1F7B               	comf	(??_excerciseControl+3)& (0+255),f,b
  3582  001ABC  2B78               	incf	??_excerciseControl& (0+255),f,b
  3583  001ABE  0E00               	movlw	0
  3584  001AC0  2379               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3585  001AC2  237A               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3586  001AC4  237B               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3587  001AC6  0100               	movlb	0	; () banked
  3588  001AC8  51A9               	movf	_rightWheelCount& (0+255),w,b
  3589  001ACA  0100               	movlb	0	; () banked
  3590  001ACC  2578               	addwf	??_excerciseControl& (0+255),w,b
  3591  001ACE  6E1B               	movwf	___lltoft@c,c
  3592  001AD0  0100               	movlb	0	; () banked
  3593  001AD2  51AA               	movf	(_rightWheelCount+1)& (0+255),w,b
  3594  001AD4  0100               	movlb	0	; () banked
  3595  001AD6  2179               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3596  001AD8  6E1C               	movwf	___lltoft@c+1,c
  3597  001ADA  0100               	movlb	0	; () banked
  3598  001ADC  51AB               	movf	(_rightWheelCount+2)& (0+255),w,b
  3599  001ADE  0100               	movlb	0	; () banked
  3600  001AE0  217A               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3601  001AE2  6E1D               	movwf	___lltoft@c+2,c
  3602  001AE4  0100               	movlb	0	; () banked
  3603  001AE6  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  3604  001AE8  0100               	movlb	0	; () banked
  3605  001AEA  217B               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3606  001AEC  6E1E               	movwf	___lltoft@c+3,c
  3607  001AEE  EC60  F016         	call	___lltoft	;wreg free
  3608  001AF2  C01B  F036         	movff	?___lltoft,sqrt@a
  3609  001AF6  C01C  F037         	movff	?___lltoft+1,sqrt@a+1
  3610  001AFA  C01D  F038         	movff	?___lltoft+2,sqrt@a+2
  3611  001AFE  ECD3  F011         	call	_sqrt	;wreg free
  3612  001B02  C036  F086         	movff	?_sqrt,_excerciseControl$2012
  3613  001B06  C037  F087         	movff	?_sqrt+1,_excerciseControl$2012+1
  3614  001B0A  C038  F088         	movff	?_sqrt+2,_excerciseControl$2012+2
  3615                           
  3616                           ;main.c: 490: {
  3617                           ;main.c: 491: speedCompensation += sqrt(rightWheelCount - leftWheelCount);
  3618  001B0E  C086  F027         	movff	_excerciseControl$2012,___ftadd@f2
  3619  001B12  C087  F028         	movff	_excerciseControl$2012+1,___ftadd@f2+1
  3620  001B16  C088  F029         	movff	_excerciseControl$2012+2,___ftadd@f2+2
  3621  001B1A  C0B2  F01B         	movff	_speedCompensation,___awtoft@c
  3622  001B1E  C0B3  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3623  001B22  EC50  F017         	call	___awtoft	;wreg free
  3624  001B26  C01B  F024         	movff	?___awtoft,___ftadd@f1
  3625  001B2A  C01C  F025         	movff	?___awtoft+1,___ftadd@f1+1
  3626  001B2E  C01D  F026         	movff	?___awtoft+2,___ftadd@f1+2
  3627  001B32  ECFD  F010         	call	___ftadd	;wreg free
  3628  001B36  C024  F042         	movff	?___ftadd,___fttol@f1
  3629  001B3A  C025  F043         	movff	?___ftadd+1,___fttol@f1+1
  3630  001B3E  C026  F044         	movff	?___ftadd+2,___fttol@f1+2
  3631  001B42  ECA2  F012         	call	___fttol	;wreg free
  3632  001B46  C042  F0B2         	movff	?___fttol,_speedCompensation
  3633  001B4A  C043  F0B3         	movff	?___fttol+1,_speedCompensation+1
  3634                           
  3635                           ;main.c: 492: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3636  001B4E  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3637  001B52  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3638  001B56  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3639  001B5A  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3640  001B5E  0E6C               	movlw	108
  3641  001B60  EC8E  F016         	call	_wheelVelocity
  3642  001B64                     l3195:
  3643                           
  3644                           ;main.c: 493: }
  3645                           ;main.c: 494: if(rightWheelCount >= 1000)
  3646  001B64  0100               	movlb	0	; () banked
  3647  001B66  51AC               	movf	(_rightWheelCount+3)& (0+255),w,b
  3648  001B68  0100               	movlb	0	; () banked
  3649  001B6A  11AB               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3650  001B6C  E108               	bnz	u3260
  3651  001B6E  0EE8               	movlw	232
  3652  001B70  0100               	movlb	0	; () banked
  3653  001B72  5DA9               	subwf	_rightWheelCount& (0+255),w,b
  3654  001B74  0E03               	movlw	3
  3655  001B76  0100               	movlb	0	; () banked
  3656  001B78  59AA               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  3657  001B7A  A0D8               	btfss	status,0,c
  3658  001B7C  D034               	goto	l3205
  3659  001B7E                     u3260:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;main.c: 495: {
  3663                           ;main.c: 496: rightWheelCount = 0;
  3664  001B7E  0E00               	movlw	0
  3665  001B80  0100               	movlb	0	; () banked
  3666  001B82  6FA9               	movwf	_rightWheelCount& (0+255),b
  3667  001B84  0E00               	movlw	0
  3668  001B86  6FAA               	movwf	(_rightWheelCount+1)& (0+255),b
  3669  001B88  0E00               	movlw	0
  3670  001B8A  6FAB               	movwf	(_rightWheelCount+2)& (0+255),b
  3671  001B8C  0E00               	movlw	0
  3672  001B8E  6FAC               	movwf	(_rightWheelCount+3)& (0+255),b
  3673                           
  3674                           ;main.c: 497: leftWheelCount = 0;
  3675  001B90  0E00               	movlw	0
  3676  001B92  0100               	movlb	0	; () banked
  3677  001B94  6FA5               	movwf	_leftWheelCount& (0+255),b
  3678  001B96  0E00               	movlw	0
  3679  001B98  6FA6               	movwf	(_leftWheelCount+1)& (0+255),b
  3680  001B9A  0E00               	movlw	0
  3681  001B9C  6FA7               	movwf	(_leftWheelCount+2)& (0+255),b
  3682  001B9E  0E00               	movlw	0
  3683  001BA0  6FA8               	movwf	(_leftWheelCount+3)& (0+255),b
  3684                           
  3685                           ;main.c: 498: leftWheelCommandedSpeed = 0;
  3686  001BA2  0E00               	movlw	0
  3687  001BA4  0100               	movlb	0	; () banked
  3688  001BA6  6FB5               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3689  001BA8  0E00               	movlw	0
  3690  001BAA  6FB4               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3691                           
  3692                           ;main.c: 499: rightWheelCommandedSpeed = 0;
  3693  001BAC  0E00               	movlw	0
  3694  001BAE  0100               	movlb	0	; () banked
  3695  001BB0  6FB7               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3696  001BB2  0E00               	movlw	0
  3697  001BB4  6FB6               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main.c: 500: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3701  001BB6  C0B6  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3702  001BBA  C0B7  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3703  001BBE  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3704  001BC2  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3705  001BC6  0E72               	movlw	114
  3706  001BC8  EC8E  F016         	call	_wheelVelocity
  3707                           
  3708                           ;main.c: 501: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3709  001BCC  C0B4  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3710  001BD0  C0B5  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3711  001BD4  C0B2  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3712  001BD8  C0B3  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3713  001BDC  0E6C               	movlw	108
  3714  001BDE  EC8E  F016         	call	_wheelVelocity
  3715                           
  3716                           ;main.c: 502: event++;
  3717  001BE2  0100               	movlb	0	; () banked
  3718  001BE4  2BB1               	incf	_event& (0+255),f,b
  3719  001BE6                     l3205:
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;main.c: 503: }
  3723                           ;main.c: 504: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3724  001BE6  0EB4               	movlw	low excerciseControl@leftWheelCommandedSpeed
  3725  001BE8  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3726  001BEA  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3727  001BEC  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3728  001BEE  0EB6               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3729  001BF0  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3730  001BF2  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3731  001BF4  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3732  001BF6  0EB2               	movlw	low _speedCompensation
  3733  001BF8  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3734  001BFA  0E00               	movlw	high _speedCompensation
  3735  001BFC  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3736  001BFE  EC39  F013         	call	_limitWheelSpeeds	;wreg free
  3737                           
  3738                           ;main.c: 508: }
  3739                           
  3740                           ;main.c: 505: break;
  3741  001C02  0012               	return	
  3742  001C04                     l3209:
  3743  001C04  0100               	movlb	0	; () banked
  3744  001C06  51B1               	movf	_event& (0+255),w,b
  3745                           
  3746                           ; Switch size 1, requested type "space"
  3747                           ; Number of cases is 3, Range of values is 0 to 2
  3748                           ; switch strategies available:
  3749                           ; Name         Instructions Cycles
  3750                           ; simple_byte           10     6 (average)
  3751                           ;	Chosen strategy is simple_byte
  3752  001C08  0A00               	xorlw	0	; case 0
  3753  001C0A  B4D8               	btfsc	status,2,c
  3754  001C0C  EF1B  F008         	goto	l3077
  3755  001C10  0A01               	xorlw	1	; case 1
  3756  001C12  B4D8               	btfsc	status,2,c
  3757  001C14  D436               	goto	l3135
  3758  001C16  0A03               	xorlw	3	; case 2
  3759  001C18  A4D8               	btfss	status,2,c
  3760  001C1A  0012               	return	
  3761  001C1C  D64F               	goto	l3181
  3762  001C1E                     __end_of_excerciseControl:
  3763                           	opt stack 0
  3764                           tblptru	equ	0xFF8
  3765                           tblptrh	equ	0xFF7
  3766                           tblptrl	equ	0xFF6
  3767                           tablat	equ	0xFF5
  3768                           prodh	equ	0xFF4
  3769                           prodl	equ	0xFF3
  3770                           postinc0	equ	0xFEE
  3771                           wreg	equ	0xFE8
  3772                           postdec1	equ	0xFE5
  3773                           fsr1l	equ	0xFE1
  3774                           postinc2	equ	0xFDE
  3775                           postdec2	equ	0xFDD
  3776                           fsr2h	equ	0xFDA
  3777                           fsr2l	equ	0xFD9
  3778                           status	equ	0xFD8
  3779                           
  3780 ;; *************** function _wheelVelocity *****************
  3781 ;; Defined at:
  3782 ;;		line 245 in file "main.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  wheel           1    wreg     unsigned char 
  3785 ;;  speed           2   18[COMRAM] int 
  3786 ;;  speedCompens    2   20[COMRAM] int 
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;  wheel           1   24[COMRAM] unsigned char 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      void 
  3791 ;; Registers used:
  3792 ;;		wreg, status,2, status,0
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;Total ram usage:        7 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    1
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_excerciseControl
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	text9
  3813  002D1C                     __ptext9:
  3814                           	opt stack 0
  3815  002D1C                     _wheelVelocity:
  3816                           	opt stack 28
  3817                           
  3818                           ;incstack = 0
  3819                           ;wheelVelocity@wheel stored from wreg
  3820  002D1C  6E19               	movwf	wheelVelocity@wheel,c
  3821                           
  3822                           ;main.c: 247: if(wheel == 'r')
  3823  002D1E  0E72               	movlw	114
  3824  002D20  1819               	xorwf	wheelVelocity@wheel,w,c
  3825  002D22  A4D8               	btfss	status,2,c
  3826  002D24  D00D               	goto	l147
  3827                           
  3828                           ;main.c: 248: {
  3829                           ;main.c: 251: rightWheelCommandedPW = (int) (725 + speed * 2);
  3830  002D26  C013  F017         	movff	wheelVelocity@speed,??_wheelVelocity
  3831  002D2A  C014  F018         	movff	wheelVelocity@speed+1,??_wheelVelocity+1
  3832  002D2E  90D8               	bcf	status,0,c
  3833  002D30  3617               	rlcf	??_wheelVelocity,f,c
  3834  002D32  3618               	rlcf	??_wheelVelocity+1,f,c
  3835  002D34  0ED5               	movlw	213
  3836  002D36  2417               	addwf	??_wheelVelocity,w,c
  3837  002D38  6E48               	movwf	_rightWheelCommandedPW,c
  3838  002D3A  0E02               	movlw	2
  3839  002D3C  2018               	addwfc	??_wheelVelocity+1,w,c
  3840  002D3E  6E49               	movwf	_rightWheelCommandedPW+1,c
  3841  002D40                     l147:
  3842                           
  3843                           ;main.c: 252: }
  3844                           ;main.c: 254: if(wheel == 'l')
  3845  002D40  0E6C               	movlw	108
  3846  002D42  1819               	xorwf	wheelVelocity@wheel,w,c
  3847  002D44  A4D8               	btfss	status,2,c
  3848  002D46  0012               	return	
  3849                           
  3850                           ;main.c: 255: {
  3851                           ;main.c: 258: leftWheelCommandedPW = (int) (745 - (speedCompensation + speed * 2));
  3852  002D48  C013  F017         	movff	wheelVelocity@speed,??_wheelVelocity
  3853  002D4C  C014  F018         	movff	wheelVelocity@speed+1,??_wheelVelocity+1
  3854  002D50  90D8               	bcf	status,0,c
  3855  002D52  3617               	rlcf	??_wheelVelocity,f,c
  3856  002D54  3618               	rlcf	??_wheelVelocity+1,f,c
  3857  002D56  5015               	movf	wheelVelocity@speedCompensation,w,c
  3858  002D58  2617               	addwf	??_wheelVelocity,f,c
  3859  002D5A  5016               	movf	wheelVelocity@speedCompensation+1,w,c
  3860  002D5C  2218               	addwfc	??_wheelVelocity+1,f,c
  3861  002D5E  1E17               	comf	??_wheelVelocity,f,c
  3862  002D60  1E18               	comf	??_wheelVelocity+1,f,c
  3863  002D62  4A17               	infsnz	??_wheelVelocity,f,c
  3864  002D64  2A18               	incf	??_wheelVelocity+1,f,c
  3865  002D66  0EE9               	movlw	233
  3866  002D68  2417               	addwf	??_wheelVelocity,w,c
  3867  002D6A  6E46               	movwf	_leftWheelCommandedPW,c
  3868  002D6C  0E02               	movlw	2
  3869  002D6E  2018               	addwfc	??_wheelVelocity+1,w,c
  3870  002D70  6E47               	movwf	_leftWheelCommandedPW+1,c
  3871  002D72  0012               	return	
  3872  002D74                     __end_of_wheelVelocity:
  3873                           	opt stack 0
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           prodh	equ	0xFF4
  3879                           prodl	equ	0xFF3
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           postdec1	equ	0xFE5
  3883                           fsr1l	equ	0xFE1
  3884                           postinc2	equ	0xFDE
  3885                           postdec2	equ	0xFDD
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function _sqrt *****************
  3891 ;; Defined at:
  3892 ;;		line 9 in file "/Applications/microchip/xc8/v1.36/sources/common/sprcsqrt.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  a               3   53[COMRAM] void 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  x               3   10[BANK0 ] void 
  3897 ;;  q               3    7[BANK0 ] void 
  3898 ;;  z               3    3[BANK0 ] void 
  3899 ;;  og              3    0[BANK0 ] void 
  3900 ;;  i               1    6[BANK0 ] unsigned char 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  3   53[COMRAM] unsigned char 
  3903 ;; Registers used:
  3904 ;;		wreg, status,2, status,0, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3910 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;Total ram usage:       19 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    4
  3917 ;; This function calls:
  3918 ;;		___ftge
  3919 ;;		___ftmul
  3920 ;;		___ftsub
  3921 ;; This function is called by:
  3922 ;;		_excerciseControl
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text10
  3927  0023A6                     __ptext10:
  3928                           	opt stack 0
  3929  0023A6                     _sqrt:
  3930                           	opt stack 25
  3931                           
  3932                           ;incstack = 0
  3933  0023A6  0E00               	movlw	0
  3934  0023A8  6E13               	movwf	___ftge@ff1,c
  3935  0023AA  0E00               	movlw	0
  3936  0023AC  6E14               	movwf	___ftge@ff1+1,c
  3937  0023AE  0E00               	movlw	0
  3938  0023B0  6E15               	movwf	___ftge@ff1+2,c
  3939  0023B2  C036  F016         	movff	sqrt@a,___ftge@ff2
  3940  0023B6  C037  F017         	movff	sqrt@a+1,___ftge@ff2+1
  3941  0023BA  C038  F018         	movff	sqrt@a+2,___ftge@ff2+2
  3942  0023BE  ECB6  F015         	call	___ftge	;wreg free
  3943  0023C2  A0D8               	btfss	status,0,c
  3944  0023C4  D00D               	goto	l864
  3945  0023C6  AE38               	btfss	sqrt@a+2,7,c
  3946  0023C8  D004               	goto	l865
  3947  0023CA  0E00               	movlw	0
  3948  0023CC  6E4B               	movwf	_errno+1,c
  3949  0023CE  0E21               	movlw	33
  3950  0023D0  6E4A               	movwf	_errno,c
  3951  0023D2                     l865:
  3952  0023D2  0E00               	movlw	0
  3953  0023D4  6E36               	movwf	?_sqrt,c
  3954  0023D6  0E00               	movlw	0
  3955  0023D8  6E37               	movwf	?_sqrt+1,c
  3956  0023DA  0E00               	movlw	0
  3957  0023DC  6E38               	movwf	?_sqrt+2,c
  3958  0023DE  0012               	return	
  3959  0023E0                     l864:
  3960  0023E0  C036  F063         	movff	sqrt@a,sqrt@z
  3961  0023E4  C037  F064         	movff	sqrt@a+1,sqrt@z+1
  3962  0023E8  C038  F065         	movff	sqrt@a+2,sqrt@z+2
  3963  0023EC  C036  F039         	movff	sqrt@a,??_sqrt
  3964  0023F0  C037  F03A         	movff	sqrt@a+1,??_sqrt+1
  3965  0023F4  C038  F03B         	movff	sqrt@a+2,??_sqrt+2
  3966  0023F8  1E39               	comf	??_sqrt,f,c
  3967  0023FA  1E3A               	comf	??_sqrt+1,f,c
  3968  0023FC  1E3B               	comf	??_sqrt+2,f,c
  3969  0023FE  2A39               	incf	??_sqrt,f,c
  3970  002400  0E00               	movlw	0
  3971  002402  223A               	addwfc	??_sqrt+1,f,c
  3972  002404  223B               	addwfc	??_sqrt+2,f,c
  3973  002406  0EC8               	movlw	200
  3974  002408  2439               	addwf	??_sqrt,w,c
  3975  00240A  0100               	movlb	0	; () banked
  3976  00240C  6F6A               	movwf	sqrt@x& (0+255),b
  3977  00240E  0E6E               	movlw	110
  3978  002410  203A               	addwfc	??_sqrt+1,w,c
  3979  002412  0100               	movlb	0	; () banked
  3980  002414  6F6B               	movwf	(sqrt@x+1)& (0+255),b
  3981  002416  0EBE               	movlw	190
  3982  002418  203B               	addwfc	??_sqrt+2,w,c
  3983  00241A  0100               	movlb	0	; () banked
  3984  00241C  6F6C               	movwf	(sqrt@x+2)& (0+255),b
  3985                           
  3986                           ; BSR set to: 0
  3987  00241E  0100               	movlb	0	; () banked
  3988  002420  90D8               	bcf	status,0,c
  3989  002422  336C               	rrcf	(sqrt@x+2)& (0+255),f,b
  3990  002424  336B               	rrcf	(sqrt@x+1)& (0+255),f,b
  3991  002426  336A               	rrcf	sqrt@x& (0+255),f,b
  3992                           
  3993                           ; BSR set to: 0
  3994  002428  0E00               	movlw	0
  3995  00242A  0100               	movlb	0	; () banked
  3996  00242C  5F63               	subwf	sqrt@z& (0+255),f,b
  3997  00242E  0E80               	movlw	128
  3998  002430  0100               	movlb	0	; () banked
  3999  002432  5B64               	subwfb	(sqrt@z+1)& (0+255),f,b
  4000  002434  0E00               	movlw	0
  4001  002436  0100               	movlb	0	; () banked
  4002  002438  5B65               	subwfb	(sqrt@z+2)& (0+255),f,b
  4003                           
  4004                           ; BSR set to: 0
  4005  00243A  0E04               	movlw	4
  4006  00243C  0100               	movlb	0	; () banked
  4007  00243E  6F66               	movwf	sqrt@i& (0+255),b
  4008  002440                     l3035:
  4009                           
  4010                           ; BSR set to: 0
  4011  002440  C06A  F060         	movff	sqrt@x,sqrt@og
  4012  002444  C06B  F061         	movff	sqrt@x+1,sqrt@og+1
  4013  002448  C06C  F062         	movff	sqrt@x+2,sqrt@og+2
  4014                           
  4015                           ; BSR set to: 0
  4016  00244C  C06A  F024         	movff	sqrt@x,___ftmul@f1
  4017  002450  C06B  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4018  002454  C06C  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4019  002458  C063  F027         	movff	sqrt@z,___ftmul@f2
  4020  00245C  C064  F028         	movff	sqrt@z+1,___ftmul@f2+1
  4021  002460  C065  F029         	movff	sqrt@z+2,___ftmul@f2+2
  4022  002464  ECBB  F013         	call	___ftmul	;wreg free
  4023  002468  C024  F067         	movff	?___ftmul,sqrt@q
  4024  00246C  C025  F068         	movff	?___ftmul+1,sqrt@q+1
  4025  002470  C026  F069         	movff	?___ftmul+2,sqrt@q+2
  4026  002474  C067  F024         	movff	sqrt@q,___ftmul@f1
  4027  002478  C068  F025         	movff	sqrt@q+1,___ftmul@f1+1
  4028  00247C  C069  F026         	movff	sqrt@q+2,___ftmul@f1+2
  4029  002480  C06A  F027         	movff	sqrt@x,___ftmul@f2
  4030  002484  C06B  F028         	movff	sqrt@x+1,___ftmul@f2+1
  4031  002488  C06C  F029         	movff	sqrt@x+2,___ftmul@f2+2
  4032  00248C  ECBB  F013         	call	___ftmul	;wreg free
  4033  002490  C024  F067         	movff	?___ftmul,sqrt@q
  4034  002494  C025  F068         	movff	?___ftmul+1,sqrt@q+1
  4035  002498  C026  F069         	movff	?___ftmul+2,sqrt@q+2
  4036  00249C  C067  F024         	movff	sqrt@q,___ftmul@f1
  4037  0024A0  C068  F025         	movff	sqrt@q+1,___ftmul@f1+1
  4038  0024A4  C069  F026         	movff	sqrt@q+2,___ftmul@f1+2
  4039  0024A8  C06A  F027         	movff	sqrt@x,___ftmul@f2
  4040  0024AC  C06B  F028         	movff	sqrt@x+1,___ftmul@f2+1
  4041  0024B0  C06C  F029         	movff	sqrt@x+2,___ftmul@f2+2
  4042  0024B4  ECBB  F013         	call	___ftmul	;wreg free
  4043  0024B8  C024  F067         	movff	?___ftmul,sqrt@q
  4044  0024BC  C025  F068         	movff	?___ftmul+1,sqrt@q+1
  4045  0024C0  C026  F069         	movff	?___ftmul+2,sqrt@q+2
  4046  0024C4  C06A  F024         	movff	sqrt@x,___ftmul@f1
  4047  0024C8  C06B  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4048  0024CC  C06C  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4049  0024D0  0E00               	movlw	0
  4050  0024D2  6E27               	movwf	___ftmul@f2,c
  4051  0024D4  0EC0               	movlw	192
  4052  0024D6  6E28               	movwf	___ftmul@f2+1,c
  4053  0024D8  0E3F               	movlw	63
  4054  0024DA  6E29               	movwf	___ftmul@f2+2,c
  4055  0024DC  ECBB  F013         	call	___ftmul	;wreg free
  4056  0024E0  C024  F06A         	movff	?___ftmul,sqrt@x
  4057  0024E4  C025  F06B         	movff	?___ftmul+1,sqrt@x+1
  4058  0024E8  C026  F06C         	movff	?___ftmul+2,sqrt@x+2
  4059  0024EC  C06A  F030         	movff	sqrt@x,___ftsub@f1
  4060  0024F0  C06B  F031         	movff	sqrt@x+1,___ftsub@f1+1
  4061  0024F4  C06C  F032         	movff	sqrt@x+2,___ftsub@f1+2
  4062  0024F8  C067  F033         	movff	sqrt@q,___ftsub@f2
  4063  0024FC  C068  F034         	movff	sqrt@q+1,___ftsub@f2+1
  4064  002500  C069  F035         	movff	sqrt@q+2,___ftsub@f2+2
  4065  002504  EC30  F017         	call	___ftsub	;wreg free
  4066  002508  C030  F06A         	movff	?___ftsub,sqrt@x
  4067  00250C  C031  F06B         	movff	?___ftsub+1,sqrt@x+1
  4068  002510  C032  F06C         	movff	?___ftsub+2,sqrt@x+2
  4069  002514  0100               	movlb	0	; () banked
  4070  002516  2F66               	decfsz	sqrt@i& (0+255),f,b
  4071  002518  D793               	goto	l3035
  4072                           
  4073                           ; BSR set to: 0
  4074                           
  4075                           ; BSR set to: 0
  4076  00251A  C06A  F024         	movff	sqrt@x,___ftmul@f1
  4077  00251E  C06B  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4078  002522  C06C  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4079  002526  C036  F027         	movff	sqrt@a,___ftmul@f2
  4080  00252A  C037  F028         	movff	sqrt@a+1,___ftmul@f2+1
  4081  00252E  C038  F029         	movff	sqrt@a+2,___ftmul@f2+2
  4082  002532  ECBB  F013         	call	___ftmul	;wreg free
  4083  002536  C024  F036         	movff	?___ftmul,?_sqrt
  4084  00253A  C025  F037         	movff	?___ftmul+1,?_sqrt+1
  4085  00253E  C026  F038         	movff	?___ftmul+2,?_sqrt+2
  4086  002542  0012               	return	
  4087  002544                     __end_of_sqrt:
  4088                           	opt stack 0
  4089                           tblptru	equ	0xFF8
  4090                           tblptrh	equ	0xFF7
  4091                           tblptrl	equ	0xFF6
  4092                           tablat	equ	0xFF5
  4093                           prodh	equ	0xFF4
  4094                           prodl	equ	0xFF3
  4095                           postinc0	equ	0xFEE
  4096                           wreg	equ	0xFE8
  4097                           postdec1	equ	0xFE5
  4098                           fsr1l	equ	0xFE1
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function ___ftsub *****************
  4106 ;; Defined at:
  4107 ;;		line 20 in file "/Applications/microchip/xc8/v1.36/sources/common/ftsub.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  f1              3   47[COMRAM] float 
  4110 ;;  f2              3   50[COMRAM] float 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  3   47[COMRAM] float 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4122 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;Total ram usage:        6 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    3
  4129 ;; This function calls:
  4130 ;;		___ftadd
  4131 ;; This function is called by:
  4132 ;;		_excerciseControl
  4133 ;;		_sqrt
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text11
  4138  002E60                     __ptext11:
  4139                           	opt stack 0
  4140  002E60                     ___ftsub:
  4141                           	opt stack 25
  4142                           
  4143                           ;incstack = 0
  4144  002E60  5033               	movf	___ftsub@f2,w,c
  4145  002E62  1034               	iorwf	___ftsub@f2+1,w,c
  4146  002E64  1035               	iorwf	___ftsub@f2+2,w,c
  4147  002E66  B4D8               	btfsc	status,2,c
  4148  002E68  D006               	goto	l2997
  4149  002E6A  0E00               	movlw	0
  4150  002E6C  1A33               	xorwf	___ftsub@f2,f,c
  4151  002E6E  0E00               	movlw	0
  4152  002E70  1A34               	xorwf	___ftsub@f2+1,f,c
  4153  002E72  0E80               	movlw	128
  4154  002E74  1A35               	xorwf	___ftsub@f2+2,f,c
  4155  002E76                     l2997:
  4156  002E76  C030  F024         	movff	___ftsub@f1,___ftadd@f1
  4157  002E7A  C031  F025         	movff	___ftsub@f1+1,___ftadd@f1+1
  4158  002E7E  C032  F026         	movff	___ftsub@f1+2,___ftadd@f1+2
  4159  002E82  C033  F027         	movff	___ftsub@f2,___ftadd@f2
  4160  002E86  C034  F028         	movff	___ftsub@f2+1,___ftadd@f2+1
  4161  002E8A  C035  F029         	movff	___ftsub@f2+2,___ftadd@f2+2
  4162  002E8E  ECFD  F010         	call	___ftadd	;wreg free
  4163  002E92  C024  F030         	movff	?___ftadd,?___ftsub
  4164  002E96  C025  F031         	movff	?___ftadd+1,?___ftsub+1
  4165  002E9A  C026  F032         	movff	?___ftadd+2,?___ftsub+2
  4166  002E9E  0012               	return	
  4167  002EA0                     __end_of___ftsub:
  4168                           	opt stack 0
  4169                           tblptru	equ	0xFF8
  4170                           tblptrh	equ	0xFF7
  4171                           tblptrl	equ	0xFF6
  4172                           tablat	equ	0xFF5
  4173                           prodh	equ	0xFF4
  4174                           prodl	equ	0xFF3
  4175                           postinc0	equ	0xFEE
  4176                           wreg	equ	0xFE8
  4177                           postdec1	equ	0xFE5
  4178                           fsr1l	equ	0xFE1
  4179                           postinc2	equ	0xFDE
  4180                           postdec2	equ	0xFDD
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function ___ftadd *****************
  4186 ;; Defined at:
  4187 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  f1              3   35[COMRAM] float 
  4190 ;;  f2              3   38[COMRAM] float 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  exp1            1   46[COMRAM] unsigned char 
  4193 ;;  exp2            1   45[COMRAM] unsigned char 
  4194 ;;  sign            1   44[COMRAM] unsigned char 
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  3   35[COMRAM] float 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4204 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;Total ram usage:       12 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    2
  4211 ;; This function calls:
  4212 ;;		___ftpack
  4213 ;; This function is called by:
  4214 ;;		_excerciseControl
  4215 ;;		___ftsub
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text12
  4220  0021FA                     __ptext12:
  4221                           	opt stack 0
  4222  0021FA                     ___ftadd:
  4223                           	opt stack 25
  4224                           
  4225                           ;incstack = 0
  4226  0021FA  C026  F02A         	movff	___ftadd@f1+2,??___ftadd
  4227  0021FE  6A2B               	clrf	(??___ftadd+1)& (0+255),c
  4228  002200  6A2C               	clrf	(??___ftadd+2)& (0+255),c
  4229  002202  3425               	rlcf	___ftadd@f1+1,w,c
  4230  002204  362A               	rlcf	??___ftadd& (0+255),f,c
  4231  002206  E301               	bnc	u2711
  4232  002208  802B               	bsf	(??___ftadd+1)& (0+255),0,c
  4233  00220A                     u2711:
  4234  00220A  502A               	movf	??___ftadd,w,c
  4235  00220C  6E2F               	movwf	___ftadd@exp1,c
  4236  00220E  C029  F02A         	movff	___ftadd@f2+2,??___ftadd
  4237  002212  6A2B               	clrf	(??___ftadd+1)& (0+255),c
  4238  002214  6A2C               	clrf	(??___ftadd+2)& (0+255),c
  4239  002216  3428               	rlcf	___ftadd@f2+1,w,c
  4240  002218  362A               	rlcf	??___ftadd& (0+255),f,c
  4241  00221A  E301               	bnc	u2721
  4242  00221C  802B               	bsf	(??___ftadd+1)& (0+255),0,c
  4243  00221E                     u2721:
  4244  00221E  502A               	movf	??___ftadd,w,c
  4245  002220  6E2E               	movwf	___ftadd@exp2,c
  4246  002222  502F               	movf	___ftadd@exp1,w,c
  4247  002224  B4D8               	btfsc	status,2,c
  4248  002226  D00B               	goto	l557
  4249  002228  502E               	movf	___ftadd@exp2,w,c
  4250  00222A  5C2F               	subwf	___ftadd@exp1,w,c
  4251  00222C  B0D8               	btfsc	status,0,c
  4252  00222E  D00E               	goto	l2883
  4253  002230  502F               	movf	___ftadd@exp1,w,c
  4254  002232  0800               	sublw	0
  4255  002234  242E               	addwf	___ftadd@exp2,w,c
  4256  002236  6E2A               	movwf	??___ftadd& (0+255),c
  4257  002238  0E18               	movlw	24
  4258  00223A  642A               	cpfsgt	??___ftadd,c
  4259  00223C  D007               	goto	l2883
  4260  00223E                     l557:
  4261  00223E  C027  F024         	movff	___ftadd@f2,?___ftadd
  4262  002242  C028  F025         	movff	___ftadd@f2+1,?___ftadd+1
  4263  002246  C029  F026         	movff	___ftadd@f2+2,?___ftadd+2
  4264  00224A  0012               	return	
  4265  00224C                     l2883:
  4266  00224C  502E               	movf	___ftadd@exp2,w,c
  4267  00224E  B4D8               	btfsc	status,2,c
  4268  002250  D00B               	goto	l561
  4269  002252  502F               	movf	___ftadd@exp1,w,c
  4270  002254  5C2E               	subwf	___ftadd@exp2,w,c
  4271  002256  B0D8               	btfsc	status,0,c
  4272  002258  D00E               	goto	l2889
  4273  00225A  502E               	movf	___ftadd@exp2,w,c
  4274  00225C  0800               	sublw	0
  4275  00225E  242F               	addwf	___ftadd@exp1,w,c
  4276  002260  6E2A               	movwf	??___ftadd& (0+255),c
  4277  002262  0E18               	movlw	24
  4278  002264  642A               	cpfsgt	??___ftadd,c
  4279  002266  D007               	goto	l2889
  4280  002268                     l561:
  4281  002268  C024  F024         	movff	___ftadd@f1,?___ftadd
  4282  00226C  C025  F025         	movff	___ftadd@f1+1,?___ftadd+1
  4283  002270  C026  F026         	movff	___ftadd@f1+2,?___ftadd+2
  4284  002274  0012               	return	
  4285  002276                     l2889:
  4286  002276  0E06               	movlw	6
  4287  002278  6E2D               	movwf	___ftadd@sign,c
  4288  00227A  BE26               	btfsc	___ftadd@f1+2,7,c
  4289  00227C  8E2D               	bsf	___ftadd@sign,7,c
  4290  00227E  BE29               	btfsc	___ftadd@f2+2,7,c
  4291  002280  8C2D               	bsf	___ftadd@sign,6,c
  4292  002282  8E25               	bsf	___ftadd@f1+1,7,c
  4293  002284  0EFF               	movlw	255
  4294  002286  1624               	andwf	___ftadd@f1,f,c
  4295  002288  0EFF               	movlw	255
  4296  00228A  1625               	andwf	___ftadd@f1+1,f,c
  4297  00228C  0E00               	movlw	0
  4298  00228E  1626               	andwf	___ftadd@f1+2,f,c
  4299  002290  8E28               	bsf	___ftadd@f2+1,7,c
  4300  002292  0EFF               	movlw	255
  4301  002294  1627               	andwf	___ftadd@f2,f,c
  4302  002296  0EFF               	movlw	255
  4303  002298  1628               	andwf	___ftadd@f2+1,f,c
  4304  00229A  0E00               	movlw	0
  4305  00229C  1629               	andwf	___ftadd@f2+2,f,c
  4306  00229E  502E               	movf	___ftadd@exp2,w,c
  4307  0022A0  5C2F               	subwf	___ftadd@exp1,w,c
  4308  0022A2  B0D8               	btfsc	status,0,c
  4309  0022A4  D01B               	goto	l2915
  4310  0022A6                     l2905:
  4311  0022A6  90D8               	bcf	status,0,c
  4312  0022A8  3627               	rlcf	___ftadd@f2,f,c
  4313  0022AA  3628               	rlcf	___ftadd@f2+1,f,c
  4314  0022AC  3629               	rlcf	___ftadd@f2+2,f,c
  4315  0022AE  062E               	decf	___ftadd@exp2,f,c
  4316  0022B0  502F               	movf	___ftadd@exp1,w,c
  4317  0022B2  182E               	xorwf	___ftadd@exp2,w,c
  4318  0022B4  B4D8               	btfsc	status,2,c
  4319  0022B6  D00D               	goto	l2913
  4320  0022B8  062D               	decf	___ftadd@sign,f,c
  4321  0022BA  C02D  F02A         	movff	___ftadd@sign,??___ftadd
  4322  0022BE  0E07               	movlw	7
  4323  0022C0  162A               	andwf	??___ftadd,f,c
  4324  0022C2  B4D8               	btfsc	status,2,c
  4325  0022C4  D006               	goto	l2913
  4326  0022C6  D7EF               	goto	l2905
  4327  0022C8                     l2911:
  4328  0022C8  90D8               	bcf	status,0,c
  4329  0022CA  3226               	rrcf	___ftadd@f1+2,f,c
  4330  0022CC  3225               	rrcf	___ftadd@f1+1,f,c
  4331  0022CE  3224               	rrcf	___ftadd@f1,f,c
  4332  0022D0  2A2F               	incf	___ftadd@exp1,f,c
  4333  0022D2                     l2913:
  4334  0022D2  502E               	movf	___ftadd@exp2,w,c
  4335  0022D4  182F               	xorwf	___ftadd@exp1,w,c
  4336  0022D6  B4D8               	btfsc	status,2,c
  4337  0022D8  D01F               	goto	l572
  4338  0022DA  D7F6               	goto	l2911
  4339  0022DC                     l2915:
  4340  0022DC  502F               	movf	___ftadd@exp1,w,c
  4341  0022DE  5C2E               	subwf	___ftadd@exp2,w,c
  4342  0022E0  B0D8               	btfsc	status,0,c
  4343  0022E2  D01A               	goto	l572
  4344  0022E4                     l2917:
  4345  0022E4  90D8               	bcf	status,0,c
  4346  0022E6  3624               	rlcf	___ftadd@f1,f,c
  4347  0022E8  3625               	rlcf	___ftadd@f1+1,f,c
  4348  0022EA  3626               	rlcf	___ftadd@f1+2,f,c
  4349  0022EC  062F               	decf	___ftadd@exp1,f,c
  4350  0022EE  502F               	movf	___ftadd@exp1,w,c
  4351  0022F0  182E               	xorwf	___ftadd@exp2,w,c
  4352  0022F2  B4D8               	btfsc	status,2,c
  4353  0022F4  D00D               	goto	l2925
  4354  0022F6  062D               	decf	___ftadd@sign,f,c
  4355  0022F8  C02D  F02A         	movff	___ftadd@sign,??___ftadd
  4356  0022FC  0E07               	movlw	7
  4357  0022FE  162A               	andwf	??___ftadd,f,c
  4358  002300  B4D8               	btfsc	status,2,c
  4359  002302  D006               	goto	l2925
  4360  002304  D7EF               	goto	l2917
  4361  002306                     l2923:
  4362  002306  90D8               	bcf	status,0,c
  4363  002308  3229               	rrcf	___ftadd@f2+2,f,c
  4364  00230A  3228               	rrcf	___ftadd@f2+1,f,c
  4365  00230C  3227               	rrcf	___ftadd@f2,f,c
  4366  00230E  2A2E               	incf	___ftadd@exp2,f,c
  4367  002310                     l2925:
  4368  002310  502E               	movf	___ftadd@exp2,w,c
  4369  002312  182F               	xorwf	___ftadd@exp1,w,c
  4370  002314  A4D8               	btfss	status,2,c
  4371  002316  D7F7               	goto	l2923
  4372  002318                     l572:
  4373  002318  AE2D               	btfss	___ftadd@sign,7,c
  4374  00231A  D00C               	goto	l581
  4375  00231C  0EFF               	movlw	255
  4376  00231E  1A24               	xorwf	___ftadd@f1,f,c
  4377  002320  0EFF               	movlw	255
  4378  002322  1A25               	xorwf	___ftadd@f1+1,f,c
  4379  002324  0EFF               	movlw	255
  4380  002326  1A26               	xorwf	___ftadd@f1+2,f,c
  4381  002328  0E01               	movlw	1
  4382  00232A  2624               	addwf	___ftadd@f1,f,c
  4383  00232C  0E00               	movlw	0
  4384  00232E  2225               	addwfc	___ftadd@f1+1,f,c
  4385  002330  0E00               	movlw	0
  4386  002332  2226               	addwfc	___ftadd@f1+2,f,c
  4387  002334                     l581:
  4388  002334  AC2D               	btfss	___ftadd@sign,6,c
  4389  002336  D00C               	goto	l2931
  4390  002338  0EFF               	movlw	255
  4391  00233A  1A27               	xorwf	___ftadd@f2,f,c
  4392  00233C  0EFF               	movlw	255
  4393  00233E  1A28               	xorwf	___ftadd@f2+1,f,c
  4394  002340  0EFF               	movlw	255
  4395  002342  1A29               	xorwf	___ftadd@f2+2,f,c
  4396  002344  0E01               	movlw	1
  4397  002346  2627               	addwf	___ftadd@f2,f,c
  4398  002348  0E00               	movlw	0
  4399  00234A  2228               	addwfc	___ftadd@f2+1,f,c
  4400  00234C  0E00               	movlw	0
  4401  00234E  2229               	addwfc	___ftadd@f2+2,f,c
  4402  002350                     l2931:
  4403  002350  0E00               	movlw	0
  4404  002352  6E2D               	movwf	___ftadd@sign,c
  4405  002354  5024               	movf	___ftadd@f1,w,c
  4406  002356  2627               	addwf	___ftadd@f2,f,c
  4407  002358  5025               	movf	___ftadd@f1+1,w,c
  4408  00235A  2228               	addwfc	___ftadd@f2+1,f,c
  4409  00235C  5026               	movf	___ftadd@f1+2,w,c
  4410  00235E  2229               	addwfc	___ftadd@f2+2,f,c
  4411  002360  AE29               	btfss	___ftadd@f2+2,7,c
  4412  002362  D00E               	goto	l2941
  4413  002364  0EFF               	movlw	255
  4414  002366  1A27               	xorwf	___ftadd@f2,f,c
  4415  002368  0EFF               	movlw	255
  4416  00236A  1A28               	xorwf	___ftadd@f2+1,f,c
  4417  00236C  0EFF               	movlw	255
  4418  00236E  1A29               	xorwf	___ftadd@f2+2,f,c
  4419  002370  0E01               	movlw	1
  4420  002372  2627               	addwf	___ftadd@f2,f,c
  4421  002374  0E00               	movlw	0
  4422  002376  2228               	addwfc	___ftadd@f2+1,f,c
  4423  002378  0E00               	movlw	0
  4424  00237A  2229               	addwfc	___ftadd@f2+2,f,c
  4425  00237C  0E01               	movlw	1
  4426  00237E  6E2D               	movwf	___ftadd@sign,c
  4427  002380                     l2941:
  4428  002380  C027  F013         	movff	___ftadd@f2,___ftpack@arg
  4429  002384  C028  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  4430  002388  C029  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  4431  00238C  C02F  F016         	movff	___ftadd@exp1,___ftpack@exp
  4432  002390  C02D  F017         	movff	___ftadd@sign,___ftpack@sign
  4433  002394  EC0B  F015         	call	___ftpack	;wreg free
  4434  002398  C013  F024         	movff	?___ftpack,?___ftadd
  4435  00239C  C014  F025         	movff	?___ftpack+1,?___ftadd+1
  4436  0023A0  C015  F026         	movff	?___ftpack+2,?___ftadd+2
  4437  0023A4  0012               	return	
  4438  0023A6                     __end_of___ftadd:
  4439                           	opt stack 0
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           postinc0	equ	0xFEE
  4447                           wreg	equ	0xFE8
  4448                           postdec1	equ	0xFE5
  4449                           fsr1l	equ	0xFE1
  4450                           postinc2	equ	0xFDE
  4451                           postdec2	equ	0xFDD
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function ___ftmul *****************
  4457 ;; Defined at:
  4458 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  f1              3   35[COMRAM] float 
  4461 ;;  f2              3   38[COMRAM] float 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  4464 ;;  sign            1   49[COMRAM] unsigned char 
  4465 ;;  cntr            1   48[COMRAM] unsigned char 
  4466 ;;  exp             1   44[COMRAM] unsigned char 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  3   35[COMRAM] float 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4476 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;Total ram usage:       15 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    2
  4483 ;; This function calls:
  4484 ;;		___ftpack
  4485 ;; This function is called by:
  4486 ;;		_main
  4487 ;;		_sqrt
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text13
  4492  002776                     __ptext13:
  4493                           	opt stack 0
  4494  002776                     ___ftmul:
  4495                           	opt stack 26
  4496                           
  4497                           ;incstack = 0
  4498  002776  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  4499  00277A  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4500  00277C  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4501  00277E  3425               	rlcf	___ftmul@f1+1,w,c
  4502  002780  362A               	rlcf	??___ftmul& (0+255),f,c
  4503  002782  E301               	bnc	u2921
  4504  002784  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4505  002786                     u2921:
  4506  002786  502A               	movf	??___ftmul,w,c
  4507  002788  6E2D               	movwf	___ftmul@exp,c
  4508  00278A  502D               	movf	___ftmul@exp,w,c
  4509  00278C  A4D8               	btfss	status,2,c
  4510  00278E  D007               	goto	l2951
  4511  002790  0E00               	movlw	0
  4512  002792  6E24               	movwf	?___ftmul,c
  4513  002794  0E00               	movlw	0
  4514  002796  6E25               	movwf	?___ftmul+1,c
  4515  002798  0E00               	movlw	0
  4516  00279A  6E26               	movwf	?___ftmul+2,c
  4517  00279C  0012               	return	
  4518  00279E                     l2951:
  4519  00279E  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  4520  0027A2  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4521  0027A4  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4522  0027A6  3428               	rlcf	___ftmul@f2+1,w,c
  4523  0027A8  362A               	rlcf	??___ftmul& (0+255),f,c
  4524  0027AA  E301               	bnc	u2941
  4525  0027AC  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4526  0027AE                     u2941:
  4527  0027AE  502A               	movf	??___ftmul,w,c
  4528  0027B0  6E32               	movwf	___ftmul@sign,c
  4529  0027B2  5032               	movf	___ftmul@sign,w,c
  4530  0027B4  A4D8               	btfss	status,2,c
  4531  0027B6  D007               	goto	l2957
  4532  0027B8  0E00               	movlw	0
  4533  0027BA  6E24               	movwf	?___ftmul,c
  4534  0027BC  0E00               	movlw	0
  4535  0027BE  6E25               	movwf	?___ftmul+1,c
  4536  0027C0  0E00               	movlw	0
  4537  0027C2  6E26               	movwf	?___ftmul+2,c
  4538  0027C4  0012               	return	
  4539  0027C6                     l2957:
  4540  0027C6  5032               	movf	___ftmul@sign,w,c
  4541  0027C8  0F7B               	addlw	123
  4542  0027CA  262D               	addwf	___ftmul@exp,f,c
  4543  0027CC  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  4544  0027D0  5029               	movf	___ftmul@f2+2,w,c
  4545  0027D2  1A32               	xorwf	___ftmul@sign,f,c
  4546  0027D4  0E80               	movlw	128
  4547  0027D6  1632               	andwf	___ftmul@sign,f,c
  4548  0027D8  8E25               	bsf	___ftmul@f1+1,7,c
  4549  0027DA  8E28               	bsf	___ftmul@f2+1,7,c
  4550  0027DC  0EFF               	movlw	255
  4551  0027DE  1627               	andwf	___ftmul@f2,f,c
  4552  0027E0  0EFF               	movlw	255
  4553  0027E2  1628               	andwf	___ftmul@f2+1,f,c
  4554  0027E4  0E00               	movlw	0
  4555  0027E6  1629               	andwf	___ftmul@f2+2,f,c
  4556  0027E8  0E00               	movlw	0
  4557  0027EA  6E2E               	movwf	___ftmul@f3_as_product,c
  4558  0027EC  0E00               	movlw	0
  4559  0027EE  6E2F               	movwf	___ftmul@f3_as_product+1,c
  4560  0027F0  0E00               	movlw	0
  4561  0027F2  6E30               	movwf	___ftmul@f3_as_product+2,c
  4562  0027F4  0E07               	movlw	7
  4563  0027F6  6E31               	movwf	___ftmul@cntr,c
  4564  0027F8                     l2971:
  4565  0027F8  A024               	btfss	___ftmul@f1,0,c
  4566  0027FA  D006               	goto	l2975
  4567  0027FC  5027               	movf	___ftmul@f2,w,c
  4568  0027FE  262E               	addwf	___ftmul@f3_as_product,f,c
  4569  002800  5028               	movf	___ftmul@f2+1,w,c
  4570  002802  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4571  002804  5029               	movf	___ftmul@f2+2,w,c
  4572  002806  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4573  002808                     l2975:
  4574  002808  90D8               	bcf	status,0,c
  4575  00280A  3226               	rrcf	___ftmul@f1+2,f,c
  4576  00280C  3225               	rrcf	___ftmul@f1+1,f,c
  4577  00280E  3224               	rrcf	___ftmul@f1,f,c
  4578  002810  90D8               	bcf	status,0,c
  4579  002812  3627               	rlcf	___ftmul@f2,f,c
  4580  002814  3628               	rlcf	___ftmul@f2+1,f,c
  4581  002816  3629               	rlcf	___ftmul@f2+2,f,c
  4582  002818  2E31               	decfsz	___ftmul@cntr,f,c
  4583  00281A  D7EE               	goto	l2971
  4584  00281C  0E09               	movlw	9
  4585  00281E  6E31               	movwf	___ftmul@cntr,c
  4586  002820                     l2981:
  4587  002820  A024               	btfss	___ftmul@f1,0,c
  4588  002822  D006               	goto	l2985
  4589  002824  5027               	movf	___ftmul@f2,w,c
  4590  002826  262E               	addwf	___ftmul@f3_as_product,f,c
  4591  002828  5028               	movf	___ftmul@f2+1,w,c
  4592  00282A  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4593  00282C  5029               	movf	___ftmul@f2+2,w,c
  4594  00282E  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4595  002830                     l2985:
  4596  002830  90D8               	bcf	status,0,c
  4597  002832  3226               	rrcf	___ftmul@f1+2,f,c
  4598  002834  3225               	rrcf	___ftmul@f1+1,f,c
  4599  002836  3224               	rrcf	___ftmul@f1,f,c
  4600  002838  90D8               	bcf	status,0,c
  4601  00283A  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  4602  00283C  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  4603  00283E  322E               	rrcf	___ftmul@f3_as_product,f,c
  4604  002840  2E31               	decfsz	___ftmul@cntr,f,c
  4605  002842  D7EE               	goto	l2981
  4606  002844  C02E  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  4607  002848  C02F  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4608  00284C  C030  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4609  002850  C02D  F016         	movff	___ftmul@exp,___ftpack@exp
  4610  002854  C032  F017         	movff	___ftmul@sign,___ftpack@sign
  4611  002858  EC0B  F015         	call	___ftpack	;wreg free
  4612  00285C  C013  F024         	movff	?___ftpack,?___ftmul
  4613  002860  C014  F025         	movff	?___ftpack+1,?___ftmul+1
  4614  002864  C015  F026         	movff	?___ftpack+2,?___ftmul+2
  4615  002868  0012               	return	
  4616  00286A                     __end_of___ftmul:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           prodh	equ	0xFF4
  4623                           prodl	equ	0xFF3
  4624                           postinc0	equ	0xFEE
  4625                           wreg	equ	0xFE8
  4626                           postdec1	equ	0xFE5
  4627                           fsr1l	equ	0xFE1
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function ___ftge *****************
  4635 ;; Defined at:
  4636 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  ff1             3   18[COMRAM] float 
  4639 ;;  ff2             3   21[COMRAM] float 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;		None               void
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4651 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;Total ram usage:        9 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    1
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_sqrt
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text14
  4666  002B6C                     __ptext14:
  4667                           	opt stack 0
  4668  002B6C                     ___ftge:
  4669                           	opt stack 27
  4670                           
  4671                           ;incstack = 0
  4672  002B6C  AE15               	btfss	___ftge@ff1+2,7,c
  4673  002B6E  D016               	goto	l3005
  4674  002B70  C013  F019         	movff	___ftge@ff1,??___ftge
  4675  002B74  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  4676  002B78  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  4677  002B7C  1E19               	comf	??___ftge,f,c
  4678  002B7E  1E1A               	comf	??___ftge+1,f,c
  4679  002B80  1E1B               	comf	??___ftge+2,f,c
  4680  002B82  2A19               	incf	??___ftge,f,c
  4681  002B84  0E00               	movlw	0
  4682  002B86  221A               	addwfc	??___ftge+1,f,c
  4683  002B88  221B               	addwfc	??___ftge+2,f,c
  4684  002B8A  0E00               	movlw	0
  4685  002B8C  2419               	addwf	??___ftge,w,c
  4686  002B8E  6E13               	movwf	___ftge@ff1,c
  4687  002B90  0E00               	movlw	0
  4688  002B92  201A               	addwfc	??___ftge+1,w,c
  4689  002B94  6E14               	movwf	___ftge@ff1+1,c
  4690  002B96  0E80               	movlw	128
  4691  002B98  201B               	addwfc	??___ftge+2,w,c
  4692  002B9A  6E15               	movwf	___ftge@ff1+2,c
  4693  002B9C                     l3005:
  4694  002B9C  AE18               	btfss	___ftge@ff2+2,7,c
  4695  002B9E  D016               	goto	l3009
  4696  002BA0  C016  F019         	movff	___ftge@ff2,??___ftge
  4697  002BA4  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  4698  002BA8  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  4699  002BAC  1E19               	comf	??___ftge,f,c
  4700  002BAE  1E1A               	comf	??___ftge+1,f,c
  4701  002BB0  1E1B               	comf	??___ftge+2,f,c
  4702  002BB2  2A19               	incf	??___ftge,f,c
  4703  002BB4  0E00               	movlw	0
  4704  002BB6  221A               	addwfc	??___ftge+1,f,c
  4705  002BB8  221B               	addwfc	??___ftge+2,f,c
  4706  002BBA  0E00               	movlw	0
  4707  002BBC  2419               	addwf	??___ftge,w,c
  4708  002BBE  6E16               	movwf	___ftge@ff2,c
  4709  002BC0  0E00               	movlw	0
  4710  002BC2  201A               	addwfc	??___ftge+1,w,c
  4711  002BC4  6E17               	movwf	___ftge@ff2+1,c
  4712  002BC6  0E80               	movlw	128
  4713  002BC8  201B               	addwfc	??___ftge+2,w,c
  4714  002BCA  6E18               	movwf	___ftge@ff2+2,c
  4715  002BCC                     l3009:
  4716  002BCC  0E00               	movlw	0
  4717  002BCE  1A13               	xorwf	___ftge@ff1,f,c
  4718  002BD0  0E00               	movlw	0
  4719  002BD2  1A14               	xorwf	___ftge@ff1+1,f,c
  4720  002BD4  0E80               	movlw	128
  4721  002BD6  1A15               	xorwf	___ftge@ff1+2,f,c
  4722  002BD8  0E00               	movlw	0
  4723  002BDA  1A16               	xorwf	___ftge@ff2,f,c
  4724  002BDC  0E00               	movlw	0
  4725  002BDE  1A17               	xorwf	___ftge@ff2+1,f,c
  4726  002BE0  0E80               	movlw	128
  4727  002BE2  1A18               	xorwf	___ftge@ff2+2,f,c
  4728  002BE4  5016               	movf	___ftge@ff2,w,c
  4729  002BE6  5C13               	subwf	___ftge@ff1,w,c
  4730  002BE8  5017               	movf	___ftge@ff2+1,w,c
  4731  002BEA  5814               	subwfb	___ftge@ff1+1,w,c
  4732  002BEC  5018               	movf	___ftge@ff2+2,w,c
  4733  002BEE  5815               	subwfb	___ftge@ff1+2,w,c
  4734  002BF0  B0D8               	btfsc	status,0,c
  4735  002BF2  D002               	goto	l3015
  4736  002BF4  90D8               	bcf	status,0,c
  4737  002BF6  0012               	return	
  4738  002BF8                     l3015:
  4739  002BF8  80D8               	bsf	status,0,c
  4740  002BFA  0012               	return	
  4741  002BFC                     __end_of___ftge:
  4742                           	opt stack 0
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           postinc0	equ	0xFEE
  4750                           wreg	equ	0xFE8
  4751                           postdec1	equ	0xFE5
  4752                           fsr1l	equ	0xFE1
  4753                           postinc2	equ	0xFDE
  4754                           postdec2	equ	0xFDD
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _limitWheelSpeeds *****************
  4760 ;; Defined at:
  4761 ;;		line 213 in file "main.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  leftWheelSpe    2   18[COMRAM] PTR int 
  4764 ;;		 -> excerciseControl@leftWheelCommandedSpeed(2), 
  4765 ;;  rightWheelSp    2   20[COMRAM] PTR int 
  4766 ;;		 -> excerciseControl@rightWheelCommandedSpeed(2), 
  4767 ;;  speedCompens    2   22[COMRAM] PTR int 
  4768 ;;		 -> speedCompensation(2), 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4780 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;Total ram usage:        8 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    1
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_excerciseControl
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text15
  4795  002672                     __ptext15:
  4796                           	opt stack 0
  4797  002672                     _limitWheelSpeeds:
  4798                           	opt stack 28
  4799                           
  4800                           ;main.c: 218: if (*leftWheelSpeed >= 60)
  4801                           
  4802                           ;incstack = 0
  4803  002672  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  4804  002676  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  4805  00267A  0E01               	movlw	1
  4806  00267C  BEDB               	btfsc	plusw2,7,c
  4807  00267E  D00F               	goto	l2093
  4808  002680  0E01               	movlw	1
  4809  002682  50DB               	movf	plusw2,w,c
  4810  002684  E104               	bnz	u1720
  4811  002686  0E3C               	movlw	60
  4812  002688  5CDE               	subwf	postinc2,w,c
  4813  00268A  A0D8               	btfss	status,0,c
  4814  00268C  D008               	goto	l2093
  4815  00268E                     u1720:
  4816                           
  4817                           ;main.c: 219: {
  4818                           ;main.c: 220: *leftWheelSpeed = 60;
  4819  00268E  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  4820  002692  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  4821  002696  0E3C               	movlw	60
  4822  002698  6EDE               	movwf	postinc2,c
  4823  00269A  0E00               	movlw	0
  4824  00269C  6EDD               	movwf	postdec2,c
  4825  00269E                     l2093:
  4826                           
  4827                           ;main.c: 221: }
  4828                           ;main.c: 222: if (*leftWheelSpeed <= -60)
  4829  00269E  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  4830  0026A2  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  4831  0026A6  0E01               	movlw	1
  4832  0026A8  AEDB               	btfss	plusw2,7,c
  4833  0026AA  D00E               	goto	l2097
  4834  0026AC  0EC5               	movlw	197
  4835  0026AE  5CDE               	subwf	postinc2,w,c
  4836  0026B0  0EFF               	movlw	255
  4837  0026B2  58DE               	subwfb	postinc2,w,c
  4838  0026B4  B0D8               	btfsc	status,0,c
  4839  0026B6  D008               	goto	l2097
  4840                           
  4841                           ;main.c: 223: {
  4842                           ;main.c: 224: *leftWheelSpeed = -60;
  4843  0026B8  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  4844  0026BC  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  4845  0026C0  0EC4               	movlw	196
  4846  0026C2  6EDE               	movwf	postinc2,c
  4847  0026C4  0EFF               	movlw	255
  4848  0026C6  6EDD               	movwf	postdec2,c
  4849  0026C8                     l2097:
  4850                           
  4851                           ;main.c: 225: }
  4852                           ;main.c: 227: if (*rightWheelSpeed >= 60)
  4853  0026C8  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  4854  0026CC  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  4855  0026D0  0E01               	movlw	1
  4856  0026D2  BEDB               	btfsc	plusw2,7,c
  4857  0026D4  D00F               	goto	l2101
  4858  0026D6  0E01               	movlw	1
  4859  0026D8  50DB               	movf	plusw2,w,c
  4860  0026DA  E104               	bnz	u1740
  4861  0026DC  0E3C               	movlw	60
  4862  0026DE  5CDE               	subwf	postinc2,w,c
  4863  0026E0  A0D8               	btfss	status,0,c
  4864  0026E2  D008               	goto	l2101
  4865  0026E4                     u1740:
  4866                           
  4867                           ;main.c: 228: {
  4868                           ;main.c: 229: *rightWheelSpeed = 60;
  4869  0026E4  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  4870  0026E8  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  4871  0026EC  0E3C               	movlw	60
  4872  0026EE  6EDE               	movwf	postinc2,c
  4873  0026F0  0E00               	movlw	0
  4874  0026F2  6EDD               	movwf	postdec2,c
  4875  0026F4                     l2101:
  4876                           
  4877                           ;main.c: 230: }
  4878                           ;main.c: 231: if (*rightWheelSpeed <= -60)
  4879  0026F4  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  4880  0026F8  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  4881  0026FC  0E01               	movlw	1
  4882  0026FE  AEDB               	btfss	plusw2,7,c
  4883  002700  D00E               	goto	l2105
  4884  002702  0EC5               	movlw	197
  4885  002704  5CDE               	subwf	postinc2,w,c
  4886  002706  0EFF               	movlw	255
  4887  002708  58DE               	subwfb	postinc2,w,c
  4888  00270A  B0D8               	btfsc	status,0,c
  4889  00270C  D008               	goto	l2105
  4890                           
  4891                           ;main.c: 232: {
  4892                           ;main.c: 233: *rightWheelSpeed = -60;
  4893  00270E  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  4894  002712  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  4895  002716  0EC4               	movlw	196
  4896  002718  6EDE               	movwf	postinc2,c
  4897  00271A  0EFF               	movlw	255
  4898  00271C  6EDD               	movwf	postdec2,c
  4899  00271E                     l2105:
  4900                           
  4901                           ;main.c: 234: }
  4902                           ;main.c: 235: if(*speedCompensation > 30)
  4903  00271E  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  4904  002722  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  4905  002726  0E01               	movlw	1
  4906  002728  BEDB               	btfsc	plusw2,7,c
  4907  00272A  D00F               	goto	l2109
  4908  00272C  0E01               	movlw	1
  4909  00272E  50DB               	movf	plusw2,w,c
  4910  002730  E104               	bnz	u1760
  4911  002732  0E1F               	movlw	31
  4912  002734  5CDE               	subwf	postinc2,w,c
  4913  002736  A0D8               	btfss	status,0,c
  4914  002738  D008               	goto	l2109
  4915  00273A                     u1760:
  4916                           
  4917                           ;main.c: 236: {
  4918                           ;main.c: 237: *speedCompensation = 30;
  4919  00273A  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  4920  00273E  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  4921  002742  0E1E               	movlw	30
  4922  002744  6EDE               	movwf	postinc2,c
  4923  002746  0E00               	movlw	0
  4924  002748  6EDD               	movwf	postdec2,c
  4925  00274A                     l2109:
  4926                           
  4927                           ;main.c: 238: }
  4928                           ;main.c: 239: if(*speedCompensation < -30)
  4929  00274A  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  4930  00274E  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  4931  002752  0E01               	movlw	1
  4932  002754  AEDB               	btfss	plusw2,7,c
  4933  002756  0012               	return	
  4934  002758  0EE2               	movlw	226
  4935  00275A  5CDE               	subwf	postinc2,w,c
  4936  00275C  0EFF               	movlw	255
  4937  00275E  58DE               	subwfb	postinc2,w,c
  4938  002760  B0D8               	btfsc	status,0,c
  4939  002762  0012               	return	
  4940                           
  4941                           ;main.c: 240: {
  4942                           ;main.c: 241: *speedCompensation = -30;
  4943  002764  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  4944  002768  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  4945  00276C  0EE2               	movlw	226
  4946  00276E  6EDE               	movwf	postinc2,c
  4947  002770  0EFF               	movlw	255
  4948  002772  6EDD               	movwf	postdec2,c
  4949  002774  0012               	return	
  4950  002776                     __end_of_limitWheelSpeeds:
  4951                           	opt stack 0
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           postdec1	equ	0xFE5
  4961                           fsr1l	equ	0xFE1
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           plusw2	equ	0xFDB
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function ___lltoft *****************
  4970 ;; Defined at:
  4971 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  c               4   26[COMRAM] unsigned long 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  exp             1   34[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  3   26[COMRAM] float 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4985 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;Total ram usage:        9 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    2
  4992 ;; This function calls:
  4993 ;;		___ftpack
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;;		_excerciseControl
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text16
  5001  002CC0                     __ptext16:
  5002                           	opt stack 0
  5003  002CC0                     ___lltoft:
  5004                           	opt stack 27
  5005                           
  5006                           ;incstack = 0
  5007  002CC0  0E8E               	movlw	142
  5008  002CC2  6E23               	movwf	___lltoft@exp,c
  5009  002CC4  D006               	goto	l3069
  5010  002CC6                     l3067:
  5011  002CC6  90D8               	bcf	status,0,c
  5012  002CC8  321E               	rrcf	___lltoft@c+3,f,c
  5013  002CCA  321D               	rrcf	___lltoft@c+2,f,c
  5014  002CCC  321C               	rrcf	___lltoft@c+1,f,c
  5015  002CCE  321B               	rrcf	___lltoft@c,f,c
  5016  002CD0  2A23               	incf	___lltoft@exp,f,c
  5017  002CD2                     l3069:
  5018  002CD2  0E00               	movlw	0
  5019  002CD4  141B               	andwf	___lltoft@c,w,c
  5020  002CD6  6E1F               	movwf	??___lltoft& (0+255),c
  5021  002CD8  0E00               	movlw	0
  5022  002CDA  141C               	andwf	___lltoft@c+1,w,c
  5023  002CDC  6E20               	movwf	(??___lltoft+1)& (0+255),c
  5024  002CDE  0E00               	movlw	0
  5025  002CE0  141D               	andwf	___lltoft@c+2,w,c
  5026  002CE2  6E21               	movwf	(??___lltoft+2)& (0+255),c
  5027  002CE4  0EFF               	movlw	255
  5028  002CE6  141E               	andwf	___lltoft@c+3,w,c
  5029  002CE8  6E22               	movwf	(??___lltoft+3)& (0+255),c
  5030  002CEA  501F               	movf	??___lltoft,w,c
  5031  002CEC  1020               	iorwf	??___lltoft+1,w,c
  5032  002CEE  1021               	iorwf	??___lltoft+2,w,c
  5033  002CF0  1022               	iorwf	??___lltoft+3,w,c
  5034  002CF2  A4D8               	btfss	status,2,c
  5035  002CF4  D7E8               	goto	l3067
  5036  002CF6  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  5037  002CFA  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  5038  002CFE  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  5039  002D02  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  5040  002D06  0E00               	movlw	0
  5041  002D08  6E17               	movwf	___ftpack@sign,c
  5042  002D0A  EC0B  F015         	call	___ftpack	;wreg free
  5043  002D0E  C013  F01B         	movff	?___ftpack,?___lltoft
  5044  002D12  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  5045  002D16  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  5046  002D1A  0012               	return	
  5047  002D1C                     __end_of___lltoft:
  5048                           	opt stack 0
  5049                           tblptru	equ	0xFF8
  5050                           tblptrh	equ	0xFF7
  5051                           tblptrl	equ	0xFF6
  5052                           tablat	equ	0xFF5
  5053                           prodh	equ	0xFF4
  5054                           prodl	equ	0xFF3
  5055                           postinc0	equ	0xFEE
  5056                           wreg	equ	0xFE8
  5057                           postdec1	equ	0xFE5
  5058                           fsr1l	equ	0xFE1
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           plusw2	equ	0xFDB
  5062                           fsr2h	equ	0xFDA
  5063                           fsr2l	equ	0xFD9
  5064                           status	equ	0xFD8
  5065                           
  5066 ;; *************** function ___llmod *****************
  5067 ;; Defined at:
  5068 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/llmod.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  dividend        4   18[COMRAM] unsigned long 
  5071 ;;  divisor         4   22[COMRAM] unsigned long 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  counter         1   26[COMRAM] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  4   18[COMRAM] unsigned long 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2, status,0
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5083 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;Total ram usage:        9 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    1
  5090 ;; This function calls:
  5091 ;;		Nothing
  5092 ;; This function is called by:
  5093 ;;		_excerciseControl
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           	psect	text17
  5098  002BFC                     __ptext17:
  5099                           	opt stack 0
  5100  002BFC                     ___llmod:
  5101                           	opt stack 28
  5102                           
  5103                           ;incstack = 0
  5104  002BFC  5017               	movf	___llmod@divisor,w,c
  5105  002BFE  1018               	iorwf	___llmod@divisor+1,w,c
  5106  002C00  1019               	iorwf	___llmod@divisor+2,w,c
  5107  002C02  101A               	iorwf	___llmod@divisor+3,w,c
  5108  002C04  B4D8               	btfsc	status,2,c
  5109  002C06  D024               	goto	l674
  5110  002C08  0E01               	movlw	1
  5111  002C0A  6E1B               	movwf	___llmod@counter,c
  5112  002C0C  D006               	goto	l2237
  5113  002C0E                     l2235:
  5114  002C0E  90D8               	bcf	status,0,c
  5115  002C10  3617               	rlcf	___llmod@divisor,f,c
  5116  002C12  3618               	rlcf	___llmod@divisor+1,f,c
  5117  002C14  3619               	rlcf	___llmod@divisor+2,f,c
  5118  002C16  361A               	rlcf	___llmod@divisor+3,f,c
  5119  002C18  2A1B               	incf	___llmod@counter,f,c
  5120  002C1A                     l2237:
  5121  002C1A  AE1A               	btfss	___llmod@divisor+3,7,c
  5122  002C1C  D7F8               	goto	l2235
  5123  002C1E                     l2239:
  5124  002C1E  5017               	movf	___llmod@divisor,w,c
  5125  002C20  5C13               	subwf	___llmod@dividend,w,c
  5126  002C22  5018               	movf	___llmod@divisor+1,w,c
  5127  002C24  5814               	subwfb	___llmod@dividend+1,w,c
  5128  002C26  5019               	movf	___llmod@divisor+2,w,c
  5129  002C28  5815               	subwfb	___llmod@dividend+2,w,c
  5130  002C2A  501A               	movf	___llmod@divisor+3,w,c
  5131  002C2C  5816               	subwfb	___llmod@dividend+3,w,c
  5132  002C2E  A0D8               	btfss	status,0,c
  5133  002C30  D008               	goto	l2243
  5134  002C32  5017               	movf	___llmod@divisor,w,c
  5135  002C34  5E13               	subwf	___llmod@dividend,f,c
  5136  002C36  5018               	movf	___llmod@divisor+1,w,c
  5137  002C38  5A14               	subwfb	___llmod@dividend+1,f,c
  5138  002C3A  5019               	movf	___llmod@divisor+2,w,c
  5139  002C3C  5A15               	subwfb	___llmod@dividend+2,f,c
  5140  002C3E  501A               	movf	___llmod@divisor+3,w,c
  5141  002C40  5A16               	subwfb	___llmod@dividend+3,f,c
  5142  002C42                     l2243:
  5143  002C42  90D8               	bcf	status,0,c
  5144  002C44  321A               	rrcf	___llmod@divisor+3,f,c
  5145  002C46  3219               	rrcf	___llmod@divisor+2,f,c
  5146  002C48  3218               	rrcf	___llmod@divisor+1,f,c
  5147  002C4A  3217               	rrcf	___llmod@divisor,f,c
  5148  002C4C  2E1B               	decfsz	___llmod@counter,f,c
  5149  002C4E  D7E7               	goto	l2239
  5150  002C50                     l674:
  5151  002C50  C013  F013         	movff	___llmod@dividend,?___llmod
  5152  002C54  C014  F014         	movff	___llmod@dividend+1,?___llmod+1
  5153  002C58  C015  F015         	movff	___llmod@dividend+2,?___llmod+2
  5154  002C5C  C016  F016         	movff	___llmod@dividend+3,?___llmod+3
  5155  002C60  0012               	return		;funcret
  5156  002C62                     __end_of___llmod:
  5157                           	opt stack 0
  5158                           tblptru	equ	0xFF8
  5159                           tblptrh	equ	0xFF7
  5160                           tblptrl	equ	0xFF6
  5161                           tablat	equ	0xFF5
  5162                           prodh	equ	0xFF4
  5163                           prodl	equ	0xFF3
  5164                           postinc0	equ	0xFEE
  5165                           wreg	equ	0xFE8
  5166                           postdec1	equ	0xFE5
  5167                           fsr1l	equ	0xFE1
  5168                           postinc2	equ	0xFDE
  5169                           postdec2	equ	0xFDD
  5170                           plusw2	equ	0xFDB
  5171                           fsr2h	equ	0xFDA
  5172                           fsr2l	equ	0xFD9
  5173                           status	equ	0xFD8
  5174                           
  5175 ;; *************** function ___fttol *****************
  5176 ;; Defined at:
  5177 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  f1              3   65[COMRAM] float 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  lval            4   19[BANK0 ] unsigned long 
  5182 ;;  exp1            1   23[BANK0 ] unsigned char 
  5183 ;;  sign1           1   18[BANK0 ] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  4   65[COMRAM] long 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5193 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Totals:         4      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;Total ram usage:       15 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    1
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_main
  5204 ;;		_excerciseControl
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text18
  5209  002544                     __ptext18:
  5210                           	opt stack 0
  5211  002544                     ___fttol:
  5212                           	opt stack 28
  5213                           
  5214                           ;incstack = 0
  5215  002544  C044  F06D         	movff	___fttol@f1+2,??___fttol
  5216  002548  0100               	movlb	0	; () banked
  5217  00254A  6B6E               	clrf	(??___fttol+1)& (0+255),b
  5218  00254C  6B6F               	clrf	(??___fttol+2)& (0+255),b
  5219  00254E  3443               	rlcf	___fttol@f1+1,w,c
  5220  002550  0100               	movlb	0	; () banked
  5221  002552  376D               	rlcf	??___fttol& (0+255),f,b
  5222  002554  E301               	bnc	u1851
  5223  002556  816E               	bsf	(??___fttol+1)& (0+255),0,b
  5224  002558                     u1851:
  5225  002558  0100               	movlb	0	; () banked
  5226  00255A  516D               	movf	??___fttol& (0+255),w,b
  5227  00255C  0100               	movlb	0	; () banked
  5228  00255E  6F77               	movwf	___fttol@exp1& (0+255),b
  5229  002560  0100               	movlb	0	; () banked
  5230  002562  5177               	movf	___fttol@exp1& (0+255),w,b
  5231  002564  A4D8               	btfss	status,2,c
  5232  002566  D009               	goto	l2191
  5233                           
  5234                           ; BSR set to: 0
  5235  002568  0E00               	movlw	0
  5236  00256A  6E42               	movwf	?___fttol,c
  5237  00256C  0E00               	movlw	0
  5238  00256E  6E43               	movwf	?___fttol+1,c
  5239  002570  0E00               	movlw	0
  5240  002572  6E44               	movwf	?___fttol+2,c
  5241  002574  0E00               	movlw	0
  5242  002576  6E45               	movwf	?___fttol+3,c
  5243                           
  5244                           ; BSR set to: 0
  5245  002578  0012               	return	
  5246  00257A                     l2191:
  5247                           
  5248                           ; BSR set to: 0
  5249  00257A  0E17               	movlw	23
  5250  00257C  0100               	movlb	0	; () banked
  5251  00257E  6F6D               	movwf	??___fttol& (0+255),b
  5252  002580  C042  F06E         	movff	___fttol@f1,??___fttol+1
  5253  002584  C043  F06F         	movff	___fttol@f1+1,??___fttol+2
  5254  002588  C044  F070         	movff	___fttol@f1+2,??___fttol+3
  5255  00258C  0100               	movlb	0	; () banked
  5256  00258E  296D               	incf	??___fttol& (0+255),w,b
  5257  002590  0100               	movlb	0	; () banked
  5258  002592  6F71               	movwf	(??___fttol+4)& (0+255),b
  5259  002594  D005               	goto	u1870
  5260  002596                     u1875:
  5261  002596  0100               	movlb	0	; () banked
  5262  002598  90D8               	bcf	status,0,c
  5263  00259A  3370               	rrcf	(??___fttol+3)& (0+255),f,b
  5264  00259C  336F               	rrcf	(??___fttol+2)& (0+255),f,b
  5265  00259E  336E               	rrcf	(??___fttol+1)& (0+255),f,b
  5266  0025A0                     u1870:
  5267  0025A0  0100               	movlb	0	; () banked
  5268  0025A2  2F71               	decfsz	(??___fttol+4)& (0+255),f,b
  5269  0025A4  D7F8               	goto	u1875
  5270  0025A6  0100               	movlb	0	; () banked
  5271  0025A8  516E               	movf	(??___fttol+1)& (0+255),w,b
  5272  0025AA  0100               	movlb	0	; () banked
  5273  0025AC  6F72               	movwf	___fttol@sign1& (0+255),b
  5274                           
  5275                           ; BSR set to: 0
  5276  0025AE  8E43               	bsf	___fttol@f1+1,7,c
  5277                           
  5278                           ; BSR set to: 0
  5279  0025B0  0EFF               	movlw	255
  5280  0025B2  1642               	andwf	___fttol@f1,f,c
  5281  0025B4  0EFF               	movlw	255
  5282  0025B6  1643               	andwf	___fttol@f1+1,f,c
  5283  0025B8  0E00               	movlw	0
  5284  0025BA  1644               	andwf	___fttol@f1+2,f,c
  5285                           
  5286                           ; BSR set to: 0
  5287  0025BC  5042               	movf	___fttol@f1,w,c
  5288  0025BE  0100               	movlb	0	; () banked
  5289  0025C0  6F73               	movwf	___fttol@lval& (0+255),b
  5290  0025C2  5043               	movf	___fttol@f1+1,w,c
  5291  0025C4  0100               	movlb	0	; () banked
  5292  0025C6  6F74               	movwf	(___fttol@lval+1)& (0+255),b
  5293  0025C8  5044               	movf	___fttol@f1+2,w,c
  5294  0025CA  0100               	movlb	0	; () banked
  5295  0025CC  6F75               	movwf	(___fttol@lval+2)& (0+255),b
  5296  0025CE  0100               	movlb	0	; () banked
  5297  0025D0  6B76               	clrf	(___fttol@lval+3)& (0+255),b
  5298                           
  5299                           ; BSR set to: 0
  5300  0025D2  0E8E               	movlw	142
  5301  0025D4  0100               	movlb	0	; () banked
  5302  0025D6  5F77               	subwf	___fttol@exp1& (0+255),f,b
  5303                           
  5304                           ; BSR set to: 0
  5305  0025D8  0100               	movlb	0	; () banked
  5306  0025DA  AF77               	btfss	___fttol@exp1& (0+255),7,b
  5307  0025DC  D019               	goto	l2213
  5308                           
  5309                           ; BSR set to: 0
  5310  0025DE  0100               	movlb	0	; () banked
  5311  0025E0  5177               	movf	___fttol@exp1& (0+255),w,b
  5312  0025E2  0A80               	xorlw	128
  5313  0025E4  0F8F               	addlw	143
  5314  0025E6  B0D8               	btfsc	status,0,c
  5315  0025E8  D009               	goto	l2209
  5316                           
  5317                           ; BSR set to: 0
  5318  0025EA  0E00               	movlw	0
  5319  0025EC  6E42               	movwf	?___fttol,c
  5320  0025EE  0E00               	movlw	0
  5321  0025F0  6E43               	movwf	?___fttol+1,c
  5322  0025F2  0E00               	movlw	0
  5323  0025F4  6E44               	movwf	?___fttol+2,c
  5324  0025F6  0E00               	movlw	0
  5325  0025F8  6E45               	movwf	?___fttol+3,c
  5326                           
  5327                           ; BSR set to: 0
  5328  0025FA  0012               	return	
  5329  0025FC                     l2209:
  5330                           
  5331                           ; BSR set to: 0
  5332  0025FC  0100               	movlb	0	; () banked
  5333  0025FE  90D8               	bcf	status,0,c
  5334  002600  3376               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5335  002602  3375               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5336  002604  3374               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5337  002606  3373               	rrcf	___fttol@lval& (0+255),f,b
  5338                           
  5339                           ; BSR set to: 0
  5340  002608  0100               	movlb	0	; () banked
  5341  00260A  3F77               	incfsz	___fttol@exp1& (0+255),f,b
  5342  00260C  D7F7               	goto	l2209
  5343                           
  5344                           ; BSR set to: 0
  5345  00260E  D01A               	goto	l2223
  5346  002610                     l2213:
  5347                           
  5348                           ; BSR set to: 0
  5349  002610  0E17               	movlw	23
  5350  002612  0100               	movlb	0	; () banked
  5351  002614  6577               	cpfsgt	___fttol@exp1& (0+255),b
  5352  002616  D011               	goto	l2221
  5353                           
  5354                           ; BSR set to: 0
  5355  002618  0E00               	movlw	0
  5356  00261A  6E42               	movwf	?___fttol,c
  5357  00261C  0E00               	movlw	0
  5358  00261E  6E43               	movwf	?___fttol+1,c
  5359  002620  0E00               	movlw	0
  5360  002622  6E44               	movwf	?___fttol+2,c
  5361  002624  0E00               	movlw	0
  5362  002626  6E45               	movwf	?___fttol+3,c
  5363                           
  5364                           ; BSR set to: 0
  5365  002628  0012               	return	
  5366  00262A                     l2219:
  5367                           
  5368                           ; BSR set to: 0
  5369  00262A  0100               	movlb	0	; () banked
  5370  00262C  90D8               	bcf	status,0,c
  5371  00262E  3773               	rlcf	___fttol@lval& (0+255),f,b
  5372  002630  3774               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5373  002632  3775               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5374  002634  3776               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5375  002636  0100               	movlb	0	; () banked
  5376  002638  0777               	decf	___fttol@exp1& (0+255),f,b
  5377  00263A                     l2221:
  5378                           
  5379                           ; BSR set to: 0
  5380  00263A  0100               	movlb	0	; () banked
  5381  00263C  5177               	movf	___fttol@exp1& (0+255),w,b
  5382  00263E  0100               	movlb	0	; () banked
  5383  002640  A4D8               	btfss	status,2,c
  5384  002642  D7F3               	goto	l2219
  5385  002644                     l2223:
  5386                           
  5387                           ; BSR set to: 0
  5388  002644  0100               	movlb	0	; () banked
  5389  002646  5172               	movf	___fttol@sign1& (0+255),w,b
  5390  002648  0100               	movlb	0	; () banked
  5391  00264A  B4D8               	btfsc	status,2,c
  5392  00264C  D009               	goto	l2227
  5393                           
  5394                           ; BSR set to: 0
  5395  00264E  0100               	movlb	0	; () banked
  5396  002650  1F76               	comf	(___fttol@lval+3)& (0+255),f,b
  5397  002652  1F75               	comf	(___fttol@lval+2)& (0+255),f,b
  5398  002654  1F74               	comf	(___fttol@lval+1)& (0+255),f,b
  5399  002656  6D73               	negf	___fttol@lval& (0+255),b
  5400  002658  0E00               	movlw	0
  5401  00265A  2374               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5402  00265C  2375               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5403  00265E  2376               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5404  002660                     l2227:
  5405                           
  5406                           ; BSR set to: 0
  5407  002660  C073  F042         	movff	___fttol@lval,?___fttol
  5408  002664  C074  F043         	movff	___fttol@lval+1,?___fttol+1
  5409  002668  C075  F044         	movff	___fttol@lval+2,?___fttol+2
  5410  00266C  C076  F045         	movff	___fttol@lval+3,?___fttol+3
  5411  002670  0012               	return	
  5412  002672                     __end_of___fttol:
  5413                           	opt stack 0
  5414                           tblptru	equ	0xFF8
  5415                           tblptrh	equ	0xFF7
  5416                           tblptrl	equ	0xFF6
  5417                           tablat	equ	0xFF5
  5418                           prodh	equ	0xFF4
  5419                           prodl	equ	0xFF3
  5420                           postinc0	equ	0xFEE
  5421                           wreg	equ	0xFE8
  5422                           postdec1	equ	0xFE5
  5423                           fsr1l	equ	0xFE1
  5424                           postinc2	equ	0xFDE
  5425                           postdec2	equ	0xFDD
  5426                           plusw2	equ	0xFDB
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           
  5431 ;; *************** function ___awtoft *****************
  5432 ;; Defined at:
  5433 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;  c               2   26[COMRAM] int 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  sign            1   29[COMRAM] unsigned char 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  3   26[COMRAM] float 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5447 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;Total ram usage:        4 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    2
  5454 ;; This function calls:
  5455 ;;		___ftpack
  5456 ;; This function is called by:
  5457 ;;		_excerciseControl
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	text19
  5462  002EA0                     __ptext19:
  5463                           	opt stack 0
  5464  002EA0                     ___awtoft:
  5465                           	opt stack 27
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;incstack = 0
  5469  002EA0  0E00               	movlw	0
  5470  002EA2  6E1E               	movwf	___awtoft@sign,c
  5471  002EA4  AE1C               	btfss	___awtoft@c+1,7,c
  5472  002EA6  D006               	goto	l3061
  5473  002EA8  6C1B               	negf	___awtoft@c,c
  5474  002EAA  1E1C               	comf	___awtoft@c+1,f,c
  5475  002EAC  B0D8               	btfsc	status,0,c
  5476  002EAE  2A1C               	incf	___awtoft@c+1,f,c
  5477  002EB0  0E01               	movlw	1
  5478  002EB2  6E1E               	movwf	___awtoft@sign,c
  5479  002EB4                     l3061:
  5480  002EB4  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  5481  002EB8  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  5482  002EBC  6A15               	clrf	___ftpack@arg+2,c
  5483  002EBE  0E8E               	movlw	142
  5484  002EC0  6E16               	movwf	___ftpack@exp,c
  5485  002EC2  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  5486  002EC6  EC0B  F015         	call	___ftpack	;wreg free
  5487  002ECA  C013  F01B         	movff	?___ftpack,?___awtoft
  5488  002ECE  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  5489  002ED2  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  5490  002ED6  0012               	return	
  5491  002ED8                     __end_of___awtoft:
  5492                           	opt stack 0
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           postinc0	equ	0xFEE
  5500                           wreg	equ	0xFE8
  5501                           postdec1	equ	0xFE5
  5502                           fsr1l	equ	0xFE1
  5503                           postinc2	equ	0xFDE
  5504                           postdec2	equ	0xFDD
  5505                           plusw2	equ	0xFDB
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _configureTimers *****************
  5511 ;; Defined at:
  5512 ;;		line 511 in file "main.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;		None
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;		None
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      void 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;Total ram usage:        0 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    1
  5533 ;; This function calls:
  5534 ;;		Nothing
  5535 ;; This function is called by:
  5536 ;;		_main
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           	psect	text20
  5541  002AC4                     __ptext20:
  5542                           	opt stack 0
  5543  002AC4                     _configureTimers:
  5544                           	opt stack 29
  5545                           
  5546                           ;main.c: 513: (INTCONbits.GIE = 0);
  5547                           
  5548                           ;incstack = 0
  5549  002AC4  9EF2               	bcf	intcon,7,c	;volatile
  5550                           
  5551                           ;main.c: 515: T1CON = 0;
  5552  002AC6  0E00               	movlw	0
  5553  002AC8  6ECD               	movwf	4045,c	;volatile
  5554                           
  5555                           ;main.c: 516: T1CONbits.TMR1CS = 0b00;
  5556  002ACA  0E3F               	movlw	-193
  5557  002ACC  16CD               	andwf	4045,f,c	;volatile
  5558                           
  5559                           ;main.c: 517: T1CONbits.T1CKPS = 0b10;
  5560  002ACE  50CD               	movf	4045,w,c	;volatile
  5561  002AD0  0BCF               	andlw	-49
  5562  002AD2  0920               	iorlw	32
  5563  002AD4  6ECD               	movwf	4045,c	;volatile
  5564                           
  5565                           ;main.c: 518: T5CON = 0;
  5566  002AD6  0E00               	movlw	0
  5567  002AD8  010F               	movlb	15	; () banked
  5568  002ADA  6F4E               	movwf	78,b	;volatile
  5569                           
  5570                           ;main.c: 519: T5CONbits.TMR5CS = 0b00;
  5571  002ADC  0E3F               	movlw	-193
  5572  002ADE  010F               	movlb	15	; () banked
  5573  002AE0  174E               	andwf	78,f,b	;volatile
  5574                           
  5575                           ;main.c: 520: T5CONbits.T5CKPS = 0b10;
  5576  002AE2  010F               	movlb	15	; () banked
  5577  002AE4  514E               	movf	78,w,b	;volatile
  5578  002AE6  0BCF               	andlw	-49
  5579  002AE8  0920               	iorlw	32
  5580  002AEA  6F4E               	movwf	78,b	;volatile
  5581                           
  5582                           ;main.c: 525: CCP3CON = 0;
  5583  002AEC  0E00               	movlw	0
  5584  002AEE  010F               	movlb	15	; () banked
  5585  002AF0  6F5D               	movwf	93,b	;volatile
  5586                           
  5587                           ;main.c: 526: CCP2CON = 0;
  5588  002AF2  0E00               	movlw	0
  5589  002AF4  6E66               	movwf	3942,c	;volatile
  5590                           
  5591                           ;main.c: 527: CCP3CONbits.CCP3M = 0b1010;
  5592  002AF6  010F               	movlb	15	; () banked
  5593  002AF8  515D               	movf	93,w,b	;volatile
  5594  002AFA  0BF0               	andlw	-16
  5595  002AFC  090A               	iorlw	10
  5596  002AFE  6F5D               	movwf	93,b	;volatile
  5597                           
  5598                           ;main.c: 528: CCP2CONbits.CCP2M = 0b1010;
  5599  002B00  5066               	movf	3942,w,c	;volatile
  5600  002B02  0BF0               	andlw	-16
  5601  002B04  090A               	iorlw	10
  5602  002B06  6E66               	movwf	3942,c	;volatile
  5603                           
  5604                           ;main.c: 535: CCPTMRS0bits.C3TSEL = 0;
  5605  002B08  0E3F               	movlw	-193
  5606  002B0A  010F               	movlb	15	; () banked
  5607  002B0C  1749               	andwf	73,f,b	;volatile
  5608                           
  5609                           ;main.c: 536: CCPTMRS0bits.C2TSEL = 0b10;
  5610  002B0E  010F               	movlb	15	; () banked
  5611  002B10  5149               	movf	73,w,b	;volatile
  5612  002B12  0BE7               	andlw	-25
  5613  002B14  0910               	iorlw	16
  5614  002B16  6F49               	movwf	73,b	;volatile
  5615                           
  5616                           ;main.c: 538: CCPR3 = 675;
  5617  002B18  0E02               	movlw	2
  5618  002B1A  010F               	movlb	15	; () banked
  5619  002B1C  6F5F               	movwf	95,b	;volatile
  5620  002B1E  0EA3               	movlw	163
  5621  002B20  6F5E               	movwf	94,b	;volatile
  5622                           
  5623                           ;main.c: 539: CCPR2 = 675;
  5624  002B22  0E02               	movlw	2
  5625  002B24  6E68               	movwf	3944,c	;volatile
  5626  002B26  0EA3               	movlw	163
  5627  002B28  6E67               	movwf	3943,c	;volatile
  5628                           
  5629                           ; BSR set to: 15
  5630                           ;main.c: 541: CCP3IE = 1;
  5631  002B2A  807A               	bsf	3962,0,c	;volatile
  5632                           
  5633                           ; BSR set to: 15
  5634                           ;main.c: 542: CCP2IE = 1;
  5635  002B2C  80A0               	bsf	4000,0,c	;volatile
  5636                           
  5637                           ; BSR set to: 15
  5638                           ;main.c: 545: PIE1bits.TMR2IE = 1;
  5639  002B2E  829D               	bsf	3997,1,c	;volatile
  5640                           
  5641                           ;main.c: 546: T2CON = 0;
  5642  002B30  0E00               	movlw	0
  5643  002B32  6EBA               	movwf	4026,c	;volatile
  5644                           
  5645                           ;main.c: 547: T2CONbits.T2CKPS = 0b10;
  5646  002B34  50BA               	movf	4026,w,c	;volatile
  5647  002B36  0BFC               	andlw	-4
  5648  002B38  0902               	iorlw	2
  5649  002B3A  6EBA               	movwf	4026,c	;volatile
  5650                           
  5651                           ; BSR set to: 15
  5652                           ;main.c: 548: T2CONbits.TMR2ON = 1;
  5653  002B3C  84BA               	bsf	4026,2,c	;volatile
  5654                           
  5655                           ;main.c: 549: PR2 = 125;
  5656  002B3E  0E7D               	movlw	125
  5657  002B40  6EBB               	movwf	4027,c	;volatile
  5658                           
  5659                           ; BSR set to: 15
  5660                           ;main.c: 555: INTCONbits.GIE = 1;
  5661  002B42  8EF2               	bsf	intcon,7,c	;volatile
  5662                           
  5663                           ; BSR set to: 15
  5664                           ;main.c: 556: INTCONbits.PEIE = 1;
  5665  002B44  8CF2               	bsf	intcon,6,c	;volatile
  5666                           
  5667                           ;main.c: 558: TMR1 = 0;
  5668  002B46  0E00               	movlw	0
  5669  002B48  6ECF               	movwf	4047,c	;volatile
  5670  002B4A  0E00               	movlw	0
  5671  002B4C  6ECE               	movwf	4046,c	;volatile
  5672                           
  5673                           ;main.c: 559: TMR5 = 0;
  5674  002B4E  0E00               	movlw	0
  5675  002B50  010F               	movlb	15	; () banked
  5676  002B52  6F50               	movwf	80,b	;volatile
  5677  002B54  0E00               	movlw	0
  5678  002B56  6F4F               	movwf	79,b	;volatile
  5679                           
  5680                           ; BSR set to: 15
  5681                           ;main.c: 560: TMR1ON = 1;
  5682  002B58  80CD               	bsf	4045,0,c	;volatile
  5683                           
  5684                           ; BSR set to: 15
  5685                           ;main.c: 561: TMR5ON = 1;
  5686  002B5A  010F               	movlb	15	; () banked
  5687  002B5C  814E               	bsf	78,0,b	;volatile
  5688                           
  5689                           ; BSR set to: 15
  5690                           ;main.c: 563: (INTCONbits.GIE = 1);
  5691  002B5E  8EF2               	bsf	intcon,7,c	;volatile
  5692                           
  5693                           ; BSR set to: 15
  5694                           ;main.c: 565: TRISDbits.TRISD0 = 0;
  5695  002B60  9095               	bcf	3989,0,c	;volatile
  5696                           
  5697                           ; BSR set to: 15
  5698                           ;main.c: 566: TRISDbits.TRISD1 = 0;
  5699  002B62  9295               	bcf	3989,1,c	;volatile
  5700                           
  5701                           ;main.c: 567: ANSELD = 0;
  5702  002B64  0E00               	movlw	0
  5703  002B66  010F               	movlb	15	; () banked
  5704  002B68  6F3B               	movwf	59,b	;volatile
  5705                           
  5706                           ; BSR set to: 15
  5707  002B6A  0012               	return		;funcret
  5708  002B6C                     __end_of_configureTimers:
  5709                           	opt stack 0
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           intcon	equ	0xFF2
  5717                           postinc0	equ	0xFEE
  5718                           wreg	equ	0xFE8
  5719                           postdec1	equ	0xFE5
  5720                           fsr1l	equ	0xFE1
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           plusw2	equ	0xFDB
  5724                           fsr2h	equ	0xFDA
  5725                           fsr2l	equ	0xFD9
  5726                           status	equ	0xFD8
  5727                           
  5728 ;; *************** function _configureComparators *****************
  5729 ;; Defined at:
  5730 ;;		line 571 in file "main.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;		None
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;		None
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;Total ram usage:        0 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    1
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		_main
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text21
  5759  002D74                     __ptext21:
  5760                           	opt stack 0
  5761  002D74                     _configureComparators:
  5762                           	opt stack 29
  5763                           
  5764                           ;main.c: 575: VREFCON0bits.FVREN=1;
  5765                           
  5766                           ; BSR set to: 15
  5767                           ;incstack = 0
  5768  002D74  010F               	movlb	15	; () banked
  5769  002D76  8F42               	bsf	66,7,b	;volatile
  5770                           
  5771                           ;main.c: 576: VREFCON0bits.FVRST=0;
  5772  002D78  010F               	movlb	15	; () banked
  5773  002D7A  9D42               	bcf	66,6,b	;volatile
  5774                           
  5775                           ; BSR set to: 15
  5776                           ;main.c: 577: VREFCON0bits.FVRS=0b01;
  5777  002D7C  010F               	movlb	15	; () banked
  5778  002D7E  5142               	movf	66,w,b	;volatile
  5779  002D80  0BCF               	andlw	-49
  5780  002D82  0910               	iorlw	16
  5781  002D84  6F42               	movwf	66,b	;volatile
  5782                           
  5783                           ; BSR set to: 15
  5784                           ;main.c: 579: TRISBbits.TRISB1 = 1;
  5785  002D86  8293               	bsf	3987,1,c	;volatile
  5786                           
  5787                           ; BSR set to: 15
  5788                           ;main.c: 580: ANSELBbits.ANSB1 = 1;
  5789  002D88  010F               	movlb	15	; () banked
  5790  002D8A  8339               	bsf	57,1,b	;volatile
  5791                           
  5792                           ; BSR set to: 15
  5793                           ;main.c: 584: CM2CON0bits.C2ON = 1;
  5794  002D8C  8E78               	bsf	3960,7,c	;volatile
  5795                           
  5796                           ; BSR set to: 15
  5797                           ;main.c: 585: CM2CON0bits.C2OUT = 0;
  5798  002D8E  9C78               	bcf	3960,6,c	;volatile
  5799                           
  5800                           ; BSR set to: 15
  5801                           ;main.c: 586: CM2CON0bits.C2OE = 0;
  5802  002D90  9A78               	bcf	3960,5,c	;volatile
  5803                           
  5804                           ; BSR set to: 15
  5805                           ;main.c: 587: CM2CON0bits.C2POL = 1;
  5806  002D92  8878               	bsf	3960,4,c	;volatile
  5807                           
  5808                           ; BSR set to: 15
  5809                           ;main.c: 588: CM2CON0bits.C2SP = 1;
  5810  002D94  8678               	bsf	3960,3,c	;volatile
  5811                           
  5812                           ; BSR set to: 15
  5813                           ;main.c: 589: CM2CON0bits.C2R = 1;
  5814  002D96  8478               	bsf	3960,2,c	;volatile
  5815                           
  5816                           ;main.c: 590: CM2CON0bits.C2CH = 0b11;
  5817  002D98  0E03               	movlw	3
  5818  002D9A  1278               	iorwf	3960,f,c	;volatile
  5819                           
  5820                           ; BSR set to: 15
  5821                           ;main.c: 592: CM2CON1bits.C2RSEL = 1;
  5822  002D9C  8877               	bsf	3959,4,c	;volatile
  5823                           
  5824                           ; BSR set to: 15
  5825                           ;main.c: 593: CM2CON1bits.C2HYS = 0;
  5826  002D9E  9477               	bcf	3959,2,c	;volatile
  5827                           
  5828                           ; BSR set to: 15
  5829                           ;main.c: 594: CM2CON1bits.C2SYNC = 0;
  5830  002DA0  9077               	bcf	3959,0,c	;volatile
  5831                           
  5832                           ; BSR set to: 15
  5833                           ;main.c: 600: TRISBbits.TRISB3 = 1;
  5834  002DA2  8693               	bsf	3987,3,c	;volatile
  5835                           
  5836                           ; BSR set to: 15
  5837                           ;main.c: 601: ANSELBbits.ANSB3 = 1;
  5838  002DA4  010F               	movlb	15	; () banked
  5839  002DA6  8739               	bsf	57,3,b	;volatile
  5840                           
  5841                           ; BSR set to: 15
  5842                           ;main.c: 604: CM1CON0bits.C1ON = 1;
  5843  002DA8  8E79               	bsf	3961,7,c	;volatile
  5844                           
  5845                           ; BSR set to: 15
  5846                           ;main.c: 605: CM1CON0bits.C1OUT = 0;
  5847  002DAA  9C79               	bcf	3961,6,c	;volatile
  5848                           
  5849                           ; BSR set to: 15
  5850                           ;main.c: 606: CM1CON0bits.C1OE = 0;
  5851  002DAC  9A79               	bcf	3961,5,c	;volatile
  5852                           
  5853                           ; BSR set to: 15
  5854                           ;main.c: 607: CM1CON0bits.C1POL = 1;
  5855  002DAE  8879               	bsf	3961,4,c	;volatile
  5856                           
  5857                           ; BSR set to: 15
  5858                           ;main.c: 608: CM1CON0bits.C1SP = 1;
  5859  002DB0  8679               	bsf	3961,3,c	;volatile
  5860                           
  5861                           ; BSR set to: 15
  5862                           ;main.c: 609: CM1CON0bits.C1R = 1;
  5863  002DB2  8479               	bsf	3961,2,c	;volatile
  5864                           
  5865                           ;main.c: 610: CM1CON0bits.C1CH = 0b10;
  5866  002DB4  5079               	movf	3961,w,c	;volatile
  5867  002DB6  0BFC               	andlw	-4
  5868  002DB8  0902               	iorlw	2
  5869  002DBA  6E79               	movwf	3961,c	;volatile
  5870                           
  5871                           ; BSR set to: 15
  5872                           ;main.c: 612: CM2CON1bits.C1RSEL = 1;
  5873  002DBC  8A77               	bsf	3959,5,c	;volatile
  5874                           
  5875                           ; BSR set to: 15
  5876                           ;main.c: 613: CM2CON1bits.C1HYS = 0;
  5877  002DBE  9677               	bcf	3959,3,c	;volatile
  5878                           
  5879                           ; BSR set to: 15
  5880                           ;main.c: 614: CM2CON1bits.C1SYNC = 0;
  5881  002DC0  9277               	bcf	3959,1,c	;volatile
  5882                           
  5883                           ; BSR set to: 15
  5884                           ;main.c: 617: PIR2bits.C1IF = 0;
  5885  002DC2  9CA1               	bcf	4001,6,c	;volatile
  5886                           
  5887                           ; BSR set to: 15
  5888                           ;main.c: 618: PIR2bits.C2IF = 0;
  5889  002DC4  9AA1               	bcf	4001,5,c	;volatile
  5890                           
  5891                           ; BSR set to: 15
  5892                           ;main.c: 619: PIE2bits.C2IE = 1;
  5893  002DC6  8AA0               	bsf	4000,5,c	;volatile
  5894                           
  5895                           ; BSR set to: 15
  5896                           ;main.c: 620: PIE2bits.C1IE = 1;
  5897  002DC8  8CA0               	bsf	4000,6,c	;volatile
  5898                           
  5899                           ; BSR set to: 15
  5900  002DCA  0012               	return		;funcret
  5901  002DCC                     __end_of_configureComparators:
  5902                           	opt stack 0
  5903                           tblptru	equ	0xFF8
  5904                           tblptrh	equ	0xFF7
  5905                           tblptrl	equ	0xFF6
  5906                           tablat	equ	0xFF5
  5907                           prodh	equ	0xFF4
  5908                           prodl	equ	0xFF3
  5909                           intcon	equ	0xFF2
  5910                           postinc0	equ	0xFEE
  5911                           wreg	equ	0xFE8
  5912                           postdec1	equ	0xFE5
  5913                           fsr1l	equ	0xFE1
  5914                           postinc2	equ	0xFDE
  5915                           postdec2	equ	0xFDD
  5916                           plusw2	equ	0xFDB
  5917                           fsr2h	equ	0xFDA
  5918                           fsr2l	equ	0xFD9
  5919                           status	equ	0xFD8
  5920                           
  5921 ;; *************** function ___ftdiv *****************
  5922 ;; Defined at:
  5923 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;  f1              3   50[COMRAM] float 
  5926 ;;  f2              3   53[COMRAM] float 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  f3              3   60[COMRAM] float 
  5929 ;;  sign            1   64[COMRAM] unsigned char 
  5930 ;;  exp             1   63[COMRAM] unsigned char 
  5931 ;;  cntr            1   59[COMRAM] unsigned char 
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  3   50[COMRAM] float 
  5934 ;; Registers used:
  5935 ;;		wreg, status,2, status,0, cstack
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5941 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;Total ram usage:       15 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:    2
  5948 ;; This function calls:
  5949 ;;		___ftpack
  5950 ;; This function is called by:
  5951 ;;		_main
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           	psect	text22
  5956  00286A                     __ptext22:
  5957                           	opt stack 0
  5958  00286A                     ___ftdiv:
  5959                           	opt stack 28
  5960                           
  5961                           ; BSR set to: 15
  5962                           ;incstack = 0
  5963  00286A  C035  F039         	movff	___ftdiv@f1+2,??___ftdiv
  5964  00286E  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  5965  002870  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  5966  002872  3434               	rlcf	___ftdiv@f1+1,w,c
  5967  002874  3639               	rlcf	??___ftdiv& (0+255),f,c
  5968  002876  E301               	bnc	u3271
  5969  002878  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5970  00287A                     u3271:
  5971  00287A  5039               	movf	??___ftdiv,w,c
  5972  00287C  6E40               	movwf	___ftdiv@exp,c
  5973  00287E  5040               	movf	___ftdiv@exp,w,c
  5974  002880  A4D8               	btfss	status,2,c
  5975  002882  D007               	goto	l3217
  5976  002884  0E00               	movlw	0
  5977  002886  6E33               	movwf	?___ftdiv,c
  5978  002888  0E00               	movlw	0
  5979  00288A  6E34               	movwf	?___ftdiv+1,c
  5980  00288C  0E00               	movlw	0
  5981  00288E  6E35               	movwf	?___ftdiv+2,c
  5982  002890  0012               	return	
  5983  002892                     l3217:
  5984  002892  C038  F039         	movff	___ftdiv@f2+2,??___ftdiv
  5985  002896  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  5986  002898  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  5987  00289A  3437               	rlcf	___ftdiv@f2+1,w,c
  5988  00289C  3639               	rlcf	??___ftdiv& (0+255),f,c
  5989  00289E  E301               	bnc	u3291
  5990  0028A0  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  5991  0028A2                     u3291:
  5992  0028A2  5039               	movf	??___ftdiv,w,c
  5993  0028A4  6E41               	movwf	___ftdiv@sign,c
  5994  0028A6  5041               	movf	___ftdiv@sign,w,c
  5995  0028A8  A4D8               	btfss	status,2,c
  5996  0028AA  D007               	goto	l3223
  5997  0028AC  0E00               	movlw	0
  5998  0028AE  6E33               	movwf	?___ftdiv,c
  5999  0028B0  0E00               	movlw	0
  6000  0028B2  6E34               	movwf	?___ftdiv+1,c
  6001  0028B4  0E00               	movlw	0
  6002  0028B6  6E35               	movwf	?___ftdiv+2,c
  6003  0028B8  0012               	return	
  6004  0028BA                     l3223:
  6005  0028BA  0E00               	movlw	0
  6006  0028BC  6E3D               	movwf	___ftdiv@f3,c
  6007  0028BE  0E00               	movlw	0
  6008  0028C0  6E3E               	movwf	___ftdiv@f3+1,c
  6009  0028C2  0E00               	movlw	0
  6010  0028C4  6E3F               	movwf	___ftdiv@f3+2,c
  6011  0028C6  5041               	movf	___ftdiv@sign,w,c
  6012  0028C8  0F89               	addlw	137
  6013  0028CA  5E40               	subwf	___ftdiv@exp,f,c
  6014  0028CC  C035  F041         	movff	___ftdiv@f1+2,___ftdiv@sign
  6015  0028D0  5038               	movf	___ftdiv@f2+2,w,c
  6016  0028D2  1A41               	xorwf	___ftdiv@sign,f,c
  6017  0028D4  0E80               	movlw	128
  6018  0028D6  1641               	andwf	___ftdiv@sign,f,c
  6019  0028D8  8E34               	bsf	___ftdiv@f1+1,7,c
  6020  0028DA  0EFF               	movlw	255
  6021  0028DC  1633               	andwf	___ftdiv@f1,f,c
  6022  0028DE  0EFF               	movlw	255
  6023  0028E0  1634               	andwf	___ftdiv@f1+1,f,c
  6024  0028E2  0E00               	movlw	0
  6025  0028E4  1635               	andwf	___ftdiv@f1+2,f,c
  6026  0028E6  8E37               	bsf	___ftdiv@f2+1,7,c
  6027  0028E8  0EFF               	movlw	255
  6028  0028EA  1636               	andwf	___ftdiv@f2,f,c
  6029  0028EC  0EFF               	movlw	255
  6030  0028EE  1637               	andwf	___ftdiv@f2+1,f,c
  6031  0028F0  0E00               	movlw	0
  6032  0028F2  1638               	andwf	___ftdiv@f2+2,f,c
  6033  0028F4  0E18               	movlw	24
  6034  0028F6  6E3C               	movwf	___ftdiv@cntr,c
  6035  0028F8                     l3243:
  6036  0028F8  90D8               	bcf	status,0,c
  6037  0028FA  363D               	rlcf	___ftdiv@f3,f,c
  6038  0028FC  363E               	rlcf	___ftdiv@f3+1,f,c
  6039  0028FE  363F               	rlcf	___ftdiv@f3+2,f,c
  6040  002900  5036               	movf	___ftdiv@f2,w,c
  6041  002902  5C33               	subwf	___ftdiv@f1,w,c
  6042  002904  5037               	movf	___ftdiv@f2+1,w,c
  6043  002906  5834               	subwfb	___ftdiv@f1+1,w,c
  6044  002908  5038               	movf	___ftdiv@f2+2,w,c
  6045  00290A  5835               	subwfb	___ftdiv@f1+2,w,c
  6046  00290C  A0D8               	btfss	status,0,c
  6047  00290E  D007               	goto	l592
  6048  002910  5036               	movf	___ftdiv@f2,w,c
  6049  002912  5E33               	subwf	___ftdiv@f1,f,c
  6050  002914  5037               	movf	___ftdiv@f2+1,w,c
  6051  002916  5A34               	subwfb	___ftdiv@f1+1,f,c
  6052  002918  5038               	movf	___ftdiv@f2+2,w,c
  6053  00291A  5A35               	subwfb	___ftdiv@f1+2,f,c
  6054  00291C  803D               	bsf	___ftdiv@f3,0,c
  6055  00291E                     l592:
  6056  00291E  90D8               	bcf	status,0,c
  6057  002920  3633               	rlcf	___ftdiv@f1,f,c
  6058  002922  3634               	rlcf	___ftdiv@f1+1,f,c
  6059  002924  3635               	rlcf	___ftdiv@f1+2,f,c
  6060  002926  2E3C               	decfsz	___ftdiv@cntr,f,c
  6061  002928  D7E7               	goto	l3243
  6062  00292A  C03D  F013         	movff	___ftdiv@f3,___ftpack@arg
  6063  00292E  C03E  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6064  002932  C03F  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6065  002936  C040  F016         	movff	___ftdiv@exp,___ftpack@exp
  6066  00293A  C041  F017         	movff	___ftdiv@sign,___ftpack@sign
  6067  00293E  EC0B  F015         	call	___ftpack	;wreg free
  6068  002942  C013  F033         	movff	?___ftpack,?___ftdiv
  6069  002946  C014  F034         	movff	?___ftpack+1,?___ftdiv+1
  6070  00294A  C015  F035         	movff	?___ftpack+2,?___ftdiv+2
  6071  00294E  0012               	return	
  6072  002950                     __end_of___ftdiv:
  6073                           	opt stack 0
  6074                           tblptru	equ	0xFF8
  6075                           tblptrh	equ	0xFF7
  6076                           tblptrl	equ	0xFF6
  6077                           tablat	equ	0xFF5
  6078                           prodh	equ	0xFF4
  6079                           prodl	equ	0xFF3
  6080                           intcon	equ	0xFF2
  6081                           postinc0	equ	0xFEE
  6082                           wreg	equ	0xFE8
  6083                           postdec1	equ	0xFE5
  6084                           fsr1l	equ	0xFE1
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           plusw2	equ	0xFDB
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function ___ftpack *****************
  6093 ;; Defined at:
  6094 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  arg             3   18[COMRAM] unsigned um
  6097 ;;  exp             1   21[COMRAM] unsigned char 
  6098 ;;  sign            1   22[COMRAM] unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;		None
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  3   18[COMRAM] float 
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6110 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;Total ram usage:        8 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    1
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		___awtoft
  6121 ;;		___ftadd
  6122 ;;		___ftdiv
  6123 ;;		___ftmul
  6124 ;;		___lltoft
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text23
  6129  002A16                     __ptext23:
  6130                           	opt stack 0
  6131  002A16                     ___ftpack:
  6132                           	opt stack 25
  6133                           
  6134                           ;incstack = 0
  6135  002A16  5016               	movf	___ftpack@exp,w,c
  6136  002A18  B4D8               	btfsc	status,2,c
  6137  002A1A  D005               	goto	l2843
  6138  002A1C  5013               	movf	___ftpack@arg,w,c
  6139  002A1E  1014               	iorwf	___ftpack@arg+1,w,c
  6140  002A20  1015               	iorwf	___ftpack@arg+2,w,c
  6141  002A22  A4D8               	btfss	status,2,c
  6142  002A24  D00C               	goto	l2849
  6143  002A26                     l2843:
  6144  002A26  0E00               	movlw	0
  6145  002A28  6E13               	movwf	?___ftpack,c
  6146  002A2A  0E00               	movlw	0
  6147  002A2C  6E14               	movwf	?___ftpack+1,c
  6148  002A2E  0E00               	movlw	0
  6149  002A30  6E15               	movwf	?___ftpack+2,c
  6150  002A32  0012               	return	
  6151  002A34                     l2847:
  6152  002A34  2A16               	incf	___ftpack@exp,f,c
  6153  002A36  90D8               	bcf	status,0,c
  6154  002A38  3215               	rrcf	___ftpack@arg+2,f,c
  6155  002A3A  3214               	rrcf	___ftpack@arg+1,f,c
  6156  002A3C  3213               	rrcf	___ftpack@arg,f,c
  6157  002A3E                     l2849:
  6158  002A3E  0E00               	movlw	0
  6159  002A40  1413               	andwf	___ftpack@arg,w,c
  6160  002A42  6E18               	movwf	??___ftpack& (0+255),c
  6161  002A44  0E00               	movlw	0
  6162  002A46  1414               	andwf	___ftpack@arg+1,w,c
  6163  002A48  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6164  002A4A  0EFE               	movlw	254
  6165  002A4C  1415               	andwf	___ftpack@arg+2,w,c
  6166  002A4E  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6167  002A50  5018               	movf	??___ftpack,w,c
  6168  002A52  1019               	iorwf	??___ftpack+1,w,c
  6169  002A54  101A               	iorwf	??___ftpack+2,w,c
  6170  002A56  B4D8               	btfsc	status,2,c
  6171  002A58  D00C               	goto	l2855
  6172  002A5A  D7EC               	goto	l2847
  6173  002A5C                     l2851:
  6174  002A5C  2A16               	incf	___ftpack@exp,f,c
  6175  002A5E  0E01               	movlw	1
  6176  002A60  2613               	addwf	___ftpack@arg,f,c
  6177  002A62  0E00               	movlw	0
  6178  002A64  2214               	addwfc	___ftpack@arg+1,f,c
  6179  002A66  0E00               	movlw	0
  6180  002A68  2215               	addwfc	___ftpack@arg+2,f,c
  6181  002A6A  90D8               	bcf	status,0,c
  6182  002A6C  3215               	rrcf	___ftpack@arg+2,f,c
  6183  002A6E  3214               	rrcf	___ftpack@arg+1,f,c
  6184  002A70  3213               	rrcf	___ftpack@arg,f,c
  6185  002A72                     l2855:
  6186  002A72  0E00               	movlw	0
  6187  002A74  1413               	andwf	___ftpack@arg,w,c
  6188  002A76  6E18               	movwf	??___ftpack& (0+255),c
  6189  002A78  0E00               	movlw	0
  6190  002A7A  1414               	andwf	___ftpack@arg+1,w,c
  6191  002A7C  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6192  002A7E  0EFF               	movlw	255
  6193  002A80  1415               	andwf	___ftpack@arg+2,w,c
  6194  002A82  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6195  002A84  5018               	movf	??___ftpack,w,c
  6196  002A86  1019               	iorwf	??___ftpack+1,w,c
  6197  002A88  101A               	iorwf	??___ftpack+2,w,c
  6198  002A8A  B4D8               	btfsc	status,2,c
  6199  002A8C  D006               	goto	l2859
  6200  002A8E  D7E6               	goto	l2851
  6201  002A90                     l2857:
  6202  002A90  0616               	decf	___ftpack@exp,f,c
  6203  002A92  90D8               	bcf	status,0,c
  6204  002A94  3613               	rlcf	___ftpack@arg,f,c
  6205  002A96  3614               	rlcf	___ftpack@arg+1,f,c
  6206  002A98  3615               	rlcf	___ftpack@arg+2,f,c
  6207  002A9A                     l2859:
  6208  002A9A  BE14               	btfsc	___ftpack@arg+1,7,c
  6209  002A9C  D003               	goto	l534
  6210  002A9E  0E02               	movlw	2
  6211  002AA0  6016               	cpfslt	___ftpack@exp,c
  6212  002AA2  D7F6               	goto	l2857
  6213  002AA4                     l534:
  6214  002AA4  A016               	btfss	___ftpack@exp,0,c
  6215  002AA6  9E14               	bcf	___ftpack@arg+1,7,c
  6216  002AA8  90D8               	bcf	status,0,c
  6217  002AAA  3216               	rrcf	___ftpack@exp,f,c
  6218  002AAC  5016               	movf	___ftpack@exp,w,c
  6219  002AAE  1215               	iorwf	___ftpack@arg+2,f,c
  6220  002AB0  5017               	movf	___ftpack@sign,w,c
  6221  002AB2  A4D8               	btfss	status,2,c
  6222  002AB4  8E15               	bsf	___ftpack@arg+2,7,c
  6223  002AB6  C013  F013         	movff	___ftpack@arg,?___ftpack
  6224  002ABA  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  6225  002ABE  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  6226  002AC2  0012               	return	
  6227  002AC4                     __end_of___ftpack:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           intcon	equ	0xFF2
  6236                           postinc0	equ	0xFEE
  6237                           wreg	equ	0xFE8
  6238                           postdec1	equ	0xFE5
  6239                           fsr1l	equ	0xFE1
  6240                           postinc2	equ	0xFDE
  6241                           postdec2	equ	0xFDD
  6242                           plusw2	equ	0xFDB
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function _LCDinit *****************
  6248 ;; Defined at:
  6249 ;;		line 60 in file "lcd.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6267 ;;Total ram usage:        1 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    2
  6270 ;; This function calls:
  6271 ;;		_LCDcheckBF
  6272 ;;		_LCDcmd
  6273 ;; This function is called by:
  6274 ;;		_main
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text24
  6279  002950                     __ptext24:
  6280                           	opt stack 0
  6281  002950                     _LCDinit:
  6282                           	opt stack 28
  6283                           
  6284                           ;lcd.c: 63: TRISA = 0;
  6285                           
  6286                           ;incstack = 0
  6287  002950  0E00               	movlw	0
  6288  002952  6E92               	movwf	3986,c	;volatile
  6289                           
  6290                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  6291  002954  9096               	bcf	3990,0,c	;volatile
  6292                           
  6293                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  6294  002956  9296               	bcf	3990,1,c	;volatile
  6295                           
  6296                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  6297  002958  9496               	bcf	3990,2,c	;volatile
  6298                           
  6299                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  6300  00295A  908D               	bcf	3981,0,c	;volatile
  6301                           
  6302                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  6303  00295C  928D               	bcf	3981,1,c	;volatile
  6304                           
  6305                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  6306  00295E  848D               	bsf	3981,2,c	;volatile
  6307                           
  6308                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  6309  002960  0E21               	movlw	33
  6310  002962  6E14               	movwf	??_LCDinit& (0+255),c
  6311  002964  0E76               	movlw	118
  6312  002966                     u3377:
  6313  002966  2EE8               	decfsz	wreg,f,c
  6314  002968  D7FE               	goto	u3377
  6315  00296A  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6316  00296C  D7FC               	goto	u3377
  6317  00296E  D000               	nop2	
  6318                           
  6319                           ;lcd.c: 74: LCDcmd(0b00110000);
  6320  002970  0E30               	movlw	48
  6321  002972  ECB1  F017         	call	_LCDcmd
  6322                           
  6323                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  6324  002976  0E27               	movlw	39
  6325  002978  6E14               	movwf	??_LCDinit& (0+255),c
  6326  00297A  0EF5               	movlw	245
  6327  00297C                     u3387:
  6328  00297C  2EE8               	decfsz	wreg,f,c
  6329  00297E  D7FE               	goto	u3387
  6330  002980  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6331  002982  D7FC               	goto	u3387
  6332  002984  F000               	nop	
  6333                           
  6334                           ;lcd.c: 76: LCDcmd(0b00110000);
  6335  002986  0E30               	movlw	48
  6336  002988  ECB1  F017         	call	_LCDcmd
  6337                           
  6338                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  6339  00298C  0E27               	movlw	39
  6340  00298E  6E14               	movwf	??_LCDinit& (0+255),c
  6341  002990  0EF5               	movlw	245
  6342  002992                     u3397:
  6343  002992  2EE8               	decfsz	wreg,f,c
  6344  002994  D7FE               	goto	u3397
  6345  002996  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6346  002998  D7FC               	goto	u3397
  6347  00299A  F000               	nop	
  6348                           
  6349                           ;lcd.c: 78: LCDcmd(0b00110000);
  6350  00299C  0E30               	movlw	48
  6351  00299E  ECB1  F017         	call	_LCDcmd
  6352                           
  6353                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  6354  0029A2  0E27               	movlw	39
  6355  0029A4  6E14               	movwf	??_LCDinit& (0+255),c
  6356  0029A6  0EF5               	movlw	245
  6357  0029A8                     u3407:
  6358  0029A8  2EE8               	decfsz	wreg,f,c
  6359  0029AA  D7FE               	goto	u3407
  6360  0029AC  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6361  0029AE  D7FC               	goto	u3407
  6362  0029B0  F000               	nop	
  6363                           
  6364                           ;lcd.c: 80: LCDcmd(0b00111000);
  6365  0029B2  0E38               	movlw	56
  6366  0029B4  ECB1  F017         	call	_LCDcmd
  6367                           
  6368                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  6369  0029B8  0E27               	movlw	39
  6370  0029BA  6E14               	movwf	??_LCDinit& (0+255),c
  6371  0029BC  0EF5               	movlw	245
  6372  0029BE                     u3417:
  6373  0029BE  2EE8               	decfsz	wreg,f,c
  6374  0029C0  D7FE               	goto	u3417
  6375  0029C2  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6376  0029C4  D7FC               	goto	u3417
  6377  0029C6  F000               	nop	
  6378                           
  6379                           ;lcd.c: 82: LCDcmd(0b00001000);
  6380  0029C8  0E08               	movlw	8
  6381  0029CA  ECB1  F017         	call	_LCDcmd
  6382                           
  6383                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  6384  0029CE  0E27               	movlw	39
  6385  0029D0  6E14               	movwf	??_LCDinit& (0+255),c
  6386  0029D2  0EF5               	movlw	245
  6387  0029D4                     u3427:
  6388  0029D4  2EE8               	decfsz	wreg,f,c
  6389  0029D6  D7FE               	goto	u3427
  6390  0029D8  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6391  0029DA  D7FC               	goto	u3427
  6392  0029DC  F000               	nop	
  6393                           
  6394                           ;lcd.c: 84: LCDcmd(0b00000001);
  6395  0029DE  0E01               	movlw	1
  6396  0029E0  ECB1  F017         	call	_LCDcmd
  6397                           
  6398                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  6399  0029E4  0E27               	movlw	39
  6400  0029E6  6E14               	movwf	??_LCDinit& (0+255),c
  6401  0029E8  0EF5               	movlw	245
  6402  0029EA                     u3437:
  6403  0029EA  2EE8               	decfsz	wreg,f,c
  6404  0029EC  D7FE               	goto	u3437
  6405  0029EE  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6406  0029F0  D7FC               	goto	u3437
  6407  0029F2  F000               	nop	
  6408                           
  6409                           ;lcd.c: 86: LCDcmd(0b00000110);
  6410  0029F4  0E06               	movlw	6
  6411  0029F6  ECB1  F017         	call	_LCDcmd
  6412                           
  6413                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  6414  0029FA  0E27               	movlw	39
  6415  0029FC  6E14               	movwf	??_LCDinit& (0+255),c
  6416  0029FE  0EF5               	movlw	245
  6417  002A00                     u3447:
  6418  002A00  2EE8               	decfsz	wreg,f,c
  6419  002A02  D7FE               	goto	u3447
  6420  002A04  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6421  002A06  D7FC               	goto	u3447
  6422  002A08  F000               	nop	
  6423                           
  6424                           ;lcd.c: 90: LCDcmd(0b00001111);
  6425  002A0A  0E0F               	movlw	15
  6426  002A0C  ECB1  F017         	call	_LCDcmd
  6427                           
  6428                           ;lcd.c: 91: LCDcheckBF();
  6429  002A10  EC8E  F017         	call	_LCDcheckBF	;wreg free
  6430  002A14  0012               	return		;funcret
  6431  002A16                     __end_of_LCDinit:
  6432                           	opt stack 0
  6433                           tblptru	equ	0xFF8
  6434                           tblptrh	equ	0xFF7
  6435                           tblptrl	equ	0xFF6
  6436                           tablat	equ	0xFF5
  6437                           prodh	equ	0xFF4
  6438                           prodl	equ	0xFF3
  6439                           intcon	equ	0xFF2
  6440                           postinc0	equ	0xFEE
  6441                           wreg	equ	0xFE8
  6442                           postdec1	equ	0xFE5
  6443                           fsr1l	equ	0xFE1
  6444                           postinc2	equ	0xFDE
  6445                           postdec2	equ	0xFDD
  6446                           plusw2	equ	0xFDB
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function _LCDgotoLineTwo *****************
  6452 ;; Defined at:
  6453 ;;		line 142 in file "lcd.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;		None
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;		None
  6458 ;; Return value:  Size  Location     Type
  6459 ;;                  1    wreg      void 
  6460 ;; Registers used:
  6461 ;;		wreg, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;Total ram usage:        0 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:    2
  6474 ;; This function calls:
  6475 ;;		_LCDcheckBF
  6476 ;;		_LCDcmd
  6477 ;; This function is called by:
  6478 ;;		_main
  6479 ;;		_LCDputs
  6480 ;;		_LCDwriteLineTwo
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text25
  6485  002F42                     __ptext25:
  6486                           	opt stack 0
  6487  002F42                     _LCDgotoLineTwo:
  6488                           	opt stack 28
  6489                           
  6490                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  6491                           
  6492                           ;incstack = 0
  6493  002F42  908D               	bcf	3981,0,c	;volatile
  6494                           
  6495                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  6496  002F44  928D               	bcf	3981,1,c	;volatile
  6497                           
  6498                           ;lcd.c: 146: LCDcmd(0b11000000);
  6499  002F46  0EC0               	movlw	192
  6500  002F48  ECB1  F017         	call	_LCDcmd
  6501                           
  6502                           ;lcd.c: 147: LCDcheckBF();
  6503  002F4C  EC8E  F017         	call	_LCDcheckBF	;wreg free
  6504  002F50  0012               	return		;funcret
  6505  002F52                     __end_of_LCDgotoLineTwo:
  6506                           	opt stack 0
  6507                           tblptru	equ	0xFF8
  6508                           tblptrh	equ	0xFF7
  6509                           tblptrl	equ	0xFF6
  6510                           tablat	equ	0xFF5
  6511                           prodh	equ	0xFF4
  6512                           prodl	equ	0xFF3
  6513                           intcon	equ	0xFF2
  6514                           postinc0	equ	0xFEE
  6515                           wreg	equ	0xFE8
  6516                           postdec1	equ	0xFE5
  6517                           fsr1l	equ	0xFE1
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           plusw2	equ	0xFDB
  6521                           fsr2h	equ	0xFDA
  6522                           fsr2l	equ	0xFD9
  6523                           status	equ	0xFD8
  6524                           
  6525 ;; *************** function _LCDclear *****************
  6526 ;; Defined at:
  6527 ;;		line 126 in file "lcd.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;		None
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  1    wreg      void 
  6534 ;; Registers used:
  6535 ;;		wreg, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;Total ram usage:        0 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    2
  6548 ;; This function calls:
  6549 ;;		_LCDcheckBF
  6550 ;;		_LCDcmd
  6551 ;; This function is called by:
  6552 ;;		_main
  6553 ;;		_LCDputs
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text26
  6558  002F52                     __ptext26:
  6559                           	opt stack 0
  6560  002F52                     _LCDclear:
  6561                           	opt stack 28
  6562                           
  6563                           ;lcd.c: 128: LATEbits.LATE0 = 0;
  6564                           
  6565                           ;incstack = 0
  6566  002F52  908D               	bcf	3981,0,c	;volatile
  6567                           
  6568                           ;lcd.c: 129: LATEbits.LATE1 = 0;
  6569  002F54  928D               	bcf	3981,1,c	;volatile
  6570                           
  6571                           ;lcd.c: 130: LCDcmd(0b00000001);
  6572  002F56  0E01               	movlw	1
  6573  002F58  ECB1  F017         	call	_LCDcmd
  6574                           
  6575                           ;lcd.c: 131: LCDcheckBF();
  6576  002F5C  EC8E  F017         	call	_LCDcheckBF	;wreg free
  6577  002F60  0012               	return		;funcret
  6578  002F62                     __end_of_LCDclear:
  6579                           	opt stack 0
  6580                           tblptru	equ	0xFF8
  6581                           tblptrh	equ	0xFF7
  6582                           tblptrl	equ	0xFF6
  6583                           tablat	equ	0xFF5
  6584                           prodh	equ	0xFF4
  6585                           prodl	equ	0xFF3
  6586                           intcon	equ	0xFF2
  6587                           postinc0	equ	0xFEE
  6588                           wreg	equ	0xFE8
  6589                           postdec1	equ	0xFE5
  6590                           fsr1l	equ	0xFE1
  6591                           postinc2	equ	0xFDE
  6592                           postdec2	equ	0xFDD
  6593                           plusw2	equ	0xFDB
  6594                           fsr2h	equ	0xFDA
  6595                           fsr2l	equ	0xFD9
  6596                           status	equ	0xFD8
  6597                           
  6598 ;; *************** function _LCDcmd *****************
  6599 ;; Defined at:
  6600 ;;		line 94 in file "lcd.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  command         1    wreg     unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  command         1   18[COMRAM] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      void 
  6607 ;; Registers used:
  6608 ;;		wreg
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;Total ram usage:        1 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    1
  6621 ;; This function calls:
  6622 ;;		Nothing
  6623 ;; This function is called by:
  6624 ;;		_LCDinit
  6625 ;;		_LCDwrite
  6626 ;;		_LCDclear
  6627 ;;		_LCDgotoLineTwo
  6628 ;;		_LCDgotoLineOne
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text27
  6633  002F62                     __ptext27:
  6634                           	opt stack 0
  6635  002F62                     _LCDcmd:
  6636                           	opt stack 26
  6637                           
  6638                           ;incstack = 0
  6639                           ;LCDcmd@command stored from wreg
  6640  002F62  6E13               	movwf	LCDcmd@command,c
  6641                           
  6642                           ;lcd.c: 96: LATA = command;
  6643  002F64  C013  FF89         	movff	LCDcmd@command,3977	;volatile
  6644                           
  6645                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  6646  002F68  948D               	bcf	3981,2,c	;volatile
  6647                           
  6648                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  6649  002F6A  848D               	bsf	3981,2,c	;volatile
  6650  002F6C  0012               	return		;funcret
  6651  002F6E                     __end_of_LCDcmd:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1l	equ	0xFE1
  6664                           postinc2	equ	0xFDE
  6665                           postdec2	equ	0xFDD
  6666                           plusw2	equ	0xFDB
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _LCDcheckBF *****************
  6672 ;; Defined at:
  6673 ;;		line 101 in file "lcd.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      void 
  6680 ;; Registers used:
  6681 ;;		None
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;Total ram usage:        0 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    1
  6694 ;; This function calls:
  6695 ;;		Nothing
  6696 ;; This function is called by:
  6697 ;;		_LCDinit
  6698 ;;		_LCDwrite
  6699 ;;		_LCDclear
  6700 ;;		_LCDgotoLineTwo
  6701 ;;		_LCDgotoLineOne
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text28
  6706  002F1C                     __ptext28:
  6707                           	opt stack 0
  6708  002F1C                     _LCDcheckBF:
  6709                           	opt stack 26
  6710                           
  6711                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  6712                           
  6713                           ;incstack = 0
  6714  002F1C  8E92               	bsf	3986,7,c	;volatile
  6715                           
  6716                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  6717  002F1E  908D               	bcf	3981,0,c	;volatile
  6718                           
  6719                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  6720  002F20  828D               	bsf	3981,1,c	;volatile
  6721  002F22                     l235:
  6722                           
  6723                           ;lcd.c: 110: {
  6724                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  6725  002F22  948D               	bcf	3981,2,c	;volatile
  6726                           
  6727                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  6728  002F24  848D               	bsf	3981,2,c	;volatile
  6729  002F26  BE80               	btfsc	3968,7,c	;volatile
  6730  002F28  D7FC               	goto	l235
  6731                           
  6732                           ;lcd.c: 113: }
  6733                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  6734  002F2A  848D               	bsf	3981,2,c	;volatile
  6735                           
  6736                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  6737  002F2C  9E92               	bcf	3986,7,c	;volatile
  6738  002F2E  0012               	return		;funcret
  6739  002F30                     __end_of_LCDcheckBF:
  6740                           	opt stack 0
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           intcon	equ	0xFF2
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           postdec1	equ	0xFE5
  6751                           fsr1l	equ	0xFE1
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           plusw2	equ	0xFDB
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _ISR *****************
  6760 ;; Defined at:
  6761 ;;		line 263 in file "main.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  dummy           1   17[COMRAM] unsigned char 
  6766 ;;  dummy           1   16[COMRAM] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      void 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;Total ram usage:       18 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; This function calls:
  6783 ;;		Nothing
  6784 ;; This function is called by:
  6785 ;;		Interrupt level 2
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	intcode
  6790  000008                     __pintcode:
  6791                           	opt stack 0
  6792  000008                     _ISR:
  6793                           	opt stack 25
  6794                           
  6795                           ;incstack = 0
  6796  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6797  00000A  CFFA F003          	movff	pclath,??_ISR+2
  6798  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  6799  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  6800  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  6801  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  6802  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  6803  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  6804  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  6805  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  6806  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  6807  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  6808  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  6809  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  6810  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  6811                           
  6812                           ;main.c: 266: if (CCP2IE && CCP2IF)
  6813  000042  B0A0               	btfsc	4000,0,c	;volatile
  6814  000044  A0A1               	btfss	4001,0,c	;volatile
  6815  000046  D01E               	goto	i2l152
  6816                           
  6817                           ;main.c: 267: {
  6818                           ;main.c: 269: if(LATDbits.LATD1 == 1)
  6819  000048  A28C               	btfss	3980,1,c	;volatile
  6820  00004A  D010               	goto	i2l153
  6821                           
  6822                           ;main.c: 270: {
  6823                           ;main.c: 271: LATDbits.LATD1 = 0;
  6824  00004C  928C               	bcf	3980,1,c	;volatile
  6825                           
  6826                           ;main.c: 272: CCPR2 = 8000 - CCPR2;
  6827  00004E  CF67 F001          	movff	3943,??_ISR	;volatile
  6828  000052  CF68 F002          	movff	3944,??_ISR+1	;volatile
  6829  000056  1E01               	comf	??_ISR,f,c
  6830  000058  1E02               	comf	??_ISR+1,f,c
  6831  00005A  4A01               	infsnz	??_ISR,f,c
  6832  00005C  2A02               	incf	??_ISR+1,f,c
  6833  00005E  0E40               	movlw	64
  6834  000060  2401               	addwf	??_ISR,w,c
  6835  000062  6E67               	movwf	3943,c	;volatile
  6836  000064  0E1F               	movlw	31
  6837  000066  2002               	addwfc	??_ISR+1,w,c
  6838  000068  6E68               	movwf	3944,c	;volatile
  6839                           
  6840                           ;main.c: 273: }
  6841  00006A  D005               	goto	i2l2755
  6842  00006C                     i2l153:
  6843                           
  6844                           ;main.c: 274: else
  6845                           ;main.c: 275: {
  6846                           ;main.c: 276: LATDbits.LATD1 = 1;
  6847  00006C  828C               	bsf	3980,1,c	;volatile
  6848                           
  6849                           ;main.c: 277: CCPR2 = leftWheelCommandedPW;
  6850  00006E  C046  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  6851  000072  C047  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  6852  000076                     i2l2755:
  6853                           
  6854                           ;main.c: 278: }
  6855                           ;main.c: 279: TMR5 = 0;
  6856  000076  0E00               	movlw	0
  6857  000078  010F               	movlb	15	; () banked
  6858  00007A  6F50               	movwf	80,b	;volatile
  6859  00007C  0E00               	movlw	0
  6860  00007E  6F4F               	movwf	79,b	;volatile
  6861                           
  6862                           ; BSR set to: 15
  6863                           ;main.c: 280: CCP2IF = 0;
  6864  000080  90A1               	bcf	4001,0,c	;volatile
  6865                           
  6866                           ; BSR set to: 15
  6867                           ;main.c: 281: return;
  6868  000082  D047               	goto	i2l155
  6869  000084                     i2l152:
  6870                           
  6871                           ;main.c: 282: }
  6872                           ;main.c: 286: if (CCP3IE && CCP3IF)
  6873  000084  B07A               	btfsc	3962,0,c	;volatile
  6874  000086  A07B               	btfss	3963,0,c	;volatile
  6875  000088  D01F               	goto	i2l156
  6876                           
  6877                           ;main.c: 287: {
  6878                           ;main.c: 289: if(LATDbits.LATD0 == 1)
  6879  00008A  A08C               	btfss	3980,0,c	;volatile
  6880  00008C  D012               	goto	i2l157
  6881                           
  6882                           ;main.c: 290: {
  6883                           ;main.c: 291: LATDbits.LATD0 = 0;
  6884  00008E  908C               	bcf	3980,0,c	;volatile
  6885                           
  6886                           ;main.c: 292: CCPR3 = 8000 - CCPR3;
  6887  000090  CF5E F001          	movff	3934,??_ISR	;volatile
  6888  000094  CF5F F002          	movff	3935,??_ISR+1	;volatile
  6889  000098  1E01               	comf	??_ISR,f,c
  6890  00009A  1E02               	comf	??_ISR+1,f,c
  6891  00009C  4A01               	infsnz	??_ISR,f,c
  6892  00009E  2A02               	incf	??_ISR+1,f,c
  6893  0000A0  0E40               	movlw	64
  6894  0000A2  2401               	addwf	??_ISR,w,c
  6895  0000A4  010F               	movlb	15	; () banked
  6896  0000A6  6F5E               	movwf	94,b	;volatile
  6897  0000A8  0E1F               	movlw	31
  6898  0000AA  2002               	addwfc	??_ISR+1,w,c
  6899  0000AC  010F               	movlb	15	; () banked
  6900  0000AE  6F5F               	movwf	95,b	;volatile
  6901                           
  6902                           ;main.c: 293: }
  6903  0000B0  D005               	goto	i2l158
  6904  0000B2                     i2l157:
  6905                           
  6906                           ;main.c: 294: else
  6907                           ;main.c: 295: {
  6908                           ;main.c: 296: LATDbits.LATD0 = 1;
  6909  0000B2  808C               	bsf	3980,0,c	;volatile
  6910                           
  6911                           ;main.c: 297: CCPR3 = rightWheelCommandedPW;
  6912  0000B4  C048  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  6913  0000B8  C049  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  6914  0000BC                     i2l158:
  6915                           
  6916                           ;main.c: 298: }
  6917                           ;main.c: 299: CCP3IF = 0;
  6918  0000BC  907B               	bcf	3963,0,c	;volatile
  6919                           
  6920                           ;main.c: 300: TMR1 = 0;
  6921  0000BE  0E00               	movlw	0
  6922  0000C0  6ECF               	movwf	4047,c	;volatile
  6923  0000C2  0E00               	movlw	0
  6924  0000C4  6ECE               	movwf	4046,c	;volatile
  6925                           
  6926                           ;main.c: 302: return;
  6927  0000C6  D025               	goto	i2l155
  6928  0000C8                     i2l156:
  6929                           
  6930                           ;main.c: 305: }
  6931                           ;main.c: 310: if(C1IF && C1IE)
  6932  0000C8  BCA1               	btfsc	4001,6,c	;volatile
  6933  0000CA  ACA0               	btfss	4000,6,c	;volatile
  6934  0000CC  D00A               	goto	i2l2781
  6935                           
  6936                           ;main.c: 311: {
  6937                           ;main.c: 312: leftWheelCount++;
  6938  0000CE  0E01               	movlw	1
  6939  0000D0  0100               	movlb	0	; () banked
  6940  0000D2  27A5               	addwf	_leftWheelCount& (0+255),f,b
  6941  0000D4  0E00               	movlw	0
  6942  0000D6  23A6               	addwfc	(_leftWheelCount+1)& (0+255),f,b
  6943  0000D8  23A7               	addwfc	(_leftWheelCount+2)& (0+255),f,b
  6944  0000DA  23A8               	addwfc	(_leftWheelCount+3)& (0+255),f,b
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;main.c: 313: char dummy = CM1CON0;
  6948  0000DC  CF79 F011          	movff	3961,ISR@dummy	;volatile
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;main.c: 314: C1IF = 0;
  6952  0000E0  9CA1               	bcf	4001,6,c	;volatile
  6953  0000E2                     i2l2781:
  6954                           
  6955                           ;main.c: 315: }
  6956                           ;main.c: 316: if(C2IF && C2IE)
  6957  0000E2  BAA1               	btfsc	4001,5,c	;volatile
  6958  0000E4  AAA0               	btfss	4000,5,c	;volatile
  6959  0000E6  D00A               	goto	i2l2791
  6960                           
  6961                           ;main.c: 317: {
  6962                           ;main.c: 318: rightWheelCount++;
  6963  0000E8  0E01               	movlw	1
  6964  0000EA  0100               	movlb	0	; () banked
  6965  0000EC  27A9               	addwf	_rightWheelCount& (0+255),f,b
  6966  0000EE  0E00               	movlw	0
  6967  0000F0  23AA               	addwfc	(_rightWheelCount+1)& (0+255),f,b
  6968  0000F2  23AB               	addwfc	(_rightWheelCount+2)& (0+255),f,b
  6969  0000F4  23AC               	addwfc	(_rightWheelCount+3)& (0+255),f,b
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;main.c: 320: char dummy = CM2CON0;
  6973  0000F6  CF78 F012          	movff	3960,ISR@dummy_1014	;volatile
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;main.c: 321: C2IF = 0;
  6977  0000FA  9AA1               	bcf	4001,5,c	;volatile
  6978  0000FC                     i2l2791:
  6979                           
  6980                           ;main.c: 322: }
  6981                           ;main.c: 327: if (TMR2IE && TMR2IF)
  6982  0000FC  B29D               	btfsc	3997,1,c	;volatile
  6983  0000FE  A29E               	btfss	3998,1,c	;volatile
  6984  000100  D008               	goto	i2l155
  6985                           
  6986                           ;main.c: 328: {
  6987                           ;main.c: 329: elapsedMillis++;
  6988  000102  0E01               	movlw	1
  6989  000104  0100               	movlb	0	; () banked
  6990  000106  27A1               	addwf	_elapsedMillis& (0+255),f,b
  6991  000108  0E00               	movlw	0
  6992  00010A  23A2               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  6993  00010C  23A3               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  6994  00010E  23A4               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;main.c: 330: PIR1bits.TMR2IF = 0;
  6998  000110  929E               	bcf	3998,1,c	;volatile
  6999  000112                     i2l155:
  7000  000112  C010  FFF5         	movff	??_ISR+15,tablat
  7001  000116  C00F  FFF8         	movff	??_ISR+14,tblptru
  7002  00011A  C00E  FFF7         	movff	??_ISR+13,tblptrh
  7003  00011E  C00D  FFF6         	movff	??_ISR+12,tblptrl
  7004  000122  C00C  FFF4         	movff	??_ISR+11,prodh
  7005  000126  C00B  FFF3         	movff	??_ISR+10,prodl
  7006  00012A  C00A  FFDA         	movff	??_ISR+9,fsr2h
  7007  00012E  C009  FFD9         	movff	??_ISR+8,fsr2l
  7008  000132  C008  FFE2         	movff	??_ISR+7,fsr1h
  7009  000136  C007  FFE1         	movff	??_ISR+6,fsr1l
  7010  00013A  C006  FFEA         	movff	??_ISR+5,fsr0h
  7011  00013E  C005  FFE9         	movff	??_ISR+4,fsr0l
  7012  000142  C004  FFFB         	movff	??_ISR+3,pclatu
  7013  000146  C003  FFFA         	movff	??_ISR+2,pclath
  7014  00014A  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7015  00014C  0011               	retfie		f
  7016  00014E                     __end_of_ISR:
  7017                           	opt stack 0
  7018                           pclatu	equ	0xFFB
  7019                           pclath	equ	0xFFA
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           postinc0	equ	0xFEE
  7028                           fsr0h	equ	0xFEA
  7029                           fsr0l	equ	0xFE9
  7030                           wreg	equ	0xFE8
  7031                           postdec1	equ	0xFE5
  7032                           fsr1h	equ	0xFE2
  7033                           fsr1l	equ	0xFE1
  7034                           postinc2	equ	0xFDE
  7035                           postdec2	equ	0xFDD
  7036                           plusw2	equ	0xFDB
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           pclatu	equ	0xFFB
  7041                           pclath	equ	0xFFA
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon	equ	0xFF2
  7049                           postinc0	equ	0xFEE
  7050                           fsr0h	equ	0xFEA
  7051                           fsr0l	equ	0xFE9
  7052                           wreg	equ	0xFE8
  7053                           postdec1	equ	0xFE5
  7054                           fsr1h	equ	0xFE2
  7055                           fsr1l	equ	0xFE1
  7056                           postinc2	equ	0xFDE
  7057                           postdec2	equ	0xFDD
  7058                           plusw2	equ	0xFDB
  7059                           fsr2h	equ	0xFDA
  7060                           fsr2l	equ	0xFD9
  7061                           status	equ	0xFD8
  7062                           
  7063                           	psect	rparam
  7064  0000                     pclatu	equ	0xFFB
  7065                           pclath	equ	0xFFA
  7066                           tblptru	equ	0xFF8
  7067                           tblptrh	equ	0xFF7
  7068                           tblptrl	equ	0xFF6
  7069                           tablat	equ	0xFF5
  7070                           prodh	equ	0xFF4
  7071                           prodl	equ	0xFF3
  7072                           intcon	equ	0xFF2
  7073                           postinc0	equ	0xFEE
  7074                           fsr0h	equ	0xFEA
  7075                           fsr0l	equ	0xFE9
  7076                           wreg	equ	0xFE8
  7077                           postdec1	equ	0xFE5
  7078                           fsr1h	equ	0xFE2
  7079                           fsr1l	equ	0xFE1
  7080                           postinc2	equ	0xFDE
  7081                           postdec2	equ	0xFDD
  7082                           plusw2	equ	0xFDB
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087                           	psect	temp
  7088  00004C                     btemp:
  7089                           	opt stack 0
  7090  00004C                     	ds	1
  7091  0000                     int$flags	set	btemp
  7092                           pclatu	equ	0xFFB
  7093                           pclath	equ	0xFFA
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           postinc0	equ	0xFEE
  7102                           fsr0h	equ	0xFEA
  7103                           fsr0l	equ	0xFE9
  7104                           wreg	equ	0xFE8
  7105                           postdec1	equ	0xFE5
  7106                           fsr1h	equ	0xFE2
  7107                           fsr1l	equ	0xFE1
  7108                           postinc2	equ	0xFDE
  7109                           postdec2	equ	0xFDD
  7110                           plusw2	equ	0xFDB
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    10
    Data        8
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      75
    BANK0           160     65      88
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[8]), STR_3(CODE[8]), STR_2(CODE[10]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@speedCompensation	PTR int  size(2) Largest target is 2
		 -> speedCompensation(BANK0[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@rightWheelCommandedSpeed(BANK0[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@leftWheelCommandedSpeed(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->___fttol
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    _excerciseControl->___fttol
    _sqrt->___ftsub
    ___ftsub->___ftadd
    ___ftadd->___lltoft
    ___ftmul->___lltoft
    ___lltoft->___ftpack
    ___fttol->___ftdiv
    ___awtoft->___ftpack
    ___ftdiv->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd
    _LCDclear->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_excerciseControl
    _excerciseControl->___fttol
    ___fttol->_sqrt

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   48252
                                             41 BANK0     24    24      0
                           _LCDclear
                     _LCDgotoLineTwo
                            _LCDinit
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
               _configureComparators
                    _configureTimers
                   _excerciseControl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              28    22      6    1890
                                             30 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             20 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _excerciseControl                                    32    32      0   34319
                                             24 BANK0     17    17      0
                           ___awtoft
                            ___ftadd
                            ___ftsub
                            ___fttol
                            ___llmod
                           ___lltoft
                   _limitWheelSpeeds
                               _sqrt
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (2) _wheelVelocity                                        7     3      4    3438
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   11191
                                             53 COMRAM     6     3      3
                                              0 BANK0     13    13      0
                             ___ftge
                            ___ftmul
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5613
                                             47 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4787
                                             35 COMRAM    12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4204
                                             35 COMRAM    15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     352
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _limitWheelSpeeds                                     8     2      6     840
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3396
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     287
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     764
                                             65 COMRAM     4     0      4
                                             13 BANK0     11    11      0
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3119
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _configureTimers                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureComparators                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3366
                                             50 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2524
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDclear                                             0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 18    18      0       2
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDcheckBF
     _LCDcmd
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftsub (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
     _sqrt (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
   ___lltoft
     ___ftpack
   _configureComparators
   _configureTimers
   _excerciseControl
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _sqrt (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
     ___llmod
     ___lltoft
       ___ftpack
     _limitWheelSpeeds
     _sqrt
       ___ftge
       ___ftmul
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     _wheelVelocity
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      58       5       55.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4B       1       79.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3      12        0.0%
DATA                 0      0      A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Apr 23 14:55:20 2016

                     ___wmul@multiplicand 0015                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                     _excerciseControl$2011 0083  
                   _excerciseControl$2012 0086                     _excerciseControl$2013 007C  
                            ___ftadd@exp1 002F                              ___ftadd@exp2 002E  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 002D  
                                     l235 2F22                                       l147 2D40  
                                     l191 18FA                                       l534 2AA4  
                                     l561 2268                                       l572 2318  
                                     l581 2334                                       l557 223E  
                                     l717 2E14                                       l727 2E56  
                                     l592 291E                                       l674 2C50  
                                     l864 23E0                                       l865 23D2  
                            __CFG_CPB$OFF 000000                                       _PR2 000FBB  
                            __CFG_CPD$OFF 000000                                       _ISR 0008  
                             ?_LCDcheckBF 0001                                       wreg 000FE8  
                                    ?_ISR 0001                              ___ftdiv@cntr 003C  
                            ___ftdiv@sign 0041                                      _C1IE 007D06  
                                    _C1IF 007D0E                                      l2101 26F4  
                                    _C2IE 007D05                                      _C2IF 007D0D  
                                    l2105 271E                                      l2221 263A  
                                    l2213 2610                                      l2109 274A  
                                    l3005 2B9C                                      l3101 132A  
                                    l2223 2644                                      l3015 2BF8  
                                    l2209 25FC                                      l3009 2BCC  
                                    l3121 13EC                                      l2227 2660  
                                    l2219 262A                                      l2243 2C42  
                                    l2235 2C0E                                      l3035 2440  
                                    l2163 2F14                                      l3061 2EB4  
                                    l2237 2C1A                                      l2093 269E  
                                    l3205 1BE6                                      l3125 1404  
                                    l3117 13D6                                      l3133 1464  
                                    l2501 21D8                                      l3223 28BA  
                                    l2191 257A                                      l2239 2C1E  
                                    l3151 1766                                      l3143 1522  
                                    l3135 1482                                      l3127 141A  
                                    l2263 2DE2                                      l2431 2014  
                                    l2503 21E0                                      l3217 2892  
                                    l2097 26C8                                      l3137 1498  
                                    l3209 1C04                                      l2265 2DEA  
                                    l3243 28F8                                      l3067 2CC6  
                                    l3147 1630                                      l3139 14D2  
                                    l2275 2E0A                                      l2267 2DEE  
                                    l2291 2E4C                                      l2283 2E2C  
                                    l2427 2004                                      l3069 2CD2  
                                    l3181 18BC                                      l3165 1826  
                                    l3173 1854                                      l3093 10E6  
                                    l3085 1084                                      l3077 1036  
                                    l2285 2E34                                      l2461 20EA  
                                    l2437 203C                                      l3191 1A56  
                                    l3079 104C                                      l2287 2E38  
                                    l2447 2098                                      l3271 1C94  
                                    l3185 1910                                      l3169 183C  
                                    l3097 11F4                                      l2473 2116  
                                    l2449 20BE                                      l3281 1D44  
                                    l3195 1B64                                      l3187 1948  
                                    l3179 189E                                      l2491 2178  
                                    l2483 2154                                      l2459 20E6  
                                    l2485 215C                                      l2911 22C8  
                                    l2495 218A                                      l2487 2164  
                                    l2479 2130                                      l3287 1DA4  
                                    l2913 22D2                                      l2905 22A6  
                                    l2497 2190                                      l2851 2A5C  
                                    l2843 2A26                                      l2931 2350  
                                    l2923 2306                                      l2915 22DC  
                                    l2941 2380                                      l2925 2310  
                                    l2917 22E4                                      l2855 2A72  
                                    l2847 2A34                                      l2951 279E  
                         __end_of_LCDinit 2A16                                      l2857 2A90  
                                    l2849 2A3E                                      l2859 2A9A  
                                    l2971 27F8                                      l2883 224C  
                                    l2981 2820                                      l2957 27C6  
                                    l2975 2808                                      l2985 2830  
                                    l2889 2276                                      l2997 2E76  
                                    STR_1 100B                                      STR_2 1016  
                                    STR_3 1020                                      STR_4 1028  
                                    u3100 1342                                      _LATA 000F89  
                                    u3110 135A                                      u3150 14E8  
                                    u3070 109A                                      u1720 268E  
                                    u1740 26E4                                      u3260 1B7E  
                                    u3180 177E                                      u3190 1796  
                                    u3407 29A8                                      u3271 287A  
                                    u2711 220A                                      u1760 273A  
                                    u3417 29BE                                      u2721 221E  
                                    u3427 29D4                                      u3291 28A2  
                                    u1851 2558                                      u3437 29EA  
                                    u3357 13F4                                      u1870 25A0  
                                    u3447 2A00                                      u3367 1844  
                                    u3377 2966                                      u2921 2786  
                                    u3387 297C                                      u1875 2596  
                                    u3397 2992                                      u2941 27AE  
                                    _TMR1 000FCE                                      _TMR5 000F4F  
                        ?_configureTimers 0001                                      _main 1C1E  
                            ___ftpack@arg 0013                              ___ftpack@exp 0016  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr0l 000FE9                                      fsr2h 000FDA  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 004C                                      _sqrt 23A6  
                           __CFG_BORV$190 000000                                      pclat 000FFA  
                         ??_wheelVelocity 0017                                      prodh 000FF4  
                                    prodl 000FF3                                      start 014E  
                           __CFG_IESO$OFF 000000                              ___ftmul@cntr 0031  
                            ___param_bank 000010                              ___ftmul@sign 0032  
                                   ??_ISR 0001                              ___fttol@exp1 0077  
                       excerciseControl@i 007F                              ___fttol@lval 0073  
                        __end_of_LCDclear 2F62                                     ?_main 0001  
                         __end_of___ftadd 23A6                                     _CCPR2 000F67  
                                   _CCPR3 000F5E                           __end_of___ftdiv 2950  
                                   ?_sqrt 0036                           __end_of___ftmul 286A  
                                   _T1CON 000FCD                           __end_of___llmod 2C62  
                         __end_of___ftsub 2EA0                           __end_of___fttol 2672  
                                   _T2CON 000FBA                                     _T5CON 000F4E  
                         __end_of___lwdiv 2E1E                           __end_of___lwmod 2E60  
                                   i2l152 0084                                     i2l153 006C  
                                   i2l155 0112                                     i2l156 00C8  
                                   i2l157 00B2                                     i2l158 00BC  
                        __end_of_LCDwrite 2F42                                     _TRISA 000F92  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0023                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                __end_of_limitWheelSpeeds 2776                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 001E  
                         __end_of_dpowers 100B                                     _event 00B1  
                                   _errno 004A                           __end_of_isdigit 2F1C  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0017  
                                   _putch 2F6E                                     tablat 000FF5  
                                   plusw2 000FDB                                     sqrt@a 0036  
                                   sqrt@i 0066                                     sqrt@q 0067  
                                   sqrt@x 006A                                     sqrt@z 0063  
                                   status 000FD8                            __CFG_HFOFST$ON 000000  
                     __size_of_LCDcheckBF 0014                           __initialization 2C62  
                            __end_of_main 1FFA                              __end_of_sqrt 2544  
                                  ??_main 0089                             ___fttol@sign1 0072  
                                  ??_sqrt 0039                             ISR@dummy_1014 0012  
                           __activetblptr 000002                                 ??_LCDinit 0014  
                     main@speedLastMillis 009D                        wheelVelocity@speed 0013  
                      wheelVelocity@wheel 0019              __end_of_configureComparators 2DCC  
                                  _CCP2IE 007D00                                    _CCP2IF 007D08  
                                  _CCP3IE 007BD0                                    _CCP3IF 007BD8  
                        ___llmod@dividend 0013                          __end_of___awtoft 2ED8  
                                  ?_putch 0001                                    _ANSELD 000F3B  
                        __end_of___ftpack 2AC4                          __end_of___lltoft 2D1C  
                          __CFG_WDTEN$OFF 000000                                    i2l2755 0076  
                                  i2l2781 00E2                                    i2l2791 00FC  
                                  _LCDcmd 2F62                                    _TMR2IE 007CE9  
                                  _TMR2IF 007CF1                                    _TMR1ON 007E68  
                                  _TMR5ON 007A70                         ?_excerciseControl 0001  
                          __CFG_PWRTEN$ON 000000                            __CFG_XINST$OFF 000000  
                      ??_excerciseControl 0078                              _CCPTMRS0bits 000F49  
                                  ___ftge 2B6C                                    ___wmul 2ED8  
                               ??___ftadd 002A                            __CFG_STVREN$ON 000000  
                               ??___ftdiv 0039                                 ??___ftmul 002A  
                               ??___llmod 001B                                 ??___ftsub 0036  
                               ??___fttol 006D                                 ??___lwdiv 0017  
                               ??___lwmod 001E                            _leftWheelCount 00A5  
                                  clear_0 2C68                                    _printf 1FFA  
                   ___ftmul@f3_as_product 002E                              __pdataCOMRAM 0046  
                               ??_isdigit 0013                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                                    sqrt@og 0060  
                   main@controlLastMillis 0091         limitWheelSpeeds@speedCompensation 0017  
                              __accesstop 0060                   __end_of__initialization 2CB2  
                         __CFG_PBADEN$OFF 000000                                ___ftadd@f1 0024  
                              ___ftadd@f2 0027                                ___ftge@ff1 0013  
                              ___ftge@ff2 0016                                 ?_LCDclear 0001  
                           ___rparam_used 000001                                ___ftdiv@f1 0033  
                              ___ftdiv@f2 0036                                ___ftdiv@f3 003D  
                              ___awtoft@c 001B                   __size_of_LCDgotoLineTwo 0010  
                               ?_LCDwrite 0001                                ___ftmul@f1 0024  
                              ___ftmul@f2 0027                                ___ftsub@f1 0030  
                              ___ftsub@f2 0033                                ___fttol@f1 0042  
                          __pcstackCOMRAM 0001                              __pidataBANK0 2F7C  
                              ___lltoft@c 001B                             __end_of_putch 2F78  
                            ??_LCDcheckBF 0013                                   ??_putch 0015  
                              __pbssBANK0 00A1                                   ?_LCDcmd 0001  
                   _rightWheelCommandedPW 0048                           __CFG_PLLCFG$OFF 000000  
                              ??_LCDclear 0014                                ??_LCDwrite 0014  
                      __end_of_LCDcheckBF 2F30                        __CFG_CCP2MX$PORTB3 000000  
                                 ?___ftge 0013            limitWheelSpeeds@leftWheelSpeed 0013  
                                 ?___wmul 0013                        __CFG_CCP3MX$PORTB5 000000  
                    main@leftCountTracker 0099                      _configureComparators 2D74  
                                 _CM1CON0 000F79                                   _CM2CON0 000F78  
                                 _CCP2CON 000F66                                   _CCP3CON 000F5D  
                               ?___awtoft 001B                                 ?___ftpack 0013  
                                 ?_printf 001F                                 ?___lltoft 001B  
                                 _LCDinit 2950                         ?_limitWheelSpeeds 0013  
                      ??_limitWheelSpeeds 0019                           __size_of_LCDcmd 000C  
                                 __Hparam 0000                     __end_of_wheelVelocity 2D74  
                                 __Lparam 0000                  __size_of_configureTimers 00A8  
                         __size_of___ftge 0090                                   ___ftadd 21FA  
                   ?_configureComparators 0001                                   ___ftdiv 286A  
                         __size_of___wmul 0026                                   ___ftmul 2776  
                                 ___llmod 2BFC                                   ___ftsub 2E60  
                                 ___fttol 2544                                   ___lwdiv 2DCC  
                                 ___lwmod 2E1E                              __psmallconst 1000  
                                 __pcinit 2C62                                ??___awtoft 001E  
                              ??___ftpack 0018                                   __ramtop 1000  
                              ??___lltoft 001F                                   __ptext0 1C1E  
                                 __ptext1 1FFA                                   __ptext2 2F6E  
                                 __ptext3 2F30                                   __ptext4 2EFE  
                                 __ptext5 2ED8                                   __ptext6 2E1E  
                                 __ptext7 2DCC                                   __ptext8 1032  
                                 __ptext9 2D1C                           __size_of_printf 0200  
                            __size_of_ISR 0146                                 _T1CONbits 000FCD  
                                 _dpowers 1001                                 _T2CONbits 000FBA  
                  excerciseControl@i_1028 0081                                   _isdigit 2EFE  
                               _T5CONbits 000F4E                      end_of_initialization 2CB2  
                           __Lmediumconst 0000                    _leftWheelMeasuredSpeed 00AD  
         limitWheelSpeeds@rightWheelSpeed 0015                            _LCDgotoLineTwo 2F42  
                                 printf@c 0031                                   printf@f 001F  
                       main@lcdLastMillis 0095                                   postdec1 000FE5  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                                 _PORTAbits 000F80  
               __size_of_excerciseControl 0BEC                                 _TRISAbits 000F92  
                               _TRISBbits 000F93                                 _TRISDbits 000F95  
                               _TRISEbits 000F96                             LCDcmd@command 0013  
                             _CM1CON0bits 000F79                    __end_of_LCDgotoLineTwo 2F52  
                             _CM2CON0bits 000F78                               _CM2CON1bits 000F77  
                             ___ftdiv@exp 0040                            __end_of_LCDcmd 2F6E  
                             printf@width 002F                               _CCP2CONbits 000F66  
                             _CCP3CONbits 000F5D                         __size_of_LCDclear 0010  
                             ___ftmul@exp 002D                    ??_configureComparators 0013  
                       __size_of_LCDwrite 0012                   _rightWheelMeasuredSpeed 00AF  
                    _leftWheelCommandedPW 0046                            __end_of___ftge 2BFC  
                          __end_of___wmul 2EFE                             __pidataCOMRAM 2F78  
                       ??_configureTimers 0013                            __end_of_printf 21FA  
                     start_initialization 2C62                               __end_of_ISR 014E  
                                ??_LCDcmd 0013                           ?_LCDgotoLineTwo 0001  
                         ___llmod@divisor 0017                           ___llmod@counter 001B  
                                ??___ftge 0019                                  ??___wmul 0017  
                             __pdataBANK0 00B4                           _rightWheelCount 00A9  
                                ??_printf 0025                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 004A                                  ?_LCDinit 0001  
                           __pcstackBANK0 0060                              _isdigit$1671 0014  
                                ISR@dummy 0011                          ___lwdiv@dividend 0013  
               __size_of_limitWheelSpeeds 0104                                 __pintcode 0008  
                                ?___ftadd 0024                                  ?___ftdiv 0033  
                                ?___ftmul 0024                                  ?___llmod 0013  
                                ?___ftsub 0030                                  ?___fttol 0042  
                                ?___lwdiv 0013                                  ?___lwmod 001A  
excerciseControl@rightWheelCommandedSpeed 00B6                          __CFG_PRICLKEN$ON 000000  
                        _excerciseControl 1032                               __smallconst 1000  
                                ?_isdigit 0001                          ___lwdiv@quotient 0017  
                          __size_of_putch 000A                            ___wmul@product 0017  
                                _LATDbits 000F8C                                  _LATEbits 000F8D  
                                _LCDclear 2F52                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                                  _LCDwrite 2F30  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                        __CFG_WDTPS$32768 000000                         ___wmul@multiplier 0013  
                              printf@flag 002C                                printf@prec 002B  
                        __size_of_LCDinit 00C6                    __size_of_wheelVelocity 0058  
                               copy_data0 2C86                                 copy_data1 2CA6  
                                __Hrparam 0000                           _configureTimers 2AC4  
                                __Lrparam 0000                        __CFG_BOREN$SBORDIS 000000  
                   main@rightCountTracker 009B                         __CFG_P2BMX$PORTD2 000000  
                        __size_of___ftadd 01AC                          __size_of___ftdiv 00E6  
                        __size_of___ftmul 00F4                          __size_of___llmod 0066  
                        __size_of___ftsub 0040                          __size_of___fttol 012E  
                        __size_of___lwdiv 0052                          __size_of___lwmod 0042  
                                ___awtoft 2EA0                                  ___ftpack 2A16  
                                ___lltoft 2CC0                                _ANSELBbits 000F39  
                        __size_of_isdigit 001E                           ___lwdiv@divisor 0015  
                         ___lwdiv@counter 0019                                  __ptext10 23A6  
                                __ptext11 2E60                                  __ptext20 2AC4  
                                __ptext12 21FA                                  __ptext21 2D74  
                                __ptext13 2776                                  __ptext22 286A  
                                __ptext14 2B6C                                  __ptext23 2A16  
                                __ptext15 2672                                  __ptext24 2950  
                                __ptext16 2CC0                                  __ptext25 2F42  
                                __ptext17 2BFC                                  __ptext26 2F52  
                                __ptext18 2544                                  __ptext27 2F62  
                                __ptext19 2EA0                                  __ptext28 2F1C  
                        ??_LCDgotoLineTwo 0014                             _elapsedMillis 00A1  
                           __size_of_main 03DC                             __size_of_sqrt 019E  
          wheelVelocity@speedCompensation 0015                          _limitWheelSpeeds 2672  
                           _wheelVelocity 2D1C                                  int$flags 004C  
           __size_of_configureComparators 0058                                 printf@val 002D  
                       _speedCompensation 00B2                                _LCDcheckBF 2F1C  
                               putch@data 0015                                _INTCONbits 000FF2  
                                isdigit@c 0015                                  intlevel2 0000  
                 __end_of_configureTimers 2B6C                          ___lwmod@dividend 001A  
                            _VREFCON0bits 000F42                  __end_of_excerciseControl 1C1E  
 excerciseControl@leftWheelCommandedSpeed 00B4                                _OSCCONbits 000FD3  
                          ?_wheelVelocity 0013                                  printf@ap 0029  
                         ___lwmod@divisor 001C                           ___lwmod@counter 001E  
                       __CFG_T3CMX$PORTB5 000000                         __CFG_FOSC$INTIO67 000000  
                           LCDwrite@input 0014  



Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Apr 28 15:07:07 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  0031B0                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _leftWheelCommandedPW
    58  0031B0  02DC               	dw	732
    59                           
    60                           ;initializer for _rightWheelCommandedPW
    61  0031B2  02CE               	dw	718
    62                           
    63                           	psect	idataBANK0
    64  003168                     __pidataBANK0:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _TOP_SPEED_FACTOR
    68  003168  33                 	db	51
    69  003169  B3                 	db	179
    70  00316A  3F                 	db	63
    71                           
    72                           ;initializer for _CONTROL_MS
    73  00316B  0064               	dw	100
    74                           
    75                           ;initializer for driveLargeCircle@leftWheelCommandedSpeed
    76  00316D  001E               	dw	30
    77                           
    78                           ;initializer for driveLargeCircle@rightWheelCommandedSpeed
    79  00316F  001E               	dw	30
    80                           
    81                           ;initializer for driveStationaryCircle@leftWheelCommandedSpeed
    82  003171  FFEC               	dw	65516
    83                           
    84                           ;initializer for driveStationaryCircle@rightWheelCommandedSpeed
    85  003173  0028               	dw	40
    86                           
    87                           ;initializer for driveStraight@leftWheelCommandedSpeed
    88  003175  001E               	dw	30
    89                           
    90                           ;initializer for driveStraight@rightWheelCommandedSpeed
    91  003177  0019               	dw	25
    92                           
    93                           	psect	smallconst
    94  001000                     __psmallconst:
    95                           	opt stack 0
    96  001000  00                 	db	0
    97  001001                     _dpowers:
    98                           	opt stack 0
    99  001001  0001               	dw	1
   100  001003  000A               	dw	10
   101  001005  0064               	dw	100
   102  001007  03E8               	dw	1000
   103  001009  2710               	dw	10000
   104  00100B                     __end_of_dpowers:
   105                           	opt stack 0
   106  0000                     _CCPR3	set	3934
   107  0000                     _TMR5	set	3919
   108  0000                     _ANSELBbits	set	3897
   109  0000                     _ANSELD	set	3899
   110  0000                     _CCP3CON	set	3933
   111  0000                     _CCP3CONbits	set	3933
   112  0000                     _CCPTMRS0bits	set	3913
   113  0000                     _T5CON	set	3918
   114  0000                     _T5CONbits	set	3918
   115  0000                     _VREFCON0bits	set	3906
   116  0000                     _TMR5ON	set	31344
   117  0000                     _CCPR2	set	3943
   118  0000                     _TMR1	set	4046
   119  0000                     _CCP2CON	set	3942
   120  0000                     _CCP2CONbits	set	3942
   121  0000                     _CM1CON0	set	3961
   122  0000                     _CM1CON0bits	set	3961
   123  0000                     _CM2CON0	set	3960
   124  0000                     _CM2CON0bits	set	3960
   125  0000                     _CM2CON1bits	set	3959
   126  0000                     _INTCONbits	set	4082
   127  0000                     _LATA	set	3977
   128  0000                     _LATDbits	set	3980
   129  0000                     _LATEbits	set	3981
   130  0000                     _OSCCONbits	set	4051
   131  0000                     _PIE1bits	set	3997
   132  0000                     _PIE2bits	set	4000
   133  0000                     _PIR1bits	set	3998
   134  0000                     _PIR2bits	set	4001
   135  0000                     _PORTAbits	set	3968
   136  0000                     _PR2	set	4027
   137  0000                     _T1CON	set	4045
   138  0000                     _T1CONbits	set	4045
   139  0000                     _T2CON	set	4026
   140  0000                     _T2CONbits	set	4026
   141  0000                     _TRISA	set	3986
   142  0000                     _TRISAbits	set	3986
   143  0000                     _TRISBbits	set	3987
   144  0000                     _TRISDbits	set	3989
   145  0000                     _TRISEbits	set	3990
   146  0000                     _WPUBbits	set	3937
   147  0000                     _C1IE	set	32006
   148  0000                     _C1IF	set	32014
   149  0000                     _C2IE	set	32005
   150  0000                     _C2IF	set	32013
   151  0000                     _CCP2IE	set	32000
   152  0000                     _CCP2IF	set	32008
   153  0000                     _CCP3IE	set	31696
   154  0000                     _CCP3IF	set	31704
   155  0000                     _INT0IE	set	32660
   156  0000                     _INT0IF	set	32657
   157  0000                     _INTEDG0	set	32654
   158  0000                     _TMR1ON	set	32360
   159  0000                     _TMR2IE	set	31977
   160  0000                     _TMR2IF	set	31985
   161  00100B                     STR_3:
   162  00100B  52                 	db	82	;'R'
   163  00100C  69                 	db	105	;'i'
   164  00100D  67                 	db	103	;'g'
   165  00100E  68                 	db	104	;'h'
   166  00100F  74                 	db	116	;'t'
   167  001010  20                 	db	32
   168  001011  53                 	db	83	;'S'
   169  001012  70                 	db	112	;'p'
   170  001013  65                 	db	101	;'e'
   171  001014  65                 	db	101	;'e'
   172  001015  64                 	db	100	;'d'
   173  001016  2C                 	db	44
   174  001017  20                 	db	32
   175  001018  25                 	db	37
   176  001019  64                 	db	100	;'d'
   177  00101A  00                 	db	0
   178  00101B                     STR_2:
   179  00101B  4C                 	db	76	;'L'
   180  00101C  65                 	db	101	;'e'
   181  00101D  66                 	db	102	;'f'
   182  00101E  74                 	db	116	;'t'
   183  00101F  20                 	db	32
   184  001020  53                 	db	83	;'S'
   185  001021  70                 	db	112	;'p'
   186  001022  65                 	db	101	;'e'
   187  001023  65                 	db	101	;'e'
   188  001024  64                 	db	100	;'d'
   189  001025  3A                 	db	58	;':'
   190  001026  20                 	db	32
   191  001027  25                 	db	37
   192  001028  64                 	db	100	;'d'
   193  001029  00                 	db	0
   194  00102A                     STR_1:
   195  00102A  45                 	db	69	;'E'
   196  00102B  76                 	db	118	;'v'
   197  00102C  65                 	db	101	;'e'
   198  00102D  6E                 	db	110	;'n'
   199  00102E  74                 	db	116	;'t'
   200  00102F  3A                 	db	58	;':'
   201  001030  20                 	db	32
   202  001031  25                 	db	37
   203  001032  33                 	db	51	;'3'
   204  001033  64                 	db	100	;'d'
   205  001034  00                 	db	0
   206  001035                     STR_4:
   207  001035  45                 	db	69	;'E'
   208  001036  76                 	db	118	;'v'
   209  001037  65                 	db	101	;'e'
   210  001038  6E                 	db	110	;'n'
   211  001039  74                 	db	116	;'t'
   212  00103A  3A                 	db	58	;':'
   213  00103B  20                 	db	32
   214  00103C  25                 	db	37
   215  00103D  64                 	db	100	;'d'
   216  00103E  00                 	db	0
   217  00103F                     STR_5:
   218  00103F  52                 	db	82	;'R'
   219  001040  75                 	db	117	;'u'
   220  001041  74                 	db	116	;'t'
   221  001042  68                 	db	104	;'h'
   222  001043  00                 	db	0
   223                           
   224                           ; #config settings
   225  001044  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  002E66                     __pcinit:
   229                           	opt stack 0
   230  002E66                     start_initialization:
   231                           	opt stack 0
   232  002E66                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (33 bytes)
   236  002E66  EE00  F0AF         	lfsr	0,__pbssBANK0
   237  002E6A  0E21               	movlw	33
   238  002E6C                     clear_0:
   239  002E6C  6AEE               	clrf	postinc0,c
   240  002E6E  06E8               	decf	wreg,f,c
   241  002E70  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (2 bytes)
   244  002E72  6A4C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   245  002E74  6A4B               	clrf	__pbssCOMRAM& (0+255),c
   246                           
   247                           ; Initialize objects allocated to BANK0 (17 bytes)
   248                           ; load TBLPTR registers with __pidataBANK0
   249  002E76  0E68               	movlw	low __pidataBANK0
   250  002E78  6EF6               	movwf	tblptrl,c
   251  002E7A  0E31               	movlw	high __pidataBANK0
   252  002E7C  6EF7               	movwf	tblptrh,c
   253  002E7E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   254  002E80  6EF8               	movwf	tblptru,c
   255  002E82  EE00  F0D0         	lfsr	0,__pdataBANK0
   256  002E86  EE10 F011          	lfsr	1,17
   257  002E8A                     copy_data0:
   258  002E8A  0009               	tblrd		*+
   259  002E8C  CFF5 FFEE          	movff	tablat,postinc0
   260  002E90  50E5               	movf	postdec1,w,c
   261  002E92  50E1               	movf	fsr1l,w,c
   262  002E94  E1FA               	bnz	copy_data0
   263                           
   264                           ; Initialize objects allocated to COMRAM (4 bytes)
   265                           ; load TBLPTR registers with __pidataCOMRAM
   266  002E96  0EB0               	movlw	low __pidataCOMRAM
   267  002E98  6EF6               	movwf	tblptrl,c
   268  002E9A  0E31               	movlw	high __pidataCOMRAM
   269  002E9C  6EF7               	movwf	tblptrh,c
   270  002E9E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   271  002EA0  6EF8               	movwf	tblptru,c
   272  002EA2  EE00  F047         	lfsr	0,__pdataCOMRAM
   273  002EA6  EE10 F004          	lfsr	1,4
   274  002EAA                     copy_data1:
   275  002EAA  0009               	tblrd		*+
   276  002EAC  CFF5 FFEE          	movff	tablat,postinc0
   277  002EB0  50E5               	movf	postdec1,w,c
   278  002EB2  50E1               	movf	fsr1l,w,c
   279  002EB4  E1FA               	bnz	copy_data1
   280  002EB6                     end_of_initialization:
   281                           	opt stack 0
   282  002EB6                     __end_of__initialization:
   283                           	opt stack 0
   284  002EB6  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   285  002EB8  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   286  002EBA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   287  002EBC  6EF8               	movwf	tblptru,c
   288  002EBE  0100               	movlb	0
   289  002EC0  EF6B  F00C         	goto	_main	;jump to C main() function
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bssCOMRAM
   300  00004B                     __pbssCOMRAM:
   301                           	opt stack 0
   302  00004B                     _errno:
   303                           	opt stack 0
   304  00004B                     	ds	2
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	dataCOMRAM
   315  000047                     __pdataCOMRAM:
   316                           	opt stack 0
   317  000047                     _leftWheelCommandedPW:
   318                           	opt stack 0
   319  000047                     	ds	2
   320  000049                     _rightWheelCommandedPW:
   321                           	opt stack 0
   322  000049                     	ds	2
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	bssBANK0
   333  0000AF                     __pbssBANK0:
   334                           	opt stack 0
   335  0000AF                     _elapsedMillis:
   336                           	opt stack 0
   337  0000AF                     	ds	4
   338  0000B3                     _leftWheelCount:
   339                           	opt stack 0
   340  0000B3                     	ds	4
   341  0000B7                     _rightWheelCount:
   342                           	opt stack 0
   343  0000B7                     	ds	4
   344  0000BB                     _startCircleMillis:
   345                           	opt stack 0
   346  0000BB                     	ds	4
   347  0000BF                     _event:
   348                           	opt stack 0
   349  0000BF                     	ds	2
   350  0000C1                     _lastEvent:
   351                           	opt stack 0
   352  0000C1                     	ds	2
   353  0000C3                     _leftWheelMeasuredSpeed:
   354                           	opt stack 0
   355  0000C3                     	ds	2
   356  0000C5                     _rightWheelMeasuredSpeed:
   357                           	opt stack 0
   358  0000C5                     	ds	2
   359  0000C7                     driveLargeCircle@leftIntegral:
   360                           	opt stack 0
   361  0000C7                     	ds	2
   362  0000C9                     main@screen:
   363                           	opt stack 0
   364  0000C9                     	ds	1
   365  0000CA                     driveLargeCircle@speedCompensation:
   366                           	opt stack 0
   367  0000CA                     	ds	2
   368  0000CC                     driveStationaryCircle@speedCompensation:
   369                           	opt stack 0
   370  0000CC                     	ds	2
   371  0000CE                     driveStraight@speedCompensation:
   372                           	opt stack 0
   373  0000CE                     	ds	2
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           postdec1	equ	0xFE5
   381                           fsr1l	equ	0xFE1
   382                           
   383                           	psect	dataBANK0
   384  0000D0                     __pdataBANK0:
   385                           	opt stack 0
   386  0000D0                     _TOP_SPEED_FACTOR:
   387                           	opt stack 0
   388  0000D0                     	ds	3
   389  0000D3                     _CONTROL_MS:
   390                           	opt stack 0
   391  0000D3                     	ds	2
   392  0000D5                     driveLargeCircle@leftWheelCommandedSpeed:
   393                           	opt stack 0
   394  0000D5                     	ds	2
   395  0000D7                     driveLargeCircle@rightWheelCommandedSpeed:
   396                           	opt stack 0
   397  0000D7                     	ds	2
   398  0000D9                     driveStationaryCircle@leftWheelCommandedSpeed:
   399                           	opt stack 0
   400  0000D9                     	ds	2
   401  0000DB                     driveStationaryCircle@rightWheelCommandedSpeed:
   402                           	opt stack 0
   403  0000DB                     	ds	2
   404  0000DD                     driveStraight@leftWheelCommandedSpeed:
   405                           	opt stack 0
   406  0000DD                     	ds	2
   407  0000DF                     driveStraight@rightWheelCommandedSpeed:
   408                           	opt stack 0
   409  0000DF                     	ds	2
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	cstackBANK0
   420  000060                     __pcstackBANK0:
   421                           	opt stack 0
   422  000060                     ?_sqrt:
   423                           	opt stack 0
   424  000060                     sqrt@a:
   425                           	opt stack 0
   426                           
   427                           ; 3 bytes @ 0x0
   428  000060                     	ds	3
   429  000063                     ??_sqrt:
   430                           
   431                           ; 1 bytes @ 0x3
   432  000063                     	ds	3
   433  000066                     sqrt@og:
   434                           	opt stack 0
   435                           
   436                           ; 3 bytes @ 0x6
   437  000066                     	ds	3
   438  000069                     sqrt@z:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0x9
   442  000069                     	ds	3
   443  00006C                     sqrt@i:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0xC
   447  00006C                     	ds	1
   448  00006D                     sqrt@q:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0xD
   452  00006D                     	ds	3
   453  000070                     sqrt@x:
   454                           	opt stack 0
   455                           
   456                           ; 3 bytes @ 0x10
   457  000070                     	ds	3
   458  000073                     ?___fttol:
   459                           	opt stack 0
   460  000073                     ___fttol@f1:
   461                           	opt stack 0
   462                           
   463                           ; 3 bytes @ 0x13
   464  000073                     	ds	4
   465  000077                     ??___fttol:
   466                           
   467                           ; 1 bytes @ 0x17
   468  000077                     	ds	5
   469  00007C                     ___fttol@sign1:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x1C
   473  00007C                     	ds	1
   474  00007D                     ___fttol@lval:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x1D
   478  00007D                     	ds	4
   479  000081                     ___fttol@exp1:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x21
   483  000081                     	ds	1
   484  000082                     wheelVelocity@speed:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x22
   488  000082                     	ds	2
   489  000084                     wheelVelocity@speedCompensation:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x24
   493  000084                     	ds	2
   494  000086                     _wheelVelocity$2067:
   495                           	opt stack 0
   496                           
   497                           ; 3 bytes @ 0x26
   498  000086                     	ds	3
   499  000089                     wheelVelocity@wheel:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x29
   503  000089                     	ds	1
   504  00008A                     ??_driveStraight:
   505  00008A                     ??_driveStationaryCircle:
   506  00008A                     ??_driveLargeCircle:
   507                           
   508                           ; 1 bytes @ 0x2A
   509  00008A                     	ds	4
   510  00008E                     _driveStationaryCircle$2069:
   511                           	opt stack 0
   512  00008E                     _driveStraight$2072:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0x2E
   516  00008E                     	ds	3
   517  000091                     _driveStationaryCircle$2070:
   518                           	opt stack 0
   519  000091                     _driveStraight$2073:
   520                           	opt stack 0
   521                           
   522                           ; 3 bytes @ 0x31
   523  000091                     	ds	3
   524  000094                     _driveStationaryCircle$2068:
   525                           	opt stack 0
   526  000094                     _driveStraight$2071:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0x34
   530  000094                     	ds	3
   531  000097                     ??_main:
   532                           
   533                           ; 1 bytes @ 0x37
   534  000097                     	ds	8
   535  00009F                     main@controlLastMillis:
   536                           	opt stack 0
   537                           
   538                           ; 4 bytes @ 0x3F
   539  00009F                     	ds	4
   540  0000A3                     main@leftCountTracker:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x43
   544  0000A3                     	ds	2
   545  0000A5                     main@rightCountTracker:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x45
   549  0000A5                     	ds	2
   550  0000A7                     main@lcdLastMillis:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x47
   554  0000A7                     	ds	4
   555  0000AB                     main@speedLastMillis:
   556                           	opt stack 0
   557                           
   558                           ; 4 bytes @ 0x4B
   559  0000AB                     	ds	4
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           postdec1	equ	0xFE5
   567                           fsr1l	equ	0xFE1
   568                           
   569                           	psect	cstackCOMRAM
   570  000001                     __pcstackCOMRAM:
   571                           	opt stack 0
   572  000001                     ??_ISR:
   573  000001                     
   574                           ; 1 bytes @ 0x0
   575  000001                     	ds	16
   576  000011                     ISR@dummy:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x10
   580  000011                     	ds	1
   581  000012                     ISR@dummy_1057:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x11
   585  000012                     	ds	1
   586  000013                     ??_isdigit:
   587  000013                     ?___wmul:
   588                           	opt stack 0
   589  000013                     ?___lwdiv:
   590                           	opt stack 0
   591  000013                     ?___ftpack:
   592                           	opt stack 0
   593  000013                     ?___lmul:
   594                           	opt stack 0
   595  000013                     LCDcmd@command:
   596                           	opt stack 0
   597  000013                     limitWheelSpeeds@leftWheelSpeed:
   598                           	opt stack 0
   599  000013                     ___wmul@multiplier:
   600                           	opt stack 0
   601  000013                     ___lwdiv@dividend:
   602                           	opt stack 0
   603  000013                     ___ftpack@arg:
   604                           	opt stack 0
   605  000013                     ___ftge@ff1:
   606                           	opt stack 0
   607  000013                     ___lmul@multiplier:
   608                           	opt stack 0
   609                           
   610                           ; 4 bytes @ 0x12
   611  000013                     	ds	1
   612  000014                     ??_LCDinit:
   613  000014                     LCDwrite@input:
   614                           	opt stack 0
   615  000014                     _isdigit$1727:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x13
   619  000014                     	ds	1
   620  000015                     putch@data:
   621                           	opt stack 0
   622  000015                     isdigit@c:
   623                           	opt stack 0
   624  000015                     limitWheelSpeeds@rightWheelSpeed:
   625                           	opt stack 0
   626  000015                     ___wmul@multiplicand:
   627                           	opt stack 0
   628  000015                     ___lwdiv@divisor:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x14
   632  000015                     	ds	1
   633  000016                     ___ftpack@exp:
   634                           	opt stack 0
   635  000016                     ___ftge@ff2:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x15
   639  000016                     	ds	1
   640  000017                     ___ftpack@sign:
   641                           	opt stack 0
   642  000017                     limitWheelSpeeds@speedCompensation:
   643                           	opt stack 0
   644  000017                     ___wmul@product:
   645                           	opt stack 0
   646  000017                     ___lwdiv@quotient:
   647                           	opt stack 0
   648  000017                     ___lmul@multiplicand:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0x16
   652  000017                     	ds	1
   653  000018                     ??___ftpack:
   654                           
   655                           ; 1 bytes @ 0x17
   656  000018                     	ds	1
   657  000019                     ??___ftge:
   658  000019                     ___lwdiv@counter:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x18
   662  000019                     	ds	1
   663  00001A                     ?___lwmod:
   664                           	opt stack 0
   665  00001A                     ___lwmod@dividend:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x19
   669  00001A                     	ds	1
   670  00001B                     ?___awtoft:
   671                           	opt stack 0
   672  00001B                     ?___lltoft:
   673                           	opt stack 0
   674  00001B                     ___awtoft@c:
   675                           	opt stack 0
   676  00001B                     ___lmul@product:
   677                           	opt stack 0
   678  00001B                     ___lltoft@c:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x1A
   682  00001B                     	ds	1
   683  00001C                     ___lwmod@divisor:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x1B
   687  00001C                     	ds	2
   688  00001E                     ___awtoft@sign:
   689                           	opt stack 0
   690  00001E                     ___lwmod@counter:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x1D
   694  00001E                     	ds	1
   695  00001F                     ??___lltoft:
   696  00001F                     ?_printf:
   697                           	opt stack 0
   698  00001F                     printf@f:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x1E
   702  00001F                     	ds	4
   703  000023                     ??_printf:
   704  000023                     ___lltoft@exp:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x22
   708  000023                     	ds	1
   709  000024                     ?___ftmul:
   710                           	opt stack 0
   711  000024                     ___ftmul@f1:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x23
   715  000024                     	ds	3
   716  000027                     printf@ap:
   717                           	opt stack 0
   718  000027                     ___ftmul@f2:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x26
   722  000027                     	ds	2
   723  000029                     printf@prec:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x28
   727  000029                     	ds	1
   728  00002A                     ??___ftmul:
   729  00002A                     printf@flag:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x29
   733  00002A                     	ds	1
   734  00002B                     printf@val:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x2A
   738  00002B                     	ds	2
   739  00002D                     ___ftmul@exp:
   740                           	opt stack 0
   741  00002D                     printf@width:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x2C
   745  00002D                     	ds	1
   746  00002E                     ___ftmul@f3_as_product:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x2D
   750  00002E                     	ds	1
   751  00002F                     printf@c:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x2E
   755  00002F                     	ds	2
   756  000031                     ___ftmul@cntr:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x30
   760  000031                     	ds	1
   761  000032                     ___ftmul@sign:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x31
   765  000032                     	ds	1
   766  000033                     ?___ftadd:
   767                           	opt stack 0
   768  000033                     ?___ftdiv:
   769                           	opt stack 0
   770  000033                     ___ftadd@f1:
   771                           	opt stack 0
   772  000033                     ___ftdiv@f1:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x32
   776  000033                     	ds	3
   777  000036                     ___ftadd@f2:
   778                           	opt stack 0
   779  000036                     ___ftdiv@f2:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x35
   783  000036                     	ds	3
   784  000039                     ??___ftadd:
   785  000039                     ??___ftdiv:
   786                           
   787                           ; 1 bytes @ 0x38
   788  000039                     	ds	3
   789  00003C                     ___ftadd@sign:
   790                           	opt stack 0
   791  00003C                     ___ftdiv@cntr:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x3B
   795  00003C                     	ds	1
   796  00003D                     ___ftadd@exp2:
   797                           	opt stack 0
   798  00003D                     ___ftdiv@f3:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x3C
   802  00003D                     	ds	1
   803  00003E                     ___ftadd@exp1:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x3D
   807  00003E                     	ds	1
   808  00003F                     ?___ftsub:
   809                           	opt stack 0
   810  00003F                     ?___ftneg:
   811                           	opt stack 0
   812  00003F                     ___ftneg@f1:
   813                           	opt stack 0
   814  00003F                     ___ftsub@f1:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x3E
   818  00003F                     	ds	1
   819  000040                     ___ftdiv@exp:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x3F
   823  000040                     	ds	1
   824  000041                     ___ftdiv@sign:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x40
   828  000041                     	ds	1
   829  000042                     ___ftsub@f2:
   830                           	opt stack 0
   831                           
   832                           ; 3 bytes @ 0x41
   833  000042                     	ds	3
   834  000045                     ??_excerciseControl:
   835  000045                     
   836                           ; 1 bytes @ 0x44
   837  000045                     	ds	2
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 156 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  speedLastMil    4   75[BANK0 ] unsigned long 
   857 ;;  lcdLastMilli    4   71[BANK0 ] unsigned long 
   858 ;;  controlLastM    4   63[BANK0 ] unsigned long 
   859 ;;  rightCountTr    2   69[BANK0 ] int 
   860 ;;  leftCountTra    2   67[BANK0 ] int 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   871 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   872 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   873 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;Total ram usage:       24 bytes
   875 ;; Hardware stack levels required when called:    7
   876 ;; This function calls:
   877 ;;		_LCDclear
   878 ;;		_LCDgotoLineTwo
   879 ;;		_LCDinit
   880 ;;		___ftdiv
   881 ;;		___ftmul
   882 ;;		___fttol
   883 ;;		___lltoft
   884 ;;		_configureComparators
   885 ;;		_configureTimers
   886 ;;		_excerciseControl
   887 ;;		_printf
   888 ;; This function is called by:
   889 ;;		Startup code after reset
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text0
   894  0018D6                     __ptext0:
   895                           	opt stack 0
   896  0018D6                     _main:
   897                           	opt stack 24
   898                           
   899                           ;main.c: 158: OSCCONbits.IRCF = 0b110;
   900                           
   901                           ;incstack = 0
   902  0018D6  50D3               	movf	4051,w,c	;volatile
   903  0018D8  0B8F               	andlw	-113
   904  0018DA  0960               	iorlw	96
   905  0018DC  6ED3               	movwf	4051,c	;volatile
   906                           
   907                           ;main.c: 161: INT0IF = 0;
   908  0018DE  92F2               	bcf	intcon,1,c	;volatile
   909                           
   910                           ;main.c: 162: INTEDG0 = 0;
   911  0018E0  9CF1               	bcf	intcon2,6,c	;volatile
   912                           
   913                           ;main.c: 163: INT0IE = 1;
   914  0018E2  88F2               	bsf	intcon,4,c	;volatile
   915                           
   916                           ;main.c: 164: TRISBbits.TRISB0 = 1;
   917  0018E4  8093               	bsf	3987,0,c	;volatile
   918                           
   919                           ;main.c: 165: ANSELBbits.ANSB0 = 0;
   920  0018E6  010F               	movlb	15	; () banked
   921  0018E8  9139               	bcf	57,0,b	;volatile
   922                           
   923                           ; BSR set to: 15
   924                           ;main.c: 166: WPUBbits.WPUB0 = 1;
   925  0018EA  8061               	bsf	3937,0,c	;volatile
   926                           
   927                           ; BSR set to: 15
   928                           ;main.c: 170: configureComparators();
   929  0018EC  EC90  F017         	call	_configureComparators	;wreg free
   930                           
   931                           ;main.c: 171: configureTimers();
   932  0018F0  EC51  F016         	call	_configureTimers	;wreg free
   933                           
   934                           ;main.c: 175: unsigned long controlLastMillis = 0;
   935  0018F4  0E00               	movlw	0
   936  0018F6  0100               	movlb	0	; () banked
   937  0018F8  6F9F               	movwf	main@controlLastMillis& (0+255),b
   938  0018FA  0E00               	movlw	0
   939  0018FC  6FA0               	movwf	(main@controlLastMillis+1)& (0+255),b
   940  0018FE  0E00               	movlw	0
   941  001900  6FA1               	movwf	(main@controlLastMillis+2)& (0+255),b
   942  001902  0E00               	movlw	0
   943  001904  6FA2               	movwf	(main@controlLastMillis+3)& (0+255),b
   944                           
   945                           ;main.c: 176: unsigned long lcdLastMillis = 0;
   946  001906  0E00               	movlw	0
   947  001908  0100               	movlb	0	; () banked
   948  00190A  6FA7               	movwf	main@lcdLastMillis& (0+255),b
   949  00190C  0E00               	movlw	0
   950  00190E  6FA8               	movwf	(main@lcdLastMillis+1)& (0+255),b
   951  001910  0E00               	movlw	0
   952  001912  6FA9               	movwf	(main@lcdLastMillis+2)& (0+255),b
   953  001914  0E00               	movlw	0
   954  001916  6FAA               	movwf	(main@lcdLastMillis+3)& (0+255),b
   955                           
   956                           ;main.c: 177: unsigned long speedLastMillis = 0;
   957  001918  0E00               	movlw	0
   958  00191A  0100               	movlb	0	; () banked
   959  00191C  6FAB               	movwf	main@speedLastMillis& (0+255),b
   960  00191E  0E00               	movlw	0
   961  001920  6FAC               	movwf	(main@speedLastMillis+1)& (0+255),b
   962  001922  0E00               	movlw	0
   963  001924  6FAD               	movwf	(main@speedLastMillis+2)& (0+255),b
   964  001926  0E00               	movlw	0
   965  001928  6FAE               	movwf	(main@speedLastMillis+3)& (0+255),b
   966                           
   967                           ;main.c: 178: int leftCountTracker = 0;
   968  00192A  0E00               	movlw	0
   969  00192C  0100               	movlb	0	; () banked
   970  00192E  6FA4               	movwf	(main@leftCountTracker+1)& (0+255),b
   971  001930  0E00               	movlw	0
   972  001932  6FA3               	movwf	main@leftCountTracker& (0+255),b
   973                           
   974                           ;main.c: 179: int rightCountTracker = 0;
   975  001934  0E00               	movlw	0
   976  001936  0100               	movlb	0	; () banked
   977  001938  6FA6               	movwf	(main@rightCountTracker+1)& (0+255),b
   978  00193A  0E00               	movlw	0
   979  00193C  6FA5               	movwf	main@rightCountTracker& (0+255),b
   980                           
   981                           ; BSR set to: 0
   982                           ;main.c: 182: LCDinit();
   983  00193E  EC97  F015         	call	_LCDinit	;wreg free
   984                           
   985                           ;main.c: 183: printf("Event: %3d", event);
   986  001942  0E2A               	movlw	low STR_1
   987  001944  6E1F               	movwf	printf@f,c
   988  001946  0E10               	movlw	high STR_1
   989  001948  6E20               	movwf	printf@f+1,c
   990  00194A  C0BF  F021         	movff	_event,?_printf+2
   991  00194E  C0C0  F022         	movff	_event+1,?_printf+3
   992  001952  EC4E  F010         	call	_printf	;wreg free
   993  001956                     l3197:
   994                           
   995                           ;main.c: 188: {
   996                           ;main.c: 193: if(lcdLastMillis + 1000 < elapsedMillis)
   997  001956  0EE8               	movlw	232
   998  001958  0100               	movlb	0	; () banked
   999  00195A  25A7               	addwf	main@lcdLastMillis& (0+255),w,b
  1000  00195C  0100               	movlb	0	; () banked
  1001  00195E  6F97               	movwf	??_main& (0+255),b
  1002  001960  0E03               	movlw	3
  1003  001962  0100               	movlb	0	; () banked
  1004  001964  21A8               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
  1005  001966  0100               	movlb	0	; () banked
  1006  001968  6F98               	movwf	(??_main+1)& (0+255),b
  1007  00196A  0E00               	movlw	0
  1008  00196C  0100               	movlb	0	; () banked
  1009  00196E  21A9               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
  1010  001970  0100               	movlb	0	; () banked
  1011  001972  6F99               	movwf	(??_main+2)& (0+255),b
  1012  001974  0E00               	movlw	0
  1013  001976  0100               	movlb	0	; () banked
  1014  001978  21AA               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
  1015  00197A  0100               	movlb	0	; () banked
  1016  00197C  6F9A               	movwf	(??_main+3)& (0+255),b
  1017  00197E  0100               	movlb	0	; () banked
  1018  001980  51AF               	movf	_elapsedMillis& (0+255),w,b
  1019  001982  0100               	movlb	0	; () banked
  1020  001984  5D97               	subwf	??_main& (0+255),w,b
  1021  001986  0100               	movlb	0	; () banked
  1022  001988  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  1023  00198A  0100               	movlb	0	; () banked
  1024  00198C  5998               	subwfb	(??_main+1)& (0+255),w,b
  1025  00198E  0100               	movlb	0	; () banked
  1026  001990  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  1027  001992  0100               	movlb	0	; () banked
  1028  001994  5999               	subwfb	(??_main+2)& (0+255),w,b
  1029  001996  0100               	movlb	0	; () banked
  1030  001998  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  1031  00199A  0100               	movlb	0	; () banked
  1032  00199C  599A               	subwfb	(??_main+3)& (0+255),w,b
  1033  00199E  B0D8               	btfsc	status,0,c
  1034  0019A0  D046               	goto	l3219
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;main.c: 194: { static char screen = 0;
  1038                           ;main.c: 195: if(screen == 0)
  1039  0019A2  0100               	movlb	0	; () banked
  1040  0019A4  51C9               	movf	main@screen& (0+255),w,b
  1041  0019A6  0100               	movlb	0	; () banked
  1042  0019A8  A4D8               	btfss	status,2,c
  1043  0019AA  D022               	goto	l151
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 196: {
  1047                           ;main.c: 197: LCDclear();
  1048  0019AC  ECC5  F018         	call	_LCDclear	;wreg free
  1049                           
  1050                           ;main.c: 198: lcdLastMillis = elapsedMillis;
  1051  0019B0  C0AF  F0A7         	movff	_elapsedMillis,main@lcdLastMillis
  1052  0019B4  C0B0  F0A8         	movff	_elapsedMillis+1,main@lcdLastMillis+1
  1053  0019B8  C0B1  F0A9         	movff	_elapsedMillis+2,main@lcdLastMillis+2
  1054  0019BC  C0B2  F0AA         	movff	_elapsedMillis+3,main@lcdLastMillis+3
  1055                           
  1056                           ;main.c: 199: printf("Left Speed: %d", leftWheelMeasuredSpeed);
  1057  0019C0  0E1B               	movlw	low STR_2
  1058  0019C2  6E1F               	movwf	printf@f,c
  1059  0019C4  0E10               	movlw	high STR_2
  1060  0019C6  6E20               	movwf	printf@f+1,c
  1061  0019C8  C0C3  F021         	movff	_leftWheelMeasuredSpeed,?_printf+2
  1062  0019CC  C0C4  F022         	movff	_leftWheelMeasuredSpeed+1,?_printf+3
  1063  0019D0  EC4E  F010         	call	_printf	;wreg free
  1064                           
  1065                           ;main.c: 200: LCDgotoLineTwo();
  1066  0019D4  ECBD  F018         	call	_LCDgotoLineTwo	;wreg free
  1067                           
  1068                           ;main.c: 201: printf("Right Speed, %d", rightWheelMeasuredSpeed);
  1069  0019D8  0E0B               	movlw	low STR_3
  1070  0019DA  6E1F               	movwf	printf@f,c
  1071  0019DC  0E10               	movlw	high STR_3
  1072  0019DE  6E20               	movwf	printf@f+1,c
  1073  0019E0  C0C5  F021         	movff	_rightWheelMeasuredSpeed,?_printf+2
  1074  0019E4  C0C6  F022         	movff	_rightWheelMeasuredSpeed+1,?_printf+3
  1075  0019E8  EC4E  F010         	call	_printf	;wreg free
  1076                           
  1077                           ;main.c: 202: screen = 1;
  1078  0019EC  0E01               	movlw	1
  1079  0019EE  D01D               	goto	L1
  1080  0019F0                     l151:
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;main.c: 204: else
  1084                           ;main.c: 205: {
  1085                           ;main.c: 206: lcdLastMillis = elapsedMillis;
  1086  0019F0  C0AF  F0A7         	movff	_elapsedMillis,main@lcdLastMillis
  1087  0019F4  C0B0  F0A8         	movff	_elapsedMillis+1,main@lcdLastMillis+1
  1088  0019F8  C0B1  F0A9         	movff	_elapsedMillis+2,main@lcdLastMillis+2
  1089  0019FC  C0B2  F0AA         	movff	_elapsedMillis+3,main@lcdLastMillis+3
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 207: LCDclear();
  1093  001A00  ECC5  F018         	call	_LCDclear	;wreg free
  1094                           
  1095                           ;main.c: 208: printf("Event: %d", event);
  1096  001A04  0E35               	movlw	low STR_4
  1097  001A06  6E1F               	movwf	printf@f,c
  1098  001A08  0E10               	movlw	high STR_4
  1099  001A0A  6E20               	movwf	printf@f+1,c
  1100  001A0C  C0BF  F021         	movff	_event,?_printf+2
  1101  001A10  C0C0  F022         	movff	_event+1,?_printf+3
  1102  001A14  EC4E  F010         	call	_printf	;wreg free
  1103                           
  1104                           ;main.c: 209: LCDgotoLineTwo();
  1105  001A18  ECBD  F018         	call	_LCDgotoLineTwo	;wreg free
  1106                           
  1107                           ;main.c: 210: printf("Ruth");
  1108  001A1C  0E3F               	movlw	low STR_5
  1109  001A1E  6E1F               	movwf	printf@f,c
  1110  001A20  0E10               	movlw	high STR_5
  1111  001A22  6E20               	movwf	printf@f+1,c
  1112  001A24  EC4E  F010         	call	_printf	;wreg free
  1113                           
  1114                           ;main.c: 211: screen = 0;
  1115  001A28  0E00               	movlw	0
  1116  001A2A                     L1:
  1117  001A2A  0100               	movlb	0	; () banked
  1118  001A2C  6FC9               	movwf	main@screen& (0+255),b
  1119  001A2E                     l3219:
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 212: }
  1123                           ;main.c: 216: }
  1124                           ;main.c: 220: if(controlLastMillis + CONTROL_MS < elapsedMillis)
  1125  001A2E  C0D3  F097         	movff	_CONTROL_MS,??_main
  1126  001A32  C0D4  F098         	movff	_CONTROL_MS+1,??_main+1
  1127  001A36  0E00               	movlw	0
  1128  001A38  0100               	movlb	0	; () banked
  1129  001A3A  BF98               	btfsc	(??_main+1)& (0+255),7,b
  1130  001A3C  0EFF               	movlw	255
  1131  001A3E  6F99               	movwf	(??_main+2)& (0+255),b
  1132  001A40  6F9A               	movwf	(??_main+3)& (0+255),b
  1133  001A42  0100               	movlb	0	; () banked
  1134  001A44  519F               	movf	main@controlLastMillis& (0+255),w,b
  1135  001A46  0100               	movlb	0	; () banked
  1136  001A48  2597               	addwf	??_main& (0+255),w,b
  1137  001A4A  0100               	movlb	0	; () banked
  1138  001A4C  6F9B               	movwf	(??_main+4)& (0+255),b
  1139  001A4E  0100               	movlb	0	; () banked
  1140  001A50  51A0               	movf	(main@controlLastMillis+1)& (0+255),w,b
  1141  001A52  0100               	movlb	0	; () banked
  1142  001A54  2198               	addwfc	(??_main+1)& (0+255),w,b
  1143  001A56  0100               	movlb	0	; () banked
  1144  001A58  6F9C               	movwf	(??_main+5)& (0+255),b
  1145  001A5A  0100               	movlb	0	; () banked
  1146  001A5C  51A1               	movf	(main@controlLastMillis+2)& (0+255),w,b
  1147  001A5E  0100               	movlb	0	; () banked
  1148  001A60  2199               	addwfc	(??_main+2)& (0+255),w,b
  1149  001A62  0100               	movlb	0	; () banked
  1150  001A64  6F9D               	movwf	(??_main+6)& (0+255),b
  1151  001A66  0100               	movlb	0	; () banked
  1152  001A68  51A2               	movf	(main@controlLastMillis+3)& (0+255),w,b
  1153  001A6A  0100               	movlb	0	; () banked
  1154  001A6C  219A               	addwfc	(??_main+3)& (0+255),w,b
  1155  001A6E  0100               	movlb	0	; () banked
  1156  001A70  6F9E               	movwf	(??_main+7)& (0+255),b
  1157  001A72  0100               	movlb	0	; () banked
  1158  001A74  51AF               	movf	_elapsedMillis& (0+255),w,b
  1159  001A76  0100               	movlb	0	; () banked
  1160  001A78  5D9B               	subwf	(??_main+4)& (0+255),w,b
  1161  001A7A  0100               	movlb	0	; () banked
  1162  001A7C  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  1163  001A7E  0100               	movlb	0	; () banked
  1164  001A80  599C               	subwfb	(??_main+5)& (0+255),w,b
  1165  001A82  0100               	movlb	0	; () banked
  1166  001A84  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  1167  001A86  0100               	movlb	0	; () banked
  1168  001A88  599D               	subwfb	(??_main+6)& (0+255),w,b
  1169  001A8A  0100               	movlb	0	; () banked
  1170  001A8C  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  1171  001A8E  0100               	movlb	0	; () banked
  1172  001A90  599E               	subwfb	(??_main+7)& (0+255),w,b
  1173  001A92  B0D8               	btfsc	status,0,c
  1174  001A94  D00A               	goto	l3225
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;main.c: 221: {
  1178                           ;main.c: 222: controlLastMillis = elapsedMillis;
  1179  001A96  C0AF  F09F         	movff	_elapsedMillis,main@controlLastMillis
  1180  001A9A  C0B0  F0A0         	movff	_elapsedMillis+1,main@controlLastMillis+1
  1181  001A9E  C0B1  F0A1         	movff	_elapsedMillis+2,main@controlLastMillis+2
  1182  001AA2  C0B2  F0A2         	movff	_elapsedMillis+3,main@controlLastMillis+3
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 223: excerciseControl();
  1186  001AA6  ECED  F016         	call	_excerciseControl	;wreg free
  1187  001AAA                     l3225:
  1188                           
  1189                           ;main.c: 224: }
  1190                           ;main.c: 227: if(speedLastMillis + 500 < elapsedMillis)
  1191  001AAA  0EF4               	movlw	244
  1192  001AAC  0100               	movlb	0	; () banked
  1193  001AAE  25AB               	addwf	main@speedLastMillis& (0+255),w,b
  1194  001AB0  0100               	movlb	0	; () banked
  1195  001AB2  6F97               	movwf	??_main& (0+255),b
  1196  001AB4  0E01               	movlw	1
  1197  001AB6  0100               	movlb	0	; () banked
  1198  001AB8  21AC               	addwfc	(main@speedLastMillis+1)& (0+255),w,b
  1199  001ABA  0100               	movlb	0	; () banked
  1200  001ABC  6F98               	movwf	(??_main+1)& (0+255),b
  1201  001ABE  0E00               	movlw	0
  1202  001AC0  0100               	movlb	0	; () banked
  1203  001AC2  21AD               	addwfc	(main@speedLastMillis+2)& (0+255),w,b
  1204  001AC4  0100               	movlb	0	; () banked
  1205  001AC6  6F99               	movwf	(??_main+2)& (0+255),b
  1206  001AC8  0E00               	movlw	0
  1207  001ACA  0100               	movlb	0	; () banked
  1208  001ACC  21AE               	addwfc	(main@speedLastMillis+3)& (0+255),w,b
  1209  001ACE  0100               	movlb	0	; () banked
  1210  001AD0  6F9A               	movwf	(??_main+3)& (0+255),b
  1211  001AD2  0100               	movlb	0	; () banked
  1212  001AD4  51AF               	movf	_elapsedMillis& (0+255),w,b
  1213  001AD6  0100               	movlb	0	; () banked
  1214  001AD8  5D97               	subwf	??_main& (0+255),w,b
  1215  001ADA  0100               	movlb	0	; () banked
  1216  001ADC  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  1217  001ADE  0100               	movlb	0	; () banked
  1218  001AE0  5998               	subwfb	(??_main+1)& (0+255),w,b
  1219  001AE2  0100               	movlb	0	; () banked
  1220  001AE4  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  1221  001AE6  0100               	movlb	0	; () banked
  1222  001AE8  5999               	subwfb	(??_main+2)& (0+255),w,b
  1223  001AEA  0100               	movlb	0	; () banked
  1224  001AEC  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  1225  001AEE  0100               	movlb	0	; () banked
  1226  001AF0  599A               	subwfb	(??_main+3)& (0+255),w,b
  1227  001AF2  B0D8               	btfsc	status,0,c
  1228  001AF4  D730               	goto	l3197
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 228: {
  1232                           ;main.c: 233: rightWheelMeasuredSpeed = (int) ((rightWheelCount - rightCountTracker) * (
      +                          5.4 * 500 ) / (elapsedMillis - speedLastMillis));
  1233  001AF6  C0AB  F097         	movff	main@speedLastMillis,??_main
  1234  001AFA  C0AC  F098         	movff	main@speedLastMillis+1,??_main+1
  1235  001AFE  C0AD  F099         	movff	main@speedLastMillis+2,??_main+2
  1236  001B02  C0AE  F09A         	movff	main@speedLastMillis+3,??_main+3
  1237  001B06  0100               	movlb	0	; () banked
  1238  001B08  1F97               	comf	??_main& (0+255),f,b
  1239  001B0A  1F98               	comf	(??_main+1)& (0+255),f,b
  1240  001B0C  1F99               	comf	(??_main+2)& (0+255),f,b
  1241  001B0E  1F9A               	comf	(??_main+3)& (0+255),f,b
  1242  001B10  2B97               	incf	??_main& (0+255),f,b
  1243  001B12  0E00               	movlw	0
  1244  001B14  2398               	addwfc	(??_main+1)& (0+255),f,b
  1245  001B16  2399               	addwfc	(??_main+2)& (0+255),f,b
  1246  001B18  239A               	addwfc	(??_main+3)& (0+255),f,b
  1247  001B1A  0100               	movlb	0	; () banked
  1248  001B1C  51AF               	movf	_elapsedMillis& (0+255),w,b
  1249  001B1E  0100               	movlb	0	; () banked
  1250  001B20  2597               	addwf	??_main& (0+255),w,b
  1251  001B22  6E1B               	movwf	___lltoft@c,c
  1252  001B24  0100               	movlb	0	; () banked
  1253  001B26  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  1254  001B28  0100               	movlb	0	; () banked
  1255  001B2A  2198               	addwfc	(??_main+1)& (0+255),w,b
  1256  001B2C  6E1C               	movwf	___lltoft@c+1,c
  1257  001B2E  0100               	movlb	0	; () banked
  1258  001B30  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  1259  001B32  0100               	movlb	0	; () banked
  1260  001B34  2199               	addwfc	(??_main+2)& (0+255),w,b
  1261  001B36  6E1D               	movwf	___lltoft@c+2,c
  1262  001B38  0100               	movlb	0	; () banked
  1263  001B3A  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  1264  001B3C  0100               	movlb	0	; () banked
  1265  001B3E  219A               	addwfc	(??_main+3)& (0+255),w,b
  1266  001B40  6E1E               	movwf	___lltoft@c+3,c
  1267  001B42  EC62  F017         	call	___lltoft	;wreg free
  1268  001B46  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1269  001B4A  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1270  001B4E  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1271  001B52  0EC0               	movlw	192
  1272  001B54  6E27               	movwf	___ftmul@f2,c
  1273  001B56  0E28               	movlw	40
  1274  001B58  6E28               	movwf	___ftmul@f2+1,c
  1275  001B5A  0E45               	movlw	69
  1276  001B5C  6E29               	movwf	___ftmul@f2+2,c
  1277  001B5E  C0A5  F09B         	movff	main@rightCountTracker,??_main+4
  1278  001B62  C0A6  F09C         	movff	main@rightCountTracker+1,??_main+5
  1279  001B66  0E00               	movlw	0
  1280  001B68  0100               	movlb	0	; () banked
  1281  001B6A  BF9C               	btfsc	(??_main+5)& (0+255),7,b
  1282  001B6C  0EFF               	movlw	255
  1283  001B6E  6F9D               	movwf	(??_main+6)& (0+255),b
  1284  001B70  6F9E               	movwf	(??_main+7)& (0+255),b
  1285  001B72  0100               	movlb	0	; () banked
  1286  001B74  1F9B               	comf	(??_main+4)& (0+255),f,b
  1287  001B76  1F9C               	comf	(??_main+5)& (0+255),f,b
  1288  001B78  1F9D               	comf	(??_main+6)& (0+255),f,b
  1289  001B7A  1F9E               	comf	(??_main+7)& (0+255),f,b
  1290  001B7C  2B9B               	incf	(??_main+4)& (0+255),f,b
  1291  001B7E  0E00               	movlw	0
  1292  001B80  239C               	addwfc	(??_main+5)& (0+255),f,b
  1293  001B82  239D               	addwfc	(??_main+6)& (0+255),f,b
  1294  001B84  239E               	addwfc	(??_main+7)& (0+255),f,b
  1295  001B86  0100               	movlb	0	; () banked
  1296  001B88  51B7               	movf	_rightWheelCount& (0+255),w,b
  1297  001B8A  0100               	movlb	0	; () banked
  1298  001B8C  259B               	addwf	(??_main+4)& (0+255),w,b
  1299  001B8E  6E1B               	movwf	___lltoft@c,c
  1300  001B90  0100               	movlb	0	; () banked
  1301  001B92  51B8               	movf	(_rightWheelCount+1)& (0+255),w,b
  1302  001B94  0100               	movlb	0	; () banked
  1303  001B96  219C               	addwfc	(??_main+5)& (0+255),w,b
  1304  001B98  6E1C               	movwf	___lltoft@c+1,c
  1305  001B9A  0100               	movlb	0	; () banked
  1306  001B9C  51B9               	movf	(_rightWheelCount+2)& (0+255),w,b
  1307  001B9E  0100               	movlb	0	; () banked
  1308  001BA0  219D               	addwfc	(??_main+6)& (0+255),w,b
  1309  001BA2  6E1D               	movwf	___lltoft@c+2,c
  1310  001BA4  0100               	movlb	0	; () banked
  1311  001BA6  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  1312  001BA8  0100               	movlb	0	; () banked
  1313  001BAA  219E               	addwfc	(??_main+7)& (0+255),w,b
  1314  001BAC  6E1E               	movwf	___lltoft@c+3,c
  1315  001BAE  EC62  F017         	call	___lltoft	;wreg free
  1316  001BB2  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1317  001BB6  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1318  001BBA  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1319  001BBE  ECAA  F014         	call	___ftmul	;wreg free
  1320  001BC2  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1321  001BC6  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1322  001BCA  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1323  001BCE  EC24  F015         	call	___ftdiv	;wreg free
  1324  001BD2  C033  F073         	movff	?___ftdiv,___fttol@f1
  1325  001BD6  C034  F074         	movff	?___ftdiv+1,___fttol@f1+1
  1326  001BDA  C035  F075         	movff	?___ftdiv+2,___fttol@f1+2
  1327  001BDE  ECFB  F012         	call	___fttol	;wreg free
  1328  001BE2  C073  F0C5         	movff	?___fttol,_rightWheelMeasuredSpeed
  1329  001BE6  C074  F0C6         	movff	?___fttol+1,_rightWheelMeasuredSpeed+1
  1330                           
  1331                           ;main.c: 235: leftWheelMeasuredSpeed = (int) ((leftWheelCount - leftCountTracker) * (5.4
      +                           * 500) / (elapsedMillis - speedLastMillis));
  1332  001BEA  C0AB  F097         	movff	main@speedLastMillis,??_main
  1333  001BEE  C0AC  F098         	movff	main@speedLastMillis+1,??_main+1
  1334  001BF2  C0AD  F099         	movff	main@speedLastMillis+2,??_main+2
  1335  001BF6  C0AE  F09A         	movff	main@speedLastMillis+3,??_main+3
  1336  001BFA  0100               	movlb	0	; () banked
  1337  001BFC  1F97               	comf	??_main& (0+255),f,b
  1338  001BFE  1F98               	comf	(??_main+1)& (0+255),f,b
  1339  001C00  1F99               	comf	(??_main+2)& (0+255),f,b
  1340  001C02  1F9A               	comf	(??_main+3)& (0+255),f,b
  1341  001C04  2B97               	incf	??_main& (0+255),f,b
  1342  001C06  0E00               	movlw	0
  1343  001C08  2398               	addwfc	(??_main+1)& (0+255),f,b
  1344  001C0A  2399               	addwfc	(??_main+2)& (0+255),f,b
  1345  001C0C  239A               	addwfc	(??_main+3)& (0+255),f,b
  1346  001C0E  0100               	movlb	0	; () banked
  1347  001C10  51AF               	movf	_elapsedMillis& (0+255),w,b
  1348  001C12  0100               	movlb	0	; () banked
  1349  001C14  2597               	addwf	??_main& (0+255),w,b
  1350  001C16  6E1B               	movwf	___lltoft@c,c
  1351  001C18  0100               	movlb	0	; () banked
  1352  001C1A  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  1353  001C1C  0100               	movlb	0	; () banked
  1354  001C1E  2198               	addwfc	(??_main+1)& (0+255),w,b
  1355  001C20  6E1C               	movwf	___lltoft@c+1,c
  1356  001C22  0100               	movlb	0	; () banked
  1357  001C24  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  1358  001C26  0100               	movlb	0	; () banked
  1359  001C28  2199               	addwfc	(??_main+2)& (0+255),w,b
  1360  001C2A  6E1D               	movwf	___lltoft@c+2,c
  1361  001C2C  0100               	movlb	0	; () banked
  1362  001C2E  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  1363  001C30  0100               	movlb	0	; () banked
  1364  001C32  219A               	addwfc	(??_main+3)& (0+255),w,b
  1365  001C34  6E1E               	movwf	___lltoft@c+3,c
  1366  001C36  EC62  F017         	call	___lltoft	;wreg free
  1367  001C3A  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1368  001C3E  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1369  001C42  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1370  001C46  0EC0               	movlw	192
  1371  001C48  6E27               	movwf	___ftmul@f2,c
  1372  001C4A  0E28               	movlw	40
  1373  001C4C  6E28               	movwf	___ftmul@f2+1,c
  1374  001C4E  0E45               	movlw	69
  1375  001C50  6E29               	movwf	___ftmul@f2+2,c
  1376  001C52  C0A3  F09B         	movff	main@leftCountTracker,??_main+4
  1377  001C56  C0A4  F09C         	movff	main@leftCountTracker+1,??_main+5
  1378  001C5A  0E00               	movlw	0
  1379  001C5C  0100               	movlb	0	; () banked
  1380  001C5E  BF9C               	btfsc	(??_main+5)& (0+255),7,b
  1381  001C60  0EFF               	movlw	255
  1382  001C62  6F9D               	movwf	(??_main+6)& (0+255),b
  1383  001C64  6F9E               	movwf	(??_main+7)& (0+255),b
  1384  001C66  0100               	movlb	0	; () banked
  1385  001C68  1F9B               	comf	(??_main+4)& (0+255),f,b
  1386  001C6A  1F9C               	comf	(??_main+5)& (0+255),f,b
  1387  001C6C  1F9D               	comf	(??_main+6)& (0+255),f,b
  1388  001C6E  1F9E               	comf	(??_main+7)& (0+255),f,b
  1389  001C70  2B9B               	incf	(??_main+4)& (0+255),f,b
  1390  001C72  0E00               	movlw	0
  1391  001C74  239C               	addwfc	(??_main+5)& (0+255),f,b
  1392  001C76  239D               	addwfc	(??_main+6)& (0+255),f,b
  1393  001C78  239E               	addwfc	(??_main+7)& (0+255),f,b
  1394  001C7A  0100               	movlb	0	; () banked
  1395  001C7C  51B3               	movf	_leftWheelCount& (0+255),w,b
  1396  001C7E  0100               	movlb	0	; () banked
  1397  001C80  259B               	addwf	(??_main+4)& (0+255),w,b
  1398  001C82  6E1B               	movwf	___lltoft@c,c
  1399  001C84  0100               	movlb	0	; () banked
  1400  001C86  51B4               	movf	(_leftWheelCount+1)& (0+255),w,b
  1401  001C88  0100               	movlb	0	; () banked
  1402  001C8A  219C               	addwfc	(??_main+5)& (0+255),w,b
  1403  001C8C  6E1C               	movwf	___lltoft@c+1,c
  1404  001C8E  0100               	movlb	0	; () banked
  1405  001C90  51B5               	movf	(_leftWheelCount+2)& (0+255),w,b
  1406  001C92  0100               	movlb	0	; () banked
  1407  001C94  219D               	addwfc	(??_main+6)& (0+255),w,b
  1408  001C96  6E1D               	movwf	___lltoft@c+2,c
  1409  001C98  0100               	movlb	0	; () banked
  1410  001C9A  51B6               	movf	(_leftWheelCount+3)& (0+255),w,b
  1411  001C9C  0100               	movlb	0	; () banked
  1412  001C9E  219E               	addwfc	(??_main+7)& (0+255),w,b
  1413  001CA0  6E1E               	movwf	___lltoft@c+3,c
  1414  001CA2  EC62  F017         	call	___lltoft	;wreg free
  1415  001CA6  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1416  001CAA  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1417  001CAE  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1418  001CB2  ECAA  F014         	call	___ftmul	;wreg free
  1419  001CB6  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1420  001CBA  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1421  001CBE  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1422  001CC2  EC24  F015         	call	___ftdiv	;wreg free
  1423  001CC6  C033  F073         	movff	?___ftdiv,___fttol@f1
  1424  001CCA  C034  F074         	movff	?___ftdiv+1,___fttol@f1+1
  1425  001CCE  C035  F075         	movff	?___ftdiv+2,___fttol@f1+2
  1426  001CD2  ECFB  F012         	call	___fttol	;wreg free
  1427  001CD6  C073  F0C3         	movff	?___fttol,_leftWheelMeasuredSpeed
  1428  001CDA  C074  F0C4         	movff	?___fttol+1,_leftWheelMeasuredSpeed+1
  1429                           
  1430                           ;main.c: 237: speedLastMillis = elapsedMillis;
  1431  001CDE  C0AF  F0AB         	movff	_elapsedMillis,main@speedLastMillis
  1432  001CE2  C0B0  F0AC         	movff	_elapsedMillis+1,main@speedLastMillis+1
  1433  001CE6  C0B1  F0AD         	movff	_elapsedMillis+2,main@speedLastMillis+2
  1434  001CEA  C0B2  F0AE         	movff	_elapsedMillis+3,main@speedLastMillis+3
  1435                           
  1436                           ;main.c: 239: rightCountTracker = rightWheelCount;
  1437  001CEE  C0B7  F0A5         	movff	_rightWheelCount,main@rightCountTracker
  1438  001CF2  C0B8  F0A6         	movff	_rightWheelCount+1,main@rightCountTracker+1
  1439                           
  1440                           ;main.c: 241: leftCountTracker = leftWheelCount;
  1441  001CF6  C0B3  F0A3         	movff	_leftWheelCount,main@leftCountTracker
  1442  001CFA  C0B4  F0A4         	movff	_leftWheelCount+1,main@leftCountTracker+1
  1443  001CFE  D62B               	goto	l3197
  1444  001D00                     __end_of_main:
  1445                           	opt stack 0
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           intcon	equ	0xFF2
  1451                           intcon2	equ	0xFF1
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postdec1	equ	0xFE5
  1455                           fsr1l	equ	0xFE1
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _printf *****************
  1459 ;; Defined at:
  1460 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1463 ;;		 -> STR_5(5), STR_4(10), STR_3(16), STR_2(15), 
  1464 ;;		 -> STR_1(11), 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  tmpval          4    0        struct .
  1467 ;;  cp              3    0        PTR const unsigned char 
  1468 ;;  width           2   44[COMRAM] int 
  1469 ;;  val             2   42[COMRAM] unsigned int 
  1470 ;;  ap              2   38[COMRAM] PTR void [1]
  1471 ;;		 -> ?_printf(2), 
  1472 ;;  len             2    0        unsigned int 
  1473 ;;  c               1   46[COMRAM] char 
  1474 ;;  flag            1   41[COMRAM] unsigned char 
  1475 ;;  prec            1   40[COMRAM] char 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2   30[COMRAM] int 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:       17 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    4
  1492 ;; This function calls:
  1493 ;;		___lwdiv
  1494 ;;		___lwmod
  1495 ;;		___wmul
  1496 ;;		_isdigit
  1497 ;;		_putch
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text1
  1504  00209C                     __ptext1:
  1505                           	opt stack 0
  1506  00209C                     _printf:
  1507                           	opt stack 26
  1508                           
  1509                           ;doprnt.c: 466: va_list ap;
  1510                           ;doprnt.c: 499: signed char c;
  1511                           ;doprnt.c: 501: int width;
  1512                           ;doprnt.c: 506: signed char prec;
  1513                           ;doprnt.c: 508: unsigned char flag;
  1514                           ;doprnt.c: 523: union {
  1515                           ;doprnt.c: 524: unsigned long vd;
  1516                           ;doprnt.c: 525: double integ;
  1517                           ;doprnt.c: 526: } tmpval;
  1518                           ;doprnt.c: 528: unsigned int val;
  1519                           ;doprnt.c: 529: unsigned len;
  1520                           ;doprnt.c: 530: const char * cp;
  1521                           ;doprnt.c: 533: *ap = __va_start();
  1522                           
  1523                           ;incstack = 0
  1524  00209C  0E21               	movlw	low (?_printf+2)
  1525  00209E  6E27               	movwf	printf@ap,c
  1526  0020A0  0E00               	movlw	high (?_printf+2)
  1527  0020A2  6E28               	movwf	printf@ap+1,c
  1528                           
  1529                           ;doprnt.c: 536: while(c = *f++) {
  1530  0020A4  D0EE               	goto	l2751
  1531  0020A6                     l2675:
  1532                           
  1533                           ;doprnt.c: 538: if(c != '%')
  1534  0020A6  0E25               	movlw	37
  1535  0020A8  182F               	xorwf	printf@c,w,c
  1536  0020AA  B4D8               	btfsc	status,2,c
  1537  0020AC  D004               	goto	l2679
  1538                           
  1539                           ;doprnt.c: 540: {
  1540                           ;doprnt.c: 541: (putch(c) );
  1541  0020AE  502F               	movf	printf@c,w,c
  1542  0020B0  ECD3  F018         	call	_putch
  1543                           
  1544                           ;doprnt.c: 542: continue;
  1545  0020B4  D0E6               	goto	l2751
  1546  0020B6                     l2679:
  1547                           
  1548                           ;doprnt.c: 543: }
  1549                           ;doprnt.c: 546: width = 0;
  1550  0020B6  0E00               	movlw	0
  1551  0020B8  6E2E               	movwf	printf@width+1,c
  1552  0020BA  0E00               	movlw	0
  1553  0020BC  6E2D               	movwf	printf@width,c
  1554                           
  1555                           ;doprnt.c: 548: flag = 0;
  1556  0020BE  0E00               	movlw	0
  1557  0020C0  6E2A               	movwf	printf@flag,c
  1558                           
  1559                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1560  0020C2  C01F  FFF6         	movff	printf@f,tblptrl
  1561  0020C6  C020  FFF7         	movff	printf@f+1,tblptrh
  1562  0020CA                     	if	0	;tblptru may be non-zero
  1563  0020CA                     	endif
  1564  0020CA                     	if	0	;tblptru may be non-zero
  1565  0020CA                     	endif
  1566  0020CA  0008               	tblrd		*
  1567  0020CC  50F5               	movf	tablat,w,c
  1568  0020CE  EC92  F018         	call	_isdigit
  1569  0020D2  A0D8               	btfss	status,0,c
  1570  0020D4  D032               	goto	l2695
  1571                           
  1572                           ;doprnt.c: 598: width = 0;
  1573  0020D6  0E00               	movlw	0
  1574  0020D8  6E2E               	movwf	printf@width+1,c
  1575  0020DA  0E00               	movlw	0
  1576  0020DC  6E2D               	movwf	printf@width,c
  1577  0020DE                     l2685:
  1578                           
  1579                           ;doprnt.c: 600: width *= 10;
  1580  0020DE  C02D  F013         	movff	printf@width,___wmul@multiplier
  1581  0020E2  C02E  F014         	movff	printf@width+1,___wmul@multiplier+1
  1582  0020E6  0E00               	movlw	0
  1583  0020E8  6E16               	movwf	___wmul@multiplicand+1,c
  1584  0020EA  0E0A               	movlw	10
  1585  0020EC  6E15               	movwf	___wmul@multiplicand,c
  1586  0020EE  EC6D  F018         	call	___wmul	;wreg free
  1587  0020F2  C013  F02D         	movff	?___wmul,printf@width
  1588  0020F6  C014  F02E         	movff	?___wmul+1,printf@width+1
  1589                           
  1590                           ;doprnt.c: 601: width += *f++ - '0';
  1591  0020FA  0ED0               	movlw	208
  1592  0020FC  6E23               	movwf	??_printf& (0+255),c
  1593  0020FE  0EFF               	movlw	255
  1594  002100  6E24               	movwf	(??_printf+1)& (0+255),c
  1595  002102  C01F  FFF6         	movff	printf@f,tblptrl
  1596  002106  C020  FFF7         	movff	printf@f+1,tblptrh
  1597  00210A                     	if	0	;tblptru may be non-zero
  1598  00210A                     	endif
  1599  00210A                     	if	0	;tblptru may be non-zero
  1600  00210A                     	endif
  1601  00210A  0008               	tblrd		*
  1602  00210C  50F5               	movf	tablat,w,c
  1603  00210E  6E25               	movwf	(??_printf+2)& (0+255),c
  1604  002110  6A26               	clrf	(??_printf+3)& (0+255),c
  1605  002112  5023               	movf	??_printf,w,c
  1606  002114  2625               	addwf	??_printf+2,f,c
  1607  002116  5024               	movf	??_printf+1,w,c
  1608  002118  2226               	addwfc	??_printf+3,f,c
  1609  00211A  5025               	movf	??_printf+2,w,c
  1610  00211C  262D               	addwf	printf@width,f,c
  1611  00211E  5026               	movf	??_printf+3,w,c
  1612  002120  222E               	addwfc	printf@width+1,f,c
  1613  002122  4A1F               	infsnz	printf@f,f,c
  1614  002124  2A20               	incf	printf@f+1,f,c
  1615                           
  1616                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1617  002126  C01F  FFF6         	movff	printf@f,tblptrl
  1618  00212A  C020  FFF7         	movff	printf@f+1,tblptrh
  1619  00212E                     	if	0	;tblptru may be non-zero
  1620  00212E                     	endif
  1621  00212E                     	if	0	;tblptru may be non-zero
  1622  00212E                     	endif
  1623  00212E  0008               	tblrd		*
  1624  002130  50F5               	movf	tablat,w,c
  1625  002132  EC92  F018         	call	_isdigit
  1626  002136  B0D8               	btfsc	status,0,c
  1627  002138  D7D2               	goto	l2685
  1628  00213A                     l2695:
  1629  00213A  C01F  FFF6         	movff	printf@f,tblptrl
  1630  00213E  C020  FFF7         	movff	printf@f+1,tblptrh
  1631  002142  4A1F               	infsnz	printf@f,f,c
  1632  002144  2A20               	incf	printf@f+1,f,c
  1633  002146                     	if	0	;tblptru may be non-zero
  1634  002146                     	endif
  1635  002146                     	if	0	;tblptru may be non-zero
  1636  002146                     	endif
  1637  002146  0008               	tblrd		*
  1638  002148  CFF5 F02F          	movff	tablat,printf@c
  1639  00214C  502F               	movf	printf@c,w,c
  1640                           
  1641                           ; Switch size 1, requested type "space"
  1642                           ; Number of cases is 3, Range of values is 0 to 105
  1643                           ; switch strategies available:
  1644                           ; Name         Instructions Cycles
  1645                           ; simple_byte           10     6 (average)
  1646                           ;	Chosen strategy is simple_byte
  1647  00214E  0A00               	xorlw	0	; case 0
  1648  002150  B4D8               	btfsc	status,2,c
  1649  002152  0012               	return	
  1650  002154  0A64               	xorlw	100	; case 100
  1651  002156  B4D8               	btfsc	status,2,c
  1652  002158  D003               	goto	l2697
  1653  00215A  0A0D               	xorlw	13	; case 105
  1654  00215C  A4D8               	btfss	status,2,c
  1655  00215E  D091               	goto	l2751
  1656  002160                     l2697:
  1657                           
  1658                           ;doprnt.c: 1253: {
  1659                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1660  002160  C027  FFD9         	movff	printf@ap,fsr2l
  1661  002164  C028  FFDA         	movff	printf@ap+1,fsr2h
  1662  002168  CFDE F02B          	movff	postinc2,printf@val
  1663  00216C  CFDD F02C          	movff	postdec2,printf@val+1
  1664  002170  0E02               	movlw	2
  1665  002172  2627               	addwf	printf@ap,f,c
  1666  002174  0E00               	movlw	0
  1667  002176  2228               	addwfc	printf@ap+1,f,c
  1668                           
  1669                           ;doprnt.c: 1261: if((int)val < 0) {
  1670  002178  AE2C               	btfss	printf@val+1,7,c
  1671  00217A  D006               	goto	l2707
  1672                           
  1673                           ;doprnt.c: 1262: flag |= 0x03;
  1674  00217C  0E03               	movlw	3
  1675  00217E  122A               	iorwf	printf@flag,f,c
  1676                           
  1677                           ;doprnt.c: 1263: val = -val;
  1678  002180  6C2B               	negf	printf@val,c
  1679  002182  1E2C               	comf	printf@val+1,f,c
  1680  002184  B0D8               	btfsc	status,0,c
  1681  002186  2A2C               	incf	printf@val+1,f,c
  1682  002188                     l2707:
  1683                           
  1684                           ;doprnt.c: 1264: }
  1685                           ;doprnt.c: 1266: }
  1686                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1687  002188  0E01               	movlw	1
  1688  00218A  6E2F               	movwf	printf@c,c
  1689  00218C                     l2709:
  1690  00218C  0E05               	movlw	5
  1691  00218E  182F               	xorwf	printf@c,w,c
  1692  002190  B4D8               	btfsc	status,2,c
  1693  002192  D012               	goto	l2721
  1694                           
  1695                           ;doprnt.c: 1306: if(val < dpowers[c])
  1696  002194  502F               	movf	printf@c,w,c
  1697  002196  0D02               	mullw	2
  1698  002198  0E01               	movlw	low _dpowers
  1699  00219A  24F3               	addwf	prodl,w,c
  1700  00219C  6EF6               	movwf	tblptrl,c
  1701  00219E  0E10               	movlw	high _dpowers
  1702  0021A0  20F4               	addwfc	prodh,w,c
  1703  0021A2  6EF7               	movwf	tblptrh,c
  1704  0021A4                     	if	0	;There are less than 3 active tblptr bytes
  1705  0021A4                     	endif
  1706  0021A4  0009               	tblrd		*+
  1707  0021A6  50F5               	movf	tablat,w,c
  1708  0021A8  5C2B               	subwf	printf@val,w,c
  1709  0021AA  0009               	tblrd		*+
  1710  0021AC  50F5               	movf	tablat,w,c
  1711  0021AE  582C               	subwfb	printf@val+1,w,c
  1712  0021B0  A0D8               	btfss	status,0,c
  1713  0021B2  D002               	goto	l2721
  1714                           
  1715                           ;doprnt.c: 1307: break;
  1716  0021B4  2A2F               	incf	printf@c,f,c
  1717  0021B6  D7EA               	goto	l2709
  1718  0021B8                     l2721:
  1719                           
  1720                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1721  0021B8  502D               	movf	printf@width,w,c
  1722  0021BA  102E               	iorwf	printf@width+1,w,c
  1723  0021BC  B4D8               	btfsc	status,2,c
  1724  0021BE  D009               	goto	l2727
  1725  0021C0  C02A  F023         	movff	printf@flag,??_printf
  1726  0021C4  0E03               	movlw	3
  1727  0021C6  1623               	andwf	??_printf,f,c
  1728  0021C8  B4D8               	btfsc	status,2,c
  1729  0021CA  D003               	goto	l2727
  1730                           
  1731                           ;doprnt.c: 1346: width--;
  1732  0021CC  062D               	decf	printf@width,f,c
  1733  0021CE  A0D8               	btfss	status,0,c
  1734  0021D0  062E               	decf	printf@width+1,f,c
  1735  0021D2                     l2727:
  1736                           
  1737                           ;doprnt.c: 1381: if(width > c)
  1738  0021D2  0E80               	movlw	128
  1739  0021D4  BE2F               	btfsc	printf@c,7,c
  1740  0021D6  0E7F               	movlw	127
  1741  0021D8  6E23               	movwf	??_printf& (0+255),c
  1742  0021DA  502D               	movf	printf@width,w,c
  1743  0021DC  5C2F               	subwf	printf@c,w,c
  1744  0021DE  502E               	movf	printf@width+1,w,c
  1745  0021E0  0A80               	xorlw	128
  1746  0021E2  5823               	subwfb	??_printf& (0+255),w,c
  1747  0021E4  B0D8               	btfsc	status,0,c
  1748  0021E6  D007               	goto	l2731
  1749                           
  1750                           ;doprnt.c: 1382: width -= c;
  1751  0021E8  502F               	movf	printf@c,w,c
  1752  0021EA  5E2D               	subwf	printf@width,f,c
  1753  0021EC  0E00               	movlw	0
  1754  0021EE  BE2F               	btfsc	printf@c,7,c
  1755  0021F0  0EFF               	movlw	255
  1756  0021F2  5A2E               	subwfb	printf@width+1,f,c
  1757  0021F4  D004               	goto	l2733
  1758  0021F6                     l2731:
  1759                           
  1760                           ;doprnt.c: 1383: else
  1761                           ;doprnt.c: 1384: width = 0;
  1762  0021F6  0E00               	movlw	0
  1763  0021F8  6E2E               	movwf	printf@width+1,c
  1764  0021FA  0E00               	movlw	0
  1765  0021FC  6E2D               	movwf	printf@width,c
  1766  0021FE                     l2733:
  1767                           
  1768                           ;doprnt.c: 1422: {
  1769                           ;doprnt.c: 1424: if(width
  1770                           ;doprnt.c: 1428: )
  1771  0021FE  502D               	movf	printf@width,w,c
  1772  002200  102E               	iorwf	printf@width+1,w,c
  1773  002202  B4D8               	btfsc	status,2,c
  1774  002204  D00A               	goto	l2739
  1775  002206                     l2735:
  1776                           
  1777                           ;doprnt.c: 1430: (putch(' ') );
  1778  002206  0E20               	movlw	32
  1779  002208  ECD3  F018         	call	_putch
  1780                           
  1781                           ;doprnt.c: 1431: while(--width);
  1782  00220C  062D               	decf	printf@width,f,c
  1783  00220E  A0D8               	btfss	status,0,c
  1784  002210  062E               	decf	printf@width+1,f,c
  1785  002212  502D               	movf	printf@width,w,c
  1786  002214  102E               	iorwf	printf@width+1,w,c
  1787  002216  A4D8               	btfss	status,2,c
  1788  002218  D7F6               	goto	l2735
  1789  00221A                     l2739:
  1790                           
  1791                           ;doprnt.c: 1438: if(flag & 0x03)
  1792  00221A  C02A  F023         	movff	printf@flag,??_printf
  1793  00221E  0E03               	movlw	3
  1794  002220  1623               	andwf	??_printf,f,c
  1795  002222  B4D8               	btfsc	status,2,c
  1796  002224  D003               	goto	l2743
  1797                           
  1798                           ;doprnt.c: 1439: (putch('-') );
  1799  002226  0E2D               	movlw	45
  1800  002228  ECD3  F018         	call	_putch
  1801  00222C                     l2743:
  1802                           
  1803                           ;doprnt.c: 1469: }
  1804                           ;doprnt.c: 1472: prec = c;
  1805  00222C  C02F  F029         	movff	printf@c,printf@prec
  1806                           
  1807                           ;doprnt.c: 1474: while(prec--) {
  1808  002230  D024               	goto	l2749
  1809  002232                     l2745:
  1810                           
  1811                           ;doprnt.c: 1478: {
  1812                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1813  002232  5029               	movf	printf@prec,w,c
  1814  002234  0D02               	mullw	2
  1815  002236  0E01               	movlw	low _dpowers
  1816  002238  24F3               	addwf	prodl,w,c
  1817  00223A  6EF6               	movwf	tblptrl,c
  1818  00223C  0E10               	movlw	high _dpowers
  1819  00223E  20F4               	addwfc	prodh,w,c
  1820  002240  6EF7               	movwf	tblptrh,c
  1821  002242                     	if	0	;There are less than 3 active tblptr bytes
  1822  002242                     	endif
  1823  002242  0009               	tblrd		*+
  1824  002244  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1825  002248  000A               	tblrd		*-
  1826  00224A  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1827  00224E  C02B  F013         	movff	printf@val,___lwdiv@dividend
  1828  002252  C02C  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1829  002256  ECE7  F017         	call	___lwdiv	;wreg free
  1830  00225A  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1831  00225E  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1832  002262  0E00               	movlw	0
  1833  002264  6E1D               	movwf	___lwmod@divisor+1,c
  1834  002266  0E0A               	movlw	10
  1835  002268  6E1C               	movwf	___lwmod@divisor,c
  1836  00226A  EC10  F018         	call	___lwmod	;wreg free
  1837  00226E  501A               	movf	?___lwmod,w,c
  1838  002270  0F30               	addlw	48
  1839  002272  6E2F               	movwf	printf@c,c
  1840                           
  1841                           ;doprnt.c: 1523: }
  1842                           ;doprnt.c: 1524: (putch(c) );
  1843  002274  502F               	movf	printf@c,w,c
  1844  002276  ECD3  F018         	call	_putch
  1845  00227A                     l2749:
  1846  00227A  0629               	decf	printf@prec,f,c
  1847  00227C  2829               	incf	printf@prec,w,c
  1848  00227E  A4D8               	btfss	status,2,c
  1849  002280  D7D8               	goto	l2745
  1850  002282                     l2751:
  1851  002282  C01F  FFF6         	movff	printf@f,tblptrl
  1852  002286  C020  FFF7         	movff	printf@f+1,tblptrh
  1853  00228A  4A1F               	infsnz	printf@f,f,c
  1854  00228C  2A20               	incf	printf@f+1,f,c
  1855  00228E                     	if	0	;tblptru may be non-zero
  1856  00228E                     	endif
  1857  00228E                     	if	0	;tblptru may be non-zero
  1858  00228E                     	endif
  1859  00228E  0008               	tblrd		*
  1860  002290  CFF5 F02F          	movff	tablat,printf@c
  1861  002294  502F               	movf	printf@c,w,c
  1862  002296  B4D8               	btfsc	status,2,c
  1863  002298  0012               	return	
  1864  00229A  D705               	goto	l2675
  1865  00229C                     __end_of_printf:
  1866                           	opt stack 0
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           prodh	equ	0xFF4
  1872                           prodl	equ	0xFF3
  1873                           intcon	equ	0xFF2
  1874                           intcon2	equ	0xFF1
  1875                           postinc0	equ	0xFEE
  1876                           wreg	equ	0xFE8
  1877                           postdec1	equ	0xFE5
  1878                           fsr1l	equ	0xFE1
  1879                           postinc2	equ	0xFDE
  1880                           postdec2	equ	0xFDD
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _putch *****************
  1886 ;; Defined at:
  1887 ;;		line 12 in file "printfLib.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  data            1    wreg     unsigned char 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  data            1   20[COMRAM] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;Total ram usage:        1 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    3
  1908 ;; This function calls:
  1909 ;;		_LCDwrite
  1910 ;; This function is called by:
  1911 ;;		_printf
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text2
  1916  0031A6                     __ptext2:
  1917                           	opt stack 0
  1918  0031A6                     _putch:
  1919                           	opt stack 26
  1920                           
  1921                           ;incstack = 0
  1922                           ;putch@data stored from wreg
  1923  0031A6  6E15               	movwf	putch@data,c
  1924                           
  1925                           ;printfLib.c: 13: LCDwrite(data);
  1926  0031A8  5015               	movf	putch@data,w,c
  1927  0031AA  ECAB  F018         	call	_LCDwrite
  1928  0031AE  0012               	return		;funcret
  1929  0031B0                     __end_of_putch:
  1930                           	opt stack 0
  1931                           tblptru	equ	0xFF8
  1932                           tblptrh	equ	0xFF7
  1933                           tblptrl	equ	0xFF6
  1934                           tablat	equ	0xFF5
  1935                           prodh	equ	0xFF4
  1936                           prodl	equ	0xFF3
  1937                           intcon	equ	0xFF2
  1938                           intcon2	equ	0xFF1
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           postdec1	equ	0xFE5
  1942                           fsr1l	equ	0xFE1
  1943                           postinc2	equ	0xFDE
  1944                           postdec2	equ	0xFDD
  1945                           fsr2h	equ	0xFDA
  1946                           fsr2l	equ	0xFD9
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function _LCDwrite *****************
  1950 ;; Defined at:
  1951 ;;		line 118 in file "lcd.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  input           1    wreg     unsigned char 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  input           1   19[COMRAM] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;Total ram usage:        1 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    2
  1972 ;; This function calls:
  1973 ;;		_LCDcheckBF
  1974 ;;		_LCDcmd
  1975 ;; This function is called by:
  1976 ;;		_putch
  1977 ;;		_LCDputs
  1978 ;;		_LCDwriteLineOne
  1979 ;;		_LCDwriteLineTwo
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text3
  1984  003156                     __ptext3:
  1985                           	opt stack 0
  1986  003156                     _LCDwrite:
  1987                           	opt stack 26
  1988                           
  1989                           ;incstack = 0
  1990                           ;LCDwrite@input stored from wreg
  1991  003156  6E14               	movwf	LCDwrite@input,c
  1992                           
  1993                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  1994  003158  808D               	bsf	3981,0,c	;volatile
  1995                           
  1996                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  1997  00315A  928D               	bcf	3981,1,c	;volatile
  1998                           
  1999                           ;lcd.c: 122: LCDcmd(input);
  2000  00315C  5014               	movf	LCDwrite@input,w,c
  2001  00315E  ECCD  F018         	call	_LCDcmd
  2002                           
  2003                           ;lcd.c: 123: LCDcheckBF();
  2004  003162  ECA1  F018         	call	_LCDcheckBF	;wreg free
  2005  003166  0012               	return		;funcret
  2006  003168                     __end_of_LCDwrite:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           intcon	equ	0xFF2
  2015                           intcon2	equ	0xFF1
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           postdec1	equ	0xFE5
  2019                           fsr1l	equ	0xFE1
  2020                           postinc2	equ	0xFDE
  2021                           postdec2	equ	0xFDD
  2022                           fsr2h	equ	0xFDA
  2023                           fsr2l	equ	0xFD9
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _isdigit *****************
  2027 ;; Defined at:
  2028 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  c               1    wreg     unsigned char 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;  c               1   20[COMRAM] unsigned char 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;		None               void
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;Total ram usage:        3 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    1
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_printf
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text4
  2057  003124                     __ptext4:
  2058                           	opt stack 0
  2059  003124                     _isdigit:
  2060                           	opt stack 28
  2061                           
  2062                           ;incstack = 0
  2063                           ;isdigit@c stored from wreg
  2064  003124  6E15               	movwf	isdigit@c,c
  2065  003126  0E00               	movlw	0
  2066  003128  6E14               	movwf	_isdigit$1727,c
  2067  00312A  0E3A               	movlw	58
  2068  00312C  6015               	cpfslt	isdigit@c,c
  2069  00312E  D005               	goto	l2495
  2070  003130  0E2F               	movlw	47
  2071  003132  6415               	cpfsgt	isdigit@c,c
  2072  003134  D002               	goto	l2495
  2073  003136  0E01               	movlw	1
  2074  003138  6E14               	movwf	_isdigit$1727,c
  2075  00313A                     l2495:
  2076  00313A  C014  F013         	movff	_isdigit$1727,??_isdigit
  2077  00313E  3013               	rrcf	??_isdigit,w,c
  2078  003140  0012               	return	
  2079  003142                     __end_of_isdigit:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           intcon	equ	0xFF2
  2088                           intcon2	equ	0xFF1
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           postdec1	equ	0xFE5
  2092                           fsr1l	equ	0xFE1
  2093                           postinc2	equ	0xFDE
  2094                           postdec2	equ	0xFDD
  2095                           fsr2h	equ	0xFDA
  2096                           fsr2l	equ	0xFD9
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function ___wmul *****************
  2100 ;; Defined at:
  2101 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;  multiplier      2   18[COMRAM] unsigned int 
  2104 ;;  multiplicand    2   20[COMRAM] unsigned int 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  product         2   22[COMRAM] unsigned int 
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  2   18[COMRAM] unsigned int 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0, prodl, prodh
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;Total ram usage:        6 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    1
  2123 ;; This function calls:
  2124 ;;		Nothing
  2125 ;; This function is called by:
  2126 ;;		_printf
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text5
  2131  0030DA                     __ptext5:
  2132                           	opt stack 0
  2133  0030DA                     ___wmul:
  2134                           	opt stack 28
  2135                           
  2136                           ;incstack = 0
  2137  0030DA  5013               	movf	___wmul@multiplier,w,c
  2138  0030DC  0215               	mulwf	___wmul@multiplicand,c
  2139  0030DE  CFF3 F017          	movff	prodl,___wmul@product
  2140  0030E2  CFF4 F018          	movff	prodh,___wmul@product+1
  2141  0030E6  5013               	movf	___wmul@multiplier,w,c
  2142  0030E8  0216               	mulwf	___wmul@multiplicand+1,c
  2143  0030EA  50F3               	movf	prodl,w,c
  2144  0030EC  2618               	addwf	___wmul@product+1,f,c
  2145  0030EE  5014               	movf	___wmul@multiplier+1,w,c
  2146  0030F0  0215               	mulwf	___wmul@multiplicand,c
  2147  0030F2  50F3               	movf	prodl,w,c
  2148  0030F4  2618               	addwf	___wmul@product+1,f,c
  2149  0030F6  C017  F013         	movff	___wmul@product,?___wmul
  2150  0030FA  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2151  0030FE  0012               	return	
  2152  003100                     __end_of___wmul:
  2153                           	opt stack 0
  2154                           tblptru	equ	0xFF8
  2155                           tblptrh	equ	0xFF7
  2156                           tblptrl	equ	0xFF6
  2157                           tablat	equ	0xFF5
  2158                           prodh	equ	0xFF4
  2159                           prodl	equ	0xFF3
  2160                           intcon	equ	0xFF2
  2161                           intcon2	equ	0xFF1
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postdec1	equ	0xFE5
  2165                           fsr1l	equ	0xFE1
  2166                           postinc2	equ	0xFDE
  2167                           postdec2	equ	0xFDD
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function ___lwmod *****************
  2173 ;; Defined at:
  2174 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  dividend        2   25[COMRAM] unsigned int 
  2177 ;;  divisor         2   27[COMRAM] unsigned int 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  counter         1   29[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  2   25[COMRAM] unsigned int 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        5 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_printf
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text6
  2204  003020                     __ptext6:
  2205                           	opt stack 0
  2206  003020                     ___lwmod:
  2207                           	opt stack 28
  2208                           
  2209                           ;incstack = 0
  2210  003020  501C               	movf	___lwmod@divisor,w,c
  2211  003022  101D               	iorwf	___lwmod@divisor+1,w,c
  2212  003024  B4D8               	btfsc	status,2,c
  2213  003026  D018               	goto	l775
  2214  003028  0E01               	movlw	1
  2215  00302A  6E1E               	movwf	___lwmod@counter,c
  2216  00302C  D004               	goto	l2533
  2217  00302E                     l2531:
  2218  00302E  90D8               	bcf	status,0,c
  2219  003030  361C               	rlcf	___lwmod@divisor,f,c
  2220  003032  361D               	rlcf	___lwmod@divisor+1,f,c
  2221  003034  2A1E               	incf	___lwmod@counter,f,c
  2222  003036                     l2533:
  2223  003036  AE1D               	btfss	___lwmod@divisor+1,7,c
  2224  003038  D7FA               	goto	l2531
  2225  00303A                     l2535:
  2226  00303A  501C               	movf	___lwmod@divisor,w,c
  2227  00303C  5C1A               	subwf	___lwmod@dividend,w,c
  2228  00303E  501D               	movf	___lwmod@divisor+1,w,c
  2229  003040  581B               	subwfb	___lwmod@dividend+1,w,c
  2230  003042  A0D8               	btfss	status,0,c
  2231  003044  D004               	goto	l2539
  2232  003046  501C               	movf	___lwmod@divisor,w,c
  2233  003048  5E1A               	subwf	___lwmod@dividend,f,c
  2234  00304A  501D               	movf	___lwmod@divisor+1,w,c
  2235  00304C  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2236  00304E                     l2539:
  2237  00304E  90D8               	bcf	status,0,c
  2238  003050  321D               	rrcf	___lwmod@divisor+1,f,c
  2239  003052  321C               	rrcf	___lwmod@divisor,f,c
  2240  003054  2E1E               	decfsz	___lwmod@counter,f,c
  2241  003056  D7F1               	goto	l2535
  2242  003058                     l775:
  2243  003058  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2244  00305C  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2245  003060  0012               	return		;funcret
  2246  003062                     __end_of___lwmod:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           prodh	equ	0xFF4
  2253                           prodl	equ	0xFF3
  2254                           intcon	equ	0xFF2
  2255                           intcon2	equ	0xFF1
  2256                           postinc0	equ	0xFEE
  2257                           wreg	equ	0xFE8
  2258                           postdec1	equ	0xFE5
  2259                           fsr1l	equ	0xFE1
  2260                           postinc2	equ	0xFDE
  2261                           postdec2	equ	0xFDD
  2262                           fsr2h	equ	0xFDA
  2263                           fsr2l	equ	0xFD9
  2264                           status	equ	0xFD8
  2265                           
  2266 ;; *************** function ___lwdiv *****************
  2267 ;; Defined at:
  2268 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  dividend        2   18[COMRAM] unsigned int 
  2271 ;;  divisor         2   20[COMRAM] unsigned int 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;  quotient        2   22[COMRAM] unsigned int 
  2274 ;;  counter         1   24[COMRAM] unsigned char 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  2   18[COMRAM] unsigned int 
  2277 ;; Registers used:
  2278 ;;		wreg, status,2, status,0
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2284 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;Total ram usage:        7 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    1
  2291 ;; This function calls:
  2292 ;;		Nothing
  2293 ;; This function is called by:
  2294 ;;		_printf
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text7
  2299  002FCE                     __ptext7:
  2300                           	opt stack 0
  2301  002FCE                     ___lwdiv:
  2302                           	opt stack 28
  2303                           
  2304                           ;incstack = 0
  2305  002FCE  0E00               	movlw	0
  2306  002FD0  6E18               	movwf	___lwdiv@quotient+1,c
  2307  002FD2  0E00               	movlw	0
  2308  002FD4  6E17               	movwf	___lwdiv@quotient,c
  2309  002FD6  5015               	movf	___lwdiv@divisor,w,c
  2310  002FD8  1016               	iorwf	___lwdiv@divisor+1,w,c
  2311  002FDA  B4D8               	btfsc	status,2,c
  2312  002FDC  D01C               	goto	l765
  2313  002FDE  0E01               	movlw	1
  2314  002FE0  6E19               	movwf	___lwdiv@counter,c
  2315  002FE2  D004               	goto	l2513
  2316  002FE4                     l2511:
  2317  002FE4  90D8               	bcf	status,0,c
  2318  002FE6  3615               	rlcf	___lwdiv@divisor,f,c
  2319  002FE8  3616               	rlcf	___lwdiv@divisor+1,f,c
  2320  002FEA  2A19               	incf	___lwdiv@counter,f,c
  2321  002FEC                     l2513:
  2322  002FEC  AE16               	btfss	___lwdiv@divisor+1,7,c
  2323  002FEE  D7FA               	goto	l2511
  2324  002FF0                     l2515:
  2325  002FF0  90D8               	bcf	status,0,c
  2326  002FF2  3617               	rlcf	___lwdiv@quotient,f,c
  2327  002FF4  3618               	rlcf	___lwdiv@quotient+1,f,c
  2328  002FF6  5015               	movf	___lwdiv@divisor,w,c
  2329  002FF8  5C13               	subwf	___lwdiv@dividend,w,c
  2330  002FFA  5016               	movf	___lwdiv@divisor+1,w,c
  2331  002FFC  5814               	subwfb	___lwdiv@dividend+1,w,c
  2332  002FFE  A0D8               	btfss	status,0,c
  2333  003000  D005               	goto	l2523
  2334  003002  5015               	movf	___lwdiv@divisor,w,c
  2335  003004  5E13               	subwf	___lwdiv@dividend,f,c
  2336  003006  5016               	movf	___lwdiv@divisor+1,w,c
  2337  003008  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2338  00300A  8017               	bsf	___lwdiv@quotient,0,c
  2339  00300C                     l2523:
  2340  00300C  90D8               	bcf	status,0,c
  2341  00300E  3216               	rrcf	___lwdiv@divisor+1,f,c
  2342  003010  3215               	rrcf	___lwdiv@divisor,f,c
  2343  003012  2E19               	decfsz	___lwdiv@counter,f,c
  2344  003014  D7ED               	goto	l2515
  2345  003016                     l765:
  2346  003016  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2347  00301A  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2348  00301E  0012               	return		;funcret
  2349  003020                     __end_of___lwdiv:
  2350                           	opt stack 0
  2351                           tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           prodh	equ	0xFF4
  2356                           prodl	equ	0xFF3
  2357                           intcon	equ	0xFF2
  2358                           intcon2	equ	0xFF1
  2359                           postinc0	equ	0xFEE
  2360                           wreg	equ	0xFE8
  2361                           postdec1	equ	0xFE5
  2362                           fsr1l	equ	0xFE1
  2363                           postinc2	equ	0xFDE
  2364                           postdec2	equ	0xFDD
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _excerciseControl *****************
  2370 ;; Defined at:
  2371 ;;		line 383 in file "main.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;		None
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;Total ram usage:        2 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    6
  2392 ;; This function calls:
  2393 ;;		_driveLargeCircle
  2394 ;;		_driveStationaryCircle
  2395 ;;		_driveStraight
  2396 ;; This function is called by:
  2397 ;;		_main
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text8
  2402  002DDA                     __ptext8:
  2403                           	opt stack 0
  2404  002DDA                     _excerciseControl:
  2405                           	opt stack 24
  2406                           
  2407                           ;main.c: 385: if(lastEvent != event)
  2408                           
  2409                           ;incstack = 0
  2410  002DDA  0100               	movlb	0	; () banked
  2411  002DDC  51BF               	movf	_event& (0+255),w,b
  2412  002DDE  0100               	movlb	0	; () banked
  2413  002DE0  19C1               	xorwf	_lastEvent& (0+255),w,b
  2414  002DE2  E128               	bnz	l3169
  2415  002DE4  0100               	movlb	0	; () banked
  2416  002DE6  51C0               	movf	(_event+1)& (0+255),w,b
  2417  002DE8  0100               	movlb	0	; () banked
  2418  002DEA  19C2               	xorwf	(_lastEvent+1)& (0+255),w,b
  2419  002DEC  B4D8               	btfsc	status,2,c
  2420  002DEE  0012               	return	
  2421  002DF0  D021               	goto	l3169
  2422  002DF2                     l3153:
  2423                           
  2424                           ;main.c: 390: driveStraight();
  2425  002DF2  EC23  F008         	call	_driveStraight	;wreg free
  2426                           
  2427                           ;main.c: 391: break;
  2428  002DF6  0012               	return	
  2429  002DF8                     l3155:
  2430                           
  2431                           ;main.c: 395: driveStationaryCircle();
  2432  002DF8  EC4B  F00A         	call	_driveStationaryCircle	;wreg free
  2433                           
  2434                           ;main.c: 396: break;
  2435  002DFC  0012               	return	
  2436  002DFE                     l3157:
  2437                           
  2438                           ;main.c: 399: if(startCircleMillis == 0)
  2439  002DFE  0100               	movlb	0	; () banked
  2440  002E00  51BB               	movf	_startCircleMillis& (0+255),w,b
  2441  002E02  0100               	movlb	0	; () banked
  2442  002E04  11BC               	iorwf	(_startCircleMillis+1)& (0+255),w,b
  2443  002E06  0100               	movlb	0	; () banked
  2444  002E08  11BD               	iorwf	(_startCircleMillis+2)& (0+255),w,b
  2445  002E0A  0100               	movlb	0	; () banked
  2446  002E0C  11BE               	iorwf	(_startCircleMillis+3)& (0+255),w,b
  2447  002E0E  A4D8               	btfss	status,2,c
  2448  002E10  D008               	goto	l3161
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;main.c: 400: {
  2452                           ;main.c: 401: startCircleMillis = elapsedMillis;
  2453  002E12  C0AF  F0BB         	movff	_elapsedMillis,_startCircleMillis
  2454  002E16  C0B0  F0BC         	movff	_elapsedMillis+1,_startCircleMillis+1
  2455  002E1A  C0B1  F0BD         	movff	_elapsedMillis+2,_startCircleMillis+2
  2456  002E1E  C0B2  F0BE         	movff	_elapsedMillis+3,_startCircleMillis+3
  2457  002E22                     l3161:
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;main.c: 402: }
  2461                           ;main.c: 403: driveLargeCircle();
  2462  002E22  EC80  F00E         	call	_driveLargeCircle	;wreg free
  2463                           
  2464                           ;main.c: 404: break;
  2465  002E26  0012               	return	
  2466  002E28                     l3163:
  2467                           
  2468                           ;main.c: 407: driveStationaryCircle();
  2469  002E28  EC4B  F00A         	call	_driveStationaryCircle	;wreg free
  2470                           
  2471                           ;main.c: 408: break;
  2472  002E2C  0012               	return	
  2473  002E2E                     l3165:
  2474                           
  2475                           ;main.c: 411: driveStraight();
  2476  002E2E  EC23  F008         	call	_driveStraight	;wreg free
  2477                           
  2478                           ;main.c: 414: }
  2479                           
  2480                           ;main.c: 412: break;
  2481  002E32  0012               	return	
  2482  002E34                     l3169:
  2483  002E34  C0BF  F045         	movff	_event,??_excerciseControl
  2484  002E38  C0C0  F046         	movff	_event+1,??_excerciseControl+1
  2485                           
  2486                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2487                           ; Switch size 1, requested type "space"
  2488                           ; Number of cases is 1, Range of values is 0 to 0
  2489                           ; switch strategies available:
  2490                           ; Name         Instructions Cycles
  2491                           ; simple_byte            4     3 (average)
  2492                           ;	Chosen strategy is simple_byte
  2493  002E3C  5046               	movf	??_excerciseControl+1,w,c
  2494  002E3E  0A00               	xorlw	0	; case 0
  2495  002E40  A4D8               	btfss	status,2,c
  2496  002E42  0012               	return	
  2497                           
  2498                           ; Switch size 1, requested type "space"
  2499                           ; Number of cases is 5, Range of values is 1 to 5
  2500                           ; switch strategies available:
  2501                           ; Name         Instructions Cycles
  2502                           ; simple_byte           16     9 (average)
  2503                           ;	Chosen strategy is simple_byte
  2504  002E44  5045               	movf	??_excerciseControl,w,c
  2505  002E46  0A01               	xorlw	1	; case 1
  2506  002E48  B4D8               	btfsc	status,2,c
  2507  002E4A  D7D3               	goto	l3153
  2508  002E4C  0A03               	xorlw	3	; case 2
  2509  002E4E  B4D8               	btfsc	status,2,c
  2510  002E50  D7D3               	goto	l3155
  2511  002E52  0A01               	xorlw	1	; case 3
  2512  002E54  B4D8               	btfsc	status,2,c
  2513  002E56  D7D3               	goto	l3157
  2514  002E58  0A07               	xorlw	7	; case 4
  2515  002E5A  B4D8               	btfsc	status,2,c
  2516  002E5C  D7E5               	goto	l3163
  2517  002E5E  0A01               	xorlw	1	; case 5
  2518  002E60  A4D8               	btfss	status,2,c
  2519  002E62  0012               	return	
  2520  002E64  D7E4               	goto	l3165
  2521  002E66                     __end_of_excerciseControl:
  2522                           	opt stack 0
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           intcon2	equ	0xFF1
  2531                           postinc0	equ	0xFEE
  2532                           wreg	equ	0xFE8
  2533                           postdec1	equ	0xFE5
  2534                           fsr1l	equ	0xFE1
  2535                           postinc2	equ	0xFDE
  2536                           postdec2	equ	0xFDD
  2537                           fsr2h	equ	0xFDA
  2538                           fsr2l	equ	0xFD9
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function _driveStraight *****************
  2542 ;; Defined at:
  2543 ;;		line 664 in file "main.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;Total ram usage:       13 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    5
  2564 ;; This function calls:
  2565 ;;		___awtoft
  2566 ;;		___ftadd
  2567 ;;		___ftsub
  2568 ;;		___fttol
  2569 ;;		___lltoft
  2570 ;;		_limitWheelSpeeds
  2571 ;;		_sqrt
  2572 ;;		_wheelVelocity
  2573 ;; This function is called by:
  2574 ;;		_excerciseControl
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text9
  2579  001046                     __ptext9:
  2580                           	opt stack 0
  2581  001046                     _driveStraight:
  2582                           	opt stack 24
  2583                           
  2584                           ;main.c: 666: static int leftWheelCommandedSpeed = 30;
  2585                           ;main.c: 667: static int rightWheelCommandedSpeed = 25;
  2586                           ;main.c: 668: static int speedCompensation = 0;
  2587                           ;main.c: 669: TOP_SPEED_FACTOR = 1.4;
  2588                           
  2589                           ;incstack = 0
  2590  001046  0E33               	movlw	51
  2591  001048  0100               	movlb	0	; () banked
  2592  00104A  6FD0               	movwf	_TOP_SPEED_FACTOR& (0+255),b
  2593  00104C  0EB3               	movlw	179
  2594  00104E  0100               	movlb	0	; () banked
  2595  001050  6FD1               	movwf	(_TOP_SPEED_FACTOR+1)& (0+255),b
  2596  001052  0E3F               	movlw	63
  2597  001054  0100               	movlb	0	; () banked
  2598  001056  6FD2               	movwf	(_TOP_SPEED_FACTOR+2)& (0+255),b
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;main.c: 671: if(rightWheelMeasuredSpeed < 70)
  2602  001058  0100               	movlb	0	; () banked
  2603  00105A  BFC6               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2604  00105C  D008               	goto	l3061
  2605  00105E  0100               	movlb	0	; () banked
  2606  001060  51C6               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2607  001062  E121               	bnz	l3067
  2608  001064  0E46               	movlw	70
  2609  001066  0100               	movlb	0	; () banked
  2610  001068  5DC5               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2611  00106A  B0D8               	btfsc	status,0,c
  2612  00106C  D01C               	goto	l3067
  2613  00106E                     l3061:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 672: {
  2617                           ;main.c: 673: rightWheelCommandedSpeed += 1;
  2618  00106E  0100               	movlb	0	; () banked
  2619  001070  4BDF               	infsnz	driveStraight@rightWheelCommandedSpeed& (0+255),f,b
  2620  001072  2BE0               	incf	(driveStraight@rightWheelCommandedSpeed+1)& (0+255),f,b
  2621                           
  2622                           ;main.c: 674: leftWheelCommandedSpeed += 1;
  2623  001074  0100               	movlb	0	; () banked
  2624  001076  4BDD               	infsnz	driveStraight@leftWheelCommandedSpeed& (0+255),f,b
  2625  001078  2BDE               	incf	(driveStraight@leftWheelCommandedSpeed+1)& (0+255),f,b
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;main.c: 675: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2629  00107A  C0DF  F082         	movff	driveStraight@rightWheelCommandedSpeed,wheelVelocity@speed
  2630  00107E  C0E0  F083         	movff	driveStraight@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2631  001082  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  2632  001086  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  2633  00108A  0E72               	movlw	114
  2634  00108C  EC9D  F013         	call	_wheelVelocity
  2635                           
  2636                           ;main.c: 676: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2637  001090  C0DD  F082         	movff	driveStraight@leftWheelCommandedSpeed,wheelVelocity@speed
  2638  001094  C0DE  F083         	movff	driveStraight@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2639  001098  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  2640  00109C  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  2641  0010A0  0E6C               	movlw	108
  2642  0010A2  EC9D  F013         	call	_wheelVelocity
  2643  0010A6                     l3067:
  2644                           
  2645                           ;main.c: 677: }
  2646                           ;main.c: 678: if(rightWheelMeasuredSpeed > 120)
  2647  0010A6  0100               	movlb	0	; () banked
  2648  0010A8  BFC6               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2649  0010AA  D02E               	goto	l3075
  2650  0010AC  0100               	movlb	0	; () banked
  2651  0010AE  51C6               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2652  0010B0  E105               	bnz	u2680
  2653  0010B2  0E79               	movlw	121
  2654  0010B4  0100               	movlb	0	; () banked
  2655  0010B6  5DC5               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2656  0010B8  A0D8               	btfss	status,0,c
  2657  0010BA  D026               	goto	l3075
  2658  0010BC                     u2680:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 679: {
  2662                           ;main.c: 680: rightWheelCommandedSpeed -= 1;
  2663  0010BC  0100               	movlb	0	; () banked
  2664  0010BE  07DF               	decf	driveStraight@rightWheelCommandedSpeed& (0+255),f,b
  2665  0010C0  A0D8               	btfss	status,0,c
  2666  0010C2  07E0               	decf	(driveStraight@rightWheelCommandedSpeed+1)& (0+255),f,b
  2667                           
  2668                           ;main.c: 681: leftWheelCommandedSpeed -= 1;
  2669  0010C4  0100               	movlb	0	; () banked
  2670  0010C6  07DD               	decf	driveStraight@leftWheelCommandedSpeed& (0+255),f,b
  2671  0010C8  A0D8               	btfss	status,0,c
  2672  0010CA  07DE               	decf	(driveStraight@leftWheelCommandedSpeed+1)& (0+255),f,b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 682: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2676  0010CC  0100               	movlb	0	; () banked
  2677  0010CE  07DF               	decf	driveStraight@rightWheelCommandedSpeed& (0+255),f,b
  2678  0010D0  A0D8               	btfss	status,0,c
  2679  0010D2  07E0               	decf	(driveStraight@rightWheelCommandedSpeed+1)& (0+255),f,b
  2680  0010D4  C0DF  F082         	movff	driveStraight@rightWheelCommandedSpeed,wheelVelocity@speed
  2681  0010D8  C0E0  F083         	movff	driveStraight@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2682  0010DC  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  2683  0010E0  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  2684  0010E4  0E72               	movlw	114
  2685  0010E6  EC9D  F013         	call	_wheelVelocity
  2686                           
  2687                           ;main.c: 683: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2688  0010EA  0100               	movlb	0	; () banked
  2689  0010EC  07DD               	decf	driveStraight@leftWheelCommandedSpeed& (0+255),f,b
  2690  0010EE  A0D8               	btfss	status,0,c
  2691  0010F0  07DE               	decf	(driveStraight@leftWheelCommandedSpeed+1)& (0+255),f,b
  2692  0010F2  C0DD  F082         	movff	driveStraight@leftWheelCommandedSpeed,wheelVelocity@speed
  2693  0010F6  C0DE  F083         	movff	driveStraight@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2694  0010FA  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  2695  0010FE  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  2696  001102  0E6C               	movlw	108
  2697  001104  EC9D  F013         	call	_wheelVelocity
  2698  001108                     l3075:
  2699                           
  2700                           ;main.c: 684: }
  2701                           ;main.c: 685: if(leftWheelCount > rightWheelCount + 1)
  2702  001108  0E01               	movlw	1
  2703  00110A  0100               	movlb	0	; () banked
  2704  00110C  25B7               	addwf	_rightWheelCount& (0+255),w,b
  2705  00110E  0100               	movlb	0	; () banked
  2706  001110  6F8A               	movwf	??_driveStraight& (0+255),b
  2707  001112  0E00               	movlw	0
  2708  001114  0100               	movlb	0	; () banked
  2709  001116  21B8               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2710  001118  0100               	movlb	0	; () banked
  2711  00111A  6F8B               	movwf	(??_driveStraight+1)& (0+255),b
  2712  00111C  0E00               	movlw	0
  2713  00111E  0100               	movlb	0	; () banked
  2714  001120  21B9               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2715  001122  0100               	movlb	0	; () banked
  2716  001124  6F8C               	movwf	(??_driveStraight+2)& (0+255),b
  2717  001126  0E00               	movlw	0
  2718  001128  0100               	movlb	0	; () banked
  2719  00112A  21BA               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2720  00112C  0100               	movlb	0	; () banked
  2721  00112E  6F8D               	movwf	(??_driveStraight+3)& (0+255),b
  2722  001130  0100               	movlb	0	; () banked
  2723  001132  51B3               	movf	_leftWheelCount& (0+255),w,b
  2724  001134  0100               	movlb	0	; () banked
  2725  001136  5D8A               	subwf	??_driveStraight& (0+255),w,b
  2726  001138  0100               	movlb	0	; () banked
  2727  00113A  51B4               	movf	(_leftWheelCount+1)& (0+255),w,b
  2728  00113C  0100               	movlb	0	; () banked
  2729  00113E  598B               	subwfb	(??_driveStraight+1)& (0+255),w,b
  2730  001140  0100               	movlb	0	; () banked
  2731  001142  51B5               	movf	(_leftWheelCount+2)& (0+255),w,b
  2732  001144  0100               	movlb	0	; () banked
  2733  001146  598C               	subwfb	(??_driveStraight+2)& (0+255),w,b
  2734  001148  0100               	movlb	0	; () banked
  2735  00114A  51B6               	movf	(_leftWheelCount+3)& (0+255),w,b
  2736  00114C  0100               	movlb	0	; () banked
  2737  00114E  598D               	subwfb	(??_driveStraight+3)& (0+255),w,b
  2738  001150  B0D8               	btfsc	status,0,c
  2739  001152  D075               	goto	l3079
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;main.c: 687: {
  2743                           ;main.c: 688: speedCompensation -= sqrt(leftWheelCount - rightWheelCount) + 3;
  2744  001154  C0B7  F08A         	movff	_rightWheelCount,??_driveStraight
  2745  001158  C0B8  F08B         	movff	_rightWheelCount+1,??_driveStraight+1
  2746  00115C  C0B9  F08C         	movff	_rightWheelCount+2,??_driveStraight+2
  2747  001160  C0BA  F08D         	movff	_rightWheelCount+3,??_driveStraight+3
  2748  001164  0100               	movlb	0	; () banked
  2749  001166  1F8A               	comf	??_driveStraight& (0+255),f,b
  2750  001168  1F8B               	comf	(??_driveStraight+1)& (0+255),f,b
  2751  00116A  1F8C               	comf	(??_driveStraight+2)& (0+255),f,b
  2752  00116C  1F8D               	comf	(??_driveStraight+3)& (0+255),f,b
  2753  00116E  2B8A               	incf	??_driveStraight& (0+255),f,b
  2754  001170  0E00               	movlw	0
  2755  001172  238B               	addwfc	(??_driveStraight+1)& (0+255),f,b
  2756  001174  238C               	addwfc	(??_driveStraight+2)& (0+255),f,b
  2757  001176  238D               	addwfc	(??_driveStraight+3)& (0+255),f,b
  2758  001178  0100               	movlb	0	; () banked
  2759  00117A  51B3               	movf	_leftWheelCount& (0+255),w,b
  2760  00117C  0100               	movlb	0	; () banked
  2761  00117E  258A               	addwf	??_driveStraight& (0+255),w,b
  2762  001180  6E1B               	movwf	___lltoft@c,c
  2763  001182  0100               	movlb	0	; () banked
  2764  001184  51B4               	movf	(_leftWheelCount+1)& (0+255),w,b
  2765  001186  0100               	movlb	0	; () banked
  2766  001188  218B               	addwfc	(??_driveStraight+1)& (0+255),w,b
  2767  00118A  6E1C               	movwf	___lltoft@c+1,c
  2768  00118C  0100               	movlb	0	; () banked
  2769  00118E  51B5               	movf	(_leftWheelCount+2)& (0+255),w,b
  2770  001190  0100               	movlb	0	; () banked
  2771  001192  218C               	addwfc	(??_driveStraight+2)& (0+255),w,b
  2772  001194  6E1D               	movwf	___lltoft@c+2,c
  2773  001196  0100               	movlb	0	; () banked
  2774  001198  51B6               	movf	(_leftWheelCount+3)& (0+255),w,b
  2775  00119A  0100               	movlb	0	; () banked
  2776  00119C  218D               	addwfc	(??_driveStraight+3)& (0+255),w,b
  2777  00119E  6E1E               	movwf	___lltoft@c+3,c
  2778  0011A0  EC62  F017         	call	___lltoft	;wreg free
  2779  0011A4  C01B  F060         	movff	?___lltoft,sqrt@a
  2780  0011A8  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  2781  0011AC  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  2782  0011B0  EC4E  F011         	call	_sqrt	;wreg free
  2783  0011B4  C060  F094         	movff	?_sqrt,_driveStraight$2071
  2784  0011B8  C061  F095         	movff	?_sqrt+1,_driveStraight$2071+1
  2785  0011BC  C062  F096         	movff	?_sqrt+2,_driveStraight$2071+2
  2786                           
  2787                           ;main.c: 687: {
  2788                           ;main.c: 688: speedCompensation -= sqrt(leftWheelCount - rightWheelCount) + 3;
  2789  0011C0  0E00               	movlw	0
  2790  0011C2  6E36               	movwf	___ftadd@f2,c
  2791  0011C4  0E40               	movlw	64
  2792  0011C6  6E37               	movwf	___ftadd@f2+1,c
  2793  0011C8  0E40               	movlw	64
  2794  0011CA  6E38               	movwf	___ftadd@f2+2,c
  2795  0011CC  C094  F033         	movff	_driveStraight$2071,___ftadd@f1
  2796  0011D0  C095  F034         	movff	_driveStraight$2071+1,___ftadd@f1+1
  2797  0011D4  C096  F035         	movff	_driveStraight$2071+2,___ftadd@f1+2
  2798  0011D8  EC25  F012         	call	___ftadd	;wreg free
  2799  0011DC  C033  F08E         	movff	?___ftadd,_driveStraight$2072
  2800  0011E0  C034  F08F         	movff	?___ftadd+1,_driveStraight$2072+1
  2801  0011E4  C035  F090         	movff	?___ftadd+2,_driveStraight$2072+2
  2802                           
  2803                           ;main.c: 687: {
  2804                           ;main.c: 688: speedCompensation -= sqrt(leftWheelCount - rightWheelCount) + 3;
  2805  0011E8  C08E  F042         	movff	_driveStraight$2072,___ftsub@f2
  2806  0011EC  C08F  F043         	movff	_driveStraight$2072+1,___ftsub@f2+1
  2807  0011F0  C090  F044         	movff	_driveStraight$2072+2,___ftsub@f2+2
  2808  0011F4  C0CE  F01B         	movff	driveStraight@speedCompensation,___awtoft@c
  2809  0011F8  C0CF  F01C         	movff	driveStraight@speedCompensation+1,___awtoft@c+1
  2810  0011FC  EC51  F018         	call	___awtoft	;wreg free
  2811  001200  C01B  F03F         	movff	?___awtoft,___ftsub@f1
  2812  001204  C01C  F040         	movff	?___awtoft+1,___ftsub@f1+1
  2813  001208  C01D  F041         	movff	?___awtoft+2,___ftsub@f1+2
  2814  00120C  EC31  F018         	call	___ftsub	;wreg free
  2815  001210  C03F  F073         	movff	?___ftsub,___fttol@f1
  2816  001214  C040  F074         	movff	?___ftsub+1,___fttol@f1+1
  2817  001218  C041  F075         	movff	?___ftsub+2,___fttol@f1+2
  2818  00121C  ECFB  F012         	call	___fttol	;wreg free
  2819  001220  C073  F0CE         	movff	?___fttol,driveStraight@speedCompensation
  2820  001224  C074  F0CF         	movff	?___fttol+1,driveStraight@speedCompensation+1
  2821                           
  2822                           ;main.c: 689: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2823  001228  C0DD  F082         	movff	driveStraight@leftWheelCommandedSpeed,wheelVelocity@speed
  2824  00122C  C0DE  F083         	movff	driveStraight@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2825  001230  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  2826  001234  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  2827  001238  0E6C               	movlw	108
  2828  00123A  EC9D  F013         	call	_wheelVelocity
  2829  00123E                     l3079:
  2830                           
  2831                           ;main.c: 690: }
  2832                           ;main.c: 691: if(rightWheelCount > (leftWheelCount + 1) )
  2833  00123E  0E01               	movlw	1
  2834  001240  0100               	movlb	0	; () banked
  2835  001242  25B3               	addwf	_leftWheelCount& (0+255),w,b
  2836  001244  0100               	movlb	0	; () banked
  2837  001246  6F8A               	movwf	??_driveStraight& (0+255),b
  2838  001248  0E00               	movlw	0
  2839  00124A  0100               	movlb	0	; () banked
  2840  00124C  21B4               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2841  00124E  0100               	movlb	0	; () banked
  2842  001250  6F8B               	movwf	(??_driveStraight+1)& (0+255),b
  2843  001252  0E00               	movlw	0
  2844  001254  0100               	movlb	0	; () banked
  2845  001256  21B5               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2846  001258  0100               	movlb	0	; () banked
  2847  00125A  6F8C               	movwf	(??_driveStraight+2)& (0+255),b
  2848  00125C  0E00               	movlw	0
  2849  00125E  0100               	movlb	0	; () banked
  2850  001260  21B6               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2851  001262  0100               	movlb	0	; () banked
  2852  001264  6F8D               	movwf	(??_driveStraight+3)& (0+255),b
  2853  001266  0100               	movlb	0	; () banked
  2854  001268  51B7               	movf	_rightWheelCount& (0+255),w,b
  2855  00126A  0100               	movlb	0	; () banked
  2856  00126C  5D8A               	subwf	??_driveStraight& (0+255),w,b
  2857  00126E  0100               	movlb	0	; () banked
  2858  001270  51B8               	movf	(_rightWheelCount+1)& (0+255),w,b
  2859  001272  0100               	movlb	0	; () banked
  2860  001274  598B               	subwfb	(??_driveStraight+1)& (0+255),w,b
  2861  001276  0100               	movlb	0	; () banked
  2862  001278  51B9               	movf	(_rightWheelCount+2)& (0+255),w,b
  2863  00127A  0100               	movlb	0	; () banked
  2864  00127C  598C               	subwfb	(??_driveStraight+2)& (0+255),w,b
  2865  00127E  0100               	movlb	0	; () banked
  2866  001280  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  2867  001282  0100               	movlb	0	; () banked
  2868  001284  598D               	subwfb	(??_driveStraight+3)& (0+255),w,b
  2869  001286  B0D8               	btfsc	status,0,c
  2870  001288  D075               	goto	l3083
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;main.c: 693: {
  2874                           ;main.c: 694: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 3;
  2875  00128A  C0B3  F08A         	movff	_leftWheelCount,??_driveStraight
  2876  00128E  C0B4  F08B         	movff	_leftWheelCount+1,??_driveStraight+1
  2877  001292  C0B5  F08C         	movff	_leftWheelCount+2,??_driveStraight+2
  2878  001296  C0B6  F08D         	movff	_leftWheelCount+3,??_driveStraight+3
  2879  00129A  0100               	movlb	0	; () banked
  2880  00129C  1F8A               	comf	??_driveStraight& (0+255),f,b
  2881  00129E  1F8B               	comf	(??_driveStraight+1)& (0+255),f,b
  2882  0012A0  1F8C               	comf	(??_driveStraight+2)& (0+255),f,b
  2883  0012A2  1F8D               	comf	(??_driveStraight+3)& (0+255),f,b
  2884  0012A4  2B8A               	incf	??_driveStraight& (0+255),f,b
  2885  0012A6  0E00               	movlw	0
  2886  0012A8  238B               	addwfc	(??_driveStraight+1)& (0+255),f,b
  2887  0012AA  238C               	addwfc	(??_driveStraight+2)& (0+255),f,b
  2888  0012AC  238D               	addwfc	(??_driveStraight+3)& (0+255),f,b
  2889  0012AE  0100               	movlb	0	; () banked
  2890  0012B0  51B7               	movf	_rightWheelCount& (0+255),w,b
  2891  0012B2  0100               	movlb	0	; () banked
  2892  0012B4  258A               	addwf	??_driveStraight& (0+255),w,b
  2893  0012B6  6E1B               	movwf	___lltoft@c,c
  2894  0012B8  0100               	movlb	0	; () banked
  2895  0012BA  51B8               	movf	(_rightWheelCount+1)& (0+255),w,b
  2896  0012BC  0100               	movlb	0	; () banked
  2897  0012BE  218B               	addwfc	(??_driveStraight+1)& (0+255),w,b
  2898  0012C0  6E1C               	movwf	___lltoft@c+1,c
  2899  0012C2  0100               	movlb	0	; () banked
  2900  0012C4  51B9               	movf	(_rightWheelCount+2)& (0+255),w,b
  2901  0012C6  0100               	movlb	0	; () banked
  2902  0012C8  218C               	addwfc	(??_driveStraight+2)& (0+255),w,b
  2903  0012CA  6E1D               	movwf	___lltoft@c+2,c
  2904  0012CC  0100               	movlb	0	; () banked
  2905  0012CE  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  2906  0012D0  0100               	movlb	0	; () banked
  2907  0012D2  218D               	addwfc	(??_driveStraight+3)& (0+255),w,b
  2908  0012D4  6E1E               	movwf	___lltoft@c+3,c
  2909  0012D6  EC62  F017         	call	___lltoft	;wreg free
  2910  0012DA  C01B  F060         	movff	?___lltoft,sqrt@a
  2911  0012DE  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  2912  0012E2  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  2913  0012E6  EC4E  F011         	call	_sqrt	;wreg free
  2914  0012EA  C060  F094         	movff	?_sqrt,_driveStraight$2071
  2915  0012EE  C061  F095         	movff	?_sqrt+1,_driveStraight$2071+1
  2916  0012F2  C062  F096         	movff	?_sqrt+2,_driveStraight$2071+2
  2917                           
  2918                           ;main.c: 693: {
  2919                           ;main.c: 694: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 3;
  2920  0012F6  0E00               	movlw	0
  2921  0012F8  6E36               	movwf	___ftadd@f2,c
  2922  0012FA  0E40               	movlw	64
  2923  0012FC  6E37               	movwf	___ftadd@f2+1,c
  2924  0012FE  0E40               	movlw	64
  2925  001300  6E38               	movwf	___ftadd@f2+2,c
  2926  001302  C094  F033         	movff	_driveStraight$2071,___ftadd@f1
  2927  001306  C095  F034         	movff	_driveStraight$2071+1,___ftadd@f1+1
  2928  00130A  C096  F035         	movff	_driveStraight$2071+2,___ftadd@f1+2
  2929  00130E  EC25  F012         	call	___ftadd	;wreg free
  2930  001312  C033  F091         	movff	?___ftadd,_driveStraight$2073
  2931  001316  C034  F092         	movff	?___ftadd+1,_driveStraight$2073+1
  2932  00131A  C035  F093         	movff	?___ftadd+2,_driveStraight$2073+2
  2933                           
  2934                           ;main.c: 693: {
  2935                           ;main.c: 694: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 3;
  2936  00131E  C091  F036         	movff	_driveStraight$2073,___ftadd@f2
  2937  001322  C092  F037         	movff	_driveStraight$2073+1,___ftadd@f2+1
  2938  001326  C093  F038         	movff	_driveStraight$2073+2,___ftadd@f2+2
  2939  00132A  C0CE  F01B         	movff	driveStraight@speedCompensation,___awtoft@c
  2940  00132E  C0CF  F01C         	movff	driveStraight@speedCompensation+1,___awtoft@c+1
  2941  001332  EC51  F018         	call	___awtoft	;wreg free
  2942  001336  C01B  F033         	movff	?___awtoft,___ftadd@f1
  2943  00133A  C01C  F034         	movff	?___awtoft+1,___ftadd@f1+1
  2944  00133E  C01D  F035         	movff	?___awtoft+2,___ftadd@f1+2
  2945  001342  EC25  F012         	call	___ftadd	;wreg free
  2946  001346  C033  F073         	movff	?___ftadd,___fttol@f1
  2947  00134A  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  2948  00134E  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  2949  001352  ECFB  F012         	call	___fttol	;wreg free
  2950  001356  C073  F0CE         	movff	?___fttol,driveStraight@speedCompensation
  2951  00135A  C074  F0CF         	movff	?___fttol+1,driveStraight@speedCompensation+1
  2952                           
  2953                           ;main.c: 695: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2954  00135E  C0DD  F082         	movff	driveStraight@leftWheelCommandedSpeed,wheelVelocity@speed
  2955  001362  C0DE  F083         	movff	driveStraight@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2956  001366  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  2957  00136A  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  2958  00136E  0E6C               	movlw	108
  2959  001370  EC9D  F013         	call	_wheelVelocity
  2960  001374                     l3083:
  2961                           
  2962                           ;main.c: 696: }
  2963                           ;main.c: 698: if(rightWheelCount >= 113)
  2964  001374  0100               	movlb	0	; () banked
  2965  001376  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  2966  001378  0100               	movlb	0	; () banked
  2967  00137A  11B9               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2968  00137C  0100               	movlb	0	; () banked
  2969  00137E  11B8               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  2970  001380  E105               	bnz	u2710
  2971  001382  0E71               	movlw	113
  2972  001384  0100               	movlb	0	; () banked
  2973  001386  5DB7               	subwf	_rightWheelCount& (0+255),w,b
  2974  001388  A0D8               	btfss	status,0,c
  2975  00138A  D076               	goto	l3105
  2976  00138C                     u2710:
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;main.c: 699: {
  2980                           ;main.c: 700: if(leftWheelCount >= 113)
  2981  00138C  0100               	movlb	0	; () banked
  2982  00138E  51B6               	movf	(_leftWheelCount+3)& (0+255),w,b
  2983  001390  0100               	movlb	0	; () banked
  2984  001392  11B5               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  2985  001394  0100               	movlb	0	; () banked
  2986  001396  11B4               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  2987  001398  E105               	bnz	u2720
  2988  00139A  0E71               	movlw	113
  2989  00139C  0100               	movlb	0	; () banked
  2990  00139E  5DB3               	subwf	_leftWheelCount& (0+255),w,b
  2991  0013A0  A0D8               	btfss	status,0,c
  2992  0013A2  D045               	goto	l3099
  2993  0013A4                     u2720:
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;main.c: 701: {
  2997                           ;main.c: 702: rightWheelCount = 0;
  2998  0013A4  0E00               	movlw	0
  2999  0013A6  0100               	movlb	0	; () banked
  3000  0013A8  6FB7               	movwf	_rightWheelCount& (0+255),b
  3001  0013AA  0E00               	movlw	0
  3002  0013AC  6FB8               	movwf	(_rightWheelCount+1)& (0+255),b
  3003  0013AE  0E00               	movlw	0
  3004  0013B0  6FB9               	movwf	(_rightWheelCount+2)& (0+255),b
  3005  0013B2  0E00               	movlw	0
  3006  0013B4  6FBA               	movwf	(_rightWheelCount+3)& (0+255),b
  3007                           
  3008                           ;main.c: 703: leftWheelCount = 0;
  3009  0013B6  0E00               	movlw	0
  3010  0013B8  0100               	movlb	0	; () banked
  3011  0013BA  6FB3               	movwf	_leftWheelCount& (0+255),b
  3012  0013BC  0E00               	movlw	0
  3013  0013BE  6FB4               	movwf	(_leftWheelCount+1)& (0+255),b
  3014  0013C0  0E00               	movlw	0
  3015  0013C2  6FB5               	movwf	(_leftWheelCount+2)& (0+255),b
  3016  0013C4  0E00               	movlw	0
  3017  0013C6  6FB6               	movwf	(_leftWheelCount+3)& (0+255),b
  3018                           
  3019                           ;main.c: 704: leftWheelCommandedSpeed = 0;
  3020  0013C8  0E00               	movlw	0
  3021  0013CA  0100               	movlb	0	; () banked
  3022  0013CC  6FDE               	movwf	(driveStraight@leftWheelCommandedSpeed+1)& (0+255),b
  3023  0013CE  0E00               	movlw	0
  3024  0013D0  6FDD               	movwf	driveStraight@leftWheelCommandedSpeed& (0+255),b
  3025                           
  3026                           ;main.c: 705: rightWheelCommandedSpeed = 0;
  3027  0013D2  0E00               	movlw	0
  3028  0013D4  0100               	movlb	0	; () banked
  3029  0013D6  6FE0               	movwf	(driveStraight@rightWheelCommandedSpeed+1)& (0+255),b
  3030  0013D8  0E00               	movlw	0
  3031  0013DA  6FDF               	movwf	driveStraight@rightWheelCommandedSpeed& (0+255),b
  3032                           
  3033                           ;main.c: 706: speedCompensation = 0;
  3034  0013DC  0E00               	movlw	0
  3035  0013DE  0100               	movlb	0	; () banked
  3036  0013E0  6FCF               	movwf	(driveStraight@speedCompensation+1)& (0+255),b
  3037  0013E2  0E00               	movlw	0
  3038  0013E4  6FCE               	movwf	driveStraight@speedCompensation& (0+255),b
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;main.c: 708: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3042  0013E6  C0DF  F082         	movff	driveStraight@rightWheelCommandedSpeed,wheelVelocity@speed
  3043  0013EA  C0E0  F083         	movff	driveStraight@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3044  0013EE  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  3045  0013F2  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  3046  0013F6  0E72               	movlw	114
  3047  0013F8  EC9D  F013         	call	_wheelVelocity
  3048                           
  3049                           ;main.c: 709: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3050  0013FC  C0DD  F082         	movff	driveStraight@leftWheelCommandedSpeed,wheelVelocity@speed
  3051  001400  C0DE  F083         	movff	driveStraight@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3052  001404  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  3053  001408  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  3054  00140C  0E6C               	movlw	108
  3055  00140E  EC9D  F013         	call	_wheelVelocity
  3056                           
  3057                           ;main.c: 710: lastEvent++;
  3058  001412  0100               	movlb	0	; () banked
  3059  001414  4BC1               	infsnz	_lastEvent& (0+255),f,b
  3060  001416  2BC2               	incf	(_lastEvent+1)& (0+255),f,b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;main.c: 712: rightWheelCommandedSpeed = 25;
  3064  001418  0E00               	movlw	0
  3065  00141A  0100               	movlb	0	; () banked
  3066  00141C  6FE0               	movwf	(driveStraight@rightWheelCommandedSpeed+1)& (0+255),b
  3067  00141E  0E19               	movlw	25
  3068  001420  6FDF               	movwf	driveStraight@rightWheelCommandedSpeed& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;main.c: 713: leftWheelCommandedSpeed = -10;
  3072  001422  0EFF               	movlw	255
  3073  001424  0100               	movlb	0	; () banked
  3074  001426  6FDE               	movwf	(driveStraight@leftWheelCommandedSpeed+1)& (0+255),b
  3075  001428  0EF6               	movlw	246
  3076  00142A  6FDD               	movwf	driveStraight@leftWheelCommandedSpeed& (0+255),b
  3077                           
  3078                           ;main.c: 714: }
  3079  00142C  D025               	goto	l3105
  3080  00142E                     l3099:
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;main.c: 715: else
  3084                           ;main.c: 716: {
  3085                           ;main.c: 717: rightWheelCommandedSpeed = 0;
  3086  00142E  0E00               	movlw	0
  3087  001430  0100               	movlb	0	; () banked
  3088  001432  6FE0               	movwf	(driveStraight@rightWheelCommandedSpeed+1)& (0+255),b
  3089  001434  0E00               	movlw	0
  3090  001436  6FDF               	movwf	driveStraight@rightWheelCommandedSpeed& (0+255),b
  3091                           
  3092                           ;main.c: 718: leftWheelCommandedSpeed = 30;
  3093  001438  0E00               	movlw	0
  3094  00143A  0100               	movlb	0	; () banked
  3095  00143C  6FDE               	movwf	(driveStraight@leftWheelCommandedSpeed+1)& (0+255),b
  3096  00143E  0E1E               	movlw	30
  3097  001440  6FDD               	movwf	driveStraight@leftWheelCommandedSpeed& (0+255),b
  3098                           
  3099                           ;main.c: 719: speedCompensation = 0;
  3100  001442  0E00               	movlw	0
  3101  001444  0100               	movlb	0	; () banked
  3102  001446  6FCF               	movwf	(driveStraight@speedCompensation+1)& (0+255),b
  3103  001448  0E00               	movlw	0
  3104  00144A  6FCE               	movwf	driveStraight@speedCompensation& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;main.c: 720: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3108  00144C  C0DF  F082         	movff	driveStraight@rightWheelCommandedSpeed,wheelVelocity@speed
  3109  001450  C0E0  F083         	movff	driveStraight@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3110  001454  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  3111  001458  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  3112  00145C  0E72               	movlw	114
  3113  00145E  EC9D  F013         	call	_wheelVelocity
  3114                           
  3115                           ;main.c: 721: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3116  001462  C0DF  F082         	movff	driveStraight@rightWheelCommandedSpeed,wheelVelocity@speed
  3117  001466  C0E0  F083         	movff	driveStraight@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3118  00146A  C0CE  F084         	movff	driveStraight@speedCompensation,wheelVelocity@speedCompensation
  3119  00146E  C0CF  F085         	movff	driveStraight@speedCompensation+1,wheelVelocity@speedCompensation+1
  3120  001472  0E72               	movlw	114
  3121  001474  EC9D  F013         	call	_wheelVelocity
  3122  001478                     l3105:
  3123                           
  3124                           ;main.c: 722: }
  3125                           ;main.c: 725: }
  3126                           ;main.c: 727: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3127  001478  0EDD               	movlw	low driveStraight@leftWheelCommandedSpeed
  3128  00147A  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3129  00147C  0E00               	movlw	high driveStraight@leftWheelCommandedSpeed
  3130  00147E  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3131  001480  0EDF               	movlw	low driveStraight@rightWheelCommandedSpeed
  3132  001482  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3133  001484  0E00               	movlw	high driveStraight@rightWheelCommandedSpeed
  3134  001486  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3135  001488  0ECE               	movlw	low driveStraight@speedCompensation
  3136  00148A  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3137  00148C  0E00               	movlw	high driveStraight@speedCompensation
  3138  00148E  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3139  001490  EC28  F014         	call	_limitWheelSpeeds	;wreg free
  3140  001494  0012               	return		;funcret
  3141  001496                     __end_of_driveStraight:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           prodh	equ	0xFF4
  3148                           prodl	equ	0xFF3
  3149                           intcon	equ	0xFF2
  3150                           intcon2	equ	0xFF1
  3151                           postinc0	equ	0xFEE
  3152                           wreg	equ	0xFE8
  3153                           postdec1	equ	0xFE5
  3154                           fsr1l	equ	0xFE1
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function _driveStationaryCircle *****************
  3162 ;; Defined at:
  3163 ;;		line 532 in file "main.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;		None
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;		None
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;Total ram usage:       13 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    5
  3184 ;; This function calls:
  3185 ;;		___awtoft
  3186 ;;		___ftadd
  3187 ;;		___ftsub
  3188 ;;		___fttol
  3189 ;;		___lltoft
  3190 ;;		_limitWheelSpeeds
  3191 ;;		_sqrt
  3192 ;;		_wheelVelocity
  3193 ;; This function is called by:
  3194 ;;		_excerciseControl
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text10
  3199  001496                     __ptext10:
  3200                           	opt stack 0
  3201  001496                     _driveStationaryCircle:
  3202                           	opt stack 24
  3203                           
  3204                           ;main.c: 534: static int leftWheelCommandedSpeed = -20;
  3205                           ;main.c: 535: static int rightWheelCommandedSpeed = 40;
  3206                           ;main.c: 536: static int speedCompensation = 0;
  3207                           ;main.c: 538: TOP_SPEED_FACTOR = 1.4;
  3208                           
  3209                           ;incstack = 0
  3210  001496  0E33               	movlw	51
  3211  001498  0100               	movlb	0	; () banked
  3212  00149A  6FD0               	movwf	_TOP_SPEED_FACTOR& (0+255),b
  3213  00149C  0EB3               	movlw	179
  3214  00149E  0100               	movlb	0	; () banked
  3215  0014A0  6FD1               	movwf	(_TOP_SPEED_FACTOR+1)& (0+255),b
  3216  0014A2  0E3F               	movlw	63
  3217  0014A4  0100               	movlb	0	; () banked
  3218  0014A6  6FD2               	movwf	(_TOP_SPEED_FACTOR+2)& (0+255),b
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 541: if(rightWheelMeasuredSpeed < 40)
  3222  0014A8  0100               	movlb	0	; () banked
  3223  0014AA  BFC6               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  3224  0014AC  D008               	goto	l3111
  3225  0014AE  0100               	movlb	0	; () banked
  3226  0014B0  51C6               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  3227  0014B2  E122               	bnz	l3113
  3228  0014B4  0E28               	movlw	40
  3229  0014B6  0100               	movlb	0	; () banked
  3230  0014B8  5DC5               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  3231  0014BA  B0D8               	btfsc	status,0,c
  3232  0014BC  D01D               	goto	l3113
  3233  0014BE                     l3111:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;main.c: 542: {
  3237                           ;main.c: 543: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  3238  0014BE  0100               	movlb	0	; () banked
  3239  0014C0  4BDB               	infsnz	driveStationaryCircle@rightWheelCommandedSpeed& (0+255),f,b
  3240  0014C2  2BDC               	incf	(driveStationaryCircle@rightWheelCommandedSpeed+1)& (0+255),f,b
  3241  0014C4  C0DB  F082         	movff	driveStationaryCircle@rightWheelCommandedSpeed,wheelVelocity@speed
  3242  0014C8  C0DC  F083         	movff	driveStationaryCircle@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3243  0014CC  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3244  0014D0  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3245  0014D4  0E72               	movlw	114
  3246  0014D6  EC9D  F013         	call	_wheelVelocity
  3247                           
  3248                           ;main.c: 544: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  3249  0014DA  0100               	movlb	0	; () banked
  3250  0014DC  07D9               	decf	driveStationaryCircle@leftWheelCommandedSpeed& (0+255),f,b
  3251  0014DE  A0D8               	btfss	status,0,c
  3252  0014E0  07DA               	decf	(driveStationaryCircle@leftWheelCommandedSpeed+1)& (0+255),f,b
  3253  0014E2  C0D9  F082         	movff	driveStationaryCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  3254  0014E6  C0DA  F083         	movff	driveStationaryCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3255  0014EA  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3256  0014EE  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3257  0014F2  0E6C               	movlw	108
  3258  0014F4  EC9D  F013         	call	_wheelVelocity
  3259  0014F8                     l3113:
  3260                           
  3261                           ;main.c: 545: }
  3262                           ;main.c: 546: if(rightWheelMeasuredSpeed > 80)
  3263  0014F8  0100               	movlb	0	; () banked
  3264  0014FA  BFC6               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  3265  0014FC  D025               	goto	l3117
  3266  0014FE  0100               	movlb	0	; () banked
  3267  001500  51C6               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  3268  001502  E105               	bnz	u2740
  3269  001504  0E51               	movlw	81
  3270  001506  0100               	movlb	0	; () banked
  3271  001508  5DC5               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  3272  00150A  A0D8               	btfss	status,0,c
  3273  00150C  D01D               	goto	l3117
  3274  00150E                     u2740:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 547: {
  3278                           ;main.c: 548: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  3279  00150E  0100               	movlb	0	; () banked
  3280  001510  07DB               	decf	driveStationaryCircle@rightWheelCommandedSpeed& (0+255),f,b
  3281  001512  A0D8               	btfss	status,0,c
  3282  001514  07DC               	decf	(driveStationaryCircle@rightWheelCommandedSpeed+1)& (0+255),f,b
  3283  001516  C0DB  F082         	movff	driveStationaryCircle@rightWheelCommandedSpeed,wheelVelocity@speed
  3284  00151A  C0DC  F083         	movff	driveStationaryCircle@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3285  00151E  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3286  001522  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3287  001526  0E72               	movlw	114
  3288  001528  EC9D  F013         	call	_wheelVelocity
  3289                           
  3290                           ;main.c: 549: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  3291  00152C  0100               	movlb	0	; () banked
  3292  00152E  4BD9               	infsnz	driveStationaryCircle@leftWheelCommandedSpeed& (0+255),f,b
  3293  001530  2BDA               	incf	(driveStationaryCircle@leftWheelCommandedSpeed+1)& (0+255),f,b
  3294  001532  C0D9  F082         	movff	driveStationaryCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  3295  001536  C0DA  F083         	movff	driveStationaryCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3296  00153A  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3297  00153E  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3298  001542  0E6C               	movlw	108
  3299  001544  EC9D  F013         	call	_wheelVelocity
  3300  001548                     l3117:
  3301                           
  3302                           ;main.c: 550: }
  3303                           ;main.c: 551: if(leftWheelCount > (rightWheelCount + 1))
  3304  001548  0E01               	movlw	1
  3305  00154A  0100               	movlb	0	; () banked
  3306  00154C  25B7               	addwf	_rightWheelCount& (0+255),w,b
  3307  00154E  0100               	movlb	0	; () banked
  3308  001550  6F8A               	movwf	??_driveStationaryCircle& (0+255),b
  3309  001552  0E00               	movlw	0
  3310  001554  0100               	movlb	0	; () banked
  3311  001556  21B8               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  3312  001558  0100               	movlb	0	; () banked
  3313  00155A  6F8B               	movwf	(??_driveStationaryCircle+1)& (0+255),b
  3314  00155C  0E00               	movlw	0
  3315  00155E  0100               	movlb	0	; () banked
  3316  001560  21B9               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  3317  001562  0100               	movlb	0	; () banked
  3318  001564  6F8C               	movwf	(??_driveStationaryCircle+2)& (0+255),b
  3319  001566  0E00               	movlw	0
  3320  001568  0100               	movlb	0	; () banked
  3321  00156A  21BA               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  3322  00156C  0100               	movlb	0	; () banked
  3323  00156E  6F8D               	movwf	(??_driveStationaryCircle+3)& (0+255),b
  3324  001570  0100               	movlb	0	; () banked
  3325  001572  51B3               	movf	_leftWheelCount& (0+255),w,b
  3326  001574  0100               	movlb	0	; () banked
  3327  001576  5D8A               	subwf	??_driveStationaryCircle& (0+255),w,b
  3328  001578  0100               	movlb	0	; () banked
  3329  00157A  51B4               	movf	(_leftWheelCount+1)& (0+255),w,b
  3330  00157C  0100               	movlb	0	; () banked
  3331  00157E  598B               	subwfb	(??_driveStationaryCircle+1)& (0+255),w,b
  3332  001580  0100               	movlb	0	; () banked
  3333  001582  51B5               	movf	(_leftWheelCount+2)& (0+255),w,b
  3334  001584  0100               	movlb	0	; () banked
  3335  001586  598C               	subwfb	(??_driveStationaryCircle+2)& (0+255),w,b
  3336  001588  0100               	movlb	0	; () banked
  3337  00158A  51B6               	movf	(_leftWheelCount+3)& (0+255),w,b
  3338  00158C  0100               	movlb	0	; () banked
  3339  00158E  598D               	subwfb	(??_driveStationaryCircle+3)& (0+255),w,b
  3340  001590  B0D8               	btfsc	status,0,c
  3341  001592  D075               	goto	l3121
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;main.c: 553: {
  3345                           ;main.c: 554: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount) + 3);
  3346  001594  C0B7  F08A         	movff	_rightWheelCount,??_driveStationaryCircle
  3347  001598  C0B8  F08B         	movff	_rightWheelCount+1,??_driveStationaryCircle+1
  3348  00159C  C0B9  F08C         	movff	_rightWheelCount+2,??_driveStationaryCircle+2
  3349  0015A0  C0BA  F08D         	movff	_rightWheelCount+3,??_driveStationaryCircle+3
  3350  0015A4  0100               	movlb	0	; () banked
  3351  0015A6  1F8A               	comf	??_driveStationaryCircle& (0+255),f,b
  3352  0015A8  1F8B               	comf	(??_driveStationaryCircle+1)& (0+255),f,b
  3353  0015AA  1F8C               	comf	(??_driveStationaryCircle+2)& (0+255),f,b
  3354  0015AC  1F8D               	comf	(??_driveStationaryCircle+3)& (0+255),f,b
  3355  0015AE  2B8A               	incf	??_driveStationaryCircle& (0+255),f,b
  3356  0015B0  0E00               	movlw	0
  3357  0015B2  238B               	addwfc	(??_driveStationaryCircle+1)& (0+255),f,b
  3358  0015B4  238C               	addwfc	(??_driveStationaryCircle+2)& (0+255),f,b
  3359  0015B6  238D               	addwfc	(??_driveStationaryCircle+3)& (0+255),f,b
  3360  0015B8  0100               	movlb	0	; () banked
  3361  0015BA  51B3               	movf	_leftWheelCount& (0+255),w,b
  3362  0015BC  0100               	movlb	0	; () banked
  3363  0015BE  258A               	addwf	??_driveStationaryCircle& (0+255),w,b
  3364  0015C0  6E1B               	movwf	___lltoft@c,c
  3365  0015C2  0100               	movlb	0	; () banked
  3366  0015C4  51B4               	movf	(_leftWheelCount+1)& (0+255),w,b
  3367  0015C6  0100               	movlb	0	; () banked
  3368  0015C8  218B               	addwfc	(??_driveStationaryCircle+1)& (0+255),w,b
  3369  0015CA  6E1C               	movwf	___lltoft@c+1,c
  3370  0015CC  0100               	movlb	0	; () banked
  3371  0015CE  51B5               	movf	(_leftWheelCount+2)& (0+255),w,b
  3372  0015D0  0100               	movlb	0	; () banked
  3373  0015D2  218C               	addwfc	(??_driveStationaryCircle+2)& (0+255),w,b
  3374  0015D4  6E1D               	movwf	___lltoft@c+2,c
  3375  0015D6  0100               	movlb	0	; () banked
  3376  0015D8  51B6               	movf	(_leftWheelCount+3)& (0+255),w,b
  3377  0015DA  0100               	movlb	0	; () banked
  3378  0015DC  218D               	addwfc	(??_driveStationaryCircle+3)& (0+255),w,b
  3379  0015DE  6E1E               	movwf	___lltoft@c+3,c
  3380  0015E0  EC62  F017         	call	___lltoft	;wreg free
  3381  0015E4  C01B  F060         	movff	?___lltoft,sqrt@a
  3382  0015E8  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  3383  0015EC  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  3384  0015F0  EC4E  F011         	call	_sqrt	;wreg free
  3385  0015F4  C060  F094         	movff	?_sqrt,_driveStationaryCircle$2068
  3386  0015F8  C061  F095         	movff	?_sqrt+1,_driveStationaryCircle$2068+1
  3387  0015FC  C062  F096         	movff	?_sqrt+2,_driveStationaryCircle$2068+2
  3388                           
  3389                           ;main.c: 553: {
  3390                           ;main.c: 554: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount) + 3);
  3391  001600  0E00               	movlw	0
  3392  001602  6E36               	movwf	___ftadd@f2,c
  3393  001604  0E40               	movlw	64
  3394  001606  6E37               	movwf	___ftadd@f2+1,c
  3395  001608  0E40               	movlw	64
  3396  00160A  6E38               	movwf	___ftadd@f2+2,c
  3397  00160C  C094  F033         	movff	_driveStationaryCircle$2068,___ftadd@f1
  3398  001610  C095  F034         	movff	_driveStationaryCircle$2068+1,___ftadd@f1+1
  3399  001614  C096  F035         	movff	_driveStationaryCircle$2068+2,___ftadd@f1+2
  3400  001618  EC25  F012         	call	___ftadd	;wreg free
  3401  00161C  C033  F08E         	movff	?___ftadd,_driveStationaryCircle$2069
  3402  001620  C034  F08F         	movff	?___ftadd+1,_driveStationaryCircle$2069+1
  3403  001624  C035  F090         	movff	?___ftadd+2,_driveStationaryCircle$2069+2
  3404                           
  3405                           ;main.c: 553: {
  3406                           ;main.c: 554: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount) + 3);
  3407  001628  C08E  F042         	movff	_driveStationaryCircle$2069,___ftsub@f2
  3408  00162C  C08F  F043         	movff	_driveStationaryCircle$2069+1,___ftsub@f2+1
  3409  001630  C090  F044         	movff	_driveStationaryCircle$2069+2,___ftsub@f2+2
  3410  001634  C0CC  F01B         	movff	driveStationaryCircle@speedCompensation,___awtoft@c
  3411  001638  C0CD  F01C         	movff	driveStationaryCircle@speedCompensation+1,___awtoft@c+1
  3412  00163C  EC51  F018         	call	___awtoft	;wreg free
  3413  001640  C01B  F03F         	movff	?___awtoft,___ftsub@f1
  3414  001644  C01C  F040         	movff	?___awtoft+1,___ftsub@f1+1
  3415  001648  C01D  F041         	movff	?___awtoft+2,___ftsub@f1+2
  3416  00164C  EC31  F018         	call	___ftsub	;wreg free
  3417  001650  C03F  F073         	movff	?___ftsub,___fttol@f1
  3418  001654  C040  F074         	movff	?___ftsub+1,___fttol@f1+1
  3419  001658  C041  F075         	movff	?___ftsub+2,___fttol@f1+2
  3420  00165C  ECFB  F012         	call	___fttol	;wreg free
  3421  001660  C073  F0CC         	movff	?___fttol,driveStationaryCircle@speedCompensation
  3422  001664  C074  F0CD         	movff	?___fttol+1,driveStationaryCircle@speedCompensation+1
  3423                           
  3424                           ;main.c: 555: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3425  001668  C0D9  F082         	movff	driveStationaryCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  3426  00166C  C0DA  F083         	movff	driveStationaryCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3427  001670  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3428  001674  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3429  001678  0E6C               	movlw	108
  3430  00167A  EC9D  F013         	call	_wheelVelocity
  3431  00167E                     l3121:
  3432                           
  3433                           ;main.c: 556: }
  3434                           ;main.c: 557: if(rightWheelCount > leftWheelCount + 1)
  3435  00167E  0E01               	movlw	1
  3436  001680  0100               	movlb	0	; () banked
  3437  001682  25B3               	addwf	_leftWheelCount& (0+255),w,b
  3438  001684  0100               	movlb	0	; () banked
  3439  001686  6F8A               	movwf	??_driveStationaryCircle& (0+255),b
  3440  001688  0E00               	movlw	0
  3441  00168A  0100               	movlb	0	; () banked
  3442  00168C  21B4               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  3443  00168E  0100               	movlb	0	; () banked
  3444  001690  6F8B               	movwf	(??_driveStationaryCircle+1)& (0+255),b
  3445  001692  0E00               	movlw	0
  3446  001694  0100               	movlb	0	; () banked
  3447  001696  21B5               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  3448  001698  0100               	movlb	0	; () banked
  3449  00169A  6F8C               	movwf	(??_driveStationaryCircle+2)& (0+255),b
  3450  00169C  0E00               	movlw	0
  3451  00169E  0100               	movlb	0	; () banked
  3452  0016A0  21B6               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  3453  0016A2  0100               	movlb	0	; () banked
  3454  0016A4  6F8D               	movwf	(??_driveStationaryCircle+3)& (0+255),b
  3455  0016A6  0100               	movlb	0	; () banked
  3456  0016A8  51B7               	movf	_rightWheelCount& (0+255),w,b
  3457  0016AA  0100               	movlb	0	; () banked
  3458  0016AC  5D8A               	subwf	??_driveStationaryCircle& (0+255),w,b
  3459  0016AE  0100               	movlb	0	; () banked
  3460  0016B0  51B8               	movf	(_rightWheelCount+1)& (0+255),w,b
  3461  0016B2  0100               	movlb	0	; () banked
  3462  0016B4  598B               	subwfb	(??_driveStationaryCircle+1)& (0+255),w,b
  3463  0016B6  0100               	movlb	0	; () banked
  3464  0016B8  51B9               	movf	(_rightWheelCount+2)& (0+255),w,b
  3465  0016BA  0100               	movlb	0	; () banked
  3466  0016BC  598C               	subwfb	(??_driveStationaryCircle+2)& (0+255),w,b
  3467  0016BE  0100               	movlb	0	; () banked
  3468  0016C0  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  3469  0016C2  0100               	movlb	0	; () banked
  3470  0016C4  598D               	subwfb	(??_driveStationaryCircle+3)& (0+255),w,b
  3471  0016C6  B0D8               	btfsc	status,0,c
  3472  0016C8  D075               	goto	l3125
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;main.c: 559: {
  3476                           ;main.c: 560: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 3;
  3477  0016CA  C0B3  F08A         	movff	_leftWheelCount,??_driveStationaryCircle
  3478  0016CE  C0B4  F08B         	movff	_leftWheelCount+1,??_driveStationaryCircle+1
  3479  0016D2  C0B5  F08C         	movff	_leftWheelCount+2,??_driveStationaryCircle+2
  3480  0016D6  C0B6  F08D         	movff	_leftWheelCount+3,??_driveStationaryCircle+3
  3481  0016DA  0100               	movlb	0	; () banked
  3482  0016DC  1F8A               	comf	??_driveStationaryCircle& (0+255),f,b
  3483  0016DE  1F8B               	comf	(??_driveStationaryCircle+1)& (0+255),f,b
  3484  0016E0  1F8C               	comf	(??_driveStationaryCircle+2)& (0+255),f,b
  3485  0016E2  1F8D               	comf	(??_driveStationaryCircle+3)& (0+255),f,b
  3486  0016E4  2B8A               	incf	??_driveStationaryCircle& (0+255),f,b
  3487  0016E6  0E00               	movlw	0
  3488  0016E8  238B               	addwfc	(??_driveStationaryCircle+1)& (0+255),f,b
  3489  0016EA  238C               	addwfc	(??_driveStationaryCircle+2)& (0+255),f,b
  3490  0016EC  238D               	addwfc	(??_driveStationaryCircle+3)& (0+255),f,b
  3491  0016EE  0100               	movlb	0	; () banked
  3492  0016F0  51B7               	movf	_rightWheelCount& (0+255),w,b
  3493  0016F2  0100               	movlb	0	; () banked
  3494  0016F4  258A               	addwf	??_driveStationaryCircle& (0+255),w,b
  3495  0016F6  6E1B               	movwf	___lltoft@c,c
  3496  0016F8  0100               	movlb	0	; () banked
  3497  0016FA  51B8               	movf	(_rightWheelCount+1)& (0+255),w,b
  3498  0016FC  0100               	movlb	0	; () banked
  3499  0016FE  218B               	addwfc	(??_driveStationaryCircle+1)& (0+255),w,b
  3500  001700  6E1C               	movwf	___lltoft@c+1,c
  3501  001702  0100               	movlb	0	; () banked
  3502  001704  51B9               	movf	(_rightWheelCount+2)& (0+255),w,b
  3503  001706  0100               	movlb	0	; () banked
  3504  001708  218C               	addwfc	(??_driveStationaryCircle+2)& (0+255),w,b
  3505  00170A  6E1D               	movwf	___lltoft@c+2,c
  3506  00170C  0100               	movlb	0	; () banked
  3507  00170E  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  3508  001710  0100               	movlb	0	; () banked
  3509  001712  218D               	addwfc	(??_driveStationaryCircle+3)& (0+255),w,b
  3510  001714  6E1E               	movwf	___lltoft@c+3,c
  3511  001716  EC62  F017         	call	___lltoft	;wreg free
  3512  00171A  C01B  F060         	movff	?___lltoft,sqrt@a
  3513  00171E  C01C  F061         	movff	?___lltoft+1,sqrt@a+1
  3514  001722  C01D  F062         	movff	?___lltoft+2,sqrt@a+2
  3515  001726  EC4E  F011         	call	_sqrt	;wreg free
  3516  00172A  C060  F094         	movff	?_sqrt,_driveStationaryCircle$2068
  3517  00172E  C061  F095         	movff	?_sqrt+1,_driveStationaryCircle$2068+1
  3518  001732  C062  F096         	movff	?_sqrt+2,_driveStationaryCircle$2068+2
  3519                           
  3520                           ;main.c: 559: {
  3521                           ;main.c: 560: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 3;
  3522  001736  0E00               	movlw	0
  3523  001738  6E36               	movwf	___ftadd@f2,c
  3524  00173A  0E40               	movlw	64
  3525  00173C  6E37               	movwf	___ftadd@f2+1,c
  3526  00173E  0E40               	movlw	64
  3527  001740  6E38               	movwf	___ftadd@f2+2,c
  3528  001742  C094  F033         	movff	_driveStationaryCircle$2068,___ftadd@f1
  3529  001746  C095  F034         	movff	_driveStationaryCircle$2068+1,___ftadd@f1+1
  3530  00174A  C096  F035         	movff	_driveStationaryCircle$2068+2,___ftadd@f1+2
  3531  00174E  EC25  F012         	call	___ftadd	;wreg free
  3532  001752  C033  F091         	movff	?___ftadd,_driveStationaryCircle$2070
  3533  001756  C034  F092         	movff	?___ftadd+1,_driveStationaryCircle$2070+1
  3534  00175A  C035  F093         	movff	?___ftadd+2,_driveStationaryCircle$2070+2
  3535                           
  3536                           ;main.c: 559: {
  3537                           ;main.c: 560: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 3;
  3538  00175E  C091  F036         	movff	_driveStationaryCircle$2070,___ftadd@f2
  3539  001762  C092  F037         	movff	_driveStationaryCircle$2070+1,___ftadd@f2+1
  3540  001766  C093  F038         	movff	_driveStationaryCircle$2070+2,___ftadd@f2+2
  3541  00176A  C0CC  F01B         	movff	driveStationaryCircle@speedCompensation,___awtoft@c
  3542  00176E  C0CD  F01C         	movff	driveStationaryCircle@speedCompensation+1,___awtoft@c+1
  3543  001772  EC51  F018         	call	___awtoft	;wreg free
  3544  001776  C01B  F033         	movff	?___awtoft,___ftadd@f1
  3545  00177A  C01C  F034         	movff	?___awtoft+1,___ftadd@f1+1
  3546  00177E  C01D  F035         	movff	?___awtoft+2,___ftadd@f1+2
  3547  001782  EC25  F012         	call	___ftadd	;wreg free
  3548  001786  C033  F073         	movff	?___ftadd,___fttol@f1
  3549  00178A  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  3550  00178E  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  3551  001792  ECFB  F012         	call	___fttol	;wreg free
  3552  001796  C073  F0CC         	movff	?___fttol,driveStationaryCircle@speedCompensation
  3553  00179A  C074  F0CD         	movff	?___fttol+1,driveStationaryCircle@speedCompensation+1
  3554                           
  3555                           ;main.c: 561: wheelVelocity('l', leftWheelCommandedSpeed,speedCompensation);
  3556  00179E  C0D9  F082         	movff	driveStationaryCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  3557  0017A2  C0DA  F083         	movff	driveStationaryCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3558  0017A6  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3559  0017AA  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3560  0017AE  0E6C               	movlw	108
  3561  0017B0  EC9D  F013         	call	_wheelVelocity
  3562  0017B4                     l3125:
  3563                           
  3564                           ;main.c: 562: }
  3565                           ;main.c: 564: if(rightWheelCount >= 23)
  3566  0017B4  0100               	movlb	0	; () banked
  3567  0017B6  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  3568  0017B8  0100               	movlb	0	; () banked
  3569  0017BA  11B9               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3570  0017BC  0100               	movlb	0	; () banked
  3571  0017BE  11B8               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  3572  0017C0  E105               	bnz	u2770
  3573  0017C2  0E17               	movlw	23
  3574  0017C4  0100               	movlb	0	; () banked
  3575  0017C6  5DB7               	subwf	_rightWheelCount& (0+255),w,b
  3576  0017C8  A0D8               	btfss	status,0,c
  3577  0017CA  D076               	goto	l3147
  3578  0017CC                     u2770:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;main.c: 565: {
  3582                           ;main.c: 566: if(leftWheelCount >= 23)
  3583  0017CC  0100               	movlb	0	; () banked
  3584  0017CE  51B6               	movf	(_leftWheelCount+3)& (0+255),w,b
  3585  0017D0  0100               	movlb	0	; () banked
  3586  0017D2  11B5               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  3587  0017D4  0100               	movlb	0	; () banked
  3588  0017D6  11B4               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  3589  0017D8  E105               	bnz	u2780
  3590  0017DA  0E17               	movlw	23
  3591  0017DC  0100               	movlb	0	; () banked
  3592  0017DE  5DB3               	subwf	_leftWheelCount& (0+255),w,b
  3593  0017E0  A0D8               	btfss	status,0,c
  3594  0017E2  D045               	goto	l3141
  3595  0017E4                     u2780:
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 567: {
  3599                           ;main.c: 568: rightWheelCount = 0;
  3600  0017E4  0E00               	movlw	0
  3601  0017E6  0100               	movlb	0	; () banked
  3602  0017E8  6FB7               	movwf	_rightWheelCount& (0+255),b
  3603  0017EA  0E00               	movlw	0
  3604  0017EC  6FB8               	movwf	(_rightWheelCount+1)& (0+255),b
  3605  0017EE  0E00               	movlw	0
  3606  0017F0  6FB9               	movwf	(_rightWheelCount+2)& (0+255),b
  3607  0017F2  0E00               	movlw	0
  3608  0017F4  6FBA               	movwf	(_rightWheelCount+3)& (0+255),b
  3609                           
  3610                           ;main.c: 569: leftWheelCount = 0;
  3611  0017F6  0E00               	movlw	0
  3612  0017F8  0100               	movlb	0	; () banked
  3613  0017FA  6FB3               	movwf	_leftWheelCount& (0+255),b
  3614  0017FC  0E00               	movlw	0
  3615  0017FE  6FB4               	movwf	(_leftWheelCount+1)& (0+255),b
  3616  001800  0E00               	movlw	0
  3617  001802  6FB5               	movwf	(_leftWheelCount+2)& (0+255),b
  3618  001804  0E00               	movlw	0
  3619  001806  6FB6               	movwf	(_leftWheelCount+3)& (0+255),b
  3620                           
  3621                           ;main.c: 570: leftWheelCommandedSpeed = 0;
  3622  001808  0E00               	movlw	0
  3623  00180A  0100               	movlb	0	; () banked
  3624  00180C  6FDA               	movwf	(driveStationaryCircle@leftWheelCommandedSpeed+1)& (0+255),b
  3625  00180E  0E00               	movlw	0
  3626  001810  6FD9               	movwf	driveStationaryCircle@leftWheelCommandedSpeed& (0+255),b
  3627                           
  3628                           ;main.c: 571: rightWheelCommandedSpeed = 0;
  3629  001812  0E00               	movlw	0
  3630  001814  0100               	movlb	0	; () banked
  3631  001816  6FDC               	movwf	(driveStationaryCircle@rightWheelCommandedSpeed+1)& (0+255),b
  3632  001818  0E00               	movlw	0
  3633  00181A  6FDB               	movwf	driveStationaryCircle@rightWheelCommandedSpeed& (0+255),b
  3634                           
  3635                           ;main.c: 572: speedCompensation = 0;
  3636  00181C  0E00               	movlw	0
  3637  00181E  0100               	movlb	0	; () banked
  3638  001820  6FCD               	movwf	(driveStationaryCircle@speedCompensation+1)& (0+255),b
  3639  001822  0E00               	movlw	0
  3640  001824  6FCC               	movwf	driveStationaryCircle@speedCompensation& (0+255),b
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;main.c: 573: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3644  001826  C0DB  F082         	movff	driveStationaryCircle@rightWheelCommandedSpeed,wheelVelocity@speed
  3645  00182A  C0DC  F083         	movff	driveStationaryCircle@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3646  00182E  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3647  001832  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3648  001836  0E72               	movlw	114
  3649  001838  EC9D  F013         	call	_wheelVelocity
  3650                           
  3651                           ;main.c: 574: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3652  00183C  C0D9  F082         	movff	driveStationaryCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  3653  001840  C0DA  F083         	movff	driveStationaryCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3654  001844  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3655  001848  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3656  00184C  0E6C               	movlw	108
  3657  00184E  EC9D  F013         	call	_wheelVelocity
  3658                           
  3659                           ;main.c: 575: lastEvent++;
  3660  001852  0100               	movlb	0	; () banked
  3661  001854  4BC1               	infsnz	_lastEvent& (0+255),f,b
  3662  001856  2BC2               	incf	(_lastEvent+1)& (0+255),f,b
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 576: leftWheelCommandedSpeed = 0;
  3666  001858  0E00               	movlw	0
  3667  00185A  0100               	movlb	0	; () banked
  3668  00185C  6FDA               	movwf	(driveStationaryCircle@leftWheelCommandedSpeed+1)& (0+255),b
  3669  00185E  0E00               	movlw	0
  3670  001860  6FD9               	movwf	driveStationaryCircle@leftWheelCommandedSpeed& (0+255),b
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;main.c: 577: rightWheelCommandedSpeed = 35;
  3674  001862  0E00               	movlw	0
  3675  001864  0100               	movlb	0	; () banked
  3676  001866  6FDC               	movwf	(driveStationaryCircle@rightWheelCommandedSpeed+1)& (0+255),b
  3677  001868  0E23               	movlw	35
  3678  00186A  6FDB               	movwf	driveStationaryCircle@rightWheelCommandedSpeed& (0+255),b
  3679                           
  3680                           ;main.c: 579: }
  3681  00186C  D025               	goto	l3147
  3682  00186E                     l3141:
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;main.c: 580: else
  3686                           ;main.c: 581: {
  3687                           ;main.c: 582: rightWheelCommandedSpeed = 0;
  3688  00186E  0E00               	movlw	0
  3689  001870  0100               	movlb	0	; () banked
  3690  001872  6FDC               	movwf	(driveStationaryCircle@rightWheelCommandedSpeed+1)& (0+255),b
  3691  001874  0E00               	movlw	0
  3692  001876  6FDB               	movwf	driveStationaryCircle@rightWheelCommandedSpeed& (0+255),b
  3693                           
  3694                           ;main.c: 583: leftWheelCommandedSpeed = -35;
  3695  001878  0EFF               	movlw	255
  3696  00187A  0100               	movlb	0	; () banked
  3697  00187C  6FDA               	movwf	(driveStationaryCircle@leftWheelCommandedSpeed+1)& (0+255),b
  3698  00187E  0EDD               	movlw	221
  3699  001880  6FD9               	movwf	driveStationaryCircle@leftWheelCommandedSpeed& (0+255),b
  3700                           
  3701                           ;main.c: 584: speedCompensation = 0;
  3702  001882  0E00               	movlw	0
  3703  001884  0100               	movlb	0	; () banked
  3704  001886  6FCD               	movwf	(driveStationaryCircle@speedCompensation+1)& (0+255),b
  3705  001888  0E00               	movlw	0
  3706  00188A  6FCC               	movwf	driveStationaryCircle@speedCompensation& (0+255),b
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;main.c: 585: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3710  00188C  C0DB  F082         	movff	driveStationaryCircle@rightWheelCommandedSpeed,wheelVelocity@speed
  3711  001890  C0DC  F083         	movff	driveStationaryCircle@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3712  001894  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3713  001898  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3714  00189C  0E72               	movlw	114
  3715  00189E  EC9D  F013         	call	_wheelVelocity
  3716                           
  3717                           ;main.c: 586: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3718  0018A2  C0D9  F082         	movff	driveStationaryCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  3719  0018A6  C0DA  F083         	movff	driveStationaryCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3720  0018AA  C0CC  F084         	movff	driveStationaryCircle@speedCompensation,wheelVelocity@speedCompensation
  3721  0018AE  C0CD  F085         	movff	driveStationaryCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  3722  0018B2  0E6C               	movlw	108
  3723  0018B4  EC9D  F013         	call	_wheelVelocity
  3724  0018B8                     l3147:
  3725                           
  3726                           ;main.c: 587: }
  3727                           ;main.c: 590: }
  3728                           ;main.c: 592: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3729  0018B8  0ED9               	movlw	low driveStationaryCircle@leftWheelCommandedSpeed
  3730  0018BA  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3731  0018BC  0E00               	movlw	high driveStationaryCircle@leftWheelCommandedSpeed
  3732  0018BE  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3733  0018C0  0EDB               	movlw	low driveStationaryCircle@rightWheelCommandedSpeed
  3734  0018C2  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3735  0018C4  0E00               	movlw	high driveStationaryCircle@rightWheelCommandedSpeed
  3736  0018C6  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3737  0018C8  0ECC               	movlw	low driveStationaryCircle@speedCompensation
  3738  0018CA  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3739  0018CC  0E00               	movlw	high driveStationaryCircle@speedCompensation
  3740  0018CE  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3741  0018D0  EC28  F014         	call	_limitWheelSpeeds	;wreg free
  3742  0018D4  0012               	return		;funcret
  3743  0018D6                     __end_of_driveStationaryCircle:
  3744                           	opt stack 0
  3745                           tblptru	equ	0xFF8
  3746                           tblptrh	equ	0xFF7
  3747                           tblptrl	equ	0xFF6
  3748                           tablat	equ	0xFF5
  3749                           prodh	equ	0xFF4
  3750                           prodl	equ	0xFF3
  3751                           intcon	equ	0xFF2
  3752                           intcon2	equ	0xFF1
  3753                           postinc0	equ	0xFEE
  3754                           wreg	equ	0xFE8
  3755                           postdec1	equ	0xFE5
  3756                           fsr1l	equ	0xFE1
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _sqrt *****************
  3764 ;; Defined at:
  3765 ;;		line 9 in file "/Applications/microchip/xc8/v1.36/sources/common/sprcsqrt.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  a               3    0[BANK0 ] void 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  x               3   16[BANK0 ] void 
  3770 ;;  q               3   13[BANK0 ] void 
  3771 ;;  z               3    9[BANK0 ] void 
  3772 ;;  og              3    6[BANK0 ] void 
  3773 ;;  i               1   12[BANK0 ] unsigned char 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  3    0[BANK0 ] unsigned char 
  3776 ;; Registers used:
  3777 ;;		wreg, status,2, status,0, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3783 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;Total ram usage:       19 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    4
  3790 ;; This function calls:
  3791 ;;		___ftge
  3792 ;;		___ftmul
  3793 ;;		___ftsub
  3794 ;; This function is called by:
  3795 ;;		_driveStationaryCircle
  3796 ;;		_driveStraight
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text11
  3801  00229C                     __ptext11:
  3802                           	opt stack 0
  3803  00229C                     _sqrt:
  3804                           	opt stack 24
  3805                           
  3806                           ;incstack = 0
  3807  00229C  0E00               	movlw	0
  3808  00229E  6E13               	movwf	___ftge@ff1,c
  3809  0022A0  0E00               	movlw	0
  3810  0022A2  6E14               	movwf	___ftge@ff1+1,c
  3811  0022A4  0E00               	movlw	0
  3812  0022A6  6E15               	movwf	___ftge@ff1+2,c
  3813  0022A8  C060  F016         	movff	sqrt@a,___ftge@ff2
  3814  0022AC  C061  F017         	movff	sqrt@a+1,___ftge@ff2+1
  3815  0022B0  C062  F018         	movff	sqrt@a+2,___ftge@ff2+2
  3816  0022B4  ECA5  F016         	call	___ftge	;wreg free
  3817  0022B8  A0D8               	btfss	status,0,c
  3818  0022BA  D011               	goto	l912
  3819  0022BC  0100               	movlb	0	; () banked
  3820  0022BE  AF62               	btfss	(sqrt@a+2)& (0+255),7,b
  3821  0022C0  D004               	goto	l913
  3822                           
  3823                           ; BSR set to: 0
  3824  0022C2  0E00               	movlw	0
  3825  0022C4  6E4C               	movwf	_errno+1,c
  3826  0022C6  0E21               	movlw	33
  3827  0022C8  6E4B               	movwf	_errno,c
  3828  0022CA                     l913:
  3829                           
  3830                           ; BSR set to: 0
  3831  0022CA  0E00               	movlw	0
  3832  0022CC  0100               	movlb	0	; () banked
  3833  0022CE  6F60               	movwf	?_sqrt& (0+255),b
  3834  0022D0  0E00               	movlw	0
  3835  0022D2  0100               	movlb	0	; () banked
  3836  0022D4  6F61               	movwf	(?_sqrt+1)& (0+255),b
  3837  0022D6  0E00               	movlw	0
  3838  0022D8  0100               	movlb	0	; () banked
  3839  0022DA  6F62               	movwf	(?_sqrt+2)& (0+255),b
  3840                           
  3841                           ; BSR set to: 0
  3842  0022DC  0012               	return	
  3843  0022DE                     l912:
  3844  0022DE  C060  F069         	movff	sqrt@a,sqrt@z
  3845  0022E2  C061  F06A         	movff	sqrt@a+1,sqrt@z+1
  3846  0022E6  C062  F06B         	movff	sqrt@a+2,sqrt@z+2
  3847  0022EA  C060  F063         	movff	sqrt@a,??_sqrt
  3848  0022EE  C061  F064         	movff	sqrt@a+1,??_sqrt+1
  3849  0022F2  C062  F065         	movff	sqrt@a+2,??_sqrt+2
  3850  0022F6  0100               	movlb	0	; () banked
  3851  0022F8  1F63               	comf	??_sqrt& (0+255),f,b
  3852  0022FA  1F64               	comf	(??_sqrt+1)& (0+255),f,b
  3853  0022FC  1F65               	comf	(??_sqrt+2)& (0+255),f,b
  3854  0022FE  2B63               	incf	??_sqrt& (0+255),f,b
  3855  002300  0E00               	movlw	0
  3856  002302  2364               	addwfc	(??_sqrt+1)& (0+255),f,b
  3857  002304  2365               	addwfc	(??_sqrt+2)& (0+255),f,b
  3858  002306  0EC8               	movlw	200
  3859  002308  0100               	movlb	0	; () banked
  3860  00230A  2563               	addwf	??_sqrt& (0+255),w,b
  3861  00230C  0100               	movlb	0	; () banked
  3862  00230E  6F70               	movwf	sqrt@x& (0+255),b
  3863  002310  0E6E               	movlw	110
  3864  002312  0100               	movlb	0	; () banked
  3865  002314  2164               	addwfc	(??_sqrt+1)& (0+255),w,b
  3866  002316  0100               	movlb	0	; () banked
  3867  002318  6F71               	movwf	(sqrt@x+1)& (0+255),b
  3868  00231A  0EBE               	movlw	190
  3869  00231C  0100               	movlb	0	; () banked
  3870  00231E  2165               	addwfc	(??_sqrt+2)& (0+255),w,b
  3871  002320  0100               	movlb	0	; () banked
  3872  002322  6F72               	movwf	(sqrt@x+2)& (0+255),b
  3873                           
  3874                           ; BSR set to: 0
  3875  002324  0100               	movlb	0	; () banked
  3876  002326  90D8               	bcf	status,0,c
  3877  002328  3372               	rrcf	(sqrt@x+2)& (0+255),f,b
  3878  00232A  3371               	rrcf	(sqrt@x+1)& (0+255),f,b
  3879  00232C  3370               	rrcf	sqrt@x& (0+255),f,b
  3880                           
  3881                           ; BSR set to: 0
  3882  00232E  0E00               	movlw	0
  3883  002330  0100               	movlb	0	; () banked
  3884  002332  5F69               	subwf	sqrt@z& (0+255),f,b
  3885  002334  0E80               	movlw	128
  3886  002336  0100               	movlb	0	; () banked
  3887  002338  5B6A               	subwfb	(sqrt@z+1)& (0+255),f,b
  3888  00233A  0E00               	movlw	0
  3889  00233C  0100               	movlb	0	; () banked
  3890  00233E  5B6B               	subwfb	(sqrt@z+2)& (0+255),f,b
  3891                           
  3892                           ; BSR set to: 0
  3893  002340  0E04               	movlw	4
  3894  002342  0100               	movlb	0	; () banked
  3895  002344  6F6C               	movwf	sqrt@i& (0+255),b
  3896  002346                     l3039:
  3897                           
  3898                           ; BSR set to: 0
  3899  002346  C070  F066         	movff	sqrt@x,sqrt@og
  3900  00234A  C071  F067         	movff	sqrt@x+1,sqrt@og+1
  3901  00234E  C072  F068         	movff	sqrt@x+2,sqrt@og+2
  3902                           
  3903                           ; BSR set to: 0
  3904  002352  C070  F024         	movff	sqrt@x,___ftmul@f1
  3905  002356  C071  F025         	movff	sqrt@x+1,___ftmul@f1+1
  3906  00235A  C072  F026         	movff	sqrt@x+2,___ftmul@f1+2
  3907  00235E  C069  F027         	movff	sqrt@z,___ftmul@f2
  3908  002362  C06A  F028         	movff	sqrt@z+1,___ftmul@f2+1
  3909  002366  C06B  F029         	movff	sqrt@z+2,___ftmul@f2+2
  3910  00236A  ECAA  F014         	call	___ftmul	;wreg free
  3911  00236E  C024  F06D         	movff	?___ftmul,sqrt@q
  3912  002372  C025  F06E         	movff	?___ftmul+1,sqrt@q+1
  3913  002376  C026  F06F         	movff	?___ftmul+2,sqrt@q+2
  3914  00237A  C06D  F024         	movff	sqrt@q,___ftmul@f1
  3915  00237E  C06E  F025         	movff	sqrt@q+1,___ftmul@f1+1
  3916  002382  C06F  F026         	movff	sqrt@q+2,___ftmul@f1+2
  3917  002386  C070  F027         	movff	sqrt@x,___ftmul@f2
  3918  00238A  C071  F028         	movff	sqrt@x+1,___ftmul@f2+1
  3919  00238E  C072  F029         	movff	sqrt@x+2,___ftmul@f2+2
  3920  002392  ECAA  F014         	call	___ftmul	;wreg free
  3921  002396  C024  F06D         	movff	?___ftmul,sqrt@q
  3922  00239A  C025  F06E         	movff	?___ftmul+1,sqrt@q+1
  3923  00239E  C026  F06F         	movff	?___ftmul+2,sqrt@q+2
  3924  0023A2  C06D  F024         	movff	sqrt@q,___ftmul@f1
  3925  0023A6  C06E  F025         	movff	sqrt@q+1,___ftmul@f1+1
  3926  0023AA  C06F  F026         	movff	sqrt@q+2,___ftmul@f1+2
  3927  0023AE  C070  F027         	movff	sqrt@x,___ftmul@f2
  3928  0023B2  C071  F028         	movff	sqrt@x+1,___ftmul@f2+1
  3929  0023B6  C072  F029         	movff	sqrt@x+2,___ftmul@f2+2
  3930  0023BA  ECAA  F014         	call	___ftmul	;wreg free
  3931  0023BE  C024  F06D         	movff	?___ftmul,sqrt@q
  3932  0023C2  C025  F06E         	movff	?___ftmul+1,sqrt@q+1
  3933  0023C6  C026  F06F         	movff	?___ftmul+2,sqrt@q+2
  3934  0023CA  C070  F024         	movff	sqrt@x,___ftmul@f1
  3935  0023CE  C071  F025         	movff	sqrt@x+1,___ftmul@f1+1
  3936  0023D2  C072  F026         	movff	sqrt@x+2,___ftmul@f1+2
  3937  0023D6  0E00               	movlw	0
  3938  0023D8  6E27               	movwf	___ftmul@f2,c
  3939  0023DA  0EC0               	movlw	192
  3940  0023DC  6E28               	movwf	___ftmul@f2+1,c
  3941  0023DE  0E3F               	movlw	63
  3942  0023E0  6E29               	movwf	___ftmul@f2+2,c
  3943  0023E2  ECAA  F014         	call	___ftmul	;wreg free
  3944  0023E6  C024  F070         	movff	?___ftmul,sqrt@x
  3945  0023EA  C025  F071         	movff	?___ftmul+1,sqrt@x+1
  3946  0023EE  C026  F072         	movff	?___ftmul+2,sqrt@x+2
  3947  0023F2  C070  F03F         	movff	sqrt@x,___ftsub@f1
  3948  0023F6  C071  F040         	movff	sqrt@x+1,___ftsub@f1+1
  3949  0023FA  C072  F041         	movff	sqrt@x+2,___ftsub@f1+2
  3950  0023FE  C06D  F042         	movff	sqrt@q,___ftsub@f2
  3951  002402  C06E  F043         	movff	sqrt@q+1,___ftsub@f2+1
  3952  002406  C06F  F044         	movff	sqrt@q+2,___ftsub@f2+2
  3953  00240A  EC31  F018         	call	___ftsub	;wreg free
  3954  00240E  C03F  F070         	movff	?___ftsub,sqrt@x
  3955  002412  C040  F071         	movff	?___ftsub+1,sqrt@x+1
  3956  002416  C041  F072         	movff	?___ftsub+2,sqrt@x+2
  3957  00241A  0100               	movlb	0	; () banked
  3958  00241C  2F6C               	decfsz	sqrt@i& (0+255),f,b
  3959  00241E  D793               	goto	l3039
  3960                           
  3961                           ; BSR set to: 0
  3962                           
  3963                           ; BSR set to: 0
  3964  002420  C070  F024         	movff	sqrt@x,___ftmul@f1
  3965  002424  C071  F025         	movff	sqrt@x+1,___ftmul@f1+1
  3966  002428  C072  F026         	movff	sqrt@x+2,___ftmul@f1+2
  3967  00242C  C060  F027         	movff	sqrt@a,___ftmul@f2
  3968  002430  C061  F028         	movff	sqrt@a+1,___ftmul@f2+1
  3969  002434  C062  F029         	movff	sqrt@a+2,___ftmul@f2+2
  3970  002438  ECAA  F014         	call	___ftmul	;wreg free
  3971  00243C  C024  F060         	movff	?___ftmul,?_sqrt
  3972  002440  C025  F061         	movff	?___ftmul+1,?_sqrt+1
  3973  002444  C026  F062         	movff	?___ftmul+2,?_sqrt+2
  3974  002448  0012               	return	
  3975  00244A                     __end_of_sqrt:
  3976                           	opt stack 0
  3977                           tblptru	equ	0xFF8
  3978                           tblptrh	equ	0xFF7
  3979                           tblptrl	equ	0xFF6
  3980                           tablat	equ	0xFF5
  3981                           prodh	equ	0xFF4
  3982                           prodl	equ	0xFF3
  3983                           intcon	equ	0xFF2
  3984                           intcon2	equ	0xFF1
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           postdec1	equ	0xFE5
  3988                           fsr1l	equ	0xFE1
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function ___ftsub *****************
  3996 ;; Defined at:
  3997 ;;		line 20 in file "/Applications/microchip/xc8/v1.36/sources/common/ftsub.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  f1              3   62[COMRAM] float 
  4000 ;;  f2              3   65[COMRAM] float 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  3   62[COMRAM] float 
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4012 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;Total ram usage:        6 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    3
  4019 ;; This function calls:
  4020 ;;		___ftadd
  4021 ;; This function is called by:
  4022 ;;		_driveStationaryCircle
  4023 ;;		_driveStraight
  4024 ;;		_sqrt
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text12
  4029  003062                     __ptext12:
  4030                           	opt stack 0
  4031  003062                     ___ftsub:
  4032                           	opt stack 24
  4033                           
  4034                           ;incstack = 0
  4035  003062  5042               	movf	___ftsub@f2,w,c
  4036  003064  1043               	iorwf	___ftsub@f2+1,w,c
  4037  003066  1044               	iorwf	___ftsub@f2+2,w,c
  4038  003068  B4D8               	btfsc	status,2,c
  4039  00306A  D006               	goto	l2179
  4040  00306C  0E00               	movlw	0
  4041  00306E  1A42               	xorwf	___ftsub@f2,f,c
  4042  003070  0E00               	movlw	0
  4043  003072  1A43               	xorwf	___ftsub@f2+1,f,c
  4044  003074  0E80               	movlw	128
  4045  003076  1A44               	xorwf	___ftsub@f2+2,f,c
  4046  003078                     l2179:
  4047  003078  C03F  F033         	movff	___ftsub@f1,___ftadd@f1
  4048  00307C  C040  F034         	movff	___ftsub@f1+1,___ftadd@f1+1
  4049  003080  C041  F035         	movff	___ftsub@f1+2,___ftadd@f1+2
  4050  003084  C042  F036         	movff	___ftsub@f2,___ftadd@f2
  4051  003088  C043  F037         	movff	___ftsub@f2+1,___ftadd@f2+1
  4052  00308C  C044  F038         	movff	___ftsub@f2+2,___ftadd@f2+2
  4053  003090  EC25  F012         	call	___ftadd	;wreg free
  4054  003094  C033  F03F         	movff	?___ftadd,?___ftsub
  4055  003098  C034  F040         	movff	?___ftadd+1,?___ftsub+1
  4056  00309C  C035  F041         	movff	?___ftadd+2,?___ftsub+2
  4057  0030A0  0012               	return	
  4058  0030A2                     __end_of___ftsub:
  4059                           	opt stack 0
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           intcon2	equ	0xFF1
  4068                           postinc0	equ	0xFEE
  4069                           wreg	equ	0xFE8
  4070                           postdec1	equ	0xFE5
  4071                           fsr1l	equ	0xFE1
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           fsr2h	equ	0xFDA
  4075                           fsr2l	equ	0xFD9
  4076                           status	equ	0xFD8
  4077                           
  4078 ;; *************** function ___ftge *****************
  4079 ;; Defined at:
  4080 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;  ff1             3   18[COMRAM] float 
  4083 ;;  ff2             3   21[COMRAM] float 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;		None
  4086 ;; Return value:  Size  Location     Type
  4087 ;;		None               void
  4088 ;; Registers used:
  4089 ;;		wreg, status,2, status,0
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4095 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;Total ram usage:        9 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    1
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_sqrt
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text13
  4110  002D4A                     __ptext13:
  4111                           	opt stack 0
  4112  002D4A                     ___ftge:
  4113                           	opt stack 26
  4114                           
  4115                           ;incstack = 0
  4116  002D4A  AE15               	btfss	___ftge@ff1+2,7,c
  4117  002D4C  D016               	goto	l2199
  4118  002D4E  C013  F019         	movff	___ftge@ff1,??___ftge
  4119  002D52  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  4120  002D56  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  4121  002D5A  1E19               	comf	??___ftge,f,c
  4122  002D5C  1E1A               	comf	??___ftge+1,f,c
  4123  002D5E  1E1B               	comf	??___ftge+2,f,c
  4124  002D60  2A19               	incf	??___ftge,f,c
  4125  002D62  0E00               	movlw	0
  4126  002D64  221A               	addwfc	??___ftge+1,f,c
  4127  002D66  221B               	addwfc	??___ftge+2,f,c
  4128  002D68  0E00               	movlw	0
  4129  002D6A  2419               	addwf	??___ftge,w,c
  4130  002D6C  6E13               	movwf	___ftge@ff1,c
  4131  002D6E  0E00               	movlw	0
  4132  002D70  201A               	addwfc	??___ftge+1,w,c
  4133  002D72  6E14               	movwf	___ftge@ff1+1,c
  4134  002D74  0E80               	movlw	128
  4135  002D76  201B               	addwfc	??___ftge+2,w,c
  4136  002D78  6E15               	movwf	___ftge@ff1+2,c
  4137  002D7A                     l2199:
  4138  002D7A  AE18               	btfss	___ftge@ff2+2,7,c
  4139  002D7C  D016               	goto	l2203
  4140  002D7E  C016  F019         	movff	___ftge@ff2,??___ftge
  4141  002D82  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  4142  002D86  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  4143  002D8A  1E19               	comf	??___ftge,f,c
  4144  002D8C  1E1A               	comf	??___ftge+1,f,c
  4145  002D8E  1E1B               	comf	??___ftge+2,f,c
  4146  002D90  2A19               	incf	??___ftge,f,c
  4147  002D92  0E00               	movlw	0
  4148  002D94  221A               	addwfc	??___ftge+1,f,c
  4149  002D96  221B               	addwfc	??___ftge+2,f,c
  4150  002D98  0E00               	movlw	0
  4151  002D9A  2419               	addwf	??___ftge,w,c
  4152  002D9C  6E16               	movwf	___ftge@ff2,c
  4153  002D9E  0E00               	movlw	0
  4154  002DA0  201A               	addwfc	??___ftge+1,w,c
  4155  002DA2  6E17               	movwf	___ftge@ff2+1,c
  4156  002DA4  0E80               	movlw	128
  4157  002DA6  201B               	addwfc	??___ftge+2,w,c
  4158  002DA8  6E18               	movwf	___ftge@ff2+2,c
  4159  002DAA                     l2203:
  4160  002DAA  0E00               	movlw	0
  4161  002DAC  1A13               	xorwf	___ftge@ff1,f,c
  4162  002DAE  0E00               	movlw	0
  4163  002DB0  1A14               	xorwf	___ftge@ff1+1,f,c
  4164  002DB2  0E80               	movlw	128
  4165  002DB4  1A15               	xorwf	___ftge@ff1+2,f,c
  4166  002DB6  0E00               	movlw	0
  4167  002DB8  1A16               	xorwf	___ftge@ff2,f,c
  4168  002DBA  0E00               	movlw	0
  4169  002DBC  1A17               	xorwf	___ftge@ff2+1,f,c
  4170  002DBE  0E80               	movlw	128
  4171  002DC0  1A18               	xorwf	___ftge@ff2+2,f,c
  4172  002DC2  5016               	movf	___ftge@ff2,w,c
  4173  002DC4  5C13               	subwf	___ftge@ff1,w,c
  4174  002DC6  5017               	movf	___ftge@ff2+1,w,c
  4175  002DC8  5814               	subwfb	___ftge@ff1+1,w,c
  4176  002DCA  5018               	movf	___ftge@ff2+2,w,c
  4177  002DCC  5815               	subwfb	___ftge@ff1+2,w,c
  4178  002DCE  B0D8               	btfsc	status,0,c
  4179  002DD0  D002               	goto	l2209
  4180  002DD2  90D8               	bcf	status,0,c
  4181  002DD4  0012               	return	
  4182  002DD6                     l2209:
  4183  002DD6  80D8               	bsf	status,0,c
  4184  002DD8  0012               	return	
  4185  002DDA                     __end_of___ftge:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           intcon	equ	0xFF2
  4194                           intcon2	equ	0xFF1
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           postdec1	equ	0xFE5
  4198                           fsr1l	equ	0xFE1
  4199                           postinc2	equ	0xFDE
  4200                           postdec2	equ	0xFDD
  4201                           fsr2h	equ	0xFDA
  4202                           fsr2l	equ	0xFD9
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function ___lltoft *****************
  4206 ;; Defined at:
  4207 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  c               4   26[COMRAM] unsigned long 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  exp             1   34[COMRAM] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  3   26[COMRAM] float 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4221 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;Total ram usage:        9 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    2
  4228 ;; This function calls:
  4229 ;;		___ftpack
  4230 ;; This function is called by:
  4231 ;;		_main
  4232 ;;		_driveStationaryCircle
  4233 ;;		_driveStraight
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text14
  4238  002EC4                     __ptext14:
  4239                           	opt stack 0
  4240  002EC4                     ___lltoft:
  4241                           	opt stack 26
  4242                           
  4243                           ;incstack = 0
  4244  002EC4  0E8E               	movlw	142
  4245  002EC6  6E23               	movwf	___lltoft@exp,c
  4246  002EC8  D006               	goto	l2349
  4247  002ECA                     l2347:
  4248  002ECA  90D8               	bcf	status,0,c
  4249  002ECC  321E               	rrcf	___lltoft@c+3,f,c
  4250  002ECE  321D               	rrcf	___lltoft@c+2,f,c
  4251  002ED0  321C               	rrcf	___lltoft@c+1,f,c
  4252  002ED2  321B               	rrcf	___lltoft@c,f,c
  4253  002ED4  2A23               	incf	___lltoft@exp,f,c
  4254  002ED6                     l2349:
  4255  002ED6  0E00               	movlw	0
  4256  002ED8  141B               	andwf	___lltoft@c,w,c
  4257  002EDA  6E1F               	movwf	??___lltoft& (0+255),c
  4258  002EDC  0E00               	movlw	0
  4259  002EDE  141C               	andwf	___lltoft@c+1,w,c
  4260  002EE0  6E20               	movwf	(??___lltoft+1)& (0+255),c
  4261  002EE2  0E00               	movlw	0
  4262  002EE4  141D               	andwf	___lltoft@c+2,w,c
  4263  002EE6  6E21               	movwf	(??___lltoft+2)& (0+255),c
  4264  002EE8  0EFF               	movlw	255
  4265  002EEA  141E               	andwf	___lltoft@c+3,w,c
  4266  002EEC  6E22               	movwf	(??___lltoft+3)& (0+255),c
  4267  002EEE  501F               	movf	??___lltoft,w,c
  4268  002EF0  1020               	iorwf	??___lltoft+1,w,c
  4269  002EF2  1021               	iorwf	??___lltoft+2,w,c
  4270  002EF4  1022               	iorwf	??___lltoft+3,w,c
  4271  002EF6  A4D8               	btfss	status,2,c
  4272  002EF8  D7E8               	goto	l2347
  4273  002EFA  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  4274  002EFE  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  4275  002F02  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  4276  002F06  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  4277  002F0A  0E00               	movlw	0
  4278  002F0C  6E17               	movwf	___ftpack@sign,c
  4279  002F0E  ECFA  F015         	call	___ftpack	;wreg free
  4280  002F12  C013  F01B         	movff	?___ftpack,?___lltoft
  4281  002F16  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  4282  002F1A  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  4283  002F1E  0012               	return	
  4284  002F20                     __end_of___lltoft:
  4285                           	opt stack 0
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           prodh	equ	0xFF4
  4291                           prodl	equ	0xFF3
  4292                           intcon	equ	0xFF2
  4293                           intcon2	equ	0xFF1
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           postdec1	equ	0xFE5
  4297                           fsr1l	equ	0xFE1
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _driveLargeCircle *****************
  4305 ;; Defined at:
  4306 ;;		line 596 in file "main.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:        8 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    4
  4327 ;; This function calls:
  4328 ;;		___lmul
  4329 ;;		_limitWheelSpeeds
  4330 ;;		_wheelVelocity
  4331 ;; This function is called by:
  4332 ;;		_excerciseControl
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text15
  4337  001D00                     __ptext15:
  4338                           	opt stack 0
  4339  001D00                     _driveLargeCircle:
  4340                           	opt stack 25
  4341                           
  4342                           ;main.c: 610: static int leftWheelCommandedSpeed = 30;
  4343                           ;main.c: 611: static int rightWheelCommandedSpeed = 30;
  4344                           ;main.c: 612: static int leftIntegral = 0;
  4345                           ;main.c: 613: static int speedCompensation = 0;
  4346                           ;main.c: 615: CONTROL_MS = 100;
  4347                           
  4348                           ;incstack = 0
  4349  001D00  0E00               	movlw	0
  4350  001D02  0100               	movlb	0	; () banked
  4351  001D04  6FD4               	movwf	(_CONTROL_MS+1)& (0+255),b
  4352  001D06  0E64               	movlw	100
  4353  001D08  6FD3               	movwf	_CONTROL_MS& (0+255),b
  4354                           
  4355                           ;main.c: 616: TOP_SPEED_FACTOR = 1;
  4356  001D0A  0E00               	movlw	0
  4357  001D0C  0100               	movlb	0	; () banked
  4358  001D0E  6FD0               	movwf	_TOP_SPEED_FACTOR& (0+255),b
  4359  001D10  0E80               	movlw	128
  4360  001D12  0100               	movlb	0	; () banked
  4361  001D14  6FD1               	movwf	(_TOP_SPEED_FACTOR+1)& (0+255),b
  4362  001D16  0E3F               	movlw	63
  4363  001D18  0100               	movlb	0	; () banked
  4364  001D1A  6FD2               	movwf	(_TOP_SPEED_FACTOR+2)& (0+255),b
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 618: if(rightWheelCount * 36 < (elapsedMillis - startCircleMillis))
  4368  001D1C  C0BB  F08A         	movff	_startCircleMillis,??_driveLargeCircle
  4369  001D20  C0BC  F08B         	movff	_startCircleMillis+1,??_driveLargeCircle+1
  4370  001D24  C0BD  F08C         	movff	_startCircleMillis+2,??_driveLargeCircle+2
  4371  001D28  C0BE  F08D         	movff	_startCircleMillis+3,??_driveLargeCircle+3
  4372  001D2C  0100               	movlb	0	; () banked
  4373  001D2E  1F8A               	comf	??_driveLargeCircle& (0+255),f,b
  4374  001D30  1F8B               	comf	(??_driveLargeCircle+1)& (0+255),f,b
  4375  001D32  1F8C               	comf	(??_driveLargeCircle+2)& (0+255),f,b
  4376  001D34  1F8D               	comf	(??_driveLargeCircle+3)& (0+255),f,b
  4377  001D36  2B8A               	incf	??_driveLargeCircle& (0+255),f,b
  4378  001D38  0E00               	movlw	0
  4379  001D3A  238B               	addwfc	(??_driveLargeCircle+1)& (0+255),f,b
  4380  001D3C  238C               	addwfc	(??_driveLargeCircle+2)& (0+255),f,b
  4381  001D3E  238D               	addwfc	(??_driveLargeCircle+3)& (0+255),f,b
  4382  001D40  0100               	movlb	0	; () banked
  4383  001D42  51AF               	movf	_elapsedMillis& (0+255),w,b
  4384  001D44  0100               	movlb	0	; () banked
  4385  001D46  258A               	addwf	??_driveLargeCircle& (0+255),w,b
  4386  001D48  0100               	movlb	0	; () banked
  4387  001D4A  6F8E               	movwf	(??_driveLargeCircle+4)& (0+255),b
  4388  001D4C  0100               	movlb	0	; () banked
  4389  001D4E  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  4390  001D50  0100               	movlb	0	; () banked
  4391  001D52  218B               	addwfc	(??_driveLargeCircle+1)& (0+255),w,b
  4392  001D54  0100               	movlb	0	; () banked
  4393  001D56  6F8F               	movwf	(??_driveLargeCircle+5)& (0+255),b
  4394  001D58  0100               	movlb	0	; () banked
  4395  001D5A  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  4396  001D5C  0100               	movlb	0	; () banked
  4397  001D5E  218C               	addwfc	(??_driveLargeCircle+2)& (0+255),w,b
  4398  001D60  0100               	movlb	0	; () banked
  4399  001D62  6F90               	movwf	(??_driveLargeCircle+6)& (0+255),b
  4400  001D64  0100               	movlb	0	; () banked
  4401  001D66  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  4402  001D68  0100               	movlb	0	; () banked
  4403  001D6A  218D               	addwfc	(??_driveLargeCircle+3)& (0+255),w,b
  4404  001D6C  0100               	movlb	0	; () banked
  4405  001D6E  6F91               	movwf	(??_driveLargeCircle+7)& (0+255),b
  4406  001D70  C0B7  F013         	movff	_rightWheelCount,___lmul@multiplier
  4407  001D74  C0B8  F014         	movff	_rightWheelCount+1,___lmul@multiplier+1
  4408  001D78  C0B9  F015         	movff	_rightWheelCount+2,___lmul@multiplier+2
  4409  001D7C  C0BA  F016         	movff	_rightWheelCount+3,___lmul@multiplier+3
  4410  001D80  0E24               	movlw	36
  4411  001D82  6E17               	movwf	___lmul@multiplicand,c
  4412  001D84  0E00               	movlw	0
  4413  001D86  6E18               	movwf	___lmul@multiplicand+1,c
  4414  001D88  0E00               	movlw	0
  4415  001D8A  6E19               	movwf	___lmul@multiplicand+2,c
  4416  001D8C  0E00               	movlw	0
  4417  001D8E  6E1A               	movwf	___lmul@multiplicand+3,c
  4418  001D90  ECBC  F017         	call	___lmul	;wreg free
  4419  001D94  0100               	movlb	0	; () banked
  4420  001D96  518E               	movf	(??_driveLargeCircle+4)& (0+255),w,b
  4421  001D98  5C13               	subwf	?___lmul,w,c
  4422  001D9A  0100               	movlb	0	; () banked
  4423  001D9C  518F               	movf	(??_driveLargeCircle+5)& (0+255),w,b
  4424  001D9E  5814               	subwfb	?___lmul+1,w,c
  4425  001DA0  0100               	movlb	0	; () banked
  4426  001DA2  5190               	movf	(??_driveLargeCircle+6)& (0+255),w,b
  4427  001DA4  5815               	subwfb	?___lmul+2,w,c
  4428  001DA6  0100               	movlb	0	; () banked
  4429  001DA8  5191               	movf	(??_driveLargeCircle+7)& (0+255),w,b
  4430  001DAA  5816               	subwfb	?___lmul+3,w,c
  4431  001DAC  B0D8               	btfsc	status,0,c
  4432  001DAE  D011               	goto	l2455
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;main.c: 619: {
  4436                           ;main.c: 621: rightWheelCommandedSpeed += 2;
  4437  001DB0  0E02               	movlw	2
  4438  001DB2  0100               	movlb	0	; () banked
  4439  001DB4  27D7               	addwf	driveLargeCircle@rightWheelCommandedSpeed& (0+255),f,b
  4440  001DB6  0E00               	movlw	0
  4441  001DB8  23D8               	addwfc	(driveLargeCircle@rightWheelCommandedSpeed+1)& (0+255),f,b
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;main.c: 622: wheelVelocity('r', rightWheelCommandedSpeed,0);
  4445  001DBA  C0D7  F082         	movff	driveLargeCircle@rightWheelCommandedSpeed,wheelVelocity@speed
  4446  001DBE  C0D8  F083         	movff	driveLargeCircle@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  4447  001DC2  0E00               	movlw	0
  4448  001DC4  0100               	movlb	0	; () banked
  4449  001DC6  6F85               	movwf	(wheelVelocity@speedCompensation+1)& (0+255),b
  4450  001DC8  0E00               	movlw	0
  4451  001DCA  6F84               	movwf	wheelVelocity@speedCompensation& (0+255),b
  4452  001DCC  0E72               	movlw	114
  4453  001DCE  EC9D  F013         	call	_wheelVelocity
  4454  001DD2                     l2455:
  4455                           
  4456                           ;main.c: 623: }
  4457                           ;main.c: 624: if(leftWheelCount * 40 < (elapsedMillis - startCircleMillis))
  4458  001DD2  C0BB  F08A         	movff	_startCircleMillis,??_driveLargeCircle
  4459  001DD6  C0BC  F08B         	movff	_startCircleMillis+1,??_driveLargeCircle+1
  4460  001DDA  C0BD  F08C         	movff	_startCircleMillis+2,??_driveLargeCircle+2
  4461  001DDE  C0BE  F08D         	movff	_startCircleMillis+3,??_driveLargeCircle+3
  4462  001DE2  0100               	movlb	0	; () banked
  4463  001DE4  1F8A               	comf	??_driveLargeCircle& (0+255),f,b
  4464  001DE6  1F8B               	comf	(??_driveLargeCircle+1)& (0+255),f,b
  4465  001DE8  1F8C               	comf	(??_driveLargeCircle+2)& (0+255),f,b
  4466  001DEA  1F8D               	comf	(??_driveLargeCircle+3)& (0+255),f,b
  4467  001DEC  2B8A               	incf	??_driveLargeCircle& (0+255),f,b
  4468  001DEE  0E00               	movlw	0
  4469  001DF0  238B               	addwfc	(??_driveLargeCircle+1)& (0+255),f,b
  4470  001DF2  238C               	addwfc	(??_driveLargeCircle+2)& (0+255),f,b
  4471  001DF4  238D               	addwfc	(??_driveLargeCircle+3)& (0+255),f,b
  4472  001DF6  0100               	movlb	0	; () banked
  4473  001DF8  51AF               	movf	_elapsedMillis& (0+255),w,b
  4474  001DFA  0100               	movlb	0	; () banked
  4475  001DFC  258A               	addwf	??_driveLargeCircle& (0+255),w,b
  4476  001DFE  0100               	movlb	0	; () banked
  4477  001E00  6F8E               	movwf	(??_driveLargeCircle+4)& (0+255),b
  4478  001E02  0100               	movlb	0	; () banked
  4479  001E04  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  4480  001E06  0100               	movlb	0	; () banked
  4481  001E08  218B               	addwfc	(??_driveLargeCircle+1)& (0+255),w,b
  4482  001E0A  0100               	movlb	0	; () banked
  4483  001E0C  6F8F               	movwf	(??_driveLargeCircle+5)& (0+255),b
  4484  001E0E  0100               	movlb	0	; () banked
  4485  001E10  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  4486  001E12  0100               	movlb	0	; () banked
  4487  001E14  218C               	addwfc	(??_driveLargeCircle+2)& (0+255),w,b
  4488  001E16  0100               	movlb	0	; () banked
  4489  001E18  6F90               	movwf	(??_driveLargeCircle+6)& (0+255),b
  4490  001E1A  0100               	movlb	0	; () banked
  4491  001E1C  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  4492  001E1E  0100               	movlb	0	; () banked
  4493  001E20  218D               	addwfc	(??_driveLargeCircle+3)& (0+255),w,b
  4494  001E22  0100               	movlb	0	; () banked
  4495  001E24  6F91               	movwf	(??_driveLargeCircle+7)& (0+255),b
  4496  001E26  C0B3  F013         	movff	_leftWheelCount,___lmul@multiplier
  4497  001E2A  C0B4  F014         	movff	_leftWheelCount+1,___lmul@multiplier+1
  4498  001E2E  C0B5  F015         	movff	_leftWheelCount+2,___lmul@multiplier+2
  4499  001E32  C0B6  F016         	movff	_leftWheelCount+3,___lmul@multiplier+3
  4500  001E36  0E28               	movlw	40
  4501  001E38  6E17               	movwf	___lmul@multiplicand,c
  4502  001E3A  0E00               	movlw	0
  4503  001E3C  6E18               	movwf	___lmul@multiplicand+1,c
  4504  001E3E  0E00               	movlw	0
  4505  001E40  6E19               	movwf	___lmul@multiplicand+2,c
  4506  001E42  0E00               	movlw	0
  4507  001E44  6E1A               	movwf	___lmul@multiplicand+3,c
  4508  001E46  ECBC  F017         	call	___lmul	;wreg free
  4509  001E4A  0100               	movlb	0	; () banked
  4510  001E4C  518E               	movf	(??_driveLargeCircle+4)& (0+255),w,b
  4511  001E4E  5C13               	subwf	?___lmul,w,c
  4512  001E50  0100               	movlb	0	; () banked
  4513  001E52  518F               	movf	(??_driveLargeCircle+5)& (0+255),w,b
  4514  001E54  5814               	subwfb	?___lmul+1,w,c
  4515  001E56  0100               	movlb	0	; () banked
  4516  001E58  5190               	movf	(??_driveLargeCircle+6)& (0+255),w,b
  4517  001E5A  5815               	subwfb	?___lmul+2,w,c
  4518  001E5C  0100               	movlb	0	; () banked
  4519  001E5E  5191               	movf	(??_driveLargeCircle+7)& (0+255),w,b
  4520  001E60  5816               	subwfb	?___lmul+3,w,c
  4521  001E62  B0D8               	btfsc	status,0,c
  4522  001E64  D010               	goto	l2461
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;main.c: 625: {
  4526                           ;main.c: 627: leftWheelCommandedSpeed += 2;
  4527  001E66  0E02               	movlw	2
  4528  001E68  0100               	movlb	0	; () banked
  4529  001E6A  27D5               	addwf	driveLargeCircle@leftWheelCommandedSpeed& (0+255),f,b
  4530  001E6C  0E00               	movlw	0
  4531  001E6E  23D6               	addwfc	(driveLargeCircle@leftWheelCommandedSpeed+1)& (0+255),f,b
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;main.c: 628: wheelVelocity('l', leftWheelCommandedSpeed, leftIntegral);
  4535  001E70  C0D5  F082         	movff	driveLargeCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  4536  001E74  C0D6  F083         	movff	driveLargeCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  4537  001E78  C0C7  F084         	movff	driveLargeCircle@leftIntegral,wheelVelocity@speedCompensation
  4538  001E7C  C0C8  F085         	movff	driveLargeCircle@leftIntegral+1,wheelVelocity@speedCompensation+1
  4539  001E80  0E6C               	movlw	108
  4540  001E82  EC9D  F013         	call	_wheelVelocity
  4541  001E86                     l2461:
  4542                           
  4543                           ;main.c: 629: }
  4544                           ;main.c: 630: if(rightWheelCount * 36 > (elapsedMillis - startCircleMillis))
  4545  001E86  C0B7  F013         	movff	_rightWheelCount,___lmul@multiplier
  4546  001E8A  C0B8  F014         	movff	_rightWheelCount+1,___lmul@multiplier+1
  4547  001E8E  C0B9  F015         	movff	_rightWheelCount+2,___lmul@multiplier+2
  4548  001E92  C0BA  F016         	movff	_rightWheelCount+3,___lmul@multiplier+3
  4549  001E96  0E24               	movlw	36
  4550  001E98  6E17               	movwf	___lmul@multiplicand,c
  4551  001E9A  0E00               	movlw	0
  4552  001E9C  6E18               	movwf	___lmul@multiplicand+1,c
  4553  001E9E  0E00               	movlw	0
  4554  001EA0  6E19               	movwf	___lmul@multiplicand+2,c
  4555  001EA2  0E00               	movlw	0
  4556  001EA4  6E1A               	movwf	___lmul@multiplicand+3,c
  4557  001EA6  ECBC  F017         	call	___lmul	;wreg free
  4558  001EAA  C0BB  F08A         	movff	_startCircleMillis,??_driveLargeCircle
  4559  001EAE  C0BC  F08B         	movff	_startCircleMillis+1,??_driveLargeCircle+1
  4560  001EB2  C0BD  F08C         	movff	_startCircleMillis+2,??_driveLargeCircle+2
  4561  001EB6  C0BE  F08D         	movff	_startCircleMillis+3,??_driveLargeCircle+3
  4562  001EBA  0100               	movlb	0	; () banked
  4563  001EBC  1F8A               	comf	??_driveLargeCircle& (0+255),f,b
  4564  001EBE  1F8B               	comf	(??_driveLargeCircle+1)& (0+255),f,b
  4565  001EC0  1F8C               	comf	(??_driveLargeCircle+2)& (0+255),f,b
  4566  001EC2  1F8D               	comf	(??_driveLargeCircle+3)& (0+255),f,b
  4567  001EC4  2B8A               	incf	??_driveLargeCircle& (0+255),f,b
  4568  001EC6  0E00               	movlw	0
  4569  001EC8  238B               	addwfc	(??_driveLargeCircle+1)& (0+255),f,b
  4570  001ECA  238C               	addwfc	(??_driveLargeCircle+2)& (0+255),f,b
  4571  001ECC  238D               	addwfc	(??_driveLargeCircle+3)& (0+255),f,b
  4572  001ECE  0100               	movlb	0	; () banked
  4573  001ED0  51AF               	movf	_elapsedMillis& (0+255),w,b
  4574  001ED2  0100               	movlb	0	; () banked
  4575  001ED4  258A               	addwf	??_driveLargeCircle& (0+255),w,b
  4576  001ED6  0100               	movlb	0	; () banked
  4577  001ED8  6F8E               	movwf	(??_driveLargeCircle+4)& (0+255),b
  4578  001EDA  0100               	movlb	0	; () banked
  4579  001EDC  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  4580  001EDE  0100               	movlb	0	; () banked
  4581  001EE0  218B               	addwfc	(??_driveLargeCircle+1)& (0+255),w,b
  4582  001EE2  0100               	movlb	0	; () banked
  4583  001EE4  6F8F               	movwf	(??_driveLargeCircle+5)& (0+255),b
  4584  001EE6  0100               	movlb	0	; () banked
  4585  001EE8  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  4586  001EEA  0100               	movlb	0	; () banked
  4587  001EEC  218C               	addwfc	(??_driveLargeCircle+2)& (0+255),w,b
  4588  001EEE  0100               	movlb	0	; () banked
  4589  001EF0  6F90               	movwf	(??_driveLargeCircle+6)& (0+255),b
  4590  001EF2  0100               	movlb	0	; () banked
  4591  001EF4  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  4592  001EF6  0100               	movlb	0	; () banked
  4593  001EF8  218D               	addwfc	(??_driveLargeCircle+3)& (0+255),w,b
  4594  001EFA  0100               	movlb	0	; () banked
  4595  001EFC  6F91               	movwf	(??_driveLargeCircle+7)& (0+255),b
  4596  001EFE  5013               	movf	?___lmul,w,c
  4597  001F00  0100               	movlb	0	; () banked
  4598  001F02  5D8E               	subwf	(??_driveLargeCircle+4)& (0+255),w,b
  4599  001F04  5014               	movf	?___lmul+1,w,c
  4600  001F06  0100               	movlb	0	; () banked
  4601  001F08  598F               	subwfb	(??_driveLargeCircle+5)& (0+255),w,b
  4602  001F0A  5015               	movf	?___lmul+2,w,c
  4603  001F0C  0100               	movlb	0	; () banked
  4604  001F0E  5990               	subwfb	(??_driveLargeCircle+6)& (0+255),w,b
  4605  001F10  5016               	movf	?___lmul+3,w,c
  4606  001F12  0100               	movlb	0	; () banked
  4607  001F14  5991               	subwfb	(??_driveLargeCircle+7)& (0+255),w,b
  4608  001F16  B0D8               	btfsc	status,0,c
  4609  001F18  D011               	goto	l2467
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;main.c: 631: {
  4613                           ;main.c: 633: rightWheelCommandedSpeed -= 2;
  4614  001F1A  0100               	movlb	0	; () banked
  4615  001F1C  0EFE               	movlw	254
  4616  001F1E  27D7               	addwf	driveLargeCircle@rightWheelCommandedSpeed& (0+255),f,b
  4617  001F20  0EFF               	movlw	255
  4618  001F22  23D8               	addwfc	(driveLargeCircle@rightWheelCommandedSpeed+1)& (0+255),f,b
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;main.c: 634: wheelVelocity('r', rightWheelCommandedSpeed, 0);
  4622  001F24  C0D7  F082         	movff	driveLargeCircle@rightWheelCommandedSpeed,wheelVelocity@speed
  4623  001F28  C0D8  F083         	movff	driveLargeCircle@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  4624  001F2C  0E00               	movlw	0
  4625  001F2E  0100               	movlb	0	; () banked
  4626  001F30  6F85               	movwf	(wheelVelocity@speedCompensation+1)& (0+255),b
  4627  001F32  0E00               	movlw	0
  4628  001F34  6F84               	movwf	wheelVelocity@speedCompensation& (0+255),b
  4629  001F36  0E72               	movlw	114
  4630  001F38  EC9D  F013         	call	_wheelVelocity
  4631  001F3C                     l2467:
  4632                           
  4633                           ;main.c: 635: }
  4634                           ;main.c: 636: if(leftWheelCount * 40 > (elapsedMillis - startCircleMillis))
  4635  001F3C  C0B3  F013         	movff	_leftWheelCount,___lmul@multiplier
  4636  001F40  C0B4  F014         	movff	_leftWheelCount+1,___lmul@multiplier+1
  4637  001F44  C0B5  F015         	movff	_leftWheelCount+2,___lmul@multiplier+2
  4638  001F48  C0B6  F016         	movff	_leftWheelCount+3,___lmul@multiplier+3
  4639  001F4C  0E28               	movlw	40
  4640  001F4E  6E17               	movwf	___lmul@multiplicand,c
  4641  001F50  0E00               	movlw	0
  4642  001F52  6E18               	movwf	___lmul@multiplicand+1,c
  4643  001F54  0E00               	movlw	0
  4644  001F56  6E19               	movwf	___lmul@multiplicand+2,c
  4645  001F58  0E00               	movlw	0
  4646  001F5A  6E1A               	movwf	___lmul@multiplicand+3,c
  4647  001F5C  ECBC  F017         	call	___lmul	;wreg free
  4648  001F60  C0BB  F08A         	movff	_startCircleMillis,??_driveLargeCircle
  4649  001F64  C0BC  F08B         	movff	_startCircleMillis+1,??_driveLargeCircle+1
  4650  001F68  C0BD  F08C         	movff	_startCircleMillis+2,??_driveLargeCircle+2
  4651  001F6C  C0BE  F08D         	movff	_startCircleMillis+3,??_driveLargeCircle+3
  4652  001F70  0100               	movlb	0	; () banked
  4653  001F72  1F8A               	comf	??_driveLargeCircle& (0+255),f,b
  4654  001F74  1F8B               	comf	(??_driveLargeCircle+1)& (0+255),f,b
  4655  001F76  1F8C               	comf	(??_driveLargeCircle+2)& (0+255),f,b
  4656  001F78  1F8D               	comf	(??_driveLargeCircle+3)& (0+255),f,b
  4657  001F7A  2B8A               	incf	??_driveLargeCircle& (0+255),f,b
  4658  001F7C  0E00               	movlw	0
  4659  001F7E  238B               	addwfc	(??_driveLargeCircle+1)& (0+255),f,b
  4660  001F80  238C               	addwfc	(??_driveLargeCircle+2)& (0+255),f,b
  4661  001F82  238D               	addwfc	(??_driveLargeCircle+3)& (0+255),f,b
  4662  001F84  0100               	movlb	0	; () banked
  4663  001F86  51AF               	movf	_elapsedMillis& (0+255),w,b
  4664  001F88  0100               	movlb	0	; () banked
  4665  001F8A  258A               	addwf	??_driveLargeCircle& (0+255),w,b
  4666  001F8C  0100               	movlb	0	; () banked
  4667  001F8E  6F8E               	movwf	(??_driveLargeCircle+4)& (0+255),b
  4668  001F90  0100               	movlb	0	; () banked
  4669  001F92  51B0               	movf	(_elapsedMillis+1)& (0+255),w,b
  4670  001F94  0100               	movlb	0	; () banked
  4671  001F96  218B               	addwfc	(??_driveLargeCircle+1)& (0+255),w,b
  4672  001F98  0100               	movlb	0	; () banked
  4673  001F9A  6F8F               	movwf	(??_driveLargeCircle+5)& (0+255),b
  4674  001F9C  0100               	movlb	0	; () banked
  4675  001F9E  51B1               	movf	(_elapsedMillis+2)& (0+255),w,b
  4676  001FA0  0100               	movlb	0	; () banked
  4677  001FA2  218C               	addwfc	(??_driveLargeCircle+2)& (0+255),w,b
  4678  001FA4  0100               	movlb	0	; () banked
  4679  001FA6  6F90               	movwf	(??_driveLargeCircle+6)& (0+255),b
  4680  001FA8  0100               	movlb	0	; () banked
  4681  001FAA  51B2               	movf	(_elapsedMillis+3)& (0+255),w,b
  4682  001FAC  0100               	movlb	0	; () banked
  4683  001FAE  218D               	addwfc	(??_driveLargeCircle+3)& (0+255),w,b
  4684  001FB0  0100               	movlb	0	; () banked
  4685  001FB2  6F91               	movwf	(??_driveLargeCircle+7)& (0+255),b
  4686  001FB4  5013               	movf	?___lmul,w,c
  4687  001FB6  0100               	movlb	0	; () banked
  4688  001FB8  5D8E               	subwf	(??_driveLargeCircle+4)& (0+255),w,b
  4689  001FBA  5014               	movf	?___lmul+1,w,c
  4690  001FBC  0100               	movlb	0	; () banked
  4691  001FBE  598F               	subwfb	(??_driveLargeCircle+5)& (0+255),w,b
  4692  001FC0  5015               	movf	?___lmul+2,w,c
  4693  001FC2  0100               	movlb	0	; () banked
  4694  001FC4  5990               	subwfb	(??_driveLargeCircle+6)& (0+255),w,b
  4695  001FC6  5016               	movf	?___lmul+3,w,c
  4696  001FC8  0100               	movlb	0	; () banked
  4697  001FCA  5991               	subwfb	(??_driveLargeCircle+7)& (0+255),w,b
  4698  001FCC  B0D8               	btfsc	status,0,c
  4699  001FCE  D010               	goto	l2473
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;main.c: 637: {
  4703                           ;main.c: 640: leftWheelCommandedSpeed -= 2;
  4704  001FD0  0100               	movlb	0	; () banked
  4705  001FD2  0EFE               	movlw	254
  4706  001FD4  27D5               	addwf	driveLargeCircle@leftWheelCommandedSpeed& (0+255),f,b
  4707  001FD6  0EFF               	movlw	255
  4708  001FD8  23D6               	addwfc	(driveLargeCircle@leftWheelCommandedSpeed+1)& (0+255),f,b
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;main.c: 641: wheelVelocity('l', leftWheelCommandedSpeed, leftIntegral);
  4712  001FDA  C0D5  F082         	movff	driveLargeCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  4713  001FDE  C0D6  F083         	movff	driveLargeCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  4714  001FE2  C0C7  F084         	movff	driveLargeCircle@leftIntegral,wheelVelocity@speedCompensation
  4715  001FE6  C0C8  F085         	movff	driveLargeCircle@leftIntegral+1,wheelVelocity@speedCompensation+1
  4716  001FEA  0E6C               	movlw	108
  4717  001FEC  EC9D  F013         	call	_wheelVelocity
  4718  001FF0                     l2473:
  4719                           
  4720                           ;main.c: 642: }
  4721                           ;main.c: 645: if(rightWheelCount >= 750)
  4722  001FF0  0100               	movlb	0	; () banked
  4723  001FF2  51BA               	movf	(_rightWheelCount+3)& (0+255),w,b
  4724  001FF4  0100               	movlb	0	; () banked
  4725  001FF6  11B9               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  4726  001FF8  E108               	bnz	u2120
  4727  001FFA  0EEE               	movlw	238
  4728  001FFC  0100               	movlb	0	; () banked
  4729  001FFE  5DB7               	subwf	_rightWheelCount& (0+255),w,b
  4730  002000  0E02               	movlw	2
  4731  002002  0100               	movlb	0	; () banked
  4732  002004  59B8               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  4733  002006  A0D8               	btfss	status,0,c
  4734  002008  D03A               	goto	l2483
  4735  00200A                     u2120:
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;main.c: 646: {
  4739                           ;main.c: 647: rightWheelCount = 0;
  4740  00200A  0E00               	movlw	0
  4741  00200C  0100               	movlb	0	; () banked
  4742  00200E  6FB7               	movwf	_rightWheelCount& (0+255),b
  4743  002010  0E00               	movlw	0
  4744  002012  6FB8               	movwf	(_rightWheelCount+1)& (0+255),b
  4745  002014  0E00               	movlw	0
  4746  002016  6FB9               	movwf	(_rightWheelCount+2)& (0+255),b
  4747  002018  0E00               	movlw	0
  4748  00201A  6FBA               	movwf	(_rightWheelCount+3)& (0+255),b
  4749                           
  4750                           ;main.c: 648: leftWheelCount = 0;
  4751  00201C  0E00               	movlw	0
  4752  00201E  0100               	movlb	0	; () banked
  4753  002020  6FB3               	movwf	_leftWheelCount& (0+255),b
  4754  002022  0E00               	movlw	0
  4755  002024  6FB4               	movwf	(_leftWheelCount+1)& (0+255),b
  4756  002026  0E00               	movlw	0
  4757  002028  6FB5               	movwf	(_leftWheelCount+2)& (0+255),b
  4758  00202A  0E00               	movlw	0
  4759  00202C  6FB6               	movwf	(_leftWheelCount+3)& (0+255),b
  4760                           
  4761                           ;main.c: 649: leftWheelCommandedSpeed = 0;
  4762  00202E  0E00               	movlw	0
  4763  002030  0100               	movlb	0	; () banked
  4764  002032  6FD6               	movwf	(driveLargeCircle@leftWheelCommandedSpeed+1)& (0+255),b
  4765  002034  0E00               	movlw	0
  4766  002036  6FD5               	movwf	driveLargeCircle@leftWheelCommandedSpeed& (0+255),b
  4767                           
  4768                           ;main.c: 650: rightWheelCommandedSpeed = 0;
  4769  002038  0E00               	movlw	0
  4770  00203A  0100               	movlb	0	; () banked
  4771  00203C  6FD8               	movwf	(driveLargeCircle@rightWheelCommandedSpeed+1)& (0+255),b
  4772  00203E  0E00               	movlw	0
  4773  002040  6FD7               	movwf	driveLargeCircle@rightWheelCommandedSpeed& (0+255),b
  4774                           
  4775                           ;main.c: 651: speedCompensation = 0;
  4776  002042  0E00               	movlw	0
  4777  002044  0100               	movlb	0	; () banked
  4778  002046  6FCB               	movwf	(driveLargeCircle@speedCompensation+1)& (0+255),b
  4779  002048  0E00               	movlw	0
  4780  00204A  6FCA               	movwf	driveLargeCircle@speedCompensation& (0+255),b
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;main.c: 655: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  4784  00204C  C0D7  F082         	movff	driveLargeCircle@rightWheelCommandedSpeed,wheelVelocity@speed
  4785  002050  C0D8  F083         	movff	driveLargeCircle@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  4786  002054  C0CA  F084         	movff	driveLargeCircle@speedCompensation,wheelVelocity@speedCompensation
  4787  002058  C0CB  F085         	movff	driveLargeCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  4788  00205C  0E72               	movlw	114
  4789  00205E  EC9D  F013         	call	_wheelVelocity
  4790                           
  4791                           ;main.c: 656: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  4792  002062  C0D5  F082         	movff	driveLargeCircle@leftWheelCommandedSpeed,wheelVelocity@speed
  4793  002066  C0D6  F083         	movff	driveLargeCircle@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  4794  00206A  C0CA  F084         	movff	driveLargeCircle@speedCompensation,wheelVelocity@speedCompensation
  4795  00206E  C0CB  F085         	movff	driveLargeCircle@speedCompensation+1,wheelVelocity@speedCompensation+1
  4796  002072  0E6C               	movlw	108
  4797  002074  EC9D  F013         	call	_wheelVelocity
  4798                           
  4799                           ;main.c: 657: lastEvent++;
  4800  002078  0100               	movlb	0	; () banked
  4801  00207A  4BC1               	infsnz	_lastEvent& (0+255),f,b
  4802  00207C  2BC2               	incf	(_lastEvent+1)& (0+255),f,b
  4803  00207E                     l2483:
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;main.c: 658: }
  4807                           ;main.c: 660: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  4808  00207E  0ED5               	movlw	low driveLargeCircle@leftWheelCommandedSpeed
  4809  002080  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  4810  002082  0E00               	movlw	high driveLargeCircle@leftWheelCommandedSpeed
  4811  002084  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  4812  002086  0ED7               	movlw	low driveLargeCircle@rightWheelCommandedSpeed
  4813  002088  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  4814  00208A  0E00               	movlw	high driveLargeCircle@rightWheelCommandedSpeed
  4815  00208C  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  4816  00208E  0ECA               	movlw	low driveLargeCircle@speedCompensation
  4817  002090  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  4818  002092  0E00               	movlw	high driveLargeCircle@speedCompensation
  4819  002094  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  4820  002096  EC28  F014         	call	_limitWheelSpeeds	;wreg free
  4821  00209A  0012               	return		;funcret
  4822  00209C                     __end_of_driveLargeCircle:
  4823                           	opt stack 0
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           prodh	equ	0xFF4
  4829                           prodl	equ	0xFF3
  4830                           intcon	equ	0xFF2
  4831                           intcon2	equ	0xFF1
  4832                           postinc0	equ	0xFEE
  4833                           wreg	equ	0xFE8
  4834                           postdec1	equ	0xFE5
  4835                           fsr1l	equ	0xFE1
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _wheelVelocity *****************
  4843 ;; Defined at:
  4844 ;;		line 283 in file "main.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  wheel           1    wreg     unsigned char 
  4847 ;;  speed           2   34[BANK0 ] int 
  4848 ;;  speedCompens    2   36[BANK0 ] int 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  wheel           1   41[BANK0 ] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      void 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:        8 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    3
  4867 ;; This function calls:
  4868 ;;		___awtoft
  4869 ;;		___ftadd
  4870 ;;		___ftmul
  4871 ;;		___ftneg
  4872 ;;		___fttol
  4873 ;; This function is called by:
  4874 ;;		_driveStationaryCircle
  4875 ;;		_driveLargeCircle
  4876 ;;		_driveStraight
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text16
  4881  00273A                     __ptext16:
  4882                           	opt stack 0
  4883  00273A                     _wheelVelocity:
  4884                           	opt stack 25
  4885                           
  4886                           ;incstack = 0
  4887                           ;wheelVelocity@wheel stored from wreg
  4888  00273A  0100               	movlb	0	; () banked
  4889  00273C  6F89               	movwf	wheelVelocity@wheel& (0+255),b
  4890                           
  4891                           ;main.c: 285: if(wheel == 'r')
  4892  00273E  0E72               	movlw	114
  4893  002740  0100               	movlb	0	; () banked
  4894  002742  1989               	xorwf	wheelVelocity@wheel& (0+255),w,b
  4895  002744  A4D8               	btfss	status,2,c
  4896  002746  D02E               	goto	l2291
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;main.c: 286: {
  4900                           ;main.c: 289: rightWheelCommandedPW = (int) (718 + speed * TOP_SPEED_FACTOR);
  4901  002748  0E80               	movlw	128
  4902  00274A  6E36               	movwf	___ftadd@f2,c
  4903  00274C  0E33               	movlw	51
  4904  00274E  6E37               	movwf	___ftadd@f2+1,c
  4905  002750  0E44               	movlw	68
  4906  002752  6E38               	movwf	___ftadd@f2+2,c
  4907  002754  C0D0  F027         	movff	_TOP_SPEED_FACTOR,___ftmul@f2
  4908  002758  C0D1  F028         	movff	_TOP_SPEED_FACTOR+1,___ftmul@f2+1
  4909  00275C  C0D2  F029         	movff	_TOP_SPEED_FACTOR+2,___ftmul@f2+2
  4910  002760  C082  F01B         	movff	wheelVelocity@speed,___awtoft@c
  4911  002764  C083  F01C         	movff	wheelVelocity@speed+1,___awtoft@c+1
  4912  002768  EC51  F018         	call	___awtoft	;wreg free
  4913  00276C  C01B  F024         	movff	?___awtoft,___ftmul@f1
  4914  002770  C01C  F025         	movff	?___awtoft+1,___ftmul@f1+1
  4915  002774  C01D  F026         	movff	?___awtoft+2,___ftmul@f1+2
  4916  002778  ECAA  F014         	call	___ftmul	;wreg free
  4917  00277C  C024  F033         	movff	?___ftmul,___ftadd@f1
  4918  002780  C025  F034         	movff	?___ftmul+1,___ftadd@f1+1
  4919  002784  C026  F035         	movff	?___ftmul+2,___ftadd@f1+2
  4920  002788  EC25  F012         	call	___ftadd	;wreg free
  4921  00278C  C033  F073         	movff	?___ftadd,___fttol@f1
  4922  002790  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  4923  002794  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  4924  002798  ECFB  F012         	call	___fttol	;wreg free
  4925  00279C  C073  F049         	movff	?___fttol,_rightWheelCommandedPW
  4926  0027A0  C074  F04A         	movff	?___fttol+1,_rightWheelCommandedPW+1
  4927  0027A4                     l2291:
  4928                           
  4929                           ;main.c: 290: }
  4930                           ;main.c: 292: if(wheel == 'l')
  4931  0027A4  0E6C               	movlw	108
  4932  0027A6  0100               	movlb	0	; () banked
  4933  0027A8  1989               	xorwf	wheelVelocity@wheel& (0+255),w,b
  4934  0027AA  A4D8               	btfss	status,2,c
  4935  0027AC  0012               	return	
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;main.c: 293: {
  4939                           ;main.c: 296: leftWheelCommandedPW = (int) (732 - (speedCompensation + speed * TOP_SPEED
      +                          _FACTOR));
  4940  0027AE  C0D0  F027         	movff	_TOP_SPEED_FACTOR,___ftmul@f2
  4941  0027B2  C0D1  F028         	movff	_TOP_SPEED_FACTOR+1,___ftmul@f2+1
  4942  0027B6  C0D2  F029         	movff	_TOP_SPEED_FACTOR+2,___ftmul@f2+2
  4943  0027BA  C082  F01B         	movff	wheelVelocity@speed,___awtoft@c
  4944  0027BE  C083  F01C         	movff	wheelVelocity@speed+1,___awtoft@c+1
  4945  0027C2  EC51  F018         	call	___awtoft	;wreg free
  4946  0027C6  C01B  F024         	movff	?___awtoft,___ftmul@f1
  4947  0027CA  C01C  F025         	movff	?___awtoft+1,___ftmul@f1+1
  4948  0027CE  C01D  F026         	movff	?___awtoft+2,___ftmul@f1+2
  4949  0027D2  ECAA  F014         	call	___ftmul	;wreg free
  4950  0027D6  C024  F036         	movff	?___ftmul,___ftadd@f2
  4951  0027DA  C025  F037         	movff	?___ftmul+1,___ftadd@f2+1
  4952  0027DE  C026  F038         	movff	?___ftmul+2,___ftadd@f2+2
  4953  0027E2  C084  F01B         	movff	wheelVelocity@speedCompensation,___awtoft@c
  4954  0027E6  C085  F01C         	movff	wheelVelocity@speedCompensation+1,___awtoft@c+1
  4955  0027EA  EC51  F018         	call	___awtoft	;wreg free
  4956  0027EE  C01B  F033         	movff	?___awtoft,___ftadd@f1
  4957  0027F2  C01C  F034         	movff	?___awtoft+1,___ftadd@f1+1
  4958  0027F6  C01D  F035         	movff	?___awtoft+2,___ftadd@f1+2
  4959  0027FA  EC25  F012         	call	___ftadd	;wreg free
  4960  0027FE  C033  F03F         	movff	?___ftadd,___ftneg@f1
  4961  002802  C034  F040         	movff	?___ftadd+1,___ftneg@f1+1
  4962  002806  C035  F041         	movff	?___ftadd+2,___ftneg@f1+2
  4963  00280A  EC80  F018         	call	___ftneg	;wreg free
  4964  00280E  C03F  F086         	movff	?___ftneg,_wheelVelocity$2067
  4965  002812  C040  F087         	movff	?___ftneg+1,_wheelVelocity$2067+1
  4966  002816  C041  F088         	movff	?___ftneg+2,_wheelVelocity$2067+2
  4967                           
  4968                           ;main.c: 293: {
  4969                           ;main.c: 296: leftWheelCommandedPW = (int) (732 - (speedCompensation + speed * TOP_SPEED
      +                          _FACTOR));
  4970  00281A  0E00               	movlw	0
  4971  00281C  6E36               	movwf	___ftadd@f2,c
  4972  00281E  0E37               	movlw	55
  4973  002820  6E37               	movwf	___ftadd@f2+1,c
  4974  002822  0E44               	movlw	68
  4975  002824  6E38               	movwf	___ftadd@f2+2,c
  4976  002826  C086  F033         	movff	_wheelVelocity$2067,___ftadd@f1
  4977  00282A  C087  F034         	movff	_wheelVelocity$2067+1,___ftadd@f1+1
  4978  00282E  C088  F035         	movff	_wheelVelocity$2067+2,___ftadd@f1+2
  4979  002832  EC25  F012         	call	___ftadd	;wreg free
  4980  002836  C033  F073         	movff	?___ftadd,___fttol@f1
  4981  00283A  C034  F074         	movff	?___ftadd+1,___fttol@f1+1
  4982  00283E  C035  F075         	movff	?___ftadd+2,___fttol@f1+2
  4983  002842  ECFB  F012         	call	___fttol	;wreg free
  4984  002846  C073  F047         	movff	?___fttol,_leftWheelCommandedPW
  4985  00284A  C074  F048         	movff	?___fttol+1,_leftWheelCommandedPW+1
  4986  00284E  0012               	return	
  4987  002850                     __end_of_wheelVelocity:
  4988                           	opt stack 0
  4989                           tblptru	equ	0xFF8
  4990                           tblptrh	equ	0xFF7
  4991                           tblptrl	equ	0xFF6
  4992                           tablat	equ	0xFF5
  4993                           prodh	equ	0xFF4
  4994                           prodl	equ	0xFF3
  4995                           intcon	equ	0xFF2
  4996                           intcon2	equ	0xFF1
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           postdec1	equ	0xFE5
  5000                           fsr1l	equ	0xFE1
  5001                           postinc2	equ	0xFDE
  5002                           postdec2	equ	0xFDD
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function ___fttol *****************
  5008 ;; Defined at:
  5009 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  f1              3   19[BANK0 ] float 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  lval            4   29[BANK0 ] unsigned long 
  5014 ;;  exp1            1   33[BANK0 ] unsigned char 
  5015 ;;  sign1           1   28[BANK0 ] unsigned char 
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  4   19[BANK0 ] long 
  5018 ;; Registers used:
  5019 ;;		wreg, status,2, status,0
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;Total ram usage:       15 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    1
  5032 ;; This function calls:
  5033 ;;		Nothing
  5034 ;; This function is called by:
  5035 ;;		_main
  5036 ;;		_wheelVelocity
  5037 ;;		_driveStationaryCircle
  5038 ;;		_driveStraight
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text17
  5043  0025F6                     __ptext17:
  5044                           	opt stack 0
  5045  0025F6                     ___fttol:
  5046                           	opt stack 26
  5047                           
  5048                           ;incstack = 0
  5049  0025F6  C075  F077         	movff	___fttol@f1+2,??___fttol
  5050  0025FA  0100               	movlb	0	; () banked
  5051  0025FC  6B78               	clrf	(??___fttol+1)& (0+255),b
  5052  0025FE  6B79               	clrf	(??___fttol+2)& (0+255),b
  5053  002600  0100               	movlb	0	; () banked
  5054  002602  3574               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5055  002604  0100               	movlb	0	; () banked
  5056  002606  3777               	rlcf	??___fttol& (0+255),f,b
  5057  002608  E301               	bnc	u1751
  5058  00260A  8178               	bsf	(??___fttol+1)& (0+255),0,b
  5059  00260C                     u1751:
  5060  00260C  0100               	movlb	0	; () banked
  5061  00260E  5177               	movf	??___fttol& (0+255),w,b
  5062  002610  0100               	movlb	0	; () banked
  5063  002612  6F81               	movwf	___fttol@exp1& (0+255),b
  5064  002614  0100               	movlb	0	; () banked
  5065  002616  5181               	movf	___fttol@exp1& (0+255),w,b
  5066  002618  A4D8               	btfss	status,2,c
  5067  00261A  D00A               	goto	l2223
  5068                           
  5069                           ; BSR set to: 0
  5070  00261C  0E00               	movlw	0
  5071  00261E  0100               	movlb	0	; () banked
  5072  002620  6F73               	movwf	?___fttol& (0+255),b
  5073  002622  0E00               	movlw	0
  5074  002624  6F74               	movwf	(?___fttol+1)& (0+255),b
  5075  002626  0E00               	movlw	0
  5076  002628  6F75               	movwf	(?___fttol+2)& (0+255),b
  5077  00262A  0E00               	movlw	0
  5078  00262C  6F76               	movwf	(?___fttol+3)& (0+255),b
  5079                           
  5080                           ; BSR set to: 0
  5081  00262E  0012               	return	
  5082  002630                     l2223:
  5083                           
  5084                           ; BSR set to: 0
  5085  002630  0E17               	movlw	23
  5086  002632  0100               	movlb	0	; () banked
  5087  002634  6F77               	movwf	??___fttol& (0+255),b
  5088  002636  C073  F078         	movff	___fttol@f1,??___fttol+1
  5089  00263A  C074  F079         	movff	___fttol@f1+1,??___fttol+2
  5090  00263E  C075  F07A         	movff	___fttol@f1+2,??___fttol+3
  5091  002642  0100               	movlb	0	; () banked
  5092  002644  2977               	incf	??___fttol& (0+255),w,b
  5093  002646  0100               	movlb	0	; () banked
  5094  002648  6F7B               	movwf	(??___fttol+4)& (0+255),b
  5095  00264A  D005               	goto	u1770
  5096  00264C                     u1775:
  5097  00264C  0100               	movlb	0	; () banked
  5098  00264E  90D8               	bcf	status,0,c
  5099  002650  337A               	rrcf	(??___fttol+3)& (0+255),f,b
  5100  002652  3379               	rrcf	(??___fttol+2)& (0+255),f,b
  5101  002654  3378               	rrcf	(??___fttol+1)& (0+255),f,b
  5102  002656                     u1770:
  5103  002656  0100               	movlb	0	; () banked
  5104  002658  2F7B               	decfsz	(??___fttol+4)& (0+255),f,b
  5105  00265A  D7F8               	goto	u1775
  5106  00265C  0100               	movlb	0	; () banked
  5107  00265E  5178               	movf	(??___fttol+1)& (0+255),w,b
  5108  002660  0100               	movlb	0	; () banked
  5109  002662  6F7C               	movwf	___fttol@sign1& (0+255),b
  5110                           
  5111                           ; BSR set to: 0
  5112  002664  0100               	movlb	0	; () banked
  5113  002666  8F74               	bsf	(___fttol@f1+1)& (0+255),7,b
  5114                           
  5115                           ; BSR set to: 0
  5116  002668  0EFF               	movlw	255
  5117  00266A  0100               	movlb	0	; () banked
  5118  00266C  1773               	andwf	___fttol@f1& (0+255),f,b
  5119  00266E  0EFF               	movlw	255
  5120  002670  0100               	movlb	0	; () banked
  5121  002672  1774               	andwf	(___fttol@f1+1)& (0+255),f,b
  5122  002674  0E00               	movlw	0
  5123  002676  0100               	movlb	0	; () banked
  5124  002678  1775               	andwf	(___fttol@f1+2)& (0+255),f,b
  5125                           
  5126                           ; BSR set to: 0
  5127  00267A  0100               	movlb	0	; () banked
  5128  00267C  5173               	movf	___fttol@f1& (0+255),w,b
  5129  00267E  0100               	movlb	0	; () banked
  5130  002680  6F7D               	movwf	___fttol@lval& (0+255),b
  5131  002682  0100               	movlb	0	; () banked
  5132  002684  5174               	movf	(___fttol@f1+1)& (0+255),w,b
  5133  002686  0100               	movlb	0	; () banked
  5134  002688  6F7E               	movwf	(___fttol@lval+1)& (0+255),b
  5135  00268A  0100               	movlb	0	; () banked
  5136  00268C  5175               	movf	(___fttol@f1+2)& (0+255),w,b
  5137  00268E  0100               	movlb	0	; () banked
  5138  002690  6F7F               	movwf	(___fttol@lval+2)& (0+255),b
  5139  002692  0100               	movlb	0	; () banked
  5140  002694  6B80               	clrf	(___fttol@lval+3)& (0+255),b
  5141                           
  5142                           ; BSR set to: 0
  5143  002696  0E8E               	movlw	142
  5144  002698  0100               	movlb	0	; () banked
  5145  00269A  5F81               	subwf	___fttol@exp1& (0+255),f,b
  5146                           
  5147                           ; BSR set to: 0
  5148  00269C  0100               	movlb	0	; () banked
  5149  00269E  AF81               	btfss	___fttol@exp1& (0+255),7,b
  5150  0026A0  D01A               	goto	l2245
  5151                           
  5152                           ; BSR set to: 0
  5153  0026A2  0100               	movlb	0	; () banked
  5154  0026A4  5181               	movf	___fttol@exp1& (0+255),w,b
  5155  0026A6  0A80               	xorlw	128
  5156  0026A8  0F8F               	addlw	143
  5157  0026AA  B0D8               	btfsc	status,0,c
  5158  0026AC  D00A               	goto	l2241
  5159                           
  5160                           ; BSR set to: 0
  5161  0026AE  0E00               	movlw	0
  5162  0026B0  0100               	movlb	0	; () banked
  5163  0026B2  6F73               	movwf	?___fttol& (0+255),b
  5164  0026B4  0E00               	movlw	0
  5165  0026B6  6F74               	movwf	(?___fttol+1)& (0+255),b
  5166  0026B8  0E00               	movlw	0
  5167  0026BA  6F75               	movwf	(?___fttol+2)& (0+255),b
  5168  0026BC  0E00               	movlw	0
  5169  0026BE  6F76               	movwf	(?___fttol+3)& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172  0026C0  0012               	return	
  5173  0026C2                     l2241:
  5174                           
  5175                           ; BSR set to: 0
  5176  0026C2  0100               	movlb	0	; () banked
  5177  0026C4  90D8               	bcf	status,0,c
  5178  0026C6  3380               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5179  0026C8  337F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5180  0026CA  337E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5181  0026CC  337D               	rrcf	___fttol@lval& (0+255),f,b
  5182                           
  5183                           ; BSR set to: 0
  5184  0026CE  0100               	movlb	0	; () banked
  5185  0026D0  3F81               	incfsz	___fttol@exp1& (0+255),f,b
  5186  0026D2  D7F7               	goto	l2241
  5187                           
  5188                           ; BSR set to: 0
  5189  0026D4  D01B               	goto	l2255
  5190  0026D6                     l2245:
  5191                           
  5192                           ; BSR set to: 0
  5193  0026D6  0E17               	movlw	23
  5194  0026D8  0100               	movlb	0	; () banked
  5195  0026DA  6581               	cpfsgt	___fttol@exp1& (0+255),b
  5196  0026DC  D012               	goto	l2253
  5197                           
  5198                           ; BSR set to: 0
  5199  0026DE  0E00               	movlw	0
  5200  0026E0  0100               	movlb	0	; () banked
  5201  0026E2  6F73               	movwf	?___fttol& (0+255),b
  5202  0026E4  0E00               	movlw	0
  5203  0026E6  6F74               	movwf	(?___fttol+1)& (0+255),b
  5204  0026E8  0E00               	movlw	0
  5205  0026EA  6F75               	movwf	(?___fttol+2)& (0+255),b
  5206  0026EC  0E00               	movlw	0
  5207  0026EE  6F76               	movwf	(?___fttol+3)& (0+255),b
  5208                           
  5209                           ; BSR set to: 0
  5210  0026F0  0012               	return	
  5211  0026F2                     l2251:
  5212                           
  5213                           ; BSR set to: 0
  5214  0026F2  0100               	movlb	0	; () banked
  5215  0026F4  90D8               	bcf	status,0,c
  5216  0026F6  377D               	rlcf	___fttol@lval& (0+255),f,b
  5217  0026F8  377E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5218  0026FA  377F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5219  0026FC  3780               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5220  0026FE  0100               	movlb	0	; () banked
  5221  002700  0781               	decf	___fttol@exp1& (0+255),f,b
  5222  002702                     l2253:
  5223                           
  5224                           ; BSR set to: 0
  5225  002702  0100               	movlb	0	; () banked
  5226  002704  5181               	movf	___fttol@exp1& (0+255),w,b
  5227  002706  0100               	movlb	0	; () banked
  5228  002708  A4D8               	btfss	status,2,c
  5229  00270A  D7F3               	goto	l2251
  5230  00270C                     l2255:
  5231                           
  5232                           ; BSR set to: 0
  5233  00270C  0100               	movlb	0	; () banked
  5234  00270E  517C               	movf	___fttol@sign1& (0+255),w,b
  5235  002710  0100               	movlb	0	; () banked
  5236  002712  B4D8               	btfsc	status,2,c
  5237  002714  D009               	goto	l2259
  5238                           
  5239                           ; BSR set to: 0
  5240  002716  0100               	movlb	0	; () banked
  5241  002718  1F80               	comf	(___fttol@lval+3)& (0+255),f,b
  5242  00271A  1F7F               	comf	(___fttol@lval+2)& (0+255),f,b
  5243  00271C  1F7E               	comf	(___fttol@lval+1)& (0+255),f,b
  5244  00271E  6D7D               	negf	___fttol@lval& (0+255),b
  5245  002720  0E00               	movlw	0
  5246  002722  237E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5247  002724  237F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5248  002726  2380               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5249  002728                     l2259:
  5250                           
  5251                           ; BSR set to: 0
  5252  002728  C07D  F073         	movff	___fttol@lval,?___fttol
  5253  00272C  C07E  F074         	movff	___fttol@lval+1,?___fttol+1
  5254  002730  C07F  F075         	movff	___fttol@lval+2,?___fttol+2
  5255  002734  C080  F076         	movff	___fttol@lval+3,?___fttol+3
  5256  002738  0012               	return	
  5257  00273A                     __end_of___fttol:
  5258                           	opt stack 0
  5259                           tblptru	equ	0xFF8
  5260                           tblptrh	equ	0xFF7
  5261                           tblptrl	equ	0xFF6
  5262                           tablat	equ	0xFF5
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           intcon	equ	0xFF2
  5266                           intcon2	equ	0xFF1
  5267                           postinc0	equ	0xFEE
  5268                           wreg	equ	0xFE8
  5269                           postdec1	equ	0xFE5
  5270                           fsr1l	equ	0xFE1
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function ___ftneg *****************
  5278 ;; Defined at:
  5279 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/ftneg.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  f1              3   62[COMRAM] float 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  3   62[COMRAM] float 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5293 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;Total ram usage:        3 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    1
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_wheelVelocity
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text18
  5308  003100                     __ptext18:
  5309                           	opt stack 0
  5310  003100                     ___ftneg:
  5311                           	opt stack 26
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;incstack = 0
  5315  003100  503F               	movf	___ftneg@f1,w,c
  5316  003102  1040               	iorwf	___ftneg@f1+1,w,c
  5317  003104  1041               	iorwf	___ftneg@f1+2,w,c
  5318  003106  B4D8               	btfsc	status,2,c
  5319  003108  D006               	goto	l662
  5320  00310A  0E00               	movlw	0
  5321  00310C  1A3F               	xorwf	___ftneg@f1,f,c
  5322  00310E  0E00               	movlw	0
  5323  003110  1A40               	xorwf	___ftneg@f1+1,f,c
  5324  003112  0E80               	movlw	128
  5325  003114  1A41               	xorwf	___ftneg@f1+2,f,c
  5326  003116                     l662:
  5327  003116  C03F  F03F         	movff	___ftneg@f1,?___ftneg
  5328  00311A  C040  F040         	movff	___ftneg@f1+1,?___ftneg+1
  5329  00311E  C041  F041         	movff	___ftneg@f1+2,?___ftneg+2
  5330  003122  0012               	return		;funcret
  5331  003124                     __end_of___ftneg:
  5332                           	opt stack 0
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           intcon	equ	0xFF2
  5340                           intcon2	equ	0xFF1
  5341                           postinc0	equ	0xFEE
  5342                           wreg	equ	0xFE8
  5343                           postdec1	equ	0xFE5
  5344                           fsr1l	equ	0xFE1
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function ___ftmul *****************
  5352 ;; Defined at:
  5353 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  f1              3   35[COMRAM] float 
  5356 ;;  f2              3   38[COMRAM] float 
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  5359 ;;  sign            1   49[COMRAM] unsigned char 
  5360 ;;  cntr            1   48[COMRAM] unsigned char 
  5361 ;;  exp             1   44[COMRAM] unsigned char 
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  3   35[COMRAM] float 
  5364 ;; Registers used:
  5365 ;;		wreg, status,2, status,0, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5371 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;Total ram usage:       15 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:    2
  5378 ;; This function calls:
  5379 ;;		___ftpack
  5380 ;; This function is called by:
  5381 ;;		_main
  5382 ;;		_wheelVelocity
  5383 ;;		_sqrt
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text19
  5388  002954                     __ptext19:
  5389                           	opt stack 0
  5390  002954                     ___ftmul:
  5391                           	opt stack 25
  5392                           
  5393                           ;incstack = 0
  5394  002954  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  5395  002958  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  5396  00295A  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  5397  00295C  3425               	rlcf	___ftmul@f1+1,w,c
  5398  00295E  362A               	rlcf	??___ftmul& (0+255),f,c
  5399  002960  E301               	bnc	u1631
  5400  002962  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  5401  002964                     u1631:
  5402  002964  502A               	movf	??___ftmul,w,c
  5403  002966  6E2D               	movwf	___ftmul@exp,c
  5404  002968  502D               	movf	___ftmul@exp,w,c
  5405  00296A  A4D8               	btfss	status,2,c
  5406  00296C  D007               	goto	l2133
  5407  00296E  0E00               	movlw	0
  5408  002970  6E24               	movwf	?___ftmul,c
  5409  002972  0E00               	movlw	0
  5410  002974  6E25               	movwf	?___ftmul+1,c
  5411  002976  0E00               	movlw	0
  5412  002978  6E26               	movwf	?___ftmul+2,c
  5413  00297A  0012               	return	
  5414  00297C                     l2133:
  5415  00297C  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  5416  002980  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  5417  002982  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  5418  002984  3428               	rlcf	___ftmul@f2+1,w,c
  5419  002986  362A               	rlcf	??___ftmul& (0+255),f,c
  5420  002988  E301               	bnc	u1651
  5421  00298A  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  5422  00298C                     u1651:
  5423  00298C  502A               	movf	??___ftmul,w,c
  5424  00298E  6E32               	movwf	___ftmul@sign,c
  5425  002990  5032               	movf	___ftmul@sign,w,c
  5426  002992  A4D8               	btfss	status,2,c
  5427  002994  D007               	goto	l2139
  5428  002996  0E00               	movlw	0
  5429  002998  6E24               	movwf	?___ftmul,c
  5430  00299A  0E00               	movlw	0
  5431  00299C  6E25               	movwf	?___ftmul+1,c
  5432  00299E  0E00               	movlw	0
  5433  0029A0  6E26               	movwf	?___ftmul+2,c
  5434  0029A2  0012               	return	
  5435  0029A4                     l2139:
  5436  0029A4  5032               	movf	___ftmul@sign,w,c
  5437  0029A6  0F7B               	addlw	123
  5438  0029A8  262D               	addwf	___ftmul@exp,f,c
  5439  0029AA  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  5440  0029AE  5029               	movf	___ftmul@f2+2,w,c
  5441  0029B0  1A32               	xorwf	___ftmul@sign,f,c
  5442  0029B2  0E80               	movlw	128
  5443  0029B4  1632               	andwf	___ftmul@sign,f,c
  5444  0029B6  8E25               	bsf	___ftmul@f1+1,7,c
  5445  0029B8  8E28               	bsf	___ftmul@f2+1,7,c
  5446  0029BA  0EFF               	movlw	255
  5447  0029BC  1627               	andwf	___ftmul@f2,f,c
  5448  0029BE  0EFF               	movlw	255
  5449  0029C0  1628               	andwf	___ftmul@f2+1,f,c
  5450  0029C2  0E00               	movlw	0
  5451  0029C4  1629               	andwf	___ftmul@f2+2,f,c
  5452  0029C6  0E00               	movlw	0
  5453  0029C8  6E2E               	movwf	___ftmul@f3_as_product,c
  5454  0029CA  0E00               	movlw	0
  5455  0029CC  6E2F               	movwf	___ftmul@f3_as_product+1,c
  5456  0029CE  0E00               	movlw	0
  5457  0029D0  6E30               	movwf	___ftmul@f3_as_product+2,c
  5458  0029D2  0E07               	movlw	7
  5459  0029D4  6E31               	movwf	___ftmul@cntr,c
  5460  0029D6                     l2153:
  5461  0029D6  A024               	btfss	___ftmul@f1,0,c
  5462  0029D8  D006               	goto	l2157
  5463  0029DA  5027               	movf	___ftmul@f2,w,c
  5464  0029DC  262E               	addwf	___ftmul@f3_as_product,f,c
  5465  0029DE  5028               	movf	___ftmul@f2+1,w,c
  5466  0029E0  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  5467  0029E2  5029               	movf	___ftmul@f2+2,w,c
  5468  0029E4  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  5469  0029E6                     l2157:
  5470  0029E6  90D8               	bcf	status,0,c
  5471  0029E8  3226               	rrcf	___ftmul@f1+2,f,c
  5472  0029EA  3225               	rrcf	___ftmul@f1+1,f,c
  5473  0029EC  3224               	rrcf	___ftmul@f1,f,c
  5474  0029EE  90D8               	bcf	status,0,c
  5475  0029F0  3627               	rlcf	___ftmul@f2,f,c
  5476  0029F2  3628               	rlcf	___ftmul@f2+1,f,c
  5477  0029F4  3629               	rlcf	___ftmul@f2+2,f,c
  5478  0029F6  2E31               	decfsz	___ftmul@cntr,f,c
  5479  0029F8  D7EE               	goto	l2153
  5480  0029FA  0E09               	movlw	9
  5481  0029FC  6E31               	movwf	___ftmul@cntr,c
  5482  0029FE                     l2163:
  5483  0029FE  A024               	btfss	___ftmul@f1,0,c
  5484  002A00  D006               	goto	l2167
  5485  002A02  5027               	movf	___ftmul@f2,w,c
  5486  002A04  262E               	addwf	___ftmul@f3_as_product,f,c
  5487  002A06  5028               	movf	___ftmul@f2+1,w,c
  5488  002A08  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  5489  002A0A  5029               	movf	___ftmul@f2+2,w,c
  5490  002A0C  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  5491  002A0E                     l2167:
  5492  002A0E  90D8               	bcf	status,0,c
  5493  002A10  3226               	rrcf	___ftmul@f1+2,f,c
  5494  002A12  3225               	rrcf	___ftmul@f1+1,f,c
  5495  002A14  3224               	rrcf	___ftmul@f1,f,c
  5496  002A16  90D8               	bcf	status,0,c
  5497  002A18  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  5498  002A1A  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  5499  002A1C  322E               	rrcf	___ftmul@f3_as_product,f,c
  5500  002A1E  2E31               	decfsz	___ftmul@cntr,f,c
  5501  002A20  D7EE               	goto	l2163
  5502  002A22  C02E  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  5503  002A26  C02F  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5504  002A2A  C030  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5505  002A2E  C02D  F016         	movff	___ftmul@exp,___ftpack@exp
  5506  002A32  C032  F017         	movff	___ftmul@sign,___ftpack@sign
  5507  002A36  ECFA  F015         	call	___ftpack	;wreg free
  5508  002A3A  C013  F024         	movff	?___ftpack,?___ftmul
  5509  002A3E  C014  F025         	movff	?___ftpack+1,?___ftmul+1
  5510  002A42  C015  F026         	movff	?___ftpack+2,?___ftmul+2
  5511  002A46  0012               	return	
  5512  002A48                     __end_of___ftmul:
  5513                           	opt stack 0
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           prodh	equ	0xFF4
  5519                           prodl	equ	0xFF3
  5520                           intcon	equ	0xFF2
  5521                           intcon2	equ	0xFF1
  5522                           postinc0	equ	0xFEE
  5523                           wreg	equ	0xFE8
  5524                           postdec1	equ	0xFE5
  5525                           fsr1l	equ	0xFE1
  5526                           postinc2	equ	0xFDE
  5527                           postdec2	equ	0xFDD
  5528                           fsr2h	equ	0xFDA
  5529                           fsr2l	equ	0xFD9
  5530                           status	equ	0xFD8
  5531                           
  5532 ;; *************** function ___ftadd *****************
  5533 ;; Defined at:
  5534 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;  f1              3   50[COMRAM] float 
  5537 ;;  f2              3   53[COMRAM] float 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  exp1            1   61[COMRAM] unsigned char 
  5540 ;;  exp2            1   60[COMRAM] unsigned char 
  5541 ;;  sign            1   59[COMRAM] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  3   50[COMRAM] float 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5551 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;Total ram usage:       12 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    2
  5558 ;; This function calls:
  5559 ;;		___ftpack
  5560 ;; This function is called by:
  5561 ;;		_wheelVelocity
  5562 ;;		_driveStationaryCircle
  5563 ;;		_driveStraight
  5564 ;;		___ftsub
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text20
  5569  00244A                     __ptext20:
  5570                           	opt stack 0
  5571  00244A                     ___ftadd:
  5572                           	opt stack 25
  5573                           
  5574                           ;incstack = 0
  5575  00244A  C035  F039         	movff	___ftadd@f1+2,??___ftadd
  5576  00244E  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5577  002450  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5578  002452  3434               	rlcf	___ftadd@f1+1,w,c
  5579  002454  3639               	rlcf	??___ftadd& (0+255),f,c
  5580  002456  E301               	bnc	u1411
  5581  002458  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5582  00245A                     u1411:
  5583  00245A  5039               	movf	??___ftadd,w,c
  5584  00245C  6E3E               	movwf	___ftadd@exp1,c
  5585  00245E  C038  F039         	movff	___ftadd@f2+2,??___ftadd
  5586  002462  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5587  002464  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5588  002466  3437               	rlcf	___ftadd@f2+1,w,c
  5589  002468  3639               	rlcf	??___ftadd& (0+255),f,c
  5590  00246A  E301               	bnc	u1421
  5591  00246C  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5592  00246E                     u1421:
  5593  00246E  5039               	movf	??___ftadd,w,c
  5594  002470  6E3D               	movwf	___ftadd@exp2,c
  5595  002472  503E               	movf	___ftadd@exp1,w,c
  5596  002474  B4D8               	btfsc	status,2,c
  5597  002476  D00B               	goto	l605
  5598  002478  503D               	movf	___ftadd@exp2,w,c
  5599  00247A  5C3E               	subwf	___ftadd@exp1,w,c
  5600  00247C  B0D8               	btfsc	status,0,c
  5601  00247E  D00E               	goto	l2057
  5602  002480  503E               	movf	___ftadd@exp1,w,c
  5603  002482  0800               	sublw	0
  5604  002484  243D               	addwf	___ftadd@exp2,w,c
  5605  002486  6E39               	movwf	??___ftadd& (0+255),c
  5606  002488  0E18               	movlw	24
  5607  00248A  6439               	cpfsgt	??___ftadd,c
  5608  00248C  D007               	goto	l2057
  5609  00248E                     l605:
  5610  00248E  C036  F033         	movff	___ftadd@f2,?___ftadd
  5611  002492  C037  F034         	movff	___ftadd@f2+1,?___ftadd+1
  5612  002496  C038  F035         	movff	___ftadd@f2+2,?___ftadd+2
  5613  00249A  0012               	return	
  5614  00249C                     l2057:
  5615  00249C  503D               	movf	___ftadd@exp2,w,c
  5616  00249E  B4D8               	btfsc	status,2,c
  5617  0024A0  D00B               	goto	l609
  5618  0024A2  503E               	movf	___ftadd@exp1,w,c
  5619  0024A4  5C3D               	subwf	___ftadd@exp2,w,c
  5620  0024A6  B0D8               	btfsc	status,0,c
  5621  0024A8  D00E               	goto	l2063
  5622  0024AA  503D               	movf	___ftadd@exp2,w,c
  5623  0024AC  0800               	sublw	0
  5624  0024AE  243E               	addwf	___ftadd@exp1,w,c
  5625  0024B0  6E39               	movwf	??___ftadd& (0+255),c
  5626  0024B2  0E18               	movlw	24
  5627  0024B4  6439               	cpfsgt	??___ftadd,c
  5628  0024B6  D007               	goto	l2063
  5629  0024B8                     l609:
  5630  0024B8  C033  F033         	movff	___ftadd@f1,?___ftadd
  5631  0024BC  C034  F034         	movff	___ftadd@f1+1,?___ftadd+1
  5632  0024C0  C035  F035         	movff	___ftadd@f1+2,?___ftadd+2
  5633  0024C4  0012               	return	
  5634  0024C6                     l2063:
  5635  0024C6  0E06               	movlw	6
  5636  0024C8  6E3C               	movwf	___ftadd@sign,c
  5637  0024CA  BE35               	btfsc	___ftadd@f1+2,7,c
  5638  0024CC  8E3C               	bsf	___ftadd@sign,7,c
  5639  0024CE  BE38               	btfsc	___ftadd@f2+2,7,c
  5640  0024D0  8C3C               	bsf	___ftadd@sign,6,c
  5641  0024D2  8E34               	bsf	___ftadd@f1+1,7,c
  5642  0024D4  0EFF               	movlw	255
  5643  0024D6  1633               	andwf	___ftadd@f1,f,c
  5644  0024D8  0EFF               	movlw	255
  5645  0024DA  1634               	andwf	___ftadd@f1+1,f,c
  5646  0024DC  0E00               	movlw	0
  5647  0024DE  1635               	andwf	___ftadd@f1+2,f,c
  5648  0024E0  8E37               	bsf	___ftadd@f2+1,7,c
  5649  0024E2  0EFF               	movlw	255
  5650  0024E4  1636               	andwf	___ftadd@f2,f,c
  5651  0024E6  0EFF               	movlw	255
  5652  0024E8  1637               	andwf	___ftadd@f2+1,f,c
  5653  0024EA  0E00               	movlw	0
  5654  0024EC  1638               	andwf	___ftadd@f2+2,f,c
  5655  0024EE  503D               	movf	___ftadd@exp2,w,c
  5656  0024F0  5C3E               	subwf	___ftadd@exp1,w,c
  5657  0024F2  B0D8               	btfsc	status,0,c
  5658  0024F4  D01B               	goto	l2089
  5659  0024F6                     l2079:
  5660  0024F6  90D8               	bcf	status,0,c
  5661  0024F8  3636               	rlcf	___ftadd@f2,f,c
  5662  0024FA  3637               	rlcf	___ftadd@f2+1,f,c
  5663  0024FC  3638               	rlcf	___ftadd@f2+2,f,c
  5664  0024FE  063D               	decf	___ftadd@exp2,f,c
  5665  002500  503E               	movf	___ftadd@exp1,w,c
  5666  002502  183D               	xorwf	___ftadd@exp2,w,c
  5667  002504  B4D8               	btfsc	status,2,c
  5668  002506  D00D               	goto	l2087
  5669  002508  063C               	decf	___ftadd@sign,f,c
  5670  00250A  C03C  F039         	movff	___ftadd@sign,??___ftadd
  5671  00250E  0E07               	movlw	7
  5672  002510  1639               	andwf	??___ftadd,f,c
  5673  002512  B4D8               	btfsc	status,2,c
  5674  002514  D006               	goto	l2087
  5675  002516  D7EF               	goto	l2079
  5676  002518                     l2085:
  5677  002518  90D8               	bcf	status,0,c
  5678  00251A  3235               	rrcf	___ftadd@f1+2,f,c
  5679  00251C  3234               	rrcf	___ftadd@f1+1,f,c
  5680  00251E  3233               	rrcf	___ftadd@f1,f,c
  5681  002520  2A3E               	incf	___ftadd@exp1,f,c
  5682  002522                     l2087:
  5683  002522  503D               	movf	___ftadd@exp2,w,c
  5684  002524  183E               	xorwf	___ftadd@exp1,w,c
  5685  002526  B4D8               	btfsc	status,2,c
  5686  002528  D01F               	goto	l620
  5687  00252A  D7F6               	goto	l2085
  5688  00252C                     l2089:
  5689  00252C  503E               	movf	___ftadd@exp1,w,c
  5690  00252E  5C3D               	subwf	___ftadd@exp2,w,c
  5691  002530  B0D8               	btfsc	status,0,c
  5692  002532  D01A               	goto	l620
  5693  002534                     l2091:
  5694  002534  90D8               	bcf	status,0,c
  5695  002536  3633               	rlcf	___ftadd@f1,f,c
  5696  002538  3634               	rlcf	___ftadd@f1+1,f,c
  5697  00253A  3635               	rlcf	___ftadd@f1+2,f,c
  5698  00253C  063E               	decf	___ftadd@exp1,f,c
  5699  00253E  503E               	movf	___ftadd@exp1,w,c
  5700  002540  183D               	xorwf	___ftadd@exp2,w,c
  5701  002542  B4D8               	btfsc	status,2,c
  5702  002544  D00D               	goto	l2099
  5703  002546  063C               	decf	___ftadd@sign,f,c
  5704  002548  C03C  F039         	movff	___ftadd@sign,??___ftadd
  5705  00254C  0E07               	movlw	7
  5706  00254E  1639               	andwf	??___ftadd,f,c
  5707  002550  B4D8               	btfsc	status,2,c
  5708  002552  D006               	goto	l2099
  5709  002554  D7EF               	goto	l2091
  5710  002556                     l2097:
  5711  002556  90D8               	bcf	status,0,c
  5712  002558  3238               	rrcf	___ftadd@f2+2,f,c
  5713  00255A  3237               	rrcf	___ftadd@f2+1,f,c
  5714  00255C  3236               	rrcf	___ftadd@f2,f,c
  5715  00255E  2A3D               	incf	___ftadd@exp2,f,c
  5716  002560                     l2099:
  5717  002560  503D               	movf	___ftadd@exp2,w,c
  5718  002562  183E               	xorwf	___ftadd@exp1,w,c
  5719  002564  A4D8               	btfss	status,2,c
  5720  002566  D7F7               	goto	l2097
  5721  002568                     l620:
  5722  002568  AE3C               	btfss	___ftadd@sign,7,c
  5723  00256A  D00C               	goto	l629
  5724  00256C  0EFF               	movlw	255
  5725  00256E  1A33               	xorwf	___ftadd@f1,f,c
  5726  002570  0EFF               	movlw	255
  5727  002572  1A34               	xorwf	___ftadd@f1+1,f,c
  5728  002574  0EFF               	movlw	255
  5729  002576  1A35               	xorwf	___ftadd@f1+2,f,c
  5730  002578  0E01               	movlw	1
  5731  00257A  2633               	addwf	___ftadd@f1,f,c
  5732  00257C  0E00               	movlw	0
  5733  00257E  2234               	addwfc	___ftadd@f1+1,f,c
  5734  002580  0E00               	movlw	0
  5735  002582  2235               	addwfc	___ftadd@f1+2,f,c
  5736  002584                     l629:
  5737  002584  AC3C               	btfss	___ftadd@sign,6,c
  5738  002586  D00C               	goto	l2105
  5739  002588  0EFF               	movlw	255
  5740  00258A  1A36               	xorwf	___ftadd@f2,f,c
  5741  00258C  0EFF               	movlw	255
  5742  00258E  1A37               	xorwf	___ftadd@f2+1,f,c
  5743  002590  0EFF               	movlw	255
  5744  002592  1A38               	xorwf	___ftadd@f2+2,f,c
  5745  002594  0E01               	movlw	1
  5746  002596  2636               	addwf	___ftadd@f2,f,c
  5747  002598  0E00               	movlw	0
  5748  00259A  2237               	addwfc	___ftadd@f2+1,f,c
  5749  00259C  0E00               	movlw	0
  5750  00259E  2238               	addwfc	___ftadd@f2+2,f,c
  5751  0025A0                     l2105:
  5752  0025A0  0E00               	movlw	0
  5753  0025A2  6E3C               	movwf	___ftadd@sign,c
  5754  0025A4  5033               	movf	___ftadd@f1,w,c
  5755  0025A6  2636               	addwf	___ftadd@f2,f,c
  5756  0025A8  5034               	movf	___ftadd@f1+1,w,c
  5757  0025AA  2237               	addwfc	___ftadd@f2+1,f,c
  5758  0025AC  5035               	movf	___ftadd@f1+2,w,c
  5759  0025AE  2238               	addwfc	___ftadd@f2+2,f,c
  5760  0025B0  AE38               	btfss	___ftadd@f2+2,7,c
  5761  0025B2  D00E               	goto	l2115
  5762  0025B4  0EFF               	movlw	255
  5763  0025B6  1A36               	xorwf	___ftadd@f2,f,c
  5764  0025B8  0EFF               	movlw	255
  5765  0025BA  1A37               	xorwf	___ftadd@f2+1,f,c
  5766  0025BC  0EFF               	movlw	255
  5767  0025BE  1A38               	xorwf	___ftadd@f2+2,f,c
  5768  0025C0  0E01               	movlw	1
  5769  0025C2  2636               	addwf	___ftadd@f2,f,c
  5770  0025C4  0E00               	movlw	0
  5771  0025C6  2237               	addwfc	___ftadd@f2+1,f,c
  5772  0025C8  0E00               	movlw	0
  5773  0025CA  2238               	addwfc	___ftadd@f2+2,f,c
  5774  0025CC  0E01               	movlw	1
  5775  0025CE  6E3C               	movwf	___ftadd@sign,c
  5776  0025D0                     l2115:
  5777  0025D0  C036  F013         	movff	___ftadd@f2,___ftpack@arg
  5778  0025D4  C037  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  5779  0025D8  C038  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  5780  0025DC  C03E  F016         	movff	___ftadd@exp1,___ftpack@exp
  5781  0025E0  C03C  F017         	movff	___ftadd@sign,___ftpack@sign
  5782  0025E4  ECFA  F015         	call	___ftpack	;wreg free
  5783  0025E8  C013  F033         	movff	?___ftpack,?___ftadd
  5784  0025EC  C014  F034         	movff	?___ftpack+1,?___ftadd+1
  5785  0025F0  C015  F035         	movff	?___ftpack+2,?___ftadd+2
  5786  0025F4  0012               	return	
  5787  0025F6                     __end_of___ftadd:
  5788                           	opt stack 0
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           prodh	equ	0xFF4
  5794                           prodl	equ	0xFF3
  5795                           intcon	equ	0xFF2
  5796                           intcon2	equ	0xFF1
  5797                           postinc0	equ	0xFEE
  5798                           wreg	equ	0xFE8
  5799                           postdec1	equ	0xFE5
  5800                           fsr1l	equ	0xFE1
  5801                           postinc2	equ	0xFDE
  5802                           postdec2	equ	0xFDD
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function ___awtoft *****************
  5808 ;; Defined at:
  5809 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  c               2   26[COMRAM] int 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  sign            1   29[COMRAM] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  3   26[COMRAM] float 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5823 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;Total ram usage:        4 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    2
  5830 ;; This function calls:
  5831 ;;		___ftpack
  5832 ;; This function is called by:
  5833 ;;		_wheelVelocity
  5834 ;;		_driveStationaryCircle
  5835 ;;		_driveStraight
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           	psect	text21
  5840  0030A2                     __ptext21:
  5841                           	opt stack 0
  5842  0030A2                     ___awtoft:
  5843                           	opt stack 25
  5844                           
  5845                           ;incstack = 0
  5846  0030A2  0E00               	movlw	0
  5847  0030A4  6E1E               	movwf	___awtoft@sign,c
  5848  0030A6  AE1C               	btfss	___awtoft@c+1,7,c
  5849  0030A8  D006               	goto	l2191
  5850  0030AA  6C1B               	negf	___awtoft@c,c
  5851  0030AC  1E1C               	comf	___awtoft@c+1,f,c
  5852  0030AE  B0D8               	btfsc	status,0,c
  5853  0030B0  2A1C               	incf	___awtoft@c+1,f,c
  5854  0030B2  0E01               	movlw	1
  5855  0030B4  6E1E               	movwf	___awtoft@sign,c
  5856  0030B6                     l2191:
  5857  0030B6  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  5858  0030BA  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  5859  0030BE  6A15               	clrf	___ftpack@arg+2,c
  5860  0030C0  0E8E               	movlw	142
  5861  0030C2  6E16               	movwf	___ftpack@exp,c
  5862  0030C4  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  5863  0030C8  ECFA  F015         	call	___ftpack	;wreg free
  5864  0030CC  C013  F01B         	movff	?___ftpack,?___awtoft
  5865  0030D0  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  5866  0030D4  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  5867  0030D8  0012               	return	
  5868  0030DA                     __end_of___awtoft:
  5869                           	opt stack 0
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon	equ	0xFF2
  5877                           intcon2	equ	0xFF1
  5878                           postinc0	equ	0xFEE
  5879                           wreg	equ	0xFE8
  5880                           postdec1	equ	0xFE5
  5881                           fsr1l	equ	0xFE1
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _limitWheelSpeeds *****************
  5889 ;; Defined at:
  5890 ;;		line 251 in file "main.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  leftWheelSpe    2   18[COMRAM] PTR int 
  5893 ;;		 -> driveStraight@leftWheelCommandedSpeed(2), driveLargeCircle@leftWheelCommandedSpeed(2), driveStationaryCircle@lef
      +tWheelCommandedSpeed(2), 
  5894 ;;  rightWheelSp    2   20[COMRAM] PTR int 
  5895 ;;		 -> driveStraight@rightWheelCommandedSpeed(2), driveLargeCircle@rightWheelCommandedSpeed(2), driveStationaryCircle@r
      +ightWheelCommandedSpeed(2), 
  5896 ;;  speedCompens    2   22[COMRAM] PTR int 
  5897 ;;		 -> driveStraight@speedCompensation(2), driveLargeCircle@speedCompensation(2), driveStationaryCircle@speedCompensati
      +on(2), 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;		None
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      void 
  5902 ;; Registers used:
  5903 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:        8 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    1
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		_driveStationaryCircle
  5920 ;;		_driveLargeCircle
  5921 ;;		_driveStraight
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text22
  5926  002850                     __ptext22:
  5927                           	opt stack 0
  5928  002850                     _limitWheelSpeeds:
  5929                           	opt stack 27
  5930                           
  5931                           ;main.c: 256: if (*leftWheelSpeed >= 60)
  5932                           
  5933                           ;incstack = 0
  5934  002850  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5935  002854  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5936  002858  0E01               	movlw	1
  5937  00285A  BEDB               	btfsc	plusw2,7,c
  5938  00285C  D00F               	goto	l2267
  5939  00285E  0E01               	movlw	1
  5940  002860  50DB               	movf	plusw2,w,c
  5941  002862  E104               	bnz	u1830
  5942  002864  0E3C               	movlw	60
  5943  002866  5CDE               	subwf	postinc2,w,c
  5944  002868  A0D8               	btfss	status,0,c
  5945  00286A  D008               	goto	l2267
  5946  00286C                     u1830:
  5947                           
  5948                           ;main.c: 257: {
  5949                           ;main.c: 258: *leftWheelSpeed = 60;
  5950  00286C  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5951  002870  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5952  002874  0E3C               	movlw	60
  5953  002876  6EDE               	movwf	postinc2,c
  5954  002878  0E00               	movlw	0
  5955  00287A  6EDD               	movwf	postdec2,c
  5956  00287C                     l2267:
  5957                           
  5958                           ;main.c: 259: }
  5959                           ;main.c: 260: if (*leftWheelSpeed <= -60)
  5960  00287C  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5961  002880  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5962  002884  0E01               	movlw	1
  5963  002886  AEDB               	btfss	plusw2,7,c
  5964  002888  D00E               	goto	l2271
  5965  00288A  0EC5               	movlw	197
  5966  00288C  5CDE               	subwf	postinc2,w,c
  5967  00288E  0EFF               	movlw	255
  5968  002890  58DE               	subwfb	postinc2,w,c
  5969  002892  B0D8               	btfsc	status,0,c
  5970  002894  D008               	goto	l2271
  5971                           
  5972                           ;main.c: 261: {
  5973                           ;main.c: 262: *leftWheelSpeed = -60;
  5974  002896  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5975  00289A  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5976  00289E  0EC4               	movlw	196
  5977  0028A0  6EDE               	movwf	postinc2,c
  5978  0028A2  0EFF               	movlw	255
  5979  0028A4  6EDD               	movwf	postdec2,c
  5980  0028A6                     l2271:
  5981                           
  5982                           ;main.c: 263: }
  5983                           ;main.c: 265: if (*rightWheelSpeed >= 60)
  5984  0028A6  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5985  0028AA  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5986  0028AE  0E01               	movlw	1
  5987  0028B0  BEDB               	btfsc	plusw2,7,c
  5988  0028B2  D00F               	goto	l2275
  5989  0028B4  0E01               	movlw	1
  5990  0028B6  50DB               	movf	plusw2,w,c
  5991  0028B8  E104               	bnz	u1850
  5992  0028BA  0E3C               	movlw	60
  5993  0028BC  5CDE               	subwf	postinc2,w,c
  5994  0028BE  A0D8               	btfss	status,0,c
  5995  0028C0  D008               	goto	l2275
  5996  0028C2                     u1850:
  5997                           
  5998                           ;main.c: 266: {
  5999                           ;main.c: 267: *rightWheelSpeed = 60;
  6000  0028C2  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  6001  0028C6  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  6002  0028CA  0E3C               	movlw	60
  6003  0028CC  6EDE               	movwf	postinc2,c
  6004  0028CE  0E00               	movlw	0
  6005  0028D0  6EDD               	movwf	postdec2,c
  6006  0028D2                     l2275:
  6007                           
  6008                           ;main.c: 268: }
  6009                           ;main.c: 269: if (*rightWheelSpeed <= -60)
  6010  0028D2  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  6011  0028D6  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  6012  0028DA  0E01               	movlw	1
  6013  0028DC  AEDB               	btfss	plusw2,7,c
  6014  0028DE  D00E               	goto	l2279
  6015  0028E0  0EC5               	movlw	197
  6016  0028E2  5CDE               	subwf	postinc2,w,c
  6017  0028E4  0EFF               	movlw	255
  6018  0028E6  58DE               	subwfb	postinc2,w,c
  6019  0028E8  B0D8               	btfsc	status,0,c
  6020  0028EA  D008               	goto	l2279
  6021                           
  6022                           ;main.c: 270: {
  6023                           ;main.c: 271: *rightWheelSpeed = -60;
  6024  0028EC  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  6025  0028F0  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  6026  0028F4  0EC4               	movlw	196
  6027  0028F6  6EDE               	movwf	postinc2,c
  6028  0028F8  0EFF               	movlw	255
  6029  0028FA  6EDD               	movwf	postdec2,c
  6030  0028FC                     l2279:
  6031                           
  6032                           ;main.c: 272: }
  6033                           ;main.c: 273: if(*speedCompensation > 50)
  6034  0028FC  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  6035  002900  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  6036  002904  0E01               	movlw	1
  6037  002906  BEDB               	btfsc	plusw2,7,c
  6038  002908  D00F               	goto	l2283
  6039  00290A  0E01               	movlw	1
  6040  00290C  50DB               	movf	plusw2,w,c
  6041  00290E  E104               	bnz	u1870
  6042  002910  0E33               	movlw	51
  6043  002912  5CDE               	subwf	postinc2,w,c
  6044  002914  A0D8               	btfss	status,0,c
  6045  002916  D008               	goto	l2283
  6046  002918                     u1870:
  6047                           
  6048                           ;main.c: 274: {
  6049                           ;main.c: 275: *speedCompensation = 50;
  6050  002918  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  6051  00291C  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  6052  002920  0E32               	movlw	50
  6053  002922  6EDE               	movwf	postinc2,c
  6054  002924  0E00               	movlw	0
  6055  002926  6EDD               	movwf	postdec2,c
  6056  002928                     l2283:
  6057                           
  6058                           ;main.c: 276: }
  6059                           ;main.c: 277: if(*speedCompensation < -50)
  6060  002928  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  6061  00292C  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  6062  002930  0E01               	movlw	1
  6063  002932  AEDB               	btfss	plusw2,7,c
  6064  002934  0012               	return	
  6065  002936  0ECE               	movlw	206
  6066  002938  5CDE               	subwf	postinc2,w,c
  6067  00293A  0EFF               	movlw	255
  6068  00293C  58DE               	subwfb	postinc2,w,c
  6069  00293E  B0D8               	btfsc	status,0,c
  6070  002940  0012               	return	
  6071                           
  6072                           ;main.c: 278: {
  6073                           ;main.c: 279: *speedCompensation = -50;
  6074  002942  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  6075  002946  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  6076  00294A  0ECE               	movlw	206
  6077  00294C  6EDE               	movwf	postinc2,c
  6078  00294E  0EFF               	movlw	255
  6079  002950  6EDD               	movwf	postdec2,c
  6080  002952  0012               	return	
  6081  002954                     __end_of_limitWheelSpeeds:
  6082                           	opt stack 0
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           intcon	equ	0xFF2
  6090                           intcon2	equ	0xFF1
  6091                           postinc0	equ	0xFEE
  6092                           wreg	equ	0xFE8
  6093                           postdec1	equ	0xFE5
  6094                           fsr1l	equ	0xFE1
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           plusw2	equ	0xFDB
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102 ;; *************** function ___lmul *****************
  6103 ;; Defined at:
  6104 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul32.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  multiplier      4   18[COMRAM] unsigned long 
  6107 ;;  multiplicand    4   22[COMRAM] unsigned long 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  product         4   26[COMRAM] unsigned long 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  4   18[COMRAM] unsigned long 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:       12 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    1
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_driveLargeCircle
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           	psect	text23
  6134  002F78                     __ptext23:
  6135                           	opt stack 0
  6136  002F78                     ___lmul:
  6137                           	opt stack 27
  6138                           
  6139                           ;incstack = 0
  6140  002F78  0E00               	movlw	0
  6141  002F7A  6E1B               	movwf	___lmul@product,c
  6142  002F7C  0E00               	movlw	0
  6143  002F7E  6E1C               	movwf	___lmul@product+1,c
  6144  002F80  0E00               	movlw	0
  6145  002F82  6E1D               	movwf	___lmul@product+2,c
  6146  002F84  0E00               	movlw	0
  6147  002F86  6E1E               	movwf	___lmul@product+3,c
  6148  002F88                     l2337:
  6149  002F88  A013               	btfss	___lmul@multiplier,0,c
  6150  002F8A  D008               	goto	l2341
  6151  002F8C  5017               	movf	___lmul@multiplicand,w,c
  6152  002F8E  261B               	addwf	___lmul@product,f,c
  6153  002F90  5018               	movf	___lmul@multiplicand+1,w,c
  6154  002F92  221C               	addwfc	___lmul@product+1,f,c
  6155  002F94  5019               	movf	___lmul@multiplicand+2,w,c
  6156  002F96  221D               	addwfc	___lmul@product+2,f,c
  6157  002F98  501A               	movf	___lmul@multiplicand+3,w,c
  6158  002F9A  221E               	addwfc	___lmul@product+3,f,c
  6159  002F9C                     l2341:
  6160  002F9C  90D8               	bcf	status,0,c
  6161  002F9E  3617               	rlcf	___lmul@multiplicand,f,c
  6162  002FA0  3618               	rlcf	___lmul@multiplicand+1,f,c
  6163  002FA2  3619               	rlcf	___lmul@multiplicand+2,f,c
  6164  002FA4  361A               	rlcf	___lmul@multiplicand+3,f,c
  6165  002FA6  90D8               	bcf	status,0,c
  6166  002FA8  3216               	rrcf	___lmul@multiplier+3,f,c
  6167  002FAA  3215               	rrcf	___lmul@multiplier+2,f,c
  6168  002FAC  3214               	rrcf	___lmul@multiplier+1,f,c
  6169  002FAE  3213               	rrcf	___lmul@multiplier,f,c
  6170  002FB0  5013               	movf	___lmul@multiplier,w,c
  6171  002FB2  1014               	iorwf	___lmul@multiplier+1,w,c
  6172  002FB4  1015               	iorwf	___lmul@multiplier+2,w,c
  6173  002FB6  1016               	iorwf	___lmul@multiplier+3,w,c
  6174  002FB8  A4D8               	btfss	status,2,c
  6175  002FBA  D7E6               	goto	l2337
  6176  002FBC  C01B  F013         	movff	___lmul@product,?___lmul
  6177  002FC0  C01C  F014         	movff	___lmul@product+1,?___lmul+1
  6178  002FC4  C01D  F015         	movff	___lmul@product+2,?___lmul+2
  6179  002FC8  C01E  F016         	movff	___lmul@product+3,?___lmul+3
  6180  002FCC  0012               	return		;funcret
  6181  002FCE                     __end_of___lmul:
  6182                           	opt stack 0
  6183                           tblptru	equ	0xFF8
  6184                           tblptrh	equ	0xFF7
  6185                           tblptrl	equ	0xFF6
  6186                           tablat	equ	0xFF5
  6187                           prodh	equ	0xFF4
  6188                           prodl	equ	0xFF3
  6189                           intcon	equ	0xFF2
  6190                           intcon2	equ	0xFF1
  6191                           postinc0	equ	0xFEE
  6192                           wreg	equ	0xFE8
  6193                           postdec1	equ	0xFE5
  6194                           fsr1l	equ	0xFE1
  6195                           postinc2	equ	0xFDE
  6196                           postdec2	equ	0xFDD
  6197                           plusw2	equ	0xFDB
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function _configureTimers *****************
  6203 ;; Defined at:
  6204 ;;		line 418 in file "main.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;		None
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;		None
  6209 ;; Return value:  Size  Location     Type
  6210 ;;                  1    wreg      void 
  6211 ;; Registers used:
  6212 ;;		wreg, status,2
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;Total ram usage:        0 bytes
  6223 ;; Hardware stack levels used:    1
  6224 ;; Hardware stack levels required when called:    1
  6225 ;; This function calls:
  6226 ;;		Nothing
  6227 ;; This function is called by:
  6228 ;;		_main
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text24
  6233  002CA2                     __ptext24:
  6234                           	opt stack 0
  6235  002CA2                     _configureTimers:
  6236                           	opt stack 29
  6237                           
  6238                           ;main.c: 420: (INTCONbits.GIE = 0);
  6239                           
  6240                           ;incstack = 0
  6241  002CA2  9EF2               	bcf	intcon,7,c	;volatile
  6242                           
  6243                           ;main.c: 422: T1CON = 0;
  6244  002CA4  0E00               	movlw	0
  6245  002CA6  6ECD               	movwf	4045,c	;volatile
  6246                           
  6247                           ;main.c: 423: T1CONbits.TMR1CS = 0b00;
  6248  002CA8  0E3F               	movlw	-193
  6249  002CAA  16CD               	andwf	4045,f,c	;volatile
  6250                           
  6251                           ;main.c: 424: T1CONbits.T1CKPS = 0b10;
  6252  002CAC  50CD               	movf	4045,w,c	;volatile
  6253  002CAE  0BCF               	andlw	-49
  6254  002CB0  0920               	iorlw	32
  6255  002CB2  6ECD               	movwf	4045,c	;volatile
  6256                           
  6257                           ;main.c: 425: T5CON = 0;
  6258  002CB4  0E00               	movlw	0
  6259  002CB6  010F               	movlb	15	; () banked
  6260  002CB8  6F4E               	movwf	78,b	;volatile
  6261                           
  6262                           ;main.c: 426: T5CONbits.TMR5CS = 0b00;
  6263  002CBA  0E3F               	movlw	-193
  6264  002CBC  010F               	movlb	15	; () banked
  6265  002CBE  174E               	andwf	78,f,b	;volatile
  6266                           
  6267                           ;main.c: 427: T5CONbits.T5CKPS = 0b10;
  6268  002CC0  010F               	movlb	15	; () banked
  6269  002CC2  514E               	movf	78,w,b	;volatile
  6270  002CC4  0BCF               	andlw	-49
  6271  002CC6  0920               	iorlw	32
  6272  002CC8  6F4E               	movwf	78,b	;volatile
  6273                           
  6274                           ;main.c: 432: CCP3CON = 0;
  6275  002CCA  0E00               	movlw	0
  6276  002CCC  010F               	movlb	15	; () banked
  6277  002CCE  6F5D               	movwf	93,b	;volatile
  6278                           
  6279                           ;main.c: 433: CCP2CON = 0;
  6280  002CD0  0E00               	movlw	0
  6281  002CD2  6E66               	movwf	3942,c	;volatile
  6282                           
  6283                           ;main.c: 434: CCP3CONbits.CCP3M = 0b1010;
  6284  002CD4  010F               	movlb	15	; () banked
  6285  002CD6  515D               	movf	93,w,b	;volatile
  6286  002CD8  0BF0               	andlw	-16
  6287  002CDA  090A               	iorlw	10
  6288  002CDC  6F5D               	movwf	93,b	;volatile
  6289                           
  6290                           ;main.c: 435: CCP2CONbits.CCP2M = 0b1010;
  6291  002CDE  5066               	movf	3942,w,c	;volatile
  6292  002CE0  0BF0               	andlw	-16
  6293  002CE2  090A               	iorlw	10
  6294  002CE4  6E66               	movwf	3942,c	;volatile
  6295                           
  6296                           ;main.c: 442: CCPTMRS0bits.C3TSEL = 0;
  6297  002CE6  0E3F               	movlw	-193
  6298  002CE8  010F               	movlb	15	; () banked
  6299  002CEA  1749               	andwf	73,f,b	;volatile
  6300                           
  6301                           ;main.c: 443: CCPTMRS0bits.C2TSEL = 0b10;
  6302  002CEC  010F               	movlb	15	; () banked
  6303  002CEE  5149               	movf	73,w,b	;volatile
  6304  002CF0  0BE7               	andlw	-25
  6305  002CF2  0910               	iorlw	16
  6306  002CF4  6F49               	movwf	73,b	;volatile
  6307                           
  6308                           ;main.c: 445: CCPR3 = 675;
  6309  002CF6  0E02               	movlw	2
  6310  002CF8  010F               	movlb	15	; () banked
  6311  002CFA  6F5F               	movwf	95,b	;volatile
  6312  002CFC  0EA3               	movlw	163
  6313  002CFE  6F5E               	movwf	94,b	;volatile
  6314                           
  6315                           ;main.c: 446: CCPR2 = 675;
  6316  002D00  0E02               	movlw	2
  6317  002D02  6E68               	movwf	3944,c	;volatile
  6318  002D04  0EA3               	movlw	163
  6319  002D06  6E67               	movwf	3943,c	;volatile
  6320                           
  6321                           ; BSR set to: 15
  6322                           ;main.c: 448: CCP3IE = 1;
  6323  002D08  807A               	bsf	3962,0,c	;volatile
  6324                           
  6325                           ; BSR set to: 15
  6326                           ;main.c: 449: CCP2IE = 1;
  6327  002D0A  80A0               	bsf	4000,0,c	;volatile
  6328                           
  6329                           ; BSR set to: 15
  6330                           ;main.c: 452: PIE1bits.TMR2IE = 1;
  6331  002D0C  829D               	bsf	3997,1,c	;volatile
  6332                           
  6333                           ;main.c: 453: T2CON = 0;
  6334  002D0E  0E00               	movlw	0
  6335  002D10  6EBA               	movwf	4026,c	;volatile
  6336                           
  6337                           ;main.c: 454: T2CONbits.T2CKPS = 0b10;
  6338  002D12  50BA               	movf	4026,w,c	;volatile
  6339  002D14  0BFC               	andlw	-4
  6340  002D16  0902               	iorlw	2
  6341  002D18  6EBA               	movwf	4026,c	;volatile
  6342                           
  6343                           ; BSR set to: 15
  6344                           ;main.c: 455: T2CONbits.TMR2ON = 1;
  6345  002D1A  84BA               	bsf	4026,2,c	;volatile
  6346                           
  6347                           ;main.c: 456: PR2 = 125;
  6348  002D1C  0E7D               	movlw	125
  6349  002D1E  6EBB               	movwf	4027,c	;volatile
  6350                           
  6351                           ; BSR set to: 15
  6352                           ;main.c: 462: INTCONbits.GIE = 1;
  6353  002D20  8EF2               	bsf	intcon,7,c	;volatile
  6354                           
  6355                           ; BSR set to: 15
  6356                           ;main.c: 463: INTCONbits.PEIE = 1;
  6357  002D22  8CF2               	bsf	intcon,6,c	;volatile
  6358                           
  6359                           ;main.c: 465: TMR1 = 0;
  6360  002D24  0E00               	movlw	0
  6361  002D26  6ECF               	movwf	4047,c	;volatile
  6362  002D28  0E00               	movlw	0
  6363  002D2A  6ECE               	movwf	4046,c	;volatile
  6364                           
  6365                           ;main.c: 466: TMR5 = 0;
  6366  002D2C  0E00               	movlw	0
  6367  002D2E  010F               	movlb	15	; () banked
  6368  002D30  6F50               	movwf	80,b	;volatile
  6369  002D32  0E00               	movlw	0
  6370  002D34  6F4F               	movwf	79,b	;volatile
  6371                           
  6372                           ; BSR set to: 15
  6373                           ;main.c: 467: TMR1ON = 1;
  6374  002D36  80CD               	bsf	4045,0,c	;volatile
  6375                           
  6376                           ; BSR set to: 15
  6377                           ;main.c: 468: TMR5ON = 1;
  6378  002D38  010F               	movlb	15	; () banked
  6379  002D3A  814E               	bsf	78,0,b	;volatile
  6380                           
  6381                           ; BSR set to: 15
  6382                           ;main.c: 470: (INTCONbits.GIE = 1);
  6383  002D3C  8EF2               	bsf	intcon,7,c	;volatile
  6384                           
  6385                           ; BSR set to: 15
  6386                           ;main.c: 472: TRISDbits.TRISD0 = 0;
  6387  002D3E  9095               	bcf	3989,0,c	;volatile
  6388                           
  6389                           ; BSR set to: 15
  6390                           ;main.c: 473: TRISDbits.TRISD1 = 0;
  6391  002D40  9295               	bcf	3989,1,c	;volatile
  6392                           
  6393                           ;main.c: 474: ANSELD = 0;
  6394  002D42  0E00               	movlw	0
  6395  002D44  010F               	movlb	15	; () banked
  6396  002D46  6F3B               	movwf	59,b	;volatile
  6397                           
  6398                           ; BSR set to: 15
  6399  002D48  0012               	return		;funcret
  6400  002D4A                     __end_of_configureTimers:
  6401                           	opt stack 0
  6402                           tblptru	equ	0xFF8
  6403                           tblptrh	equ	0xFF7
  6404                           tblptrl	equ	0xFF6
  6405                           tablat	equ	0xFF5
  6406                           prodh	equ	0xFF4
  6407                           prodl	equ	0xFF3
  6408                           intcon	equ	0xFF2
  6409                           intcon2	equ	0xFF1
  6410                           postinc0	equ	0xFEE
  6411                           wreg	equ	0xFE8
  6412                           postdec1	equ	0xFE5
  6413                           fsr1l	equ	0xFE1
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           plusw2	equ	0xFDB
  6417                           fsr2h	equ	0xFDA
  6418                           fsr2l	equ	0xFD9
  6419                           status	equ	0xFD8
  6420                           
  6421 ;; *************** function _configureComparators *****************
  6422 ;; Defined at:
  6423 ;;		line 478 in file "main.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;		None
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  1    wreg      void 
  6430 ;; Registers used:
  6431 ;;		wreg, status,2
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;Total ram usage:        0 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    1
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_main
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           	psect	text25
  6452  002F20                     __ptext25:
  6453                           	opt stack 0
  6454  002F20                     _configureComparators:
  6455                           	opt stack 29
  6456                           
  6457                           ;main.c: 482: VREFCON0bits.FVREN=1;
  6458                           
  6459                           ; BSR set to: 15
  6460                           ;incstack = 0
  6461  002F20  010F               	movlb	15	; () banked
  6462  002F22  8F42               	bsf	66,7,b	;volatile
  6463                           
  6464                           ;main.c: 483: VREFCON0bits.FVRST=0;
  6465  002F24  010F               	movlb	15	; () banked
  6466  002F26  9D42               	bcf	66,6,b	;volatile
  6467                           
  6468                           ; BSR set to: 15
  6469                           ;main.c: 484: VREFCON0bits.FVRS=0b01;
  6470  002F28  010F               	movlb	15	; () banked
  6471  002F2A  5142               	movf	66,w,b	;volatile
  6472  002F2C  0BCF               	andlw	-49
  6473  002F2E  0910               	iorlw	16
  6474  002F30  6F42               	movwf	66,b	;volatile
  6475                           
  6476                           ; BSR set to: 15
  6477                           ;main.c: 486: TRISBbits.TRISB1 = 1;
  6478  002F32  8293               	bsf	3987,1,c	;volatile
  6479                           
  6480                           ; BSR set to: 15
  6481                           ;main.c: 487: ANSELBbits.ANSB1 = 1;
  6482  002F34  010F               	movlb	15	; () banked
  6483  002F36  8339               	bsf	57,1,b	;volatile
  6484                           
  6485                           ; BSR set to: 15
  6486                           ;main.c: 491: CM2CON0bits.C2ON = 1;
  6487  002F38  8E78               	bsf	3960,7,c	;volatile
  6488                           
  6489                           ; BSR set to: 15
  6490                           ;main.c: 492: CM2CON0bits.C2OUT = 0;
  6491  002F3A  9C78               	bcf	3960,6,c	;volatile
  6492                           
  6493                           ; BSR set to: 15
  6494                           ;main.c: 493: CM2CON0bits.C2OE = 0;
  6495  002F3C  9A78               	bcf	3960,5,c	;volatile
  6496                           
  6497                           ; BSR set to: 15
  6498                           ;main.c: 494: CM2CON0bits.C2POL = 1;
  6499  002F3E  8878               	bsf	3960,4,c	;volatile
  6500                           
  6501                           ; BSR set to: 15
  6502                           ;main.c: 495: CM2CON0bits.C2SP = 1;
  6503  002F40  8678               	bsf	3960,3,c	;volatile
  6504                           
  6505                           ; BSR set to: 15
  6506                           ;main.c: 496: CM2CON0bits.C2R = 1;
  6507  002F42  8478               	bsf	3960,2,c	;volatile
  6508                           
  6509                           ;main.c: 497: CM2CON0bits.C2CH = 0b11;
  6510  002F44  0E03               	movlw	3
  6511  002F46  1278               	iorwf	3960,f,c	;volatile
  6512                           
  6513                           ; BSR set to: 15
  6514                           ;main.c: 499: CM2CON1bits.C2RSEL = 1;
  6515  002F48  8877               	bsf	3959,4,c	;volatile
  6516                           
  6517                           ; BSR set to: 15
  6518                           ;main.c: 500: CM2CON1bits.C2HYS = 0;
  6519  002F4A  9477               	bcf	3959,2,c	;volatile
  6520                           
  6521                           ; BSR set to: 15
  6522                           ;main.c: 501: CM2CON1bits.C2SYNC = 0;
  6523  002F4C  9077               	bcf	3959,0,c	;volatile
  6524                           
  6525                           ; BSR set to: 15
  6526                           ;main.c: 507: TRISBbits.TRISB3 = 1;
  6527  002F4E  8693               	bsf	3987,3,c	;volatile
  6528                           
  6529                           ; BSR set to: 15
  6530                           ;main.c: 508: ANSELBbits.ANSB3 = 1;
  6531  002F50  010F               	movlb	15	; () banked
  6532  002F52  8739               	bsf	57,3,b	;volatile
  6533                           
  6534                           ; BSR set to: 15
  6535                           ;main.c: 511: CM1CON0bits.C1ON = 1;
  6536  002F54  8E79               	bsf	3961,7,c	;volatile
  6537                           
  6538                           ; BSR set to: 15
  6539                           ;main.c: 512: CM1CON0bits.C1OUT = 0;
  6540  002F56  9C79               	bcf	3961,6,c	;volatile
  6541                           
  6542                           ; BSR set to: 15
  6543                           ;main.c: 513: CM1CON0bits.C1OE = 0;
  6544  002F58  9A79               	bcf	3961,5,c	;volatile
  6545                           
  6546                           ; BSR set to: 15
  6547                           ;main.c: 514: CM1CON0bits.C1POL = 1;
  6548  002F5A  8879               	bsf	3961,4,c	;volatile
  6549                           
  6550                           ; BSR set to: 15
  6551                           ;main.c: 515: CM1CON0bits.C1SP = 1;
  6552  002F5C  8679               	bsf	3961,3,c	;volatile
  6553                           
  6554                           ; BSR set to: 15
  6555                           ;main.c: 516: CM1CON0bits.C1R = 1;
  6556  002F5E  8479               	bsf	3961,2,c	;volatile
  6557                           
  6558                           ;main.c: 517: CM1CON0bits.C1CH = 0b10;
  6559  002F60  5079               	movf	3961,w,c	;volatile
  6560  002F62  0BFC               	andlw	-4
  6561  002F64  0902               	iorlw	2
  6562  002F66  6E79               	movwf	3961,c	;volatile
  6563                           
  6564                           ; BSR set to: 15
  6565                           ;main.c: 519: CM2CON1bits.C1RSEL = 1;
  6566  002F68  8A77               	bsf	3959,5,c	;volatile
  6567                           
  6568                           ; BSR set to: 15
  6569                           ;main.c: 520: CM2CON1bits.C1HYS = 0;
  6570  002F6A  9677               	bcf	3959,3,c	;volatile
  6571                           
  6572                           ; BSR set to: 15
  6573                           ;main.c: 521: CM2CON1bits.C1SYNC = 0;
  6574  002F6C  9277               	bcf	3959,1,c	;volatile
  6575                           
  6576                           ; BSR set to: 15
  6577                           ;main.c: 524: PIR2bits.C1IF = 0;
  6578  002F6E  9CA1               	bcf	4001,6,c	;volatile
  6579                           
  6580                           ; BSR set to: 15
  6581                           ;main.c: 525: PIR2bits.C2IF = 0;
  6582  002F70  9AA1               	bcf	4001,5,c	;volatile
  6583                           
  6584                           ; BSR set to: 15
  6585                           ;main.c: 526: PIE2bits.C2IE = 1;
  6586  002F72  8AA0               	bsf	4000,5,c	;volatile
  6587                           
  6588                           ; BSR set to: 15
  6589                           ;main.c: 527: PIE2bits.C1IE = 1;
  6590  002F74  8CA0               	bsf	4000,6,c	;volatile
  6591                           
  6592                           ; BSR set to: 15
  6593  002F76  0012               	return		;funcret
  6594  002F78                     __end_of_configureComparators:
  6595                           	opt stack 0
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           intcon	equ	0xFF2
  6603                           intcon2	equ	0xFF1
  6604                           postinc0	equ	0xFEE
  6605                           wreg	equ	0xFE8
  6606                           postdec1	equ	0xFE5
  6607                           fsr1l	equ	0xFE1
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           plusw2	equ	0xFDB
  6611                           fsr2h	equ	0xFDA
  6612                           fsr2l	equ	0xFD9
  6613                           status	equ	0xFD8
  6614                           
  6615 ;; *************** function ___ftdiv *****************
  6616 ;; Defined at:
  6617 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;  f1              3   50[COMRAM] float 
  6620 ;;  f2              3   53[COMRAM] float 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;  f3              3   60[COMRAM] float 
  6623 ;;  sign            1   64[COMRAM] unsigned char 
  6624 ;;  exp             1   63[COMRAM] unsigned char 
  6625 ;;  cntr            1   59[COMRAM] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  3   50[COMRAM] float 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6635 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6637 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;Total ram usage:       15 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    2
  6642 ;; This function calls:
  6643 ;;		___ftpack
  6644 ;; This function is called by:
  6645 ;;		_main
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text26
  6650  002A48                     __ptext26:
  6651                           	opt stack 0
  6652  002A48                     ___ftdiv:
  6653                           	opt stack 28
  6654                           
  6655                           ; BSR set to: 15
  6656                           ;incstack = 0
  6657  002A48  C035  F039         	movff	___ftdiv@f1+2,??___ftdiv
  6658  002A4C  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  6659  002A4E  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  6660  002A50  3434               	rlcf	___ftdiv@f1+1,w,c
  6661  002A52  3639               	rlcf	??___ftdiv& (0+255),f,c
  6662  002A54  E301               	bnc	u2381
  6663  002A56  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  6664  002A58                     u2381:
  6665  002A58  5039               	movf	??___ftdiv,w,c
  6666  002A5A  6E40               	movwf	___ftdiv@exp,c
  6667  002A5C  5040               	movf	___ftdiv@exp,w,c
  6668  002A5E  A4D8               	btfss	status,2,c
  6669  002A60  D007               	goto	l2803
  6670  002A62  0E00               	movlw	0
  6671  002A64  6E33               	movwf	?___ftdiv,c
  6672  002A66  0E00               	movlw	0
  6673  002A68  6E34               	movwf	?___ftdiv+1,c
  6674  002A6A  0E00               	movlw	0
  6675  002A6C  6E35               	movwf	?___ftdiv+2,c
  6676  002A6E  0012               	return	
  6677  002A70                     l2803:
  6678  002A70  C038  F039         	movff	___ftdiv@f2+2,??___ftdiv
  6679  002A74  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  6680  002A76  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  6681  002A78  3437               	rlcf	___ftdiv@f2+1,w,c
  6682  002A7A  3639               	rlcf	??___ftdiv& (0+255),f,c
  6683  002A7C  E301               	bnc	u2401
  6684  002A7E  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  6685  002A80                     u2401:
  6686  002A80  5039               	movf	??___ftdiv,w,c
  6687  002A82  6E41               	movwf	___ftdiv@sign,c
  6688  002A84  5041               	movf	___ftdiv@sign,w,c
  6689  002A86  A4D8               	btfss	status,2,c
  6690  002A88  D007               	goto	l2809
  6691  002A8A  0E00               	movlw	0
  6692  002A8C  6E33               	movwf	?___ftdiv,c
  6693  002A8E  0E00               	movlw	0
  6694  002A90  6E34               	movwf	?___ftdiv+1,c
  6695  002A92  0E00               	movlw	0
  6696  002A94  6E35               	movwf	?___ftdiv+2,c
  6697  002A96  0012               	return	
  6698  002A98                     l2809:
  6699  002A98  0E00               	movlw	0
  6700  002A9A  6E3D               	movwf	___ftdiv@f3,c
  6701  002A9C  0E00               	movlw	0
  6702  002A9E  6E3E               	movwf	___ftdiv@f3+1,c
  6703  002AA0  0E00               	movlw	0
  6704  002AA2  6E3F               	movwf	___ftdiv@f3+2,c
  6705  002AA4  5041               	movf	___ftdiv@sign,w,c
  6706  002AA6  0F89               	addlw	137
  6707  002AA8  5E40               	subwf	___ftdiv@exp,f,c
  6708  002AAA  C035  F041         	movff	___ftdiv@f1+2,___ftdiv@sign
  6709  002AAE  5038               	movf	___ftdiv@f2+2,w,c
  6710  002AB0  1A41               	xorwf	___ftdiv@sign,f,c
  6711  002AB2  0E80               	movlw	128
  6712  002AB4  1641               	andwf	___ftdiv@sign,f,c
  6713  002AB6  8E34               	bsf	___ftdiv@f1+1,7,c
  6714  002AB8  0EFF               	movlw	255
  6715  002ABA  1633               	andwf	___ftdiv@f1,f,c
  6716  002ABC  0EFF               	movlw	255
  6717  002ABE  1634               	andwf	___ftdiv@f1+1,f,c
  6718  002AC0  0E00               	movlw	0
  6719  002AC2  1635               	andwf	___ftdiv@f1+2,f,c
  6720  002AC4  8E37               	bsf	___ftdiv@f2+1,7,c
  6721  002AC6  0EFF               	movlw	255
  6722  002AC8  1636               	andwf	___ftdiv@f2,f,c
  6723  002ACA  0EFF               	movlw	255
  6724  002ACC  1637               	andwf	___ftdiv@f2+1,f,c
  6725  002ACE  0E00               	movlw	0
  6726  002AD0  1638               	andwf	___ftdiv@f2+2,f,c
  6727  002AD2  0E18               	movlw	24
  6728  002AD4  6E3C               	movwf	___ftdiv@cntr,c
  6729  002AD6                     l2829:
  6730  002AD6  90D8               	bcf	status,0,c
  6731  002AD8  363D               	rlcf	___ftdiv@f3,f,c
  6732  002ADA  363E               	rlcf	___ftdiv@f3+1,f,c
  6733  002ADC  363F               	rlcf	___ftdiv@f3+2,f,c
  6734  002ADE  5036               	movf	___ftdiv@f2,w,c
  6735  002AE0  5C33               	subwf	___ftdiv@f1,w,c
  6736  002AE2  5037               	movf	___ftdiv@f2+1,w,c
  6737  002AE4  5834               	subwfb	___ftdiv@f1+1,w,c
  6738  002AE6  5038               	movf	___ftdiv@f2+2,w,c
  6739  002AE8  5835               	subwfb	___ftdiv@f1+2,w,c
  6740  002AEA  A0D8               	btfss	status,0,c
  6741  002AEC  D007               	goto	l640
  6742  002AEE  5036               	movf	___ftdiv@f2,w,c
  6743  002AF0  5E33               	subwf	___ftdiv@f1,f,c
  6744  002AF2  5037               	movf	___ftdiv@f2+1,w,c
  6745  002AF4  5A34               	subwfb	___ftdiv@f1+1,f,c
  6746  002AF6  5038               	movf	___ftdiv@f2+2,w,c
  6747  002AF8  5A35               	subwfb	___ftdiv@f1+2,f,c
  6748  002AFA  803D               	bsf	___ftdiv@f3,0,c
  6749  002AFC                     l640:
  6750  002AFC  90D8               	bcf	status,0,c
  6751  002AFE  3633               	rlcf	___ftdiv@f1,f,c
  6752  002B00  3634               	rlcf	___ftdiv@f1+1,f,c
  6753  002B02  3635               	rlcf	___ftdiv@f1+2,f,c
  6754  002B04  2E3C               	decfsz	___ftdiv@cntr,f,c
  6755  002B06  D7E7               	goto	l2829
  6756  002B08  C03D  F013         	movff	___ftdiv@f3,___ftpack@arg
  6757  002B0C  C03E  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6758  002B10  C03F  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6759  002B14  C040  F016         	movff	___ftdiv@exp,___ftpack@exp
  6760  002B18  C041  F017         	movff	___ftdiv@sign,___ftpack@sign
  6761  002B1C  ECFA  F015         	call	___ftpack	;wreg free
  6762  002B20  C013  F033         	movff	?___ftpack,?___ftdiv
  6763  002B24  C014  F034         	movff	?___ftpack+1,?___ftdiv+1
  6764  002B28  C015  F035         	movff	?___ftpack+2,?___ftdiv+2
  6765  002B2C  0012               	return	
  6766  002B2E                     __end_of___ftdiv:
  6767                           	opt stack 0
  6768                           tblptru	equ	0xFF8
  6769                           tblptrh	equ	0xFF7
  6770                           tblptrl	equ	0xFF6
  6771                           tablat	equ	0xFF5
  6772                           prodh	equ	0xFF4
  6773                           prodl	equ	0xFF3
  6774                           intcon	equ	0xFF2
  6775                           intcon2	equ	0xFF1
  6776                           postinc0	equ	0xFEE
  6777                           wreg	equ	0xFE8
  6778                           postdec1	equ	0xFE5
  6779                           fsr1l	equ	0xFE1
  6780                           postinc2	equ	0xFDE
  6781                           postdec2	equ	0xFDD
  6782                           plusw2	equ	0xFDB
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function ___ftpack *****************
  6788 ;; Defined at:
  6789 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  arg             3   18[COMRAM] unsigned um
  6792 ;;  exp             1   21[COMRAM] unsigned char 
  6793 ;;  sign            1   22[COMRAM] unsigned char 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;		None
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  3   18[COMRAM] float 
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6805 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;Total ram usage:        8 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    1
  6812 ;; This function calls:
  6813 ;;		Nothing
  6814 ;; This function is called by:
  6815 ;;		___awtoft
  6816 ;;		___ftadd
  6817 ;;		___ftdiv
  6818 ;;		___ftmul
  6819 ;;		___lltoft
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           	psect	text27
  6824  002BF4                     __ptext27:
  6825                           	opt stack 0
  6826  002BF4                     ___ftpack:
  6827                           	opt stack 25
  6828                           
  6829                           ;incstack = 0
  6830  002BF4  5016               	movf	___ftpack@exp,w,c
  6831  002BF6  B4D8               	btfsc	status,2,c
  6832  002BF8  D005               	goto	l2017
  6833  002BFA  5013               	movf	___ftpack@arg,w,c
  6834  002BFC  1014               	iorwf	___ftpack@arg+1,w,c
  6835  002BFE  1015               	iorwf	___ftpack@arg+2,w,c
  6836  002C00  A4D8               	btfss	status,2,c
  6837  002C02  D00C               	goto	l2023
  6838  002C04                     l2017:
  6839  002C04  0E00               	movlw	0
  6840  002C06  6E13               	movwf	?___ftpack,c
  6841  002C08  0E00               	movlw	0
  6842  002C0A  6E14               	movwf	?___ftpack+1,c
  6843  002C0C  0E00               	movlw	0
  6844  002C0E  6E15               	movwf	?___ftpack+2,c
  6845  002C10  0012               	return	
  6846  002C12                     l2021:
  6847  002C12  2A16               	incf	___ftpack@exp,f,c
  6848  002C14  90D8               	bcf	status,0,c
  6849  002C16  3215               	rrcf	___ftpack@arg+2,f,c
  6850  002C18  3214               	rrcf	___ftpack@arg+1,f,c
  6851  002C1A  3213               	rrcf	___ftpack@arg,f,c
  6852  002C1C                     l2023:
  6853  002C1C  0E00               	movlw	0
  6854  002C1E  1413               	andwf	___ftpack@arg,w,c
  6855  002C20  6E18               	movwf	??___ftpack& (0+255),c
  6856  002C22  0E00               	movlw	0
  6857  002C24  1414               	andwf	___ftpack@arg+1,w,c
  6858  002C26  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6859  002C28  0EFE               	movlw	254
  6860  002C2A  1415               	andwf	___ftpack@arg+2,w,c
  6861  002C2C  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6862  002C2E  5018               	movf	??___ftpack,w,c
  6863  002C30  1019               	iorwf	??___ftpack+1,w,c
  6864  002C32  101A               	iorwf	??___ftpack+2,w,c
  6865  002C34  B4D8               	btfsc	status,2,c
  6866  002C36  D00C               	goto	l2029
  6867  002C38  D7EC               	goto	l2021
  6868  002C3A                     l2025:
  6869  002C3A  2A16               	incf	___ftpack@exp,f,c
  6870  002C3C  0E01               	movlw	1
  6871  002C3E  2613               	addwf	___ftpack@arg,f,c
  6872  002C40  0E00               	movlw	0
  6873  002C42  2214               	addwfc	___ftpack@arg+1,f,c
  6874  002C44  0E00               	movlw	0
  6875  002C46  2215               	addwfc	___ftpack@arg+2,f,c
  6876  002C48  90D8               	bcf	status,0,c
  6877  002C4A  3215               	rrcf	___ftpack@arg+2,f,c
  6878  002C4C  3214               	rrcf	___ftpack@arg+1,f,c
  6879  002C4E  3213               	rrcf	___ftpack@arg,f,c
  6880  002C50                     l2029:
  6881  002C50  0E00               	movlw	0
  6882  002C52  1413               	andwf	___ftpack@arg,w,c
  6883  002C54  6E18               	movwf	??___ftpack& (0+255),c
  6884  002C56  0E00               	movlw	0
  6885  002C58  1414               	andwf	___ftpack@arg+1,w,c
  6886  002C5A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6887  002C5C  0EFF               	movlw	255
  6888  002C5E  1415               	andwf	___ftpack@arg+2,w,c
  6889  002C60  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6890  002C62  5018               	movf	??___ftpack,w,c
  6891  002C64  1019               	iorwf	??___ftpack+1,w,c
  6892  002C66  101A               	iorwf	??___ftpack+2,w,c
  6893  002C68  B4D8               	btfsc	status,2,c
  6894  002C6A  D006               	goto	l2033
  6895  002C6C  D7E6               	goto	l2025
  6896  002C6E                     l2031:
  6897  002C6E  0616               	decf	___ftpack@exp,f,c
  6898  002C70  90D8               	bcf	status,0,c
  6899  002C72  3613               	rlcf	___ftpack@arg,f,c
  6900  002C74  3614               	rlcf	___ftpack@arg+1,f,c
  6901  002C76  3615               	rlcf	___ftpack@arg+2,f,c
  6902  002C78                     l2033:
  6903  002C78  BE14               	btfsc	___ftpack@arg+1,7,c
  6904  002C7A  D003               	goto	l582
  6905  002C7C  0E02               	movlw	2
  6906  002C7E  6016               	cpfslt	___ftpack@exp,c
  6907  002C80  D7F6               	goto	l2031
  6908  002C82                     l582:
  6909  002C82  A016               	btfss	___ftpack@exp,0,c
  6910  002C84  9E14               	bcf	___ftpack@arg+1,7,c
  6911  002C86  90D8               	bcf	status,0,c
  6912  002C88  3216               	rrcf	___ftpack@exp,f,c
  6913  002C8A  5016               	movf	___ftpack@exp,w,c
  6914  002C8C  1215               	iorwf	___ftpack@arg+2,f,c
  6915  002C8E  5017               	movf	___ftpack@sign,w,c
  6916  002C90  A4D8               	btfss	status,2,c
  6917  002C92  8E15               	bsf	___ftpack@arg+2,7,c
  6918  002C94  C013  F013         	movff	___ftpack@arg,?___ftpack
  6919  002C98  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  6920  002C9C  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  6921  002CA0  0012               	return	
  6922  002CA2                     __end_of___ftpack:
  6923                           	opt stack 0
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           intcon	equ	0xFF2
  6931                           intcon2	equ	0xFF1
  6932                           postinc0	equ	0xFEE
  6933                           wreg	equ	0xFE8
  6934                           postdec1	equ	0xFE5
  6935                           fsr1l	equ	0xFE1
  6936                           postinc2	equ	0xFDE
  6937                           postdec2	equ	0xFDD
  6938                           plusw2	equ	0xFDB
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _LCDinit *****************
  6944 ;; Defined at:
  6945 ;;		line 60 in file "lcd.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      void 
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;Total ram usage:        1 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    2
  6966 ;; This function calls:
  6967 ;;		_LCDcheckBF
  6968 ;;		_LCDcmd
  6969 ;; This function is called by:
  6970 ;;		_main
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text28
  6975  002B2E                     __ptext28:
  6976                           	opt stack 0
  6977  002B2E                     _LCDinit:
  6978                           	opt stack 28
  6979                           
  6980                           ;lcd.c: 63: TRISA = 0;
  6981                           
  6982                           ;incstack = 0
  6983  002B2E  0E00               	movlw	0
  6984  002B30  6E92               	movwf	3986,c	;volatile
  6985                           
  6986                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  6987  002B32  9096               	bcf	3990,0,c	;volatile
  6988                           
  6989                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  6990  002B34  9296               	bcf	3990,1,c	;volatile
  6991                           
  6992                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  6993  002B36  9496               	bcf	3990,2,c	;volatile
  6994                           
  6995                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  6996  002B38  908D               	bcf	3981,0,c	;volatile
  6997                           
  6998                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  6999  002B3A  928D               	bcf	3981,1,c	;volatile
  7000                           
  7001                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  7002  002B3C  848D               	bsf	3981,2,c	;volatile
  7003                           
  7004                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  7005  002B3E  0E21               	movlw	33
  7006  002B40  6E14               	movwf	??_LCDinit& (0+255),c
  7007  002B42  0E76               	movlw	118
  7008  002B44                     u2857:
  7009  002B44  2EE8               	decfsz	wreg,f,c
  7010  002B46  D7FE               	goto	u2857
  7011  002B48  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7012  002B4A  D7FC               	goto	u2857
  7013  002B4C  D000               	nop2	
  7014                           
  7015                           ;lcd.c: 74: LCDcmd(0b00110000);
  7016  002B4E  0E30               	movlw	48
  7017  002B50  ECCD  F018         	call	_LCDcmd
  7018                           
  7019                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  7020  002B54  0E27               	movlw	39
  7021  002B56  6E14               	movwf	??_LCDinit& (0+255),c
  7022  002B58  0EF5               	movlw	245
  7023  002B5A                     u2867:
  7024  002B5A  2EE8               	decfsz	wreg,f,c
  7025  002B5C  D7FE               	goto	u2867
  7026  002B5E  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7027  002B60  D7FC               	goto	u2867
  7028  002B62  F000               	nop	
  7029                           
  7030                           ;lcd.c: 76: LCDcmd(0b00110000);
  7031  002B64  0E30               	movlw	48
  7032  002B66  ECCD  F018         	call	_LCDcmd
  7033                           
  7034                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  7035  002B6A  0E27               	movlw	39
  7036  002B6C  6E14               	movwf	??_LCDinit& (0+255),c
  7037  002B6E  0EF5               	movlw	245
  7038  002B70                     u2877:
  7039  002B70  2EE8               	decfsz	wreg,f,c
  7040  002B72  D7FE               	goto	u2877
  7041  002B74  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7042  002B76  D7FC               	goto	u2877
  7043  002B78  F000               	nop	
  7044                           
  7045                           ;lcd.c: 78: LCDcmd(0b00110000);
  7046  002B7A  0E30               	movlw	48
  7047  002B7C  ECCD  F018         	call	_LCDcmd
  7048                           
  7049                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  7050  002B80  0E27               	movlw	39
  7051  002B82  6E14               	movwf	??_LCDinit& (0+255),c
  7052  002B84  0EF5               	movlw	245
  7053  002B86                     u2887:
  7054  002B86  2EE8               	decfsz	wreg,f,c
  7055  002B88  D7FE               	goto	u2887
  7056  002B8A  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7057  002B8C  D7FC               	goto	u2887
  7058  002B8E  F000               	nop	
  7059                           
  7060                           ;lcd.c: 80: LCDcmd(0b00111000);
  7061  002B90  0E38               	movlw	56
  7062  002B92  ECCD  F018         	call	_LCDcmd
  7063                           
  7064                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  7065  002B96  0E27               	movlw	39
  7066  002B98  6E14               	movwf	??_LCDinit& (0+255),c
  7067  002B9A  0EF5               	movlw	245
  7068  002B9C                     u2897:
  7069  002B9C  2EE8               	decfsz	wreg,f,c
  7070  002B9E  D7FE               	goto	u2897
  7071  002BA0  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7072  002BA2  D7FC               	goto	u2897
  7073  002BA4  F000               	nop	
  7074                           
  7075                           ;lcd.c: 82: LCDcmd(0b00001000);
  7076  002BA6  0E08               	movlw	8
  7077  002BA8  ECCD  F018         	call	_LCDcmd
  7078                           
  7079                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  7080  002BAC  0E27               	movlw	39
  7081  002BAE  6E14               	movwf	??_LCDinit& (0+255),c
  7082  002BB0  0EF5               	movlw	245
  7083  002BB2                     u2907:
  7084  002BB2  2EE8               	decfsz	wreg,f,c
  7085  002BB4  D7FE               	goto	u2907
  7086  002BB6  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7087  002BB8  D7FC               	goto	u2907
  7088  002BBA  F000               	nop	
  7089                           
  7090                           ;lcd.c: 84: LCDcmd(0b00000001);
  7091  002BBC  0E01               	movlw	1
  7092  002BBE  ECCD  F018         	call	_LCDcmd
  7093                           
  7094                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  7095  002BC2  0E27               	movlw	39
  7096  002BC4  6E14               	movwf	??_LCDinit& (0+255),c
  7097  002BC6  0EF5               	movlw	245
  7098  002BC8                     u2917:
  7099  002BC8  2EE8               	decfsz	wreg,f,c
  7100  002BCA  D7FE               	goto	u2917
  7101  002BCC  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7102  002BCE  D7FC               	goto	u2917
  7103  002BD0  F000               	nop	
  7104                           
  7105                           ;lcd.c: 86: LCDcmd(0b00000110);
  7106  002BD2  0E06               	movlw	6
  7107  002BD4  ECCD  F018         	call	_LCDcmd
  7108                           
  7109                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  7110  002BD8  0E27               	movlw	39
  7111  002BDA  6E14               	movwf	??_LCDinit& (0+255),c
  7112  002BDC  0EF5               	movlw	245
  7113  002BDE                     u2927:
  7114  002BDE  2EE8               	decfsz	wreg,f,c
  7115  002BE0  D7FE               	goto	u2927
  7116  002BE2  2E14               	decfsz	??_LCDinit& (0+255),f,c
  7117  002BE4  D7FC               	goto	u2927
  7118  002BE6  F000               	nop	
  7119                           
  7120                           ;lcd.c: 90: LCDcmd(0b00001111);
  7121  002BE8  0E0F               	movlw	15
  7122  002BEA  ECCD  F018         	call	_LCDcmd
  7123                           
  7124                           ;lcd.c: 91: LCDcheckBF();
  7125  002BEE  ECA1  F018         	call	_LCDcheckBF	;wreg free
  7126  002BF2  0012               	return		;funcret
  7127  002BF4                     __end_of_LCDinit:
  7128                           	opt stack 0
  7129                           tblptru	equ	0xFF8
  7130                           tblptrh	equ	0xFF7
  7131                           tblptrl	equ	0xFF6
  7132                           tablat	equ	0xFF5
  7133                           prodh	equ	0xFF4
  7134                           prodl	equ	0xFF3
  7135                           intcon	equ	0xFF2
  7136                           intcon2	equ	0xFF1
  7137                           postinc0	equ	0xFEE
  7138                           wreg	equ	0xFE8
  7139                           postdec1	equ	0xFE5
  7140                           fsr1l	equ	0xFE1
  7141                           postinc2	equ	0xFDE
  7142                           postdec2	equ	0xFDD
  7143                           plusw2	equ	0xFDB
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function _LCDgotoLineTwo *****************
  7149 ;; Defined at:
  7150 ;;		line 142 in file "lcd.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;		None
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;		None
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      void 
  7157 ;; Registers used:
  7158 ;;		wreg, cstack
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;Total ram usage:        0 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    2
  7171 ;; This function calls:
  7172 ;;		_LCDcheckBF
  7173 ;;		_LCDcmd
  7174 ;; This function is called by:
  7175 ;;		_main
  7176 ;;		_LCDputs
  7177 ;;		_LCDwriteLineTwo
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text29
  7182  00317A                     __ptext29:
  7183                           	opt stack 0
  7184  00317A                     _LCDgotoLineTwo:
  7185                           	opt stack 28
  7186                           
  7187                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  7188                           
  7189                           ;incstack = 0
  7190  00317A  908D               	bcf	3981,0,c	;volatile
  7191                           
  7192                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  7193  00317C  928D               	bcf	3981,1,c	;volatile
  7194                           
  7195                           ;lcd.c: 146: LCDcmd(0b11000000);
  7196  00317E  0EC0               	movlw	192
  7197  003180  ECCD  F018         	call	_LCDcmd
  7198                           
  7199                           ;lcd.c: 147: LCDcheckBF();
  7200  003184  ECA1  F018         	call	_LCDcheckBF	;wreg free
  7201  003188  0012               	return		;funcret
  7202  00318A                     __end_of_LCDgotoLineTwo:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           intcon2	equ	0xFF1
  7212                           postinc0	equ	0xFEE
  7213                           wreg	equ	0xFE8
  7214                           postdec1	equ	0xFE5
  7215                           fsr1l	equ	0xFE1
  7216                           postinc2	equ	0xFDE
  7217                           postdec2	equ	0xFDD
  7218                           plusw2	equ	0xFDB
  7219                           fsr2h	equ	0xFDA
  7220                           fsr2l	equ	0xFD9
  7221                           status	equ	0xFD8
  7222                           
  7223 ;; *************** function _LCDclear *****************
  7224 ;; Defined at:
  7225 ;;		line 126 in file "lcd.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;		None
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  1    wreg      void 
  7232 ;; Registers used:
  7233 ;;		wreg, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7243 ;;Total ram usage:        0 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    2
  7246 ;; This function calls:
  7247 ;;		_LCDcheckBF
  7248 ;;		_LCDcmd
  7249 ;; This function is called by:
  7250 ;;		_main
  7251 ;;		_LCDputs
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           	psect	text30
  7256  00318A                     __ptext30:
  7257                           	opt stack 0
  7258  00318A                     _LCDclear:
  7259                           	opt stack 28
  7260                           
  7261                           ;lcd.c: 128: LATEbits.LATE0 = 0;
  7262                           
  7263                           ;incstack = 0
  7264  00318A  908D               	bcf	3981,0,c	;volatile
  7265                           
  7266                           ;lcd.c: 129: LATEbits.LATE1 = 0;
  7267  00318C  928D               	bcf	3981,1,c	;volatile
  7268                           
  7269                           ;lcd.c: 130: LCDcmd(0b00000001);
  7270  00318E  0E01               	movlw	1
  7271  003190  ECCD  F018         	call	_LCDcmd
  7272                           
  7273                           ;lcd.c: 131: LCDcheckBF();
  7274  003194  ECA1  F018         	call	_LCDcheckBF	;wreg free
  7275  003198  0012               	return		;funcret
  7276  00319A                     __end_of_LCDclear:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           intcon2	equ	0xFF1
  7286                           postinc0	equ	0xFEE
  7287                           wreg	equ	0xFE8
  7288                           postdec1	equ	0xFE5
  7289                           fsr1l	equ	0xFE1
  7290                           postinc2	equ	0xFDE
  7291                           postdec2	equ	0xFDD
  7292                           plusw2	equ	0xFDB
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8
  7296                           
  7297 ;; *************** function _LCDcmd *****************
  7298 ;; Defined at:
  7299 ;;		line 94 in file "lcd.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  command         1    wreg     unsigned char 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;  command         1   18[COMRAM] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      void 
  7306 ;; Registers used:
  7307 ;;		wreg
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;Total ram usage:        1 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    1
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_LCDinit
  7324 ;;		_LCDwrite
  7325 ;;		_LCDclear
  7326 ;;		_LCDgotoLineTwo
  7327 ;;		_LCDgotoLineOne
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text31
  7332  00319A                     __ptext31:
  7333                           	opt stack 0
  7334  00319A                     _LCDcmd:
  7335                           	opt stack 26
  7336                           
  7337                           ;incstack = 0
  7338                           ;LCDcmd@command stored from wreg
  7339  00319A  6E13               	movwf	LCDcmd@command,c
  7340                           
  7341                           ;lcd.c: 96: LATA = command;
  7342  00319C  C013  FF89         	movff	LCDcmd@command,3977	;volatile
  7343                           
  7344                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  7345  0031A0  948D               	bcf	3981,2,c	;volatile
  7346                           
  7347                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  7348  0031A2  848D               	bsf	3981,2,c	;volatile
  7349  0031A4  0012               	return		;funcret
  7350  0031A6                     __end_of_LCDcmd:
  7351                           	opt stack 0
  7352                           tblptru	equ	0xFF8
  7353                           tblptrh	equ	0xFF7
  7354                           tblptrl	equ	0xFF6
  7355                           tablat	equ	0xFF5
  7356                           prodh	equ	0xFF4
  7357                           prodl	equ	0xFF3
  7358                           intcon	equ	0xFF2
  7359                           intcon2	equ	0xFF1
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           postdec1	equ	0xFE5
  7363                           fsr1l	equ	0xFE1
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           plusw2	equ	0xFDB
  7367                           fsr2h	equ	0xFDA
  7368                           fsr2l	equ	0xFD9
  7369                           status	equ	0xFD8
  7370                           
  7371 ;; *************** function _LCDcheckBF *****************
  7372 ;; Defined at:
  7373 ;;		line 101 in file "lcd.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;		None
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;		None
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  1    wreg      void 
  7380 ;; Registers used:
  7381 ;;		None
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;Total ram usage:        0 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    1
  7394 ;; This function calls:
  7395 ;;		Nothing
  7396 ;; This function is called by:
  7397 ;;		_LCDinit
  7398 ;;		_LCDwrite
  7399 ;;		_LCDclear
  7400 ;;		_LCDgotoLineTwo
  7401 ;;		_LCDgotoLineOne
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           	psect	text32
  7406  003142                     __ptext32:
  7407                           	opt stack 0
  7408  003142                     _LCDcheckBF:
  7409                           	opt stack 26
  7410                           
  7411                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  7412                           
  7413                           ;incstack = 0
  7414  003142  8E92               	bsf	3986,7,c	;volatile
  7415                           
  7416                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  7417  003144  908D               	bcf	3981,0,c	;volatile
  7418                           
  7419                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  7420  003146  828D               	bsf	3981,1,c	;volatile
  7421  003148                     l283:
  7422                           
  7423                           ;lcd.c: 110: {
  7424                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  7425  003148  948D               	bcf	3981,2,c	;volatile
  7426                           
  7427                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  7428  00314A  848D               	bsf	3981,2,c	;volatile
  7429  00314C  BE80               	btfsc	3968,7,c	;volatile
  7430  00314E  D7FC               	goto	l283
  7431                           
  7432                           ;lcd.c: 113: }
  7433                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  7434  003150  848D               	bsf	3981,2,c	;volatile
  7435                           
  7436                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  7437  003152  9E92               	bcf	3986,7,c	;volatile
  7438  003154  0012               	return		;funcret
  7439  003156                     __end_of_LCDcheckBF:
  7440                           	opt stack 0
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           intcon	equ	0xFF2
  7448                           intcon2	equ	0xFF1
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           plusw2	equ	0xFDB
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _ISR *****************
  7461 ;; Defined at:
  7462 ;;		line 301 in file "main.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  dummy           1   17[COMRAM] unsigned char 
  7467 ;;  dummy           1   16[COMRAM] unsigned char 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, status,2, status,0
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;Total ram usage:       18 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; This function calls:
  7484 ;;		Nothing
  7485 ;; This function is called by:
  7486 ;;		Interrupt level 2
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	intcode
  7491  000008                     __pintcode:
  7492                           	opt stack 0
  7493  000008                     _ISR:
  7494                           	opt stack 24
  7495                           
  7496                           ;incstack = 0
  7497  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7498  00000A  CFFA F003          	movff	pclath,??_ISR+2
  7499  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  7500  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  7501  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  7502  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  7503  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  7504  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  7505  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  7506  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  7507  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  7508  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  7509  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  7510  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  7511  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  7512                           
  7513                           ;main.c: 304: if (CCP2IE && CCP2IF)
  7514  000042  B0A0               	btfsc	4000,0,c	;volatile
  7515  000044  A0A1               	btfss	4001,0,c	;volatile
  7516  000046  D01E               	goto	i2l174
  7517                           
  7518                           ;main.c: 305: {
  7519                           ;main.c: 307: if(LATDbits.LATD1 == 1)
  7520  000048  A28C               	btfss	3980,1,c	;volatile
  7521  00004A  D010               	goto	i2l175
  7522                           
  7523                           ;main.c: 308: {
  7524                           ;main.c: 309: LATDbits.LATD1 = 0;
  7525  00004C  928C               	bcf	3980,1,c	;volatile
  7526                           
  7527                           ;main.c: 310: CCPR2 = 8000 - CCPR2;
  7528  00004E  CF67 F001          	movff	3943,??_ISR	;volatile
  7529  000052  CF68 F002          	movff	3944,??_ISR+1	;volatile
  7530  000056  1E01               	comf	??_ISR,f,c
  7531  000058  1E02               	comf	??_ISR+1,f,c
  7532  00005A  4A01               	infsnz	??_ISR,f,c
  7533  00005C  2A02               	incf	??_ISR+1,f,c
  7534  00005E  0E40               	movlw	64
  7535  000060  2401               	addwf	??_ISR,w,c
  7536  000062  6E67               	movwf	3943,c	;volatile
  7537  000064  0E1F               	movlw	31
  7538  000066  2002               	addwfc	??_ISR+1,w,c
  7539  000068  6E68               	movwf	3944,c	;volatile
  7540                           
  7541                           ;main.c: 311: }
  7542  00006A  D005               	goto	i2l2913
  7543  00006C                     i2l175:
  7544                           
  7545                           ;main.c: 312: else
  7546                           ;main.c: 313: {
  7547                           ;main.c: 314: LATDbits.LATD1 = 1;
  7548  00006C  828C               	bsf	3980,1,c	;volatile
  7549                           
  7550                           ;main.c: 315: CCPR2 = leftWheelCommandedPW;
  7551  00006E  C047  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  7552  000072  C048  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  7553  000076                     i2l2913:
  7554                           
  7555                           ;main.c: 316: }
  7556                           ;main.c: 317: TMR5 = 0;
  7557  000076  0E00               	movlw	0
  7558  000078  010F               	movlb	15	; () banked
  7559  00007A  6F50               	movwf	80,b	;volatile
  7560  00007C  0E00               	movlw	0
  7561  00007E  6F4F               	movwf	79,b	;volatile
  7562                           
  7563                           ; BSR set to: 15
  7564                           ;main.c: 318: CCP2IF = 0;
  7565  000080  90A1               	bcf	4001,0,c	;volatile
  7566                           
  7567                           ; BSR set to: 15
  7568                           ;main.c: 319: return;
  7569  000082  D061               	goto	i2l177
  7570  000084                     i2l174:
  7571                           
  7572                           ;main.c: 320: }
  7573                           ;main.c: 324: if (CCP3IE && CCP3IF)
  7574  000084  B07A               	btfsc	3962,0,c	;volatile
  7575  000086  A07B               	btfss	3963,0,c	;volatile
  7576  000088  D01F               	goto	i2l178
  7577                           
  7578                           ;main.c: 325: {
  7579                           ;main.c: 327: if(LATDbits.LATD0 == 1)
  7580  00008A  A08C               	btfss	3980,0,c	;volatile
  7581  00008C  D012               	goto	i2l179
  7582                           
  7583                           ;main.c: 328: {
  7584                           ;main.c: 329: LATDbits.LATD0 = 0;
  7585  00008E  908C               	bcf	3980,0,c	;volatile
  7586                           
  7587                           ;main.c: 330: CCPR3 = 8000 - CCPR3;
  7588  000090  CF5E F001          	movff	3934,??_ISR	;volatile
  7589  000094  CF5F F002          	movff	3935,??_ISR+1	;volatile
  7590  000098  1E01               	comf	??_ISR,f,c
  7591  00009A  1E02               	comf	??_ISR+1,f,c
  7592  00009C  4A01               	infsnz	??_ISR,f,c
  7593  00009E  2A02               	incf	??_ISR+1,f,c
  7594  0000A0  0E40               	movlw	64
  7595  0000A2  2401               	addwf	??_ISR,w,c
  7596  0000A4  010F               	movlb	15	; () banked
  7597  0000A6  6F5E               	movwf	94,b	;volatile
  7598  0000A8  0E1F               	movlw	31
  7599  0000AA  2002               	addwfc	??_ISR+1,w,c
  7600  0000AC  010F               	movlb	15	; () banked
  7601  0000AE  6F5F               	movwf	95,b	;volatile
  7602                           
  7603                           ;main.c: 331: }
  7604  0000B0  D005               	goto	i2l180
  7605  0000B2                     i2l179:
  7606                           
  7607                           ;main.c: 332: else
  7608                           ;main.c: 333: {
  7609                           ;main.c: 334: LATDbits.LATD0 = 1;
  7610  0000B2  808C               	bsf	3980,0,c	;volatile
  7611                           
  7612                           ;main.c: 335: CCPR3 = rightWheelCommandedPW;
  7613  0000B4  C049  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  7614  0000B8  C04A  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  7615  0000BC                     i2l180:
  7616                           
  7617                           ;main.c: 336: }
  7618                           ;main.c: 337: CCP3IF = 0;
  7619  0000BC  907B               	bcf	3963,0,c	;volatile
  7620                           
  7621                           ;main.c: 338: TMR1 = 0;
  7622  0000BE  0E00               	movlw	0
  7623  0000C0  6ECF               	movwf	4047,c	;volatile
  7624  0000C2  0E00               	movlw	0
  7625  0000C4  6ECE               	movwf	4046,c	;volatile
  7626                           
  7627                           ;main.c: 340: return;
  7628  0000C6  D03F               	goto	i2l177
  7629  0000C8                     i2l178:
  7630                           
  7631                           ;main.c: 343: }
  7632                           ;main.c: 348: if(C1IF && C1IE)
  7633  0000C8  BCA1               	btfsc	4001,6,c	;volatile
  7634  0000CA  ACA0               	btfss	4000,6,c	;volatile
  7635  0000CC  D00A               	goto	i2l2939
  7636                           
  7637                           ;main.c: 349: {
  7638                           ;main.c: 350: leftWheelCount++;
  7639  0000CE  0E01               	movlw	1
  7640  0000D0  0100               	movlb	0	; () banked
  7641  0000D2  27B3               	addwf	_leftWheelCount& (0+255),f,b
  7642  0000D4  0E00               	movlw	0
  7643  0000D6  23B4               	addwfc	(_leftWheelCount+1)& (0+255),f,b
  7644  0000D8  23B5               	addwfc	(_leftWheelCount+2)& (0+255),f,b
  7645  0000DA  23B6               	addwfc	(_leftWheelCount+3)& (0+255),f,b
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;main.c: 351: char dummy = CM1CON0;
  7649  0000DC  CF79 F011          	movff	3961,ISR@dummy	;volatile
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;main.c: 352: C1IF = 0;
  7653  0000E0  9CA1               	bcf	4001,6,c	;volatile
  7654  0000E2                     i2l2939:
  7655                           
  7656                           ;main.c: 353: }
  7657                           ;main.c: 354: if(C2IF && C2IE)
  7658  0000E2  BAA1               	btfsc	4001,5,c	;volatile
  7659  0000E4  AAA0               	btfss	4000,5,c	;volatile
  7660  0000E6  D00A               	goto	i2l2949
  7661                           
  7662                           ;main.c: 355: {
  7663                           ;main.c: 356: rightWheelCount++;
  7664  0000E8  0E01               	movlw	1
  7665  0000EA  0100               	movlb	0	; () banked
  7666  0000EC  27B7               	addwf	_rightWheelCount& (0+255),f,b
  7667  0000EE  0E00               	movlw	0
  7668  0000F0  23B8               	addwfc	(_rightWheelCount+1)& (0+255),f,b
  7669  0000F2  23B9               	addwfc	(_rightWheelCount+2)& (0+255),f,b
  7670  0000F4  23BA               	addwfc	(_rightWheelCount+3)& (0+255),f,b
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;main.c: 358: char dummy = CM2CON0;
  7674  0000F6  CF78 F012          	movff	3960,ISR@dummy_1057	;volatile
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;main.c: 359: C2IF = 0;
  7678  0000FA  9AA1               	bcf	4001,5,c	;volatile
  7679  0000FC                     i2l2949:
  7680                           
  7681                           ;main.c: 360: }
  7682                           ;main.c: 365: if (TMR2IE && TMR2IF)
  7683  0000FC  B29D               	btfsc	3997,1,c	;volatile
  7684  0000FE  A29E               	btfss	3998,1,c	;volatile
  7685  000100  D009               	goto	i2l183
  7686                           
  7687                           ;main.c: 366: {
  7688                           ;main.c: 367: elapsedMillis++;
  7689  000102  0E01               	movlw	1
  7690  000104  0100               	movlb	0	; () banked
  7691  000106  27AF               	addwf	_elapsedMillis& (0+255),f,b
  7692  000108  0E00               	movlw	0
  7693  00010A  23B0               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  7694  00010C  23B1               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  7695  00010E  23B2               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;main.c: 368: PIR1bits.TMR2IF = 0;
  7699  000110  929E               	bcf	3998,1,c	;volatile
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;main.c: 369: return;
  7703  000112  D019               	goto	i2l177
  7704  000114                     i2l183:
  7705                           
  7706                           ;main.c: 370: }
  7707                           ;main.c: 373: if(INT0IF && INT0IE)
  7708  000114  B2F2               	btfsc	intcon,1,c	;volatile
  7709  000116  A8F2               	btfss	intcon,4,c	;volatile
  7710  000118  D016               	goto	i2l177
  7711                           
  7712                           ;main.c: 374: {
  7713                           ;main.c: 375: event++;
  7714  00011A  0100               	movlb	0	; () banked
  7715  00011C  4BBF               	infsnz	_event& (0+255),f,b
  7716  00011E  2BC0               	incf	(_event+1)& (0+255),f,b
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;main.c: 376: INT0IF = 0;
  7720  000120  92F2               	bcf	intcon,1,c	;volatile
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;main.c: 377: leftWheelCount = 0;
  7724  000122  0E00               	movlw	0
  7725  000124  0100               	movlb	0	; () banked
  7726  000126  6FB3               	movwf	_leftWheelCount& (0+255),b
  7727  000128  0E00               	movlw	0
  7728  00012A  6FB4               	movwf	(_leftWheelCount+1)& (0+255),b
  7729  00012C  0E00               	movlw	0
  7730  00012E  6FB5               	movwf	(_leftWheelCount+2)& (0+255),b
  7731  000130  0E00               	movlw	0
  7732  000132  6FB6               	movwf	(_leftWheelCount+3)& (0+255),b
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;main.c: 378: rightWheelCount = 0;
  7736  000134  0E00               	movlw	0
  7737  000136  0100               	movlb	0	; () banked
  7738  000138  6FB7               	movwf	_rightWheelCount& (0+255),b
  7739  00013A  0E00               	movlw	0
  7740  00013C  6FB8               	movwf	(_rightWheelCount+1)& (0+255),b
  7741  00013E  0E00               	movlw	0
  7742  000140  6FB9               	movwf	(_rightWheelCount+2)& (0+255),b
  7743  000142  0E00               	movlw	0
  7744  000144  6FBA               	movwf	(_rightWheelCount+3)& (0+255),b
  7745  000146                     i2l177:
  7746  000146  C010  FFF5         	movff	??_ISR+15,tablat
  7747  00014A  C00F  FFF8         	movff	??_ISR+14,tblptru
  7748  00014E  C00E  FFF7         	movff	??_ISR+13,tblptrh
  7749  000152  C00D  FFF6         	movff	??_ISR+12,tblptrl
  7750  000156  C00C  FFF4         	movff	??_ISR+11,prodh
  7751  00015A  C00B  FFF3         	movff	??_ISR+10,prodl
  7752  00015E  C00A  FFDA         	movff	??_ISR+9,fsr2h
  7753  000162  C009  FFD9         	movff	??_ISR+8,fsr2l
  7754  000166  C008  FFE2         	movff	??_ISR+7,fsr1h
  7755  00016A  C007  FFE1         	movff	??_ISR+6,fsr1l
  7756  00016E  C006  FFEA         	movff	??_ISR+5,fsr0h
  7757  000172  C005  FFE9         	movff	??_ISR+4,fsr0l
  7758  000176  C004  FFFB         	movff	??_ISR+3,pclatu
  7759  00017A  C003  FFFA         	movff	??_ISR+2,pclath
  7760  00017E  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7761  000180  0011               	retfie		f
  7762  000182                     __end_of_ISR:
  7763                           	opt stack 0
  7764                           pclatu	equ	0xFFB
  7765                           pclath	equ	0xFFA
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           intcon2	equ	0xFF1
  7774                           postinc0	equ	0xFEE
  7775                           fsr0h	equ	0xFEA
  7776                           fsr0l	equ	0xFE9
  7777                           wreg	equ	0xFE8
  7778                           postdec1	equ	0xFE5
  7779                           fsr1h	equ	0xFE2
  7780                           fsr1l	equ	0xFE1
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           plusw2	equ	0xFDB
  7784                           fsr2h	equ	0xFDA
  7785                           fsr2l	equ	0xFD9
  7786                           status	equ	0xFD8
  7787                           pclatu	equ	0xFFB
  7788                           pclath	equ	0xFFA
  7789                           tblptru	equ	0xFF8
  7790                           tblptrh	equ	0xFF7
  7791                           tblptrl	equ	0xFF6
  7792                           tablat	equ	0xFF5
  7793                           prodh	equ	0xFF4
  7794                           prodl	equ	0xFF3
  7795                           intcon	equ	0xFF2
  7796                           intcon2	equ	0xFF1
  7797                           postinc0	equ	0xFEE
  7798                           fsr0h	equ	0xFEA
  7799                           fsr0l	equ	0xFE9
  7800                           wreg	equ	0xFE8
  7801                           postdec1	equ	0xFE5
  7802                           fsr1h	equ	0xFE2
  7803                           fsr1l	equ	0xFE1
  7804                           postinc2	equ	0xFDE
  7805                           postdec2	equ	0xFDD
  7806                           plusw2	equ	0xFDB
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           
  7811                           	psect	rparam
  7812  0000                     pclatu	equ	0xFFB
  7813                           pclath	equ	0xFFA
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           intcon	equ	0xFF2
  7821                           intcon2	equ	0xFF1
  7822                           postinc0	equ	0xFEE
  7823                           fsr0h	equ	0xFEA
  7824                           fsr0l	equ	0xFE9
  7825                           wreg	equ	0xFE8
  7826                           postdec1	equ	0xFE5
  7827                           fsr1h	equ	0xFE2
  7828                           fsr1l	equ	0xFE1
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           plusw2	equ	0xFDB
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836                           	psect	temp
  7837  00004D                     btemp:
  7838                           	opt stack 0
  7839  00004D                     	ds	1
  7840  0000                     int$flags	set	btemp
  7841                           pclatu	equ	0xFFB
  7842                           pclath	equ	0xFFA
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           intcon2	equ	0xFF1
  7851                           postinc0	equ	0xFEE
  7852                           fsr0h	equ	0xFEA
  7853                           fsr0l	equ	0xFE9
  7854                           wreg	equ	0xFE8
  7855                           postdec1	equ	0xFE5
  7856                           fsr1h	equ	0xFE2
  7857                           fsr1l	equ	0xFE1
  7858                           postinc2	equ	0xFDE
  7859                           postdec2	equ	0xFDD
  7860                           plusw2	equ	0xFDB
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8


Data Sizes:
    Strings     57
    Constant    10
    Data        21
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     70      76
    BANK0           160     79     129
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[5]), STR_4(CODE[10]), STR_3(CODE[16]), STR_2(CODE[15]), 
		 -> STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@speedCompensation	PTR int  size(2) Largest target is 2
		 -> driveStraight@speedCompensation(BANK0[2]), driveLargeCircle@speedCompensation(BANK0[2]), driveStationaryCircle@speedCompensation(BANK0[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> driveStraight@rightWheelCommandedSpeed(BANK0[2]), driveLargeCircle@rightWheelCommandedSpeed(BANK0[2]), driveStationaryCircle@rightWheelCommandedSpeed(BANK0[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> driveStraight@leftWheelCommandedSpeed(BANK0[2]), driveLargeCircle@leftWheelCommandedSpeed(BANK0[2]), driveStationaryCircle@leftWheelCommandedSpeed(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_excerciseControl
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    _driveStraight->___ftsub
    _driveStationaryCircle->___ftsub
    _sqrt->___ftsub
    ___ftsub->___ftadd
    ___lltoft->___ftpack
    ___fttol->___ftsub
    ___ftneg->___ftadd
    ___ftmul->___lltoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___ftdiv->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd
    _LCDclear->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _excerciseControl->_driveStationaryCircle
    _excerciseControl->_driveStraight
    _driveStraight->_wheelVelocity
    _driveStationaryCircle->_wheelVelocity
    _driveLargeCircle->_wheelVelocity
    _wheelVelocity->___fttol
    ___fttol->_sqrt

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0  110844
                                             55 BANK0     24    24      0
                           _LCDclear
                     _LCDgotoLineTwo
                            _LCDinit
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
               _configureComparators
                    _configureTimers
                   _excerciseControl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    1954
                                             30 COMRAM    17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             20 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _excerciseControl                                     2     2      0   98684
                                             68 COMRAM     2     2      0
                   _driveLargeCircle
              _driveStationaryCircle
                      _driveStraight
 ---------------------------------------------------------------------------------
 (2) _driveStraight                                       16    16      0   41068
                                             42 BANK0     13    13      0
                           ___awtoft
                            ___ftadd
                            ___ftsub
                            ___fttol
                           ___lltoft
                   _limitWheelSpeeds
                               _sqrt
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (2) _driveStationaryCircle                               16    16      0   41068
                                             42 BANK0     13    13      0
                           ___awtoft
                            ___ftadd
                            ___ftsub
                            ___fttol
                           ___lltoft
                   _limitWheelSpeeds
                               _sqrt
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                19    16      3    9705
                                              0 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4884
                                             62 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     264
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2690
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _driveLargeCircle                                     8     8      0   16548
                                             42 BANK0      8     8      0
                             ___lmul
                   _limitWheelSpeeds
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (3) _wheelVelocity                                        8     4      4   15002
                                             34 BANK0      8     4      4
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     764
                                             19 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                             62 COMRAM     3     0      3
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3689
                                             35 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4331
                                             50 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2648
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _limitWheelSpeeds                                     8     2      6     840
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     706
                                             18 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _configureTimers                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureComparators                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2747
                                             50 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2109
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDclear                                             0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 18    18      0       2
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDcheckBF
     _LCDcmd
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftsub (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
     _sqrt (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
   ___lltoft
     ___ftpack
   _configureComparators
   _configureTimers
   _excerciseControl
     _driveLargeCircle
       ___lmul
       _limitWheelSpeeds
       _wheelVelocity
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _sqrt (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
     _driveStationaryCircle
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _sqrt (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _limitWheelSpeeds
       _sqrt
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       _wheelVelocity
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _sqrt (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
     _driveStraight
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _sqrt (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _limitWheelSpeeds
       _sqrt
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       _wheelVelocity
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _sqrt (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      81       5       80.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     46      4C       1       80.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CD      12        0.0%
DATA                 0      0      CD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Apr 28 15:07:07 2016

                       __size_of_driveStraight 0450                            ___wmul@multiplicand 0015  
                                 __CFG_CP0$OFF 000000                                   __CFG_CP1$OFF 000000  
                                 __CFG_CP2$OFF 000000                                   __CFG_CP3$OFF 000000  
                                 ___ftadd@exp1 003E                                   ___ftadd@exp2 003D  
                                  __CFG_LVP$ON 000000                                   ___ftadd@sign 003C  
                                          l151 19F0                                            l283 3148  
                                          l620 2568                                            l605 248E  
                                          l640 2AFC                                            l609 24B8  
                                          l629 2584                                            l582 2C82  
                                          l662 3116                                            l912 22DE  
                                          l913 22CA                                            l765 3016  
                                          l775 3058                                   __CFG_CPB$OFF 000000  
                                          _PR2 000FBB                                   __CFG_CPD$OFF 000000  
                                          _ISR 0008                                    ?_LCDcheckBF 0001  
                                          wreg 000FE8                                           ?_ISR 0001  
                                 ___ftdiv@cntr 003C                                   ___ftdiv@sign 0041  
                                         _C1IE 007D06                                           _C1IF 007D0E  
                                         l2021 2C12                                           l2031 2C6E  
                                         l2023 2C1C                                           _C2IE 007D05  
                                         _C2IF 007D0D                                           l2033 2C78  
                                         l2025 2C3A                                           l2017 2C04  
                                         l2105 25A0                                           l2115 25D0  
                                         l2203 2DAA                                           l2029 2C50  
                                         l2133 297C                                           l2063 24C6  
                                         l2223 2630                                           l3111 14BE  
                                         l2057 249C                                           l2153 29D6  
                                         l2241 26C2                                           l2209 2DD6  
                                         l3121 167E                                           l3113 14F8  
                                         l3105 1478                                           l2091 2534  
                                         l2163 29FE                                           l2139 29A4  
                                         l2251 26F2                                           l2341 2F9C  
                                         l2085 2518                                           l2157 29E6  
                                         l2253 2702                                           l2245 26D6  
                                         l3141 186E                                           l3125 17B4  
                                         l3117 1548                                           l3061 106E  
                                         l2271 28A6                                           l2191 30B6  
                                         l2087 2522                                           l2079 24F6  
                                         l2167 2A0E                                           l2255 270C  
                                         l3039 2346                                           l2511 2FE4  
                                         l2337 2F88                                           l2097 2556  
                                         l2089 252C                                           l3161 2E22  
                                         l3153 2DF2                                           l2513 2FEC  
                                         l3225 1AAA                                           l2283 2928  
                                         l2275 28D2                                           l2267 287C  
                                         l2099 2560                                           l2259 2728  
                                         l2291 27A4                                           l2347 2ECA  
                                         l2179 3078                                           l3147 18B8  
                                         l3083 1374                                           l3075 1108  
                                         l3067 10A6                                           l3163 2E28  
                                         l3155 2DF8                                           l2523 300C  
                                         l2515 2FF0                                           l2531 302E  
                                         l3219 1A2E                                           l2461 1E86  
                                         l2349 2ED6                                           l3165 2E2E  
                                         l3157 2DFE                                           l2533 3036  
                                         l2279 28FC                                           l2455 1DD2  
                                         l2199 2D7A                                           l3079 123E  
                                         l2535 303A                                           l2473 1FF0  
                                         l3169 2E34                                           l2721 21B8  
                                         l2803 2A70                                           l2483 207E  
                                         l2467 1F3C                                           l3099 142E  
                                         l2539 304E                                           l2731 21F6  
                                         l2707 2188                                           l2733 21FE  
                                         l2709 218C                                           l3197 1956  
                                         l2495 313A                                           l2743 222C  
                                         l2735 2206                                           l2727 21D2  
                                         l2751 2282                                           l2809 2A98  
                                         l2745 2232                                           l2739 221A  
                                         l2675 20A6                                           l2829 2AD6  
                                         l2749 227A                                           l2685 20DE  
                                         l2695 213A                                           l2679 20B6  
                              __end_of_LCDinit 2BF4                                           l2697 2160  
                                         STR_1 102A                                           STR_2 101B  
                                         STR_3 100B                                           STR_4 1035  
                                         STR_5 103F                                           u2120 200A  
                                         u1411 245A                                           u1421 246E  
                                         _LATA 000F89                                           u2401 2A80  
                                         u1631 2964                                           u1651 298C  
                                         u2381 2A58                                           u1830 286C  
                                         u2710 138C                                           u1751 260C  
                                         u2720 13A4                                           u1850 28C2  
                                         u1770 2656                                           u2740 150E  
                                         u1870 2918                                           u1775 264C  
                                         u2680 10BC                                           u2770 17CC  
                                         u2907 2BB2                                           u2780 17E4  
                                         u2917 2BC8                                           u2927 2BDE  
                                         u2857 2B44                                           u2867 2B5A  
                                         u2877 2B70                                           u2887 2B86  
                                         u2897 2B9C                                           _TMR1 000FCE  
                                         _TMR5 000F4F                               ?_configureTimers 0001  
                                         _main 18D6                                   ___ftpack@arg 0013  
                                 ___ftpack@exp 0016                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           fsr0l 000FE9  
                                         fsr2h 000FDA                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                           btemp 004D  
                                         _sqrt 229C                                  __CFG_BORV$190 000000  
                                         pclat 000FFA                                ??_wheelVelocity 0045  
                                         prodh 000FF4                                           prodl 000FF3  
                                         start 0182                                  __CFG_IESO$OFF 000000  
                                 ___ftmul@cntr 0031                                   ___param_bank 000010  
                                 ___ftmul@sign 0032                                          ??_ISR 0001  
                                 ___fttol@exp1 0081                                   ___fttol@lval 007D  
                             __end_of_LCDclear 319A                                          ?_main 0001  
                              __end_of___ftadd 25F6                                          _CCPR2 000F67  
                                        _CCPR3 000F5E                                __end_of___ftdiv 2B2E  
                              __end_of___ftneg 3124                                          ?_sqrt 0060  
                              __end_of___ftmul 2A48                                          _T1CON 000FCD  
                              __end_of___ftsub 30A2                                __end_of___fttol 273A  
                                        _T2CON 000FBA                                          _T5CON 000F4E  
                              __end_of___lwdiv 3020                                __end_of___lwmod 3062  
                                        i2l180 00BC                                          i2l174 0084  
                                        i2l183 0114                                          i2l175 006C  
                             __end_of_LCDwrite 3168                                          i2l177 0146  
                                        i2l178 00C8                                          i2l179 00B2  
driveStationaryCircle@rightWheelCommandedSpeed 00DB       driveLargeCircle@rightWheelCommandedSpeed 00D7  
                                        _TRISA 000F92                                  __CFG_WRT0$OFF 000000  
                                __CFG_WRT1$OFF 000000                                  __CFG_WRT2$OFF 000000  
                          ___lmul@multiplicand 0017                                  __CFG_WRT3$OFF 000000  
                                 ___lltoft@exp 0023                                 __CFG_EBTR0$OFF 000000  
                               __CFG_FCMEN$OFF 000000                                 __CFG_EBTR1$OFF 000000  
                               __CFG_EBTR2$OFF 000000                                 __CFG_EBTR3$OFF 000000  
                     __end_of_limitWheelSpeeds 2954                                  __CFG_WRTB$OFF 000000  
                                __CFG_WRTC$OFF 000000                                  __CFG_WRTD$OFF 000000  
                            ?_driveLargeCircle 0001                                 __CFG_EBTRB$OFF 000000  
                                ___awtoft@sign 001E                                __end_of_dpowers 100B  
                                        _event 00BF                                          _errno 004B  
                              __end_of_isdigit 3142                             __CFG_MCLRE$EXTMCLR 000000  
                                ___ftpack@sign 0017                                          _putch 31A6  
                           ??_driveLargeCircle 008A                                  _driveStraight 1046  
                                        tablat 000FF5                                          plusw2 000FDB  
                                        sqrt@a 0060                                          sqrt@i 006C  
                                        sqrt@q 006D                                          sqrt@x 0070  
                                        sqrt@z 0069                                          status 000FD8  
                               __CFG_HFOFST$ON 000000                            __size_of_LCDcheckBF 0014  
                              __initialization 2E66                                   __end_of_main 1D00  
                                 __end_of_sqrt 244A                                         ??_main 0097  
                                ___fttol@sign1 007C                                         ??_sqrt 0063  
                                ISR@dummy_1057 0012                                  __activetblptr 000002  
       driveStationaryCircle@speedCompensation 00CC                                      ??_LCDinit 0014  
                          main@speedLastMillis 00AB                             wheelVelocity@speed 0082  
                           wheelVelocity@wheel 0089                   __end_of_configureComparators 2F78  
                                       _CCP2IE 007D00                                         _CCP2IF 007D08  
                                       _CCP3IE 007BD0                                         _CCP3IF 007BD8  
                               ?_driveStraight 0001                               __end_of___awtoft 30DA  
                                       ?_putch 0001                                         _ANSELD 000F3B  
                             __end_of___ftpack 2CA2                               __end_of___lltoft 2F20  
                                       _INT0IE 007F94                                         _INT0IF 007F91  
                               __CFG_WDTEN$OFF 000000                                         i2l2913 0076  
                                       i2l2939 00E2                                         i2l2949 00FC  
                                       _LCDcmd 319A                                         _TMR2IE 007CE9  
                                       _TMR2IF 007CF1                                         _TMR1ON 007E68  
                                       _TMR5ON 007A70                              ?_excerciseControl 0001  
                               __CFG_PWRTEN$ON 000000                                 __CFG_XINST$OFF 000000  
                           ??_excerciseControl 0045                                   _CCPTMRS0bits 000F49  
                                       ___ftge 2D4A                                         ___lmul 2F78  
                                       ___wmul 30DA                                      ??___ftadd 0039  
                               __CFG_STVREN$ON 000000                                      ??___ftdiv 0039  
                                    ??___ftneg 0042                                      ??___ftmul 002A  
                                    ??___ftsub 0045                                      ??___fttol 0077  
                                    ??___lwdiv 0017                 __size_of_driveStationaryCircle 0440  
                                    ??___lwmod 001E                  __end_of_driveStationaryCircle 18D6  
                               _leftWheelCount 00B3                                         clear_0 2E6C  
                                       _printf 209C                          ___ftmul@f3_as_product 002E  
                                 __pdataCOMRAM 0047                                      ??_isdigit 0013  
                                 __mediumconst 0000                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                       sqrt@og 0066                          main@controlLastMillis 009F  
            limitWheelSpeeds@speedCompensation 0017                                     __accesstop 0060  
                      __end_of__initialization 2EB6                                __CFG_PBADEN$OFF 000000  
                                   ___ftadd@f1 0033                                     ___ftadd@f2 0036  
                                   ___ftge@ff1 0013                                     ___ftge@ff2 0016  
                                    ?_LCDclear 0001                                  ___rparam_used 000001  
                                   ___ftdiv@f1 0033                                     ___ftdiv@f2 0036  
                                   ___ftdiv@f3 003D                                     ___ftneg@f1 003F  
                                   ___awtoft@c 001B                        __size_of_LCDgotoLineTwo 0010  
                                    ?_LCDwrite 0001                                     ___ftmul@f1 0024  
                                   ___ftmul@f2 0027                                     ___ftsub@f1 003F  
                                   ___ftsub@f2 0042                                     ___fttol@f1 0073  
                               __pcstackCOMRAM 0001                                   __pidataBANK0 3168  
                                   ___lltoft@c 001B                                  __end_of_putch 31B0  
                                 ??_LCDcheckBF 0013                                ??_driveStraight 008A  
                                      ??_putch 0015                                     __pbssBANK0 00AF  
                                      ?_LCDcmd 0001                          _rightWheelCommandedPW 0049  
                              __CFG_PLLCFG$OFF 000000                                     ??_LCDclear 0014  
                                   ??_LCDwrite 0014                             __end_of_LCDcheckBF 3156  
                           __CFG_CCP2MX$PORTB3 000000                                        ?___ftge 0013  
 driveStationaryCircle@leftWheelCommandedSpeed 00D9                                        ?___lmul 0013  
               limitWheelSpeeds@leftWheelSpeed 0013                                        ?___wmul 0013  
                           __CFG_CCP3MX$PORTB5 000000                           main@leftCountTracker 00A3  
                         _configureComparators 2F20                                        _CM1CON0 000F79  
                                      _CM2CON0 000F78                                        _CCP2CON 000F66  
                                      _CCP3CON 000F5D                                 ___lmul@product 001B  
                                    ?___awtoft 001B                                      ?___ftpack 0013  
                                      ?_printf 001F                                      ?___lltoft 001B  
                                      _INTEDG0 007F8E                                        _LCDinit 2B2E  
                            ?_limitWheelSpeeds 0013                             ??_limitWheelSpeeds 0019  
                              __size_of_LCDcmd 000C                                        __Hparam 0000  
                        __end_of_wheelVelocity 2850                                        __Lparam 0000  
                    __size_of_driveLargeCircle 039C                       __size_of_configureTimers 00A8  
                              __size_of___ftge 0090                                __size_of___lmul 0056  
                                      ___ftadd 244A                          ?_configureComparators 0001  
                                      ___ftdiv 2A48                                        ___ftneg 3100  
                              __size_of___wmul 0026                                        ___ftmul 2954  
                                      ___ftsub 3062                                        ___fttol 25F6  
                                      ___lwdiv 2FCE                                        ___lwmod 3020  
                                 __psmallconst 1000                                        __pcinit 2E66  
                                   ??___awtoft 001E                                     ??___ftpack 0018  
                                      __ramtop 1000                                     ??___lltoft 001F  
                                      __ptext0 18D6                                        __ptext1 209C  
                                      __ptext2 31A6                                        __ptext3 3156  
                                      __ptext4 3124                                        __ptext5 30DA  
                                      __ptext6 3020                                        __ptext7 2FCE  
                                      __ptext8 2DDA                                        __ptext9 1046  
                              __size_of_printf 0200                                   __size_of_ISR 017A  
                                    _T1CONbits 000FCD                                        _dpowers 1001  
                                    _T2CONbits 000FBA                                        _isdigit 3124  
                                    _T5CONbits 000F4E                               _TOP_SPEED_FACTOR 00D0  
                         end_of_initialization 2EB6                                  __Lmediumconst 0000  
                       _leftWheelMeasuredSpeed 00C3                     _driveStationaryCircle$2070 0091  
                   _driveStationaryCircle$2068 0094                     _driveStationaryCircle$2069 008E  
              limitWheelSpeeds@rightWheelSpeed 0015                                 _LCDgotoLineTwo 317A  
                                      printf@c 002F                                        printf@f 001F  
                            main@lcdLastMillis 00A7                                        postdec1 000FE5  
                                      postdec2 000FDD                                        postinc0 000FEE  
                                      postinc2 000FDE          driveStraight@rightWheelCommandedSpeed 00DF  
                                    _PORTAbits 000F80                      __size_of_excerciseControl 008C  
                                    _TRISAbits 000F92                                      _TRISBbits 000F93  
                                    _TRISDbits 000F95                                      _TRISEbits 000F96  
                                LCDcmd@command 0013                                    _CM1CON0bits 000F79  
                       __end_of_LCDgotoLineTwo 318A                                    _CM2CON0bits 000F78  
                                  _CM2CON1bits 000F77                                    ___ftdiv@exp 0040  
                               __end_of_LCDcmd 31A6                                    printf@width 002D  
                                  _CCP2CONbits 000F66                             _driveStraight$2071 0094  
                           _driveStraight$2072 008E                             _driveStraight$2073 0091  
                                  _CCP3CONbits 000F5D                                     main@screen 00C9  
                            __size_of_LCDclear 0010                                    ___ftmul@exp 002D  
                       ??_configureComparators 0013                              __size_of_LCDwrite 0012  
                      _rightWheelMeasuredSpeed 00C5                           _leftWheelCommandedPW 0047  
                               __end_of___ftge 2DDA                                 __end_of___lmul 2FCE  
                               __end_of___wmul 3100              driveLargeCircle@speedCompensation 00CA  
                                __pidataCOMRAM 31B0                          _driveStationaryCircle 1496  
                            ??_configureTimers 0013                                 __end_of_printf 229C  
                          start_initialization 2E66                                    __end_of_ISR 0182  
                 driveLargeCircle@leftIntegral 00C7                                       ??_LCDcmd 0013  
                              ?_LCDgotoLineTwo 0001                               _driveLargeCircle 1D00  
                                     ??___ftge 0019                                       ??___lmul 001B  
                                     ??___wmul 0017                                    __pdataBANK0 00D0  
                              _rightWheelCount 00B7                                       ??_printf 0023  
                            __size_of___awtoft 0038                              __size_of___ftpack 00AE  
                            __size_of___lltoft 005C                                    __pbssCOMRAM 004B  
                                     ?_LCDinit 0001                                  __pcstackBANK0 0060  
      driveLargeCircle@leftWheelCommandedSpeed 00D5                                   _isdigit$1727 0014  
                        __end_of_driveStraight 1496                                       ISR@dummy 0011  
                             ___lwdiv@dividend 0013                      __size_of_limitWheelSpeeds 0104  
                                    __pintcode 0008                                       ?___ftadd 0033  
                                     ?___ftdiv 0033                                       ?___ftneg 003F  
                                     ?___ftmul 0024                                       ?___ftsub 003F  
                                     ?___fttol 0073                                       ?___lwdiv 0013  
                                     ?___lwmod 001A                         ?_driveStationaryCircle 0001  
                             __CFG_PRICLKEN$ON 000000                              _startCircleMillis 00BB  
                             _excerciseControl 2DDA                                    __smallconst 1000  
                                     ?_isdigit 0001                                      _lastEvent 00C1  
                             ___lwdiv@quotient 0017                                 __size_of_putch 000A  
                               ___wmul@product 0017                                       _LATDbits 000F8C  
                                     _LATEbits 000F8D                                       _LCDclear 318A  
                                     _PIE1bits 000F9D                                       _PIE2bits 000FA0  
                                     _LCDwrite 3156                                       _PIR1bits 000F9E  
                                     _PIR2bits 000FA1                               __CFG_WDTPS$32768 000000  
                           _wheelVelocity$2067 0086                              ___wmul@multiplier 0013  
                                   printf@flag 002A                                     printf@prec 0029  
                                     _WPUBbits 000F61                               __size_of_LCDinit 00C6  
                       __size_of_wheelVelocity 0116                              ___lmul@multiplier 0013  
                                    copy_data0 2E8A                                      copy_data1 2EAA  
                                     __Hrparam 0000                                _configureTimers 2CA2  
                                     __Lrparam 0000                             __CFG_BOREN$SBORDIS 000000  
                        main@rightCountTracker 00A5                              __CFG_P2BMX$PORTD2 000000  
                             __size_of___ftadd 01AC                               __size_of___ftdiv 00E6  
                             __size_of___ftneg 0024                               __size_of___ftmul 00F4  
                             __size_of___ftsub 0040                               __size_of___fttol 0144  
                             __size_of___lwdiv 0052                               __size_of___lwmod 0042  
                                     ___awtoft 30A2                                       ___ftpack 2BF4  
                                     ___lltoft 2EC4                                     _ANSELBbits 000F39  
         driveStraight@leftWheelCommandedSpeed 00DD                               __size_of_isdigit 001E  
                     __end_of_driveLargeCircle 209C                                ___lwdiv@divisor 0015  
                              ___lwdiv@counter 0019                                       __ptext10 1496  
                                     __ptext11 229C                                       __ptext20 244A  
                                     __ptext12 3062                                       __ptext21 30A2  
                                     __ptext13 2D4A                                       __ptext30 318A  
                                     __ptext22 2850                                       __ptext14 2EC4  
                                     __ptext31 319A                                       __ptext23 2F78  
                                     __ptext15 1D00                                       __ptext32 3142  
                                     __ptext24 2CA2                                       __ptext16 273A  
                                     __ptext25 2F20                                       __ptext17 25F6  
                                     __ptext26 2A48                                       __ptext18 3100  
                                     __ptext27 2BF4                                       __ptext19 2954  
                                     __ptext28 2B2E                                       __ptext29 317A  
                             ??_LCDgotoLineTwo 0014                                     _CONTROL_MS 00D3  
                                _elapsedMillis 00AF                                  __size_of_main 042A  
                                __size_of_sqrt 01AE                 wheelVelocity@speedCompensation 0084  
                             _limitWheelSpeeds 2850                                  _wheelVelocity 273A  
                                     int$flags 004D                  __size_of_configureComparators 0058  
                                    printf@val 002B                                     _LCDcheckBF 3142  
                                    putch@data 0015                                     _INTCONbits 000FF2  
                                     isdigit@c 0015                                       intlevel2 0000  
                      __end_of_configureTimers 2D4A                               ___lwmod@dividend 001A  
                                 _VREFCON0bits 000F42                       __end_of_excerciseControl 2E66  
                                   _OSCCONbits 000FD3                                 ?_wheelVelocity 0082  
                      ??_driveStationaryCircle 008A                                       printf@ap 0027  
               driveStraight@speedCompensation 00CE                                ___lwmod@divisor 001C  
                              ___lwmod@counter 001E                              __CFG_T3CMX$PORTB5 000000  
                            __CFG_FOSC$INTIO67 000000                                  LCDwrite@input 0014  

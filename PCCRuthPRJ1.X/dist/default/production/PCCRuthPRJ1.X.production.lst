

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Apr 22 21:38:01 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataCOMRAM
    43  0027B2                     __pidataCOMRAM:
    44                           	opt stack 0
    45                           
    46                           ;initializer for _leftWheelCommandedPW
    47  0027B2  02DF               	dw	735
    48                           
    49                           ;initializer for _rightWheelCommandedPW
    50  0027B4  02D0               	dw	720
    51                           
    52                           ;initializer for excerciseControl@leftWheelCommandedSpeed
    53  0027B6  0023               	dw	35
    54                           
    55                           ;initializer for excerciseControl@rightWheelCommandedSpeed
    56  0027B8  0019               	dw	25
    57                           
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt stack 0
    61  001000  00                 	db	0
    62  001001                     _dpowers:
    63                           	opt stack 0
    64  001001  0001               	dw	1
    65  001003  000A               	dw	10
    66  001005  0064               	dw	100
    67  001007  03E8               	dw	1000
    68  001009  2710               	dw	10000
    69  00100B                     __end_of_dpowers:
    70                           	opt stack 0
    71  0000                     _CCPR3	set	3934
    72  0000                     _TMR5	set	3919
    73  0000                     _ANSELBbits	set	3897
    74  0000                     _ANSELD	set	3899
    75  0000                     _CCP3CON	set	3933
    76  0000                     _CCP3CONbits	set	3933
    77  0000                     _CCPTMRS0bits	set	3913
    78  0000                     _T5CON	set	3918
    79  0000                     _T5CONbits	set	3918
    80  0000                     _VREFCON0bits	set	3906
    81  0000                     _TMR5ON	set	31344
    82  0000                     _CCPR2	set	3943
    83  0000                     _TMR1	set	4046
    84  0000                     _CCP2CON	set	3942
    85  0000                     _CCP2CONbits	set	3942
    86  0000                     _CM1CON0	set	3961
    87  0000                     _CM1CON0bits	set	3961
    88  0000                     _CM2CON0	set	3960
    89  0000                     _CM2CON0bits	set	3960
    90  0000                     _CM2CON1bits	set	3959
    91  0000                     _INTCONbits	set	4082
    92  0000                     _LATA	set	3977
    93  0000                     _LATDbits	set	3980
    94  0000                     _LATEbits	set	3981
    95  0000                     _OSCCONbits	set	4051
    96  0000                     _PIE1bits	set	3997
    97  0000                     _PIE2bits	set	4000
    98  0000                     _PIR1bits	set	3998
    99  0000                     _PIR2bits	set	4001
   100  0000                     _PORTAbits	set	3968
   101  0000                     _PORTBbits	set	3969
   102  0000                     _PR2	set	4027
   103  0000                     _T1CON	set	4045
   104  0000                     _T1CONbits	set	4045
   105  0000                     _T2CON	set	4026
   106  0000                     _T2CONbits	set	4026
   107  0000                     _TRISA	set	3986
   108  0000                     _TRISAbits	set	3986
   109  0000                     _TRISBbits	set	3987
   110  0000                     _TRISDbits	set	3989
   111  0000                     _TRISEbits	set	3990
   112  0000                     _C1IE	set	32006
   113  0000                     _C1IF	set	32014
   114  0000                     _C2IE	set	32005
   115  0000                     _C2IF	set	32013
   116  0000                     _CCP2IE	set	32000
   117  0000                     _CCP2IF	set	32008
   118  0000                     _CCP3IE	set	31696
   119  0000                     _CCP3IF	set	31704
   120  0000                     _TMR1ON	set	32360
   121  0000                     _TMR2IE	set	31977
   122  0000                     _TMR2IF	set	31985
   123  00100B                     STR_1:
   124  00100B  45                 	db	69	;'E'
   125  00100C  76                 	db	118	;'v'
   126  00100D  65                 	db	101	;'e'
   127  00100E  6E                 	db	110	;'n'
   128  00100F  74                 	db	116	;'t'
   129  001010  3A                 	db	58	;':'
   130  001011  20                 	db	32
   131  001012  25                 	db	37
   132  001013  33                 	db	51	;'3'
   133  001014  64                 	db	100	;'d'
   134  001015  00                 	db	0
   135  001016                     STR_2:
   136  001016  53                 	db	83	;'S'
   137  001017  70                 	db	112	;'p'
   138  001018  65                 	db	101	;'e'
   139  001019  65                 	db	101	;'e'
   140  00101A  64                 	db	100	;'d'
   141  00101B  3A                 	db	58	;':'
   142  00101C  20                 	db	32
   143  00101D  25                 	db	37
   144  00101E  64                 	db	100	;'d'
   145  00101F  00                 	db	0
   146  001020                     STR_3:
   147  001020  4C                 	db	76	;'L'
   148  001021  57                 	db	87	;'W'
   149  001022  3A                 	db	58	;':'
   150  001023  20                 	db	32
   151  001024  25                 	db	37
   152  001025  64                 	db	100	;'d'
   153  001026  20                 	db	32
   154  001027  00                 	db	0
   155  001028                     STR_4:
   156  001028  20                 	db	32
   157  001029  52                 	db	82	;'R'
   158  00102A  57                 	db	87	;'W'
   159  00102B  3A                 	db	58	;':'
   160  00102C  20                 	db	32
   161  00102D  25                 	db	37
   162  00102E  64                 	db	100	;'d'
   163  00102F  00                 	db	0
   164                           
   165                           ; #config settings
   166  001030  00                 	db	0	; dummy byte at the end
   167  0000                     
   168                           	psect	cinit
   169  0026D4                     __pcinit:
   170                           	opt stack 0
   171  0026D4                     start_initialization:
   172                           	opt stack 0
   173  0026D4                     __initialization:
   174                           	opt stack 0
   175                           
   176                           ; Clear objects allocated to BANK0 (17 bytes)
   177  0026D4  EE00  F087         	lfsr	0,__pbssBANK0
   178  0026D8  0E11               	movlw	17
   179  0026DA                     clear_0:
   180  0026DA  6AEE               	clrf	postinc0,c
   181  0026DC  06E8               	decf	wreg,f,c
   182  0026DE  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to COMRAM (2 bytes)
   185  0026E0  6A4B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   186  0026E2  6A4A               	clrf	__pbssCOMRAM& (0+255),c
   187                           
   188                           ; Initialize objects allocated to COMRAM (8 bytes)
   189                           ; load TBLPTR registers with __pidataCOMRAM
   190  0026E4  0EB2               	movlw	low __pidataCOMRAM
   191  0026E6  6EF6               	movwf	tblptrl,c
   192  0026E8  0E27               	movlw	high __pidataCOMRAM
   193  0026EA  6EF7               	movwf	tblptrh,c
   194  0026EC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   195  0026EE  6EF8               	movwf	tblptru,c
   196  0026F0  EE00  F042         	lfsr	0,__pdataCOMRAM
   197  0026F4  EE10 F008          	lfsr	1,8
   198  0026F8                     copy_data0:
   199  0026F8  0009               	tblrd		*+
   200  0026FA  CFF5 FFEE          	movff	tablat,postinc0
   201  0026FE  50E5               	movf	postdec1,w,c
   202  002700  50E1               	movf	fsr1l,w,c
   203  002702  E1FA               	bnz	copy_data0
   204  002704                     end_of_initialization:
   205                           	opt stack 0
   206  002704                     __end_of__initialization:
   207                           	opt stack 0
   208  002704  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   209  002706  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   210  002708  0E00               	movlw	low (__Lmediumconst shr (0+16))
   211  00270A  6EF8               	movwf	tblptru,c
   212  00270C  0100               	movlb	0
   213  00270E  EF66  F00C         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	bssCOMRAM
   224  00004A                     __pbssCOMRAM:
   225                           	opt stack 0
   226  00004A                     _speedCompensation:
   227                           	opt stack 0
   228  00004A                     	ds	2
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	dataCOMRAM
   239  000042                     __pdataCOMRAM:
   240                           	opt stack 0
   241  000042                     _leftWheelCommandedPW:
   242                           	opt stack 0
   243  000042                     	ds	2
   244  000044                     _rightWheelCommandedPW:
   245                           	opt stack 0
   246  000044                     	ds	2
   247  000046                     excerciseControl@leftWheelCommandedSpeed:
   248                           	opt stack 0
   249  000046                     	ds	2
   250  000048                     excerciseControl@rightWheelCommandedSpeed:
   251                           	opt stack 0
   252  000048                     	ds	2
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           postdec1	equ	0xFE5
   260                           fsr1l	equ	0xFE1
   261                           
   262                           	psect	bssBANK0
   263  000087                     __pbssBANK0:
   264                           	opt stack 0
   265  000087                     _elapsedMillis:
   266                           	opt stack 0
   267  000087                     	ds	4
   268  00008B                     _leftWheelCount:
   269                           	opt stack 0
   270  00008B                     	ds	4
   271  00008F                     _rightWheelCount:
   272                           	opt stack 0
   273  00008F                     	ds	4
   274  000093                     _leftWheelMeasuredSpeed:
   275                           	opt stack 0
   276  000093                     	ds	2
   277  000095                     _rightWheelMeasuredSpeed:
   278                           	opt stack 0
   279  000095                     	ds	2
   280  000097                     _event:
   281                           	opt stack 0
   282  000097                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           postdec1	equ	0xFE5
   290                           fsr1l	equ	0xFE1
   291                           
   292                           	psect	cstackBANK0
   293  000060                     __pcstackBANK0:
   294                           	opt stack 0
   295  000060                     ??_excerciseControl:
   296  000060                     ?___fttol:
   297                           	opt stack 0
   298  000060                     ___fttol@f1:
   299                           	opt stack 0
   300                           
   301                           ; 3 bytes @ 0x0
   302  000060                     	ds	4
   303  000064                     ??___fttol:
   304                           
   305                           ; 1 bytes @ 0x4
   306  000064                     	ds	5
   307  000069                     ___fttol@sign1:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x9
   311  000069                     	ds	1
   312  00006A                     ___fttol@lval:
   313                           	opt stack 0
   314                           
   315                           ; 4 bytes @ 0xA
   316  00006A                     	ds	4
   317  00006E                     ___fttol@exp1:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0xE
   321  00006E                     	ds	1
   322  00006F                     ??_main:
   323                           
   324                           ; 1 bytes @ 0xF
   325  00006F                     	ds	8
   326  000077                     main@controlLastMillis:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0x17
   330  000077                     	ds	4
   331  00007B                     main@lcdLastMillis:
   332                           	opt stack 0
   333                           
   334                           ; 4 bytes @ 0x1B
   335  00007B                     	ds	4
   336  00007F                     main@leftCountTracker:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x1F
   340  00007F                     	ds	2
   341  000081                     main@rightCountTracker:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x21
   345  000081                     	ds	2
   346  000083                     main@speedLastMillis:
   347                           	opt stack 0
   348                           
   349                           ; 4 bytes @ 0x23
   350  000083                     	ds	4
   351                           tblptru	equ	0xFF8
   352                           tblptrh	equ	0xFF7
   353                           tblptrl	equ	0xFF6
   354                           tablat	equ	0xFF5
   355                           postinc0	equ	0xFEE
   356                           wreg	equ	0xFE8
   357                           postdec1	equ	0xFE5
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	cstackCOMRAM
   361  000001                     __pcstackCOMRAM:
   362                           	opt stack 0
   363  000001                     ??_ISR:
   364  000001                     
   365                           ; 1 bytes @ 0x0
   366  000001                     	ds	16
   367  000011                     ISR@dummy:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x10
   371  000011                     	ds	1
   372  000012                     ISR@dummy_1129:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x11
   376  000012                     	ds	1
   377  000013                     ??_isdigit:
   378  000013                     ?___wmul:
   379                           	opt stack 0
   380  000013                     ?___lwdiv:
   381                           	opt stack 0
   382  000013                     ?___ftpack:
   383                           	opt stack 0
   384  000013                     LCDcmd@command:
   385                           	opt stack 0
   386  000013                     limitWheelSpeeds@leftWheelSpeed:
   387                           	opt stack 0
   388  000013                     wheelVelocity@speed:
   389                           	opt stack 0
   390  000013                     ___wmul@multiplier:
   391                           	opt stack 0
   392  000013                     ___lwdiv@dividend:
   393                           	opt stack 0
   394  000013                     ___ftpack@arg:
   395                           	opt stack 0
   396                           
   397                           ; 3 bytes @ 0x12
   398  000013                     	ds	1
   399  000014                     ??_LCDinit:
   400  000014                     LCDwrite@input:
   401                           	opt stack 0
   402  000014                     _isdigit$1794:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x13
   406  000014                     	ds	1
   407  000015                     putch@data:
   408                           	opt stack 0
   409  000015                     isdigit@c:
   410                           	opt stack 0
   411  000015                     limitWheelSpeeds@rightWheelSpeed:
   412                           	opt stack 0
   413  000015                     wheelVelocity@speedCompensation:
   414                           	opt stack 0
   415  000015                     ___wmul@multiplicand:
   416                           	opt stack 0
   417  000015                     ___lwdiv@divisor:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x14
   421  000015                     	ds	1
   422  000016                     ___ftpack@exp:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x15
   426  000016                     	ds	1
   427  000017                     ??_wheelVelocity:
   428  000017                     ___ftpack@sign:
   429                           	opt stack 0
   430  000017                     limitWheelSpeeds@speedCompensation:
   431                           	opt stack 0
   432  000017                     ___wmul@product:
   433                           	opt stack 0
   434  000017                     ___lwdiv@quotient:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x16
   438  000017                     	ds	1
   439  000018                     ??___ftpack:
   440                           
   441                           ; 1 bytes @ 0x17
   442  000018                     	ds	1
   443  000019                     wheelVelocity@wheel:
   444                           	opt stack 0
   445  000019                     ___lwdiv@counter:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x18
   449  000019                     	ds	1
   450  00001A                     ?___lwmod:
   451                           	opt stack 0
   452  00001A                     ___lwmod@dividend:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x19
   456  00001A                     	ds	1
   457  00001B                     ?___lltoft:
   458                           	opt stack 0
   459  00001B                     ___lltoft@c:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x1A
   463  00001B                     	ds	1
   464  00001C                     ___lwmod@divisor:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x1B
   468  00001C                     	ds	2
   469  00001E                     ___lwmod@counter:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x1D
   473  00001E                     	ds	1
   474  00001F                     ??___lltoft:
   475  00001F                     ?_printf:
   476                           	opt stack 0
   477  00001F                     printf@f:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x1E
   481  00001F                     	ds	4
   482  000023                     ___lltoft@exp:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x22
   486  000023                     	ds	1
   487  000024                     ?___ftmul:
   488                           	opt stack 0
   489  000024                     ___ftmul@f1:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x23
   493  000024                     	ds	1
   494  000025                     ??_printf:
   495                           
   496                           ; 1 bytes @ 0x24
   497  000025                     	ds	2
   498  000027                     ___ftmul@f2:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0x26
   502  000027                     	ds	2
   503  000029                     printf@ap:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x28
   507  000029                     	ds	1
   508  00002A                     ??___ftmul:
   509                           
   510                           ; 1 bytes @ 0x29
   511  00002A                     	ds	1
   512  00002B                     printf@prec:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x2A
   516  00002B                     	ds	1
   517  00002C                     printf@flag:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x2B
   521  00002C                     	ds	1
   522  00002D                     ___ftmul@exp:
   523                           	opt stack 0
   524  00002D                     printf@val:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x2C
   528  00002D                     	ds	1
   529  00002E                     ___ftmul@f3_as_product:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x2D
   533  00002E                     	ds	1
   534  00002F                     printf@width:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x2E
   538  00002F                     	ds	2
   539  000031                     printf@c:
   540                           	opt stack 0
   541  000031                     ___ftmul@cntr:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x30
   545  000031                     	ds	1
   546  000032                     ___ftmul@sign:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x31
   550  000032                     	ds	1
   551  000033                     ?___ftdiv:
   552                           	opt stack 0
   553  000033                     ___ftdiv@f1:
   554                           	opt stack 0
   555  000033                     ___ftge@ff1:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x32
   559  000033                     	ds	3
   560  000036                     ___ftdiv@f2:
   561                           	opt stack 0
   562  000036                     ___ftge@ff2:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x35
   566  000036                     	ds	3
   567  000039                     ??___ftdiv:
   568  000039                     ??___ftge:
   569                           
   570                           ; 1 bytes @ 0x38
   571  000039                     	ds	3
   572  00003C                     ___ftdiv@cntr:
   573                           	opt stack 0
   574  00003C                     excerciseControl@i:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x3B
   578  00003C                     	ds	1
   579  00003D                     ___ftdiv@f3:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x3C
   583  00003D                     	ds	1
   584  00003E                     excerciseControl@i_1151:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x3D
   588  00003E                     	ds	2
   589  000040                     ___ftdiv@exp:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x3F
   593  000040                     	ds	1
   594  000041                     ___ftdiv@sign:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x40
   598  000041                     	ds	1
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608 ;;
   609 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   610 ;;
   611 ;; *************** function _main *****************
   612 ;; Defined at:
   613 ;;		line 136 in file "main.c"
   614 ;; Parameters:    Size  Location     Type
   615 ;;		None
   616 ;; Auto vars:     Size  Location     Type
   617 ;;  speedLastMil    4   35[BANK0 ] unsigned long 
   618 ;;  lcdLastMilli    4   27[BANK0 ] unsigned long 
   619 ;;  controlLastM    4   23[BANK0 ] unsigned long 
   620 ;;  rightCountTr    2   33[BANK0 ] int 
   621 ;;  leftCountTra    2   31[BANK0 ] int 
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      void 
   624 ;; Registers used:
   625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   632 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   633 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   634 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   635 ;;Total ram usage:       24 bytes
   636 ;; Hardware stack levels required when called:    5
   637 ;; This function calls:
   638 ;;		_LCDclear
   639 ;;		_LCDgotoLineTwo
   640 ;;		_LCDinit
   641 ;;		___ftdiv
   642 ;;		___ftmul
   643 ;;		___fttol
   644 ;;		___lltoft
   645 ;;		_configureComparators
   646 ;;		_configureTimers
   647 ;;		_excerciseControl
   648 ;;		_printf
   649 ;; This function is called by:
   650 ;;		Startup code after reset
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text0
   655  0018CC                     __ptext0:
   656                           	opt stack 0
   657  0018CC                     _main:
   658                           	opt stack 26
   659                           
   660                           ;main.c: 138: OSCCONbits.IRCF = 0b110;
   661                           
   662                           ;incstack = 0
   663  0018CC  50D3               	movf	4051,w,c	;volatile
   664  0018CE  0B8F               	andlw	-113
   665  0018D0  0960               	iorlw	96
   666  0018D2  6ED3               	movwf	4051,c	;volatile
   667                           
   668                           ;main.c: 141: configureComparators();
   669  0018D4  ECD4  F012         	call	_configureComparators	;wreg free
   670                           
   671                           ;main.c: 142: configureTimers();
   672  0018D8  EC0A  F012         	call	_configureTimers	;wreg free
   673                           
   674                           ;main.c: 144: TRISBbits.TRISB4 = 1;
   675  0018DC  8893               	bsf	3987,4,c	;volatile
   676                           
   677                           ;main.c: 145: ANSELBbits.ANSB4 = 0;
   678  0018DE  010F               	movlb	15	; () banked
   679  0018E0  9939               	bcf	57,4,b	;volatile
   680                           
   681                           ;main.c: 149: unsigned long controlLastMillis = 0;
   682  0018E2  0E00               	movlw	0
   683  0018E4  0100               	movlb	0	; () banked
   684  0018E6  6F77               	movwf	main@controlLastMillis& (0+255),b
   685  0018E8  0E00               	movlw	0
   686  0018EA  6F78               	movwf	(main@controlLastMillis+1)& (0+255),b
   687  0018EC  0E00               	movlw	0
   688  0018EE  6F79               	movwf	(main@controlLastMillis+2)& (0+255),b
   689  0018F0  0E00               	movlw	0
   690  0018F2  6F7A               	movwf	(main@controlLastMillis+3)& (0+255),b
   691                           
   692                           ;main.c: 150: unsigned long lcdLastMillis = 0;
   693  0018F4  0E00               	movlw	0
   694  0018F6  0100               	movlb	0	; () banked
   695  0018F8  6F7B               	movwf	main@lcdLastMillis& (0+255),b
   696  0018FA  0E00               	movlw	0
   697  0018FC  6F7C               	movwf	(main@lcdLastMillis+1)& (0+255),b
   698  0018FE  0E00               	movlw	0
   699  001900  6F7D               	movwf	(main@lcdLastMillis+2)& (0+255),b
   700  001902  0E00               	movlw	0
   701  001904  6F7E               	movwf	(main@lcdLastMillis+3)& (0+255),b
   702                           
   703                           ;main.c: 151: unsigned long speedLastMillis = 0;
   704  001906  0E00               	movlw	0
   705  001908  0100               	movlb	0	; () banked
   706  00190A  6F83               	movwf	main@speedLastMillis& (0+255),b
   707  00190C  0E00               	movlw	0
   708  00190E  6F84               	movwf	(main@speedLastMillis+1)& (0+255),b
   709  001910  0E00               	movlw	0
   710  001912  6F85               	movwf	(main@speedLastMillis+2)& (0+255),b
   711  001914  0E00               	movlw	0
   712  001916  6F86               	movwf	(main@speedLastMillis+3)& (0+255),b
   713                           
   714                           ;main.c: 152: int leftCountTracker = 0;
   715  001918  0E00               	movlw	0
   716  00191A  0100               	movlb	0	; () banked
   717  00191C  6F80               	movwf	(main@leftCountTracker+1)& (0+255),b
   718  00191E  0E00               	movlw	0
   719  001920  6F7F               	movwf	main@leftCountTracker& (0+255),b
   720                           
   721                           ;main.c: 153: int rightCountTracker = 0;
   722  001922  0E00               	movlw	0
   723  001924  0100               	movlb	0	; () banked
   724  001926  6F82               	movwf	(main@rightCountTracker+1)& (0+255),b
   725  001928  0E00               	movlw	0
   726  00192A  6F81               	movwf	main@rightCountTracker& (0+255),b
   727                           
   728                           ; BSR set to: 0
   729                           ;main.c: 156: LCDinit();
   730  00192C  EC50  F011         	call	_LCDinit	;wreg free
   731                           
   732                           ;main.c: 157: printf("Event: %3d", event);
   733  001930  0E0B               	movlw	low STR_1
   734  001932  6E1F               	movwf	printf@f,c
   735  001934  0E10               	movlw	high STR_1
   736  001936  6E20               	movwf	printf@f+1,c
   737  001938  C097  F021         	movff	_event,?_printf+2
   738  00193C  6A22               	clrf	?_printf+3,c
   739  00193E  EC54  F00E         	call	_printf	;wreg free
   740  001942                     l2703:
   741                           
   742                           ;main.c: 162: {
   743                           ;main.c: 167: if(lcdLastMillis + 250 < elapsedMillis)
   744  001942  0EFA               	movlw	250
   745  001944  0100               	movlb	0	; () banked
   746  001946  257B               	addwf	main@lcdLastMillis& (0+255),w,b
   747  001948  0100               	movlb	0	; () banked
   748  00194A  6F6F               	movwf	??_main& (0+255),b
   749  00194C  0E00               	movlw	0
   750  00194E  0100               	movlb	0	; () banked
   751  001950  217C               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
   752  001952  0100               	movlb	0	; () banked
   753  001954  6F70               	movwf	(??_main+1)& (0+255),b
   754  001956  0E00               	movlw	0
   755  001958  0100               	movlb	0	; () banked
   756  00195A  217D               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
   757  00195C  0100               	movlb	0	; () banked
   758  00195E  6F71               	movwf	(??_main+2)& (0+255),b
   759  001960  0E00               	movlw	0
   760  001962  0100               	movlb	0	; () banked
   761  001964  217E               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
   762  001966  0100               	movlb	0	; () banked
   763  001968  6F72               	movwf	(??_main+3)& (0+255),b
   764  00196A  0100               	movlb	0	; () banked
   765  00196C  5187               	movf	_elapsedMillis& (0+255),w,b
   766  00196E  0100               	movlb	0	; () banked
   767  001970  5D6F               	subwf	??_main& (0+255),w,b
   768  001972  0100               	movlb	0	; () banked
   769  001974  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   770  001976  0100               	movlb	0	; () banked
   771  001978  5970               	subwfb	(??_main+1)& (0+255),w,b
   772  00197A  0100               	movlb	0	; () banked
   773  00197C  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   774  00197E  0100               	movlb	0	; () banked
   775  001980  5971               	subwfb	(??_main+2)& (0+255),w,b
   776  001982  0100               	movlb	0	; () banked
   777  001984  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   778  001986  0100               	movlb	0	; () banked
   779  001988  5972               	subwfb	(??_main+3)& (0+255),w,b
   780  00198A  B0D8               	btfsc	status,0,c
   781  00198C  D032               	goto	l2713
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 168: {
   785                           ;main.c: 169: LCDclear();
   786  00198E  ECC6  F013         	call	_LCDclear	;wreg free
   787                           
   788                           ;main.c: 170: printf("Speed: %d", rightWheelMeasuredSpeed);
   789  001992  0E16               	movlw	low STR_2
   790  001994  6E1F               	movwf	printf@f,c
   791  001996  0E10               	movlw	high STR_2
   792  001998  6E20               	movwf	printf@f+1,c
   793  00199A  C095  F021         	movff	_rightWheelMeasuredSpeed,?_printf+2
   794  00199E  C096  F022         	movff	_rightWheelMeasuredSpeed+1,?_printf+3
   795  0019A2  EC54  F00E         	call	_printf	;wreg free
   796                           
   797                           ;main.c: 171: lcdLastMillis = elapsedMillis;
   798  0019A6  C087  F07B         	movff	_elapsedMillis,main@lcdLastMillis
   799  0019AA  C088  F07C         	movff	_elapsedMillis+1,main@lcdLastMillis+1
   800  0019AE  C089  F07D         	movff	_elapsedMillis+2,main@lcdLastMillis+2
   801  0019B2  C08A  F07E         	movff	_elapsedMillis+3,main@lcdLastMillis+3
   802                           
   803                           ;main.c: 172: LCDgotoLineTwo();
   804  0019B6  ECBE  F013         	call	_LCDgotoLineTwo	;wreg free
   805                           
   806                           ;main.c: 173: printf("LW: %d ", leftWheelCount);
   807  0019BA  0E20               	movlw	low STR_3
   808  0019BC  6E1F               	movwf	printf@f,c
   809  0019BE  0E10               	movlw	high STR_3
   810  0019C0  6E20               	movwf	printf@f+1,c
   811  0019C2  C08B  F021         	movff	_leftWheelCount,?_printf+2
   812  0019C6  C08C  F022         	movff	_leftWheelCount+1,?_printf+3
   813  0019CA  C08D  F023         	movff	_leftWheelCount+2,?_printf+4
   814  0019CE  C08E  F024         	movff	_leftWheelCount+3,?_printf+5
   815  0019D2  EC54  F00E         	call	_printf	;wreg free
   816                           
   817                           ;main.c: 174: printf(" RW: %d", rightWheelCount);
   818  0019D6  0E28               	movlw	low STR_4
   819  0019D8  6E1F               	movwf	printf@f,c
   820  0019DA  0E10               	movlw	high STR_4
   821  0019DC  6E20               	movwf	printf@f+1,c
   822  0019DE  C08F  F021         	movff	_rightWheelCount,?_printf+2
   823  0019E2  C090  F022         	movff	_rightWheelCount+1,?_printf+3
   824  0019E6  C091  F023         	movff	_rightWheelCount+2,?_printf+4
   825  0019EA  C092  F024         	movff	_rightWheelCount+3,?_printf+5
   826  0019EE  EC54  F00E         	call	_printf	;wreg free
   827  0019F2                     l2713:
   828                           
   829                           ;main.c: 175: }
   830                           ;main.c: 179: if(controlLastMillis + 300 < elapsedMillis)
   831  0019F2  0E2C               	movlw	44
   832  0019F4  0100               	movlb	0	; () banked
   833  0019F6  2577               	addwf	main@controlLastMillis& (0+255),w,b
   834  0019F8  0100               	movlb	0	; () banked
   835  0019FA  6F6F               	movwf	??_main& (0+255),b
   836  0019FC  0E01               	movlw	1
   837  0019FE  0100               	movlb	0	; () banked
   838  001A00  2178               	addwfc	(main@controlLastMillis+1)& (0+255),w,b
   839  001A02  0100               	movlb	0	; () banked
   840  001A04  6F70               	movwf	(??_main+1)& (0+255),b
   841  001A06  0E00               	movlw	0
   842  001A08  0100               	movlb	0	; () banked
   843  001A0A  2179               	addwfc	(main@controlLastMillis+2)& (0+255),w,b
   844  001A0C  0100               	movlb	0	; () banked
   845  001A0E  6F71               	movwf	(??_main+2)& (0+255),b
   846  001A10  0E00               	movlw	0
   847  001A12  0100               	movlb	0	; () banked
   848  001A14  217A               	addwfc	(main@controlLastMillis+3)& (0+255),w,b
   849  001A16  0100               	movlb	0	; () banked
   850  001A18  6F72               	movwf	(??_main+3)& (0+255),b
   851  001A1A  0100               	movlb	0	; () banked
   852  001A1C  5187               	movf	_elapsedMillis& (0+255),w,b
   853  001A1E  0100               	movlb	0	; () banked
   854  001A20  5D6F               	subwf	??_main& (0+255),w,b
   855  001A22  0100               	movlb	0	; () banked
   856  001A24  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   857  001A26  0100               	movlb	0	; () banked
   858  001A28  5970               	subwfb	(??_main+1)& (0+255),w,b
   859  001A2A  0100               	movlb	0	; () banked
   860  001A2C  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   861  001A2E  0100               	movlb	0	; () banked
   862  001A30  5971               	subwfb	(??_main+2)& (0+255),w,b
   863  001A32  0100               	movlb	0	; () banked
   864  001A34  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   865  001A36  0100               	movlb	0	; () banked
   866  001A38  5972               	subwfb	(??_main+3)& (0+255),w,b
   867  001A3A  B0D8               	btfsc	status,0,c
   868  001A3C  D00A               	goto	l2719
   869                           
   870                           ; BSR set to: 0
   871                           ;main.c: 180: {
   872                           ;main.c: 181: controlLastMillis = elapsedMillis;
   873  001A3E  C087  F077         	movff	_elapsedMillis,main@controlLastMillis
   874  001A42  C088  F078         	movff	_elapsedMillis+1,main@controlLastMillis+1
   875  001A46  C089  F079         	movff	_elapsedMillis+2,main@controlLastMillis+2
   876  001A4A  C08A  F07A         	movff	_elapsedMillis+3,main@controlLastMillis+3
   877                           
   878                           ; BSR set to: 0
   879                           ;main.c: 182: excerciseControl();
   880  001A4E  EC19  F008         	call	_excerciseControl	;wreg free
   881  001A52                     l2719:
   882                           
   883                           ;main.c: 183: }
   884                           ;main.c: 186: if(speedLastMillis + 500 < elapsedMillis)
   885  001A52  0EF4               	movlw	244
   886  001A54  0100               	movlb	0	; () banked
   887  001A56  2583               	addwf	main@speedLastMillis& (0+255),w,b
   888  001A58  0100               	movlb	0	; () banked
   889  001A5A  6F6F               	movwf	??_main& (0+255),b
   890  001A5C  0E01               	movlw	1
   891  001A5E  0100               	movlb	0	; () banked
   892  001A60  2184               	addwfc	(main@speedLastMillis+1)& (0+255),w,b
   893  001A62  0100               	movlb	0	; () banked
   894  001A64  6F70               	movwf	(??_main+1)& (0+255),b
   895  001A66  0E00               	movlw	0
   896  001A68  0100               	movlb	0	; () banked
   897  001A6A  2185               	addwfc	(main@speedLastMillis+2)& (0+255),w,b
   898  001A6C  0100               	movlb	0	; () banked
   899  001A6E  6F71               	movwf	(??_main+2)& (0+255),b
   900  001A70  0E00               	movlw	0
   901  001A72  0100               	movlb	0	; () banked
   902  001A74  2186               	addwfc	(main@speedLastMillis+3)& (0+255),w,b
   903  001A76  0100               	movlb	0	; () banked
   904  001A78  6F72               	movwf	(??_main+3)& (0+255),b
   905  001A7A  0100               	movlb	0	; () banked
   906  001A7C  5187               	movf	_elapsedMillis& (0+255),w,b
   907  001A7E  0100               	movlb	0	; () banked
   908  001A80  5D6F               	subwf	??_main& (0+255),w,b
   909  001A82  0100               	movlb	0	; () banked
   910  001A84  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   911  001A86  0100               	movlb	0	; () banked
   912  001A88  5970               	subwfb	(??_main+1)& (0+255),w,b
   913  001A8A  0100               	movlb	0	; () banked
   914  001A8C  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   915  001A8E  0100               	movlb	0	; () banked
   916  001A90  5971               	subwfb	(??_main+2)& (0+255),w,b
   917  001A92  0100               	movlb	0	; () banked
   918  001A94  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   919  001A96  0100               	movlb	0	; () banked
   920  001A98  5972               	subwfb	(??_main+3)& (0+255),w,b
   921  001A9A  B0D8               	btfsc	status,0,c
   922  001A9C  D752               	goto	l2703
   923                           
   924                           ; BSR set to: 0
   925                           ;main.c: 187: {
   926                           ;main.c: 192: rightWheelMeasuredSpeed = (int) ((rightWheelCount - rightCountTracker) * (
      +                          2.4 * 500 ) / (elapsedMillis - speedLastMillis));
   927  001A9E  C083  F06F         	movff	main@speedLastMillis,??_main
   928  001AA2  C084  F070         	movff	main@speedLastMillis+1,??_main+1
   929  001AA6  C085  F071         	movff	main@speedLastMillis+2,??_main+2
   930  001AAA  C086  F072         	movff	main@speedLastMillis+3,??_main+3
   931  001AAE  0100               	movlb	0	; () banked
   932  001AB0  1F6F               	comf	??_main& (0+255),f,b
   933  001AB2  1F70               	comf	(??_main+1)& (0+255),f,b
   934  001AB4  1F71               	comf	(??_main+2)& (0+255),f,b
   935  001AB6  1F72               	comf	(??_main+3)& (0+255),f,b
   936  001AB8  2B6F               	incf	??_main& (0+255),f,b
   937  001ABA  0E00               	movlw	0
   938  001ABC  2370               	addwfc	(??_main+1)& (0+255),f,b
   939  001ABE  2371               	addwfc	(??_main+2)& (0+255),f,b
   940  001AC0  2372               	addwfc	(??_main+3)& (0+255),f,b
   941  001AC2  0100               	movlb	0	; () banked
   942  001AC4  5187               	movf	_elapsedMillis& (0+255),w,b
   943  001AC6  0100               	movlb	0	; () banked
   944  001AC8  256F               	addwf	??_main& (0+255),w,b
   945  001ACA  6E1B               	movwf	___lltoft@c,c
   946  001ACC  0100               	movlb	0	; () banked
   947  001ACE  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
   948  001AD0  0100               	movlb	0	; () banked
   949  001AD2  2170               	addwfc	(??_main+1)& (0+255),w,b
   950  001AD4  6E1C               	movwf	___lltoft@c+1,c
   951  001AD6  0100               	movlb	0	; () banked
   952  001AD8  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
   953  001ADA  0100               	movlb	0	; () banked
   954  001ADC  2171               	addwfc	(??_main+2)& (0+255),w,b
   955  001ADE  6E1D               	movwf	___lltoft@c+2,c
   956  001AE0  0100               	movlb	0	; () banked
   957  001AE2  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
   958  001AE4  0100               	movlb	0	; () banked
   959  001AE6  2172               	addwfc	(??_main+3)& (0+255),w,b
   960  001AE8  6E1E               	movwf	___lltoft@c+3,c
   961  001AEA  ECA6  F012         	call	___lltoft	;wreg free
   962  001AEE  C01B  F036         	movff	?___lltoft,___ftdiv@f2
   963  001AF2  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
   964  001AF6  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
   965  001AFA  0E00               	movlw	0
   966  001AFC  6E27               	movwf	___ftmul@f2,c
   967  001AFE  0E96               	movlw	150
   968  001B00  6E28               	movwf	___ftmul@f2+1,c
   969  001B02  0E44               	movlw	68
   970  001B04  6E29               	movwf	___ftmul@f2+2,c
   971  001B06  C081  F073         	movff	main@rightCountTracker,??_main+4
   972  001B0A  C082  F074         	movff	main@rightCountTracker+1,??_main+5
   973  001B0E  0E00               	movlw	0
   974  001B10  0100               	movlb	0	; () banked
   975  001B12  BF74               	btfsc	(??_main+5)& (0+255),7,b
   976  001B14  0EFF               	movlw	255
   977  001B16  6F75               	movwf	(??_main+6)& (0+255),b
   978  001B18  6F76               	movwf	(??_main+7)& (0+255),b
   979  001B1A  0100               	movlb	0	; () banked
   980  001B1C  1F73               	comf	(??_main+4)& (0+255),f,b
   981  001B1E  1F74               	comf	(??_main+5)& (0+255),f,b
   982  001B20  1F75               	comf	(??_main+6)& (0+255),f,b
   983  001B22  1F76               	comf	(??_main+7)& (0+255),f,b
   984  001B24  2B73               	incf	(??_main+4)& (0+255),f,b
   985  001B26  0E00               	movlw	0
   986  001B28  2374               	addwfc	(??_main+5)& (0+255),f,b
   987  001B2A  2375               	addwfc	(??_main+6)& (0+255),f,b
   988  001B2C  2376               	addwfc	(??_main+7)& (0+255),f,b
   989  001B2E  0100               	movlb	0	; () banked
   990  001B30  518F               	movf	_rightWheelCount& (0+255),w,b
   991  001B32  0100               	movlb	0	; () banked
   992  001B34  2573               	addwf	(??_main+4)& (0+255),w,b
   993  001B36  6E1B               	movwf	___lltoft@c,c
   994  001B38  0100               	movlb	0	; () banked
   995  001B3A  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
   996  001B3C  0100               	movlb	0	; () banked
   997  001B3E  2174               	addwfc	(??_main+5)& (0+255),w,b
   998  001B40  6E1C               	movwf	___lltoft@c+1,c
   999  001B42  0100               	movlb	0	; () banked
  1000  001B44  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
  1001  001B46  0100               	movlb	0	; () banked
  1002  001B48  2175               	addwfc	(??_main+6)& (0+255),w,b
  1003  001B4A  6E1D               	movwf	___lltoft@c+2,c
  1004  001B4C  0100               	movlb	0	; () banked
  1005  001B4E  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  1006  001B50  0100               	movlb	0	; () banked
  1007  001B52  2176               	addwfc	(??_main+7)& (0+255),w,b
  1008  001B54  6E1E               	movwf	___lltoft@c+3,c
  1009  001B56  ECA6  F012         	call	___lltoft	;wreg free
  1010  001B5A  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1011  001B5E  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1012  001B62  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1013  001B66  ECF6  F00F         	call	___ftmul	;wreg free
  1014  001B6A  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1015  001B6E  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1016  001B72  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1017  001B76  EC70  F010         	call	___ftdiv	;wreg free
  1018  001B7A  C033  F060         	movff	?___ftdiv,___fttol@f1
  1019  001B7E  C034  F061         	movff	?___ftdiv+1,___fttol@f1+1
  1020  001B82  C035  F062         	movff	?___ftdiv+2,___fttol@f1+2
  1021  001B86  EC54  F00F         	call	___fttol	;wreg free
  1022  001B8A  C060  F095         	movff	?___fttol,_rightWheelMeasuredSpeed
  1023  001B8E  C061  F096         	movff	?___fttol+1,_rightWheelMeasuredSpeed+1
  1024                           
  1025                           ;main.c: 194: leftWheelMeasuredSpeed = (int) ((leftWheelCount - leftCountTracker) * (2.4
      +                           * 500) / (elapsedMillis - speedLastMillis));
  1026  001B92  C083  F06F         	movff	main@speedLastMillis,??_main
  1027  001B96  C084  F070         	movff	main@speedLastMillis+1,??_main+1
  1028  001B9A  C085  F071         	movff	main@speedLastMillis+2,??_main+2
  1029  001B9E  C086  F072         	movff	main@speedLastMillis+3,??_main+3
  1030  001BA2  0100               	movlb	0	; () banked
  1031  001BA4  1F6F               	comf	??_main& (0+255),f,b
  1032  001BA6  1F70               	comf	(??_main+1)& (0+255),f,b
  1033  001BA8  1F71               	comf	(??_main+2)& (0+255),f,b
  1034  001BAA  1F72               	comf	(??_main+3)& (0+255),f,b
  1035  001BAC  2B6F               	incf	??_main& (0+255),f,b
  1036  001BAE  0E00               	movlw	0
  1037  001BB0  2370               	addwfc	(??_main+1)& (0+255),f,b
  1038  001BB2  2371               	addwfc	(??_main+2)& (0+255),f,b
  1039  001BB4  2372               	addwfc	(??_main+3)& (0+255),f,b
  1040  001BB6  0100               	movlb	0	; () banked
  1041  001BB8  5187               	movf	_elapsedMillis& (0+255),w,b
  1042  001BBA  0100               	movlb	0	; () banked
  1043  001BBC  256F               	addwf	??_main& (0+255),w,b
  1044  001BBE  6E1B               	movwf	___lltoft@c,c
  1045  001BC0  0100               	movlb	0	; () banked
  1046  001BC2  5188               	movf	(_elapsedMillis+1)& (0+255),w,b
  1047  001BC4  0100               	movlb	0	; () banked
  1048  001BC6  2170               	addwfc	(??_main+1)& (0+255),w,b
  1049  001BC8  6E1C               	movwf	___lltoft@c+1,c
  1050  001BCA  0100               	movlb	0	; () banked
  1051  001BCC  5189               	movf	(_elapsedMillis+2)& (0+255),w,b
  1052  001BCE  0100               	movlb	0	; () banked
  1053  001BD0  2171               	addwfc	(??_main+2)& (0+255),w,b
  1054  001BD2  6E1D               	movwf	___lltoft@c+2,c
  1055  001BD4  0100               	movlb	0	; () banked
  1056  001BD6  518A               	movf	(_elapsedMillis+3)& (0+255),w,b
  1057  001BD8  0100               	movlb	0	; () banked
  1058  001BDA  2172               	addwfc	(??_main+3)& (0+255),w,b
  1059  001BDC  6E1E               	movwf	___lltoft@c+3,c
  1060  001BDE  ECA6  F012         	call	___lltoft	;wreg free
  1061  001BE2  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1062  001BE6  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1063  001BEA  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1064  001BEE  0E00               	movlw	0
  1065  001BF0  6E27               	movwf	___ftmul@f2,c
  1066  001BF2  0E96               	movlw	150
  1067  001BF4  6E28               	movwf	___ftmul@f2+1,c
  1068  001BF6  0E44               	movlw	68
  1069  001BF8  6E29               	movwf	___ftmul@f2+2,c
  1070  001BFA  C07F  F073         	movff	main@leftCountTracker,??_main+4
  1071  001BFE  C080  F074         	movff	main@leftCountTracker+1,??_main+5
  1072  001C02  0E00               	movlw	0
  1073  001C04  0100               	movlb	0	; () banked
  1074  001C06  BF74               	btfsc	(??_main+5)& (0+255),7,b
  1075  001C08  0EFF               	movlw	255
  1076  001C0A  6F75               	movwf	(??_main+6)& (0+255),b
  1077  001C0C  6F76               	movwf	(??_main+7)& (0+255),b
  1078  001C0E  0100               	movlb	0	; () banked
  1079  001C10  1F73               	comf	(??_main+4)& (0+255),f,b
  1080  001C12  1F74               	comf	(??_main+5)& (0+255),f,b
  1081  001C14  1F75               	comf	(??_main+6)& (0+255),f,b
  1082  001C16  1F76               	comf	(??_main+7)& (0+255),f,b
  1083  001C18  2B73               	incf	(??_main+4)& (0+255),f,b
  1084  001C1A  0E00               	movlw	0
  1085  001C1C  2374               	addwfc	(??_main+5)& (0+255),f,b
  1086  001C1E  2375               	addwfc	(??_main+6)& (0+255),f,b
  1087  001C20  2376               	addwfc	(??_main+7)& (0+255),f,b
  1088  001C22  0100               	movlb	0	; () banked
  1089  001C24  518B               	movf	_leftWheelCount& (0+255),w,b
  1090  001C26  0100               	movlb	0	; () banked
  1091  001C28  2573               	addwf	(??_main+4)& (0+255),w,b
  1092  001C2A  6E1B               	movwf	___lltoft@c,c
  1093  001C2C  0100               	movlb	0	; () banked
  1094  001C2E  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  1095  001C30  0100               	movlb	0	; () banked
  1096  001C32  2174               	addwfc	(??_main+5)& (0+255),w,b
  1097  001C34  6E1C               	movwf	___lltoft@c+1,c
  1098  001C36  0100               	movlb	0	; () banked
  1099  001C38  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  1100  001C3A  0100               	movlb	0	; () banked
  1101  001C3C  2175               	addwfc	(??_main+6)& (0+255),w,b
  1102  001C3E  6E1D               	movwf	___lltoft@c+2,c
  1103  001C40  0100               	movlb	0	; () banked
  1104  001C42  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  1105  001C44  0100               	movlb	0	; () banked
  1106  001C46  2176               	addwfc	(??_main+7)& (0+255),w,b
  1107  001C48  6E1E               	movwf	___lltoft@c+3,c
  1108  001C4A  ECA6  F012         	call	___lltoft	;wreg free
  1109  001C4E  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1110  001C52  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1111  001C56  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1112  001C5A  ECF6  F00F         	call	___ftmul	;wreg free
  1113  001C5E  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1114  001C62  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1115  001C66  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1116  001C6A  EC70  F010         	call	___ftdiv	;wreg free
  1117  001C6E  C033  F060         	movff	?___ftdiv,___fttol@f1
  1118  001C72  C034  F061         	movff	?___ftdiv+1,___fttol@f1+1
  1119  001C76  C035  F062         	movff	?___ftdiv+2,___fttol@f1+2
  1120  001C7A  EC54  F00F         	call	___fttol	;wreg free
  1121  001C7E  C060  F093         	movff	?___fttol,_leftWheelMeasuredSpeed
  1122  001C82  C061  F094         	movff	?___fttol+1,_leftWheelMeasuredSpeed+1
  1123                           
  1124                           ;main.c: 196: speedLastMillis = elapsedMillis;
  1125  001C86  C087  F083         	movff	_elapsedMillis,main@speedLastMillis
  1126  001C8A  C088  F084         	movff	_elapsedMillis+1,main@speedLastMillis+1
  1127  001C8E  C089  F085         	movff	_elapsedMillis+2,main@speedLastMillis+2
  1128  001C92  C08A  F086         	movff	_elapsedMillis+3,main@speedLastMillis+3
  1129                           
  1130                           ;main.c: 198: rightCountTracker = rightWheelCount;
  1131  001C96  C08F  F081         	movff	_rightWheelCount,main@rightCountTracker
  1132  001C9A  C090  F082         	movff	_rightWheelCount+1,main@rightCountTracker+1
  1133                           
  1134                           ;main.c: 200: leftCountTracker = leftWheelCount;
  1135  001C9E  C08B  F07F         	movff	_leftWheelCount,main@leftCountTracker
  1136  001CA2  C08C  F080         	movff	_leftWheelCount+1,main@leftCountTracker+1
  1137  001CA6  D64D               	goto	l2703
  1138  001CA8                     __end_of_main:
  1139                           	opt stack 0
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           postdec1	equ	0xFE5
  1147                           fsr1l	equ	0xFE1
  1148                           status	equ	0xFD8
  1149                           
  1150 ;; *************** function _printf *****************
  1151 ;; Defined at:
  1152 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1155 ;;		 -> STR_4(8), STR_3(8), STR_2(10), STR_1(11), 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  tmpval          4    0        struct .
  1158 ;;  cp              3    0        PTR const unsigned char 
  1159 ;;  width           2   46[COMRAM] int 
  1160 ;;  val             2   44[COMRAM] unsigned int 
  1161 ;;  ap              2   40[COMRAM] PTR void [1]
  1162 ;;		 -> ?_printf(2), 
  1163 ;;  len             2    0        unsigned int 
  1164 ;;  c               1   48[COMRAM] char 
  1165 ;;  flag            1   43[COMRAM] unsigned char 
  1166 ;;  prec            1   42[COMRAM] char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  2   30[COMRAM] int 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1176 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1177 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1178 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;Total ram usage:       19 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    4
  1183 ;; This function calls:
  1184 ;;		___lwdiv
  1185 ;;		___lwmod
  1186 ;;		___wmul
  1187 ;;		_isdigit
  1188 ;;		_putch
  1189 ;; This function is called by:
  1190 ;;		_main
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text1
  1195  001CA8                     __ptext1:
  1196                           	opt stack 0
  1197  001CA8                     _printf:
  1198                           	opt stack 26
  1199                           
  1200                           ;doprnt.c: 466: va_list ap;
  1201                           ;doprnt.c: 499: signed char c;
  1202                           ;doprnt.c: 501: int width;
  1203                           ;doprnt.c: 506: signed char prec;
  1204                           ;doprnt.c: 508: unsigned char flag;
  1205                           ;doprnt.c: 523: union {
  1206                           ;doprnt.c: 524: unsigned long vd;
  1207                           ;doprnt.c: 525: double integ;
  1208                           ;doprnt.c: 526: } tmpval;
  1209                           ;doprnt.c: 528: unsigned int val;
  1210                           ;doprnt.c: 529: unsigned len;
  1211                           ;doprnt.c: 530: const char * cp;
  1212                           ;doprnt.c: 533: *ap = __va_start();
  1213                           
  1214                           ;incstack = 0
  1215  001CA8  0E21               	movlw	low (?_printf+2)
  1216  001CAA  6E29               	movwf	printf@ap,c
  1217  001CAC  0E00               	movlw	high (?_printf+2)
  1218  001CAE  6E2A               	movwf	printf@ap+1,c
  1219                           
  1220                           ;doprnt.c: 536: while(c = *f++) {
  1221  001CB0  D0EE               	goto	l2149
  1222  001CB2                     l2073:
  1223                           
  1224                           ;doprnt.c: 538: if(c != '%')
  1225  001CB2  0E25               	movlw	37
  1226  001CB4  1831               	xorwf	printf@c,w,c
  1227  001CB6  B4D8               	btfsc	status,2,c
  1228  001CB8  D004               	goto	l2077
  1229                           
  1230                           ;doprnt.c: 540: {
  1231                           ;doprnt.c: 541: (putch(c) );
  1232  001CBA  5031               	movf	printf@c,w,c
  1233  001CBC  ECD4  F013         	call	_putch
  1234                           
  1235                           ;doprnt.c: 542: continue;
  1236  001CC0  D0E6               	goto	l2149
  1237  001CC2                     l2077:
  1238                           
  1239                           ;doprnt.c: 543: }
  1240                           ;doprnt.c: 546: width = 0;
  1241  001CC2  0E00               	movlw	0
  1242  001CC4  6E30               	movwf	printf@width+1,c
  1243  001CC6  0E00               	movlw	0
  1244  001CC8  6E2F               	movwf	printf@width,c
  1245                           
  1246                           ;doprnt.c: 548: flag = 0;
  1247  001CCA  0E00               	movlw	0
  1248  001CCC  6E2C               	movwf	printf@flag,c
  1249                           
  1250                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1251  001CCE  C01F  FFF6         	movff	printf@f,tblptrl
  1252  001CD2  C020  FFF7         	movff	printf@f+1,tblptrh
  1253  001CD6                     	if	0	;tblptru may be non-zero
  1254  001CD6                     	endif
  1255  001CD6                     	if	0	;tblptru may be non-zero
  1256  001CD6                     	endif
  1257  001CD6  0008               	tblrd		*
  1258  001CD8  50F5               	movf	tablat,w,c
  1259  001CDA  EC9C  F013         	call	_isdigit
  1260  001CDE  A0D8               	btfss	status,0,c
  1261  001CE0  D032               	goto	l2093
  1262                           
  1263                           ;doprnt.c: 598: width = 0;
  1264  001CE2  0E00               	movlw	0
  1265  001CE4  6E30               	movwf	printf@width+1,c
  1266  001CE6  0E00               	movlw	0
  1267  001CE8  6E2F               	movwf	printf@width,c
  1268  001CEA                     l2083:
  1269                           
  1270                           ;doprnt.c: 600: width *= 10;
  1271  001CEA  C02F  F013         	movff	printf@width,___wmul@multiplier
  1272  001CEE  C030  F014         	movff	printf@width+1,___wmul@multiplier+1
  1273  001CF2  0E00               	movlw	0
  1274  001CF4  6E16               	movwf	___wmul@multiplicand+1,c
  1275  001CF6  0E0A               	movlw	10
  1276  001CF8  6E15               	movwf	___wmul@multiplicand,c
  1277  001CFA  EC89  F013         	call	___wmul	;wreg free
  1278  001CFE  C013  F02F         	movff	?___wmul,printf@width
  1279  001D02  C014  F030         	movff	?___wmul+1,printf@width+1
  1280                           
  1281                           ;doprnt.c: 601: width += *f++ - '0';
  1282  001D06  0ED0               	movlw	208
  1283  001D08  6E25               	movwf	??_printf& (0+255),c
  1284  001D0A  0EFF               	movlw	255
  1285  001D0C  6E26               	movwf	(??_printf+1)& (0+255),c
  1286  001D0E  C01F  FFF6         	movff	printf@f,tblptrl
  1287  001D12  C020  FFF7         	movff	printf@f+1,tblptrh
  1288  001D16                     	if	0	;tblptru may be non-zero
  1289  001D16                     	endif
  1290  001D16                     	if	0	;tblptru may be non-zero
  1291  001D16                     	endif
  1292  001D16  0008               	tblrd		*
  1293  001D18  50F5               	movf	tablat,w,c
  1294  001D1A  6E27               	movwf	(??_printf+2)& (0+255),c
  1295  001D1C  6A28               	clrf	(??_printf+3)& (0+255),c
  1296  001D1E  5025               	movf	??_printf,w,c
  1297  001D20  2627               	addwf	??_printf+2,f,c
  1298  001D22  5026               	movf	??_printf+1,w,c
  1299  001D24  2228               	addwfc	??_printf+3,f,c
  1300  001D26  5027               	movf	??_printf+2,w,c
  1301  001D28  262F               	addwf	printf@width,f,c
  1302  001D2A  5028               	movf	??_printf+3,w,c
  1303  001D2C  2230               	addwfc	printf@width+1,f,c
  1304  001D2E  4A1F               	infsnz	printf@f,f,c
  1305  001D30  2A20               	incf	printf@f+1,f,c
  1306                           
  1307                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1308  001D32  C01F  FFF6         	movff	printf@f,tblptrl
  1309  001D36  C020  FFF7         	movff	printf@f+1,tblptrh
  1310  001D3A                     	if	0	;tblptru may be non-zero
  1311  001D3A                     	endif
  1312  001D3A                     	if	0	;tblptru may be non-zero
  1313  001D3A                     	endif
  1314  001D3A  0008               	tblrd		*
  1315  001D3C  50F5               	movf	tablat,w,c
  1316  001D3E  EC9C  F013         	call	_isdigit
  1317  001D42  B0D8               	btfsc	status,0,c
  1318  001D44  D7D2               	goto	l2083
  1319  001D46                     l2093:
  1320  001D46  C01F  FFF6         	movff	printf@f,tblptrl
  1321  001D4A  C020  FFF7         	movff	printf@f+1,tblptrh
  1322  001D4E  4A1F               	infsnz	printf@f,f,c
  1323  001D50  2A20               	incf	printf@f+1,f,c
  1324  001D52                     	if	0	;tblptru may be non-zero
  1325  001D52                     	endif
  1326  001D52                     	if	0	;tblptru may be non-zero
  1327  001D52                     	endif
  1328  001D52  0008               	tblrd		*
  1329  001D54  CFF5 F031          	movff	tablat,printf@c
  1330  001D58  5031               	movf	printf@c,w,c
  1331                           
  1332                           ; Switch size 1, requested type "space"
  1333                           ; Number of cases is 3, Range of values is 0 to 105
  1334                           ; switch strategies available:
  1335                           ; Name         Instructions Cycles
  1336                           ; simple_byte           10     6 (average)
  1337                           ;	Chosen strategy is simple_byte
  1338  001D5A  0A00               	xorlw	0	; case 0
  1339  001D5C  B4D8               	btfsc	status,2,c
  1340  001D5E  0012               	return	
  1341  001D60  0A64               	xorlw	100	; case 100
  1342  001D62  B4D8               	btfsc	status,2,c
  1343  001D64  D003               	goto	l2095
  1344  001D66  0A0D               	xorlw	13	; case 105
  1345  001D68  A4D8               	btfss	status,2,c
  1346  001D6A  D091               	goto	l2149
  1347  001D6C                     l2095:
  1348                           
  1349                           ;doprnt.c: 1253: {
  1350                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1351  001D6C  C029  FFD9         	movff	printf@ap,fsr2l
  1352  001D70  C02A  FFDA         	movff	printf@ap+1,fsr2h
  1353  001D74  CFDE F02D          	movff	postinc2,printf@val
  1354  001D78  CFDD F02E          	movff	postdec2,printf@val+1
  1355  001D7C  0E02               	movlw	2
  1356  001D7E  2629               	addwf	printf@ap,f,c
  1357  001D80  0E00               	movlw	0
  1358  001D82  222A               	addwfc	printf@ap+1,f,c
  1359                           
  1360                           ;doprnt.c: 1261: if((int)val < 0) {
  1361  001D84  AE2E               	btfss	printf@val+1,7,c
  1362  001D86  D006               	goto	l2105
  1363                           
  1364                           ;doprnt.c: 1262: flag |= 0x03;
  1365  001D88  0E03               	movlw	3
  1366  001D8A  122C               	iorwf	printf@flag,f,c
  1367                           
  1368                           ;doprnt.c: 1263: val = -val;
  1369  001D8C  6C2D               	negf	printf@val,c
  1370  001D8E  1E2E               	comf	printf@val+1,f,c
  1371  001D90  B0D8               	btfsc	status,0,c
  1372  001D92  2A2E               	incf	printf@val+1,f,c
  1373  001D94                     l2105:
  1374                           
  1375                           ;doprnt.c: 1264: }
  1376                           ;doprnt.c: 1266: }
  1377                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1378  001D94  0E01               	movlw	1
  1379  001D96  6E31               	movwf	printf@c,c
  1380  001D98                     l2107:
  1381  001D98  0E05               	movlw	5
  1382  001D9A  1831               	xorwf	printf@c,w,c
  1383  001D9C  B4D8               	btfsc	status,2,c
  1384  001D9E  D012               	goto	l2119
  1385                           
  1386                           ;doprnt.c: 1306: if(val < dpowers[c])
  1387  001DA0  5031               	movf	printf@c,w,c
  1388  001DA2  0D02               	mullw	2
  1389  001DA4  0E01               	movlw	low _dpowers
  1390  001DA6  24F3               	addwf	prodl,w,c
  1391  001DA8  6EF6               	movwf	tblptrl,c
  1392  001DAA  0E10               	movlw	high _dpowers
  1393  001DAC  20F4               	addwfc	prodh,w,c
  1394  001DAE  6EF7               	movwf	tblptrh,c
  1395  001DB0                     	if	0	;There are less than 3 active tblptr bytes
  1396  001DB0                     	endif
  1397  001DB0  0009               	tblrd		*+
  1398  001DB2  50F5               	movf	tablat,w,c
  1399  001DB4  5C2D               	subwf	printf@val,w,c
  1400  001DB6  0009               	tblrd		*+
  1401  001DB8  50F5               	movf	tablat,w,c
  1402  001DBA  582E               	subwfb	printf@val+1,w,c
  1403  001DBC  A0D8               	btfss	status,0,c
  1404  001DBE  D002               	goto	l2119
  1405                           
  1406                           ;doprnt.c: 1307: break;
  1407  001DC0  2A31               	incf	printf@c,f,c
  1408  001DC2  D7EA               	goto	l2107
  1409  001DC4                     l2119:
  1410                           
  1411                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1412  001DC4  502F               	movf	printf@width,w,c
  1413  001DC6  1030               	iorwf	printf@width+1,w,c
  1414  001DC8  B4D8               	btfsc	status,2,c
  1415  001DCA  D009               	goto	l2125
  1416  001DCC  C02C  F025         	movff	printf@flag,??_printf
  1417  001DD0  0E03               	movlw	3
  1418  001DD2  1625               	andwf	??_printf,f,c
  1419  001DD4  B4D8               	btfsc	status,2,c
  1420  001DD6  D003               	goto	l2125
  1421                           
  1422                           ;doprnt.c: 1346: width--;
  1423  001DD8  062F               	decf	printf@width,f,c
  1424  001DDA  A0D8               	btfss	status,0,c
  1425  001DDC  0630               	decf	printf@width+1,f,c
  1426  001DDE                     l2125:
  1427                           
  1428                           ;doprnt.c: 1381: if(width > c)
  1429  001DDE  0E80               	movlw	128
  1430  001DE0  BE31               	btfsc	printf@c,7,c
  1431  001DE2  0E7F               	movlw	127
  1432  001DE4  6E25               	movwf	??_printf& (0+255),c
  1433  001DE6  502F               	movf	printf@width,w,c
  1434  001DE8  5C31               	subwf	printf@c,w,c
  1435  001DEA  5030               	movf	printf@width+1,w,c
  1436  001DEC  0A80               	xorlw	128
  1437  001DEE  5825               	subwfb	??_printf& (0+255),w,c
  1438  001DF0  B0D8               	btfsc	status,0,c
  1439  001DF2  D007               	goto	l2129
  1440                           
  1441                           ;doprnt.c: 1382: width -= c;
  1442  001DF4  5031               	movf	printf@c,w,c
  1443  001DF6  5E2F               	subwf	printf@width,f,c
  1444  001DF8  0E00               	movlw	0
  1445  001DFA  BE31               	btfsc	printf@c,7,c
  1446  001DFC  0EFF               	movlw	255
  1447  001DFE  5A30               	subwfb	printf@width+1,f,c
  1448  001E00  D004               	goto	l2131
  1449  001E02                     l2129:
  1450                           
  1451                           ;doprnt.c: 1383: else
  1452                           ;doprnt.c: 1384: width = 0;
  1453  001E02  0E00               	movlw	0
  1454  001E04  6E30               	movwf	printf@width+1,c
  1455  001E06  0E00               	movlw	0
  1456  001E08  6E2F               	movwf	printf@width,c
  1457  001E0A                     l2131:
  1458                           
  1459                           ;doprnt.c: 1422: {
  1460                           ;doprnt.c: 1424: if(width
  1461                           ;doprnt.c: 1428: )
  1462  001E0A  502F               	movf	printf@width,w,c
  1463  001E0C  1030               	iorwf	printf@width+1,w,c
  1464  001E0E  B4D8               	btfsc	status,2,c
  1465  001E10  D00A               	goto	l2137
  1466  001E12                     l2133:
  1467                           
  1468                           ;doprnt.c: 1430: (putch(' ') );
  1469  001E12  0E20               	movlw	32
  1470  001E14  ECD4  F013         	call	_putch
  1471                           
  1472                           ;doprnt.c: 1431: while(--width);
  1473  001E18  062F               	decf	printf@width,f,c
  1474  001E1A  A0D8               	btfss	status,0,c
  1475  001E1C  0630               	decf	printf@width+1,f,c
  1476  001E1E  502F               	movf	printf@width,w,c
  1477  001E20  1030               	iorwf	printf@width+1,w,c
  1478  001E22  A4D8               	btfss	status,2,c
  1479  001E24  D7F6               	goto	l2133
  1480  001E26                     l2137:
  1481                           
  1482                           ;doprnt.c: 1438: if(flag & 0x03)
  1483  001E26  C02C  F025         	movff	printf@flag,??_printf
  1484  001E2A  0E03               	movlw	3
  1485  001E2C  1625               	andwf	??_printf,f,c
  1486  001E2E  B4D8               	btfsc	status,2,c
  1487  001E30  D003               	goto	l2141
  1488                           
  1489                           ;doprnt.c: 1439: (putch('-') );
  1490  001E32  0E2D               	movlw	45
  1491  001E34  ECD4  F013         	call	_putch
  1492  001E38                     l2141:
  1493                           
  1494                           ;doprnt.c: 1469: }
  1495                           ;doprnt.c: 1472: prec = c;
  1496  001E38  C031  F02B         	movff	printf@c,printf@prec
  1497                           
  1498                           ;doprnt.c: 1474: while(prec--) {
  1499  001E3C  D024               	goto	l2147
  1500  001E3E                     l2143:
  1501                           
  1502                           ;doprnt.c: 1478: {
  1503                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1504  001E3E  502B               	movf	printf@prec,w,c
  1505  001E40  0D02               	mullw	2
  1506  001E42  0E01               	movlw	low _dpowers
  1507  001E44  24F3               	addwf	prodl,w,c
  1508  001E46  6EF6               	movwf	tblptrl,c
  1509  001E48  0E10               	movlw	high _dpowers
  1510  001E4A  20F4               	addwfc	prodh,w,c
  1511  001E4C  6EF7               	movwf	tblptrh,c
  1512  001E4E                     	if	0	;There are less than 3 active tblptr bytes
  1513  001E4E                     	endif
  1514  001E4E  0009               	tblrd		*+
  1515  001E50  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1516  001E54  000A               	tblrd		*-
  1517  001E56  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1518  001E5A  C02D  F013         	movff	printf@val,___lwdiv@dividend
  1519  001E5E  C02E  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1520  001E62  EC00  F013         	call	___lwdiv	;wreg free
  1521  001E66  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1522  001E6A  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1523  001E6E  0E00               	movlw	0
  1524  001E70  6E1D               	movwf	___lwmod@divisor+1,c
  1525  001E72  0E0A               	movlw	10
  1526  001E74  6E1C               	movwf	___lwmod@divisor,c
  1527  001E76  EC29  F013         	call	___lwmod	;wreg free
  1528  001E7A  501A               	movf	?___lwmod,w,c
  1529  001E7C  0F30               	addlw	48
  1530  001E7E  6E31               	movwf	printf@c,c
  1531                           
  1532                           ;doprnt.c: 1523: }
  1533                           ;doprnt.c: 1524: (putch(c) );
  1534  001E80  5031               	movf	printf@c,w,c
  1535  001E82  ECD4  F013         	call	_putch
  1536  001E86                     l2147:
  1537  001E86  062B               	decf	printf@prec,f,c
  1538  001E88  282B               	incf	printf@prec,w,c
  1539  001E8A  A4D8               	btfss	status,2,c
  1540  001E8C  D7D8               	goto	l2143
  1541  001E8E                     l2149:
  1542  001E8E  C01F  FFF6         	movff	printf@f,tblptrl
  1543  001E92  C020  FFF7         	movff	printf@f+1,tblptrh
  1544  001E96  4A1F               	infsnz	printf@f,f,c
  1545  001E98  2A20               	incf	printf@f+1,f,c
  1546  001E9A                     	if	0	;tblptru may be non-zero
  1547  001E9A                     	endif
  1548  001E9A                     	if	0	;tblptru may be non-zero
  1549  001E9A                     	endif
  1550  001E9A  0008               	tblrd		*
  1551  001E9C  CFF5 F031          	movff	tablat,printf@c
  1552  001EA0  5031               	movf	printf@c,w,c
  1553  001EA2  B4D8               	btfsc	status,2,c
  1554  001EA4  0012               	return	
  1555  001EA6  D705               	goto	l2073
  1556  001EA8                     __end_of_printf:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           prodh	equ	0xFF4
  1563                           prodl	equ	0xFF3
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           postdec1	equ	0xFE5
  1567                           fsr1l	equ	0xFE1
  1568                           postinc2	equ	0xFDE
  1569                           postdec2	equ	0xFDD
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _putch *****************
  1575 ;; Defined at:
  1576 ;;		line 12 in file "printfLib.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  data            1    wreg     unsigned char 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  data            1   20[COMRAM] unsigned char 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:        1 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    3
  1597 ;; This function calls:
  1598 ;;		_LCDwrite
  1599 ;; This function is called by:
  1600 ;;		_printf
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text2
  1605  0027A8                     __ptext2:
  1606                           	opt stack 0
  1607  0027A8                     _putch:
  1608                           	opt stack 26
  1609                           
  1610                           ;incstack = 0
  1611                           ;putch@data stored from wreg
  1612  0027A8  6E15               	movwf	putch@data,c
  1613                           
  1614                           ;printfLib.c: 13: LCDwrite(data);
  1615  0027AA  5015               	movf	putch@data,w,c
  1616  0027AC  ECB5  F013         	call	_LCDwrite
  1617  0027B0  0012               	return		;funcret
  1618  0027B2                     __end_of_putch:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           prodh	equ	0xFF4
  1625                           prodl	equ	0xFF3
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1l	equ	0xFE1
  1630                           postinc2	equ	0xFDE
  1631                           postdec2	equ	0xFDD
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _LCDwrite *****************
  1637 ;; Defined at:
  1638 ;;		line 118 in file "lcd.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  input           1    wreg     unsigned char 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  input           1   19[COMRAM] unsigned char 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;Total ram usage:        1 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    2
  1659 ;; This function calls:
  1660 ;;		_LCDcheckBF
  1661 ;;		_LCDcmd
  1662 ;; This function is called by:
  1663 ;;		_putch
  1664 ;;		_LCDputs
  1665 ;;		_LCDwriteLineOne
  1666 ;;		_LCDwriteLineTwo
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text3
  1671  00276A                     __ptext3:
  1672                           	opt stack 0
  1673  00276A                     _LCDwrite:
  1674                           	opt stack 26
  1675                           
  1676                           ;incstack = 0
  1677                           ;LCDwrite@input stored from wreg
  1678  00276A  6E14               	movwf	LCDwrite@input,c
  1679                           
  1680                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  1681  00276C  808D               	bsf	3981,0,c	;volatile
  1682                           
  1683                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  1684  00276E  928D               	bcf	3981,1,c	;volatile
  1685                           
  1686                           ;lcd.c: 122: LCDcmd(input);
  1687  002770  5014               	movf	LCDwrite@input,w,c
  1688  002772  ECCE  F013         	call	_LCDcmd
  1689                           
  1690                           ;lcd.c: 123: LCDcheckBF();
  1691  002776  ECAB  F013         	call	_LCDcheckBF	;wreg free
  1692  00277A  0012               	return		;funcret
  1693  00277C                     __end_of_LCDwrite:
  1694                           	opt stack 0
  1695                           tblptru	equ	0xFF8
  1696                           tblptrh	equ	0xFF7
  1697                           tblptrl	equ	0xFF6
  1698                           tablat	equ	0xFF5
  1699                           prodh	equ	0xFF4
  1700                           prodl	equ	0xFF3
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           postdec1	equ	0xFE5
  1704                           fsr1l	equ	0xFE1
  1705                           postinc2	equ	0xFDE
  1706                           postdec2	equ	0xFDD
  1707                           fsr2h	equ	0xFDA
  1708                           fsr2l	equ	0xFD9
  1709                           status	equ	0xFD8
  1710                           
  1711 ;; *************** function _isdigit *****************
  1712 ;; Defined at:
  1713 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  c               1    wreg     unsigned char 
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  c               1   20[COMRAM] unsigned char 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;		None               void
  1720 ;; Registers used:
  1721 ;;		wreg, status,2, status,0
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;Total ram usage:        3 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    1
  1734 ;; This function calls:
  1735 ;;		Nothing
  1736 ;; This function is called by:
  1737 ;;		_printf
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text4
  1742  002738                     __ptext4:
  1743                           	opt stack 0
  1744  002738                     _isdigit:
  1745                           	opt stack 28
  1746                           
  1747                           ;incstack = 0
  1748                           ;isdigit@c stored from wreg
  1749  002738  6E15               	movwf	isdigit@c,c
  1750  00273A  0E00               	movlw	0
  1751  00273C  6E14               	movwf	_isdigit$1794,c
  1752  00273E  0E3A               	movlw	58
  1753  002740  6015               	cpfslt	isdigit@c,c
  1754  002742  D005               	goto	l1817
  1755  002744  0E2F               	movlw	47
  1756  002746  6415               	cpfsgt	isdigit@c,c
  1757  002748  D002               	goto	l1817
  1758  00274A  0E01               	movlw	1
  1759  00274C  6E14               	movwf	_isdigit$1794,c
  1760  00274E                     l1817:
  1761  00274E  C014  F013         	movff	_isdigit$1794,??_isdigit
  1762  002752  3013               	rrcf	??_isdigit,w,c
  1763  002754  0012               	return	
  1764  002756                     __end_of_isdigit:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           prodh	equ	0xFF4
  1771                           prodl	equ	0xFF3
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           fsr1l	equ	0xFE1
  1776                           postinc2	equ	0xFDE
  1777                           postdec2	equ	0xFDD
  1778                           fsr2h	equ	0xFDA
  1779                           fsr2l	equ	0xFD9
  1780                           status	equ	0xFD8
  1781                           
  1782 ;; *************** function ___wmul *****************
  1783 ;; Defined at:
  1784 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  multiplier      2   18[COMRAM] unsigned int 
  1787 ;;  multiplicand    2   20[COMRAM] unsigned int 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  product         2   22[COMRAM] unsigned int 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  2   18[COMRAM] unsigned int 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0, prodl, prodh
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1799 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;Total ram usage:        6 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    1
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_printf
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text5
  1814  002712                     __ptext5:
  1815                           	opt stack 0
  1816  002712                     ___wmul:
  1817                           	opt stack 28
  1818                           
  1819                           ;incstack = 0
  1820  002712  5013               	movf	___wmul@multiplier,w,c
  1821  002714  0215               	mulwf	___wmul@multiplicand,c
  1822  002716  CFF3 F017          	movff	prodl,___wmul@product
  1823  00271A  CFF4 F018          	movff	prodh,___wmul@product+1
  1824  00271E  5013               	movf	___wmul@multiplier,w,c
  1825  002720  0216               	mulwf	___wmul@multiplicand+1,c
  1826  002722  50F3               	movf	prodl,w,c
  1827  002724  2618               	addwf	___wmul@product+1,f,c
  1828  002726  5014               	movf	___wmul@multiplier+1,w,c
  1829  002728  0215               	mulwf	___wmul@multiplicand,c
  1830  00272A  50F3               	movf	prodl,w,c
  1831  00272C  2618               	addwf	___wmul@product+1,f,c
  1832  00272E  C017  F013         	movff	___wmul@product,?___wmul
  1833  002732  C018  F014         	movff	___wmul@product+1,?___wmul+1
  1834  002736  0012               	return	
  1835  002738                     __end_of___wmul:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           postdec1	equ	0xFE5
  1846                           fsr1l	equ	0xFE1
  1847                           postinc2	equ	0xFDE
  1848                           postdec2	equ	0xFDD
  1849                           fsr2h	equ	0xFDA
  1850                           fsr2l	equ	0xFD9
  1851                           status	equ	0xFD8
  1852                           
  1853 ;; *************** function ___lwmod *****************
  1854 ;; Defined at:
  1855 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  dividend        2   25[COMRAM] unsigned int 
  1858 ;;  divisor         2   27[COMRAM] unsigned int 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  counter         1   29[COMRAM] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  2   25[COMRAM] unsigned int 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;Total ram usage:        5 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    1
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_printf
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text6
  1885  002652                     __ptext6:
  1886                           	opt stack 0
  1887  002652                     ___lwmod:
  1888                           	opt stack 28
  1889                           
  1890                           ;incstack = 0
  1891  002652  501C               	movf	___lwmod@divisor,w,c
  1892  002654  101D               	iorwf	___lwmod@divisor+1,w,c
  1893  002656  B4D8               	btfsc	status,2,c
  1894  002658  D018               	goto	l728
  1895  00265A  0E01               	movlw	1
  1896  00265C  6E1E               	movwf	___lwmod@counter,c
  1897  00265E  D004               	goto	l1931
  1898  002660                     l1929:
  1899  002660  90D8               	bcf	status,0,c
  1900  002662  361C               	rlcf	___lwmod@divisor,f,c
  1901  002664  361D               	rlcf	___lwmod@divisor+1,f,c
  1902  002666  2A1E               	incf	___lwmod@counter,f,c
  1903  002668                     l1931:
  1904  002668  AE1D               	btfss	___lwmod@divisor+1,7,c
  1905  00266A  D7FA               	goto	l1929
  1906  00266C                     l1933:
  1907  00266C  501C               	movf	___lwmod@divisor,w,c
  1908  00266E  5C1A               	subwf	___lwmod@dividend,w,c
  1909  002670  501D               	movf	___lwmod@divisor+1,w,c
  1910  002672  581B               	subwfb	___lwmod@dividend+1,w,c
  1911  002674  A0D8               	btfss	status,0,c
  1912  002676  D004               	goto	l1937
  1913  002678  501C               	movf	___lwmod@divisor,w,c
  1914  00267A  5E1A               	subwf	___lwmod@dividend,f,c
  1915  00267C  501D               	movf	___lwmod@divisor+1,w,c
  1916  00267E  5A1B               	subwfb	___lwmod@dividend+1,f,c
  1917  002680                     l1937:
  1918  002680  90D8               	bcf	status,0,c
  1919  002682  321D               	rrcf	___lwmod@divisor+1,f,c
  1920  002684  321C               	rrcf	___lwmod@divisor,f,c
  1921  002686  2E1E               	decfsz	___lwmod@counter,f,c
  1922  002688  D7F1               	goto	l1933
  1923  00268A                     l728:
  1924  00268A  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  1925  00268E  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  1926  002692  0012               	return		;funcret
  1927  002694                     __end_of___lwmod:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           postdec1	equ	0xFE5
  1938                           fsr1l	equ	0xFE1
  1939                           postinc2	equ	0xFDE
  1940                           postdec2	equ	0xFDD
  1941                           fsr2h	equ	0xFDA
  1942                           fsr2l	equ	0xFD9
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function ___lwdiv *****************
  1946 ;; Defined at:
  1947 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  dividend        2   18[COMRAM] unsigned int 
  1950 ;;  divisor         2   20[COMRAM] unsigned int 
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  quotient        2   22[COMRAM] unsigned int 
  1953 ;;  counter         1   24[COMRAM] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  2   18[COMRAM] unsigned int 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2, status,0
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;Total ram usage:        7 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    1
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_printf
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text7
  1978  002600                     __ptext7:
  1979                           	opt stack 0
  1980  002600                     ___lwdiv:
  1981                           	opt stack 28
  1982                           
  1983                           ;incstack = 0
  1984  002600  0E00               	movlw	0
  1985  002602  6E18               	movwf	___lwdiv@quotient+1,c
  1986  002604  0E00               	movlw	0
  1987  002606  6E17               	movwf	___lwdiv@quotient,c
  1988  002608  5015               	movf	___lwdiv@divisor,w,c
  1989  00260A  1016               	iorwf	___lwdiv@divisor+1,w,c
  1990  00260C  B4D8               	btfsc	status,2,c
  1991  00260E  D01C               	goto	l718
  1992  002610  0E01               	movlw	1
  1993  002612  6E19               	movwf	___lwdiv@counter,c
  1994  002614  D004               	goto	l1911
  1995  002616                     l1909:
  1996  002616  90D8               	bcf	status,0,c
  1997  002618  3615               	rlcf	___lwdiv@divisor,f,c
  1998  00261A  3616               	rlcf	___lwdiv@divisor+1,f,c
  1999  00261C  2A19               	incf	___lwdiv@counter,f,c
  2000  00261E                     l1911:
  2001  00261E  AE16               	btfss	___lwdiv@divisor+1,7,c
  2002  002620  D7FA               	goto	l1909
  2003  002622                     l1913:
  2004  002622  90D8               	bcf	status,0,c
  2005  002624  3617               	rlcf	___lwdiv@quotient,f,c
  2006  002626  3618               	rlcf	___lwdiv@quotient+1,f,c
  2007  002628  5015               	movf	___lwdiv@divisor,w,c
  2008  00262A  5C13               	subwf	___lwdiv@dividend,w,c
  2009  00262C  5016               	movf	___lwdiv@divisor+1,w,c
  2010  00262E  5814               	subwfb	___lwdiv@dividend+1,w,c
  2011  002630  A0D8               	btfss	status,0,c
  2012  002632  D005               	goto	l1921
  2013  002634  5015               	movf	___lwdiv@divisor,w,c
  2014  002636  5E13               	subwf	___lwdiv@dividend,f,c
  2015  002638  5016               	movf	___lwdiv@divisor+1,w,c
  2016  00263A  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2017  00263C  8017               	bsf	___lwdiv@quotient,0,c
  2018  00263E                     l1921:
  2019  00263E  90D8               	bcf	status,0,c
  2020  002640  3216               	rrcf	___lwdiv@divisor+1,f,c
  2021  002642  3215               	rrcf	___lwdiv@divisor,f,c
  2022  002644  2E19               	decfsz	___lwdiv@counter,f,c
  2023  002646  D7ED               	goto	l1913
  2024  002648                     l718:
  2025  002648  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2026  00264C  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2027  002650  0012               	return		;funcret
  2028  002652                     __end_of___lwdiv:
  2029                           	opt stack 0
  2030                           tblptru	equ	0xFF8
  2031                           tblptrh	equ	0xFF7
  2032                           tblptrl	equ	0xFF6
  2033                           tablat	equ	0xFF5
  2034                           prodh	equ	0xFF4
  2035                           prodl	equ	0xFF3
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           postinc2	equ	0xFDE
  2041                           postdec2	equ	0xFDD
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function _excerciseControl *****************
  2047 ;; Defined at:
  2048 ;;		line 330 in file "main.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;		None
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;  i               2   61[COMRAM] int 
  2053 ;;  i               2   59[COMRAM] int 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      void 
  2056 ;; Registers used:
  2057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;Total ram usage:       12 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    3
  2070 ;; This function calls:
  2071 ;;		___ftge
  2072 ;;		___ftmul
  2073 ;;		___lltoft
  2074 ;;		_limitWheelSpeeds
  2075 ;;		_wheelVelocity
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text8
  2082  001032                     __ptext8:
  2083                           	opt stack 0
  2084  001032                     _excerciseControl:
  2085                           	opt stack 27
  2086                           
  2087                           ;main.c: 332: static int leftWheelCommandedSpeed = 35;
  2088                           ;main.c: 333: static int rightWheelCommandedSpeed = 25;
  2089                           ;main.c: 335: switch(event){
  2090                           
  2091                           ;incstack = 0
  2092  001032  EF59  F00C         	goto	l2641
  2093  001036                     l2519:
  2094                           
  2095                           ;main.c: 339: if(leftWheelCount % 8 == 0)
  2096  001036  0E07               	movlw	7
  2097  001038  0100               	movlb	0	; () banked
  2098  00103A  158B               	andwf	_leftWheelCount& (0+255),w,b
  2099  00103C  0100               	movlb	0	; () banked
  2100  00103E  6F60               	movwf	??_excerciseControl& (0+255),b
  2101  001040  0E00               	movlw	0
  2102  001042  0100               	movlb	0	; () banked
  2103  001044  158C               	andwf	(_leftWheelCount+1)& (0+255),w,b
  2104  001046  0100               	movlb	0	; () banked
  2105  001048  6F61               	movwf	(??_excerciseControl+1)& (0+255),b
  2106  00104A  0E00               	movlw	0
  2107  00104C  0100               	movlb	0	; () banked
  2108  00104E  158D               	andwf	(_leftWheelCount+2)& (0+255),w,b
  2109  001050  0100               	movlb	0	; () banked
  2110  001052  6F62               	movwf	(??_excerciseControl+2)& (0+255),b
  2111  001054  0E00               	movlw	0
  2112  001056  0100               	movlb	0	; () banked
  2113  001058  158E               	andwf	(_leftWheelCount+3)& (0+255),w,b
  2114  00105A  0100               	movlb	0	; () banked
  2115  00105C  6F63               	movwf	(??_excerciseControl+3)& (0+255),b
  2116  00105E  0100               	movlb	0	; () banked
  2117  001060  5160               	movf	??_excerciseControl& (0+255),w,b
  2118  001062  0100               	movlb	0	; () banked
  2119  001064  1161               	iorwf	(??_excerciseControl+1)& (0+255),w,b
  2120  001066  0100               	movlb	0	; () banked
  2121  001068  1162               	iorwf	(??_excerciseControl+2)& (0+255),w,b
  2122  00106A  0100               	movlb	0	; () banked
  2123  00106C  1163               	iorwf	(??_excerciseControl+3)& (0+255),w,b
  2124  00106E  A4D8               	btfss	status,2,c
  2125  001070  D006               	goto	l169
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;main.c: 340: {
  2129                           ;main.c: 341: leftWheelCount --;
  2130  001072  0100               	movlb	0	; () banked
  2131  001074  078B               	decf	_leftWheelCount& (0+255),f,b
  2132  001076  0E00               	movlw	0
  2133  001078  5B8C               	subwfb	(_leftWheelCount+1)& (0+255),f,b
  2134  00107A  5B8D               	subwfb	(_leftWheelCount+2)& (0+255),f,b
  2135  00107C  5B8E               	subwfb	(_leftWheelCount+3)& (0+255),f,b
  2136  00107E                     l169:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;main.c: 342: }
  2140                           ;main.c: 344: if(rightWheelMeasuredSpeed < 20)
  2141  00107E  0100               	movlb	0	; () banked
  2142  001080  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2143  001082  D008               	goto	l2523
  2144  001084  0100               	movlb	0	; () banked
  2145  001086  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2146  001088  E123               	bnz	l170
  2147  00108A  0E14               	movlw	20
  2148  00108C  0100               	movlb	0	; () banked
  2149  00108E  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2150  001090  B0D8               	btfsc	status,0,c
  2151  001092  D01E               	goto	l170
  2152  001094                     l2523:
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;main.c: 345: {
  2156                           ;main.c: 346: rightWheelCommandedSpeed += 2;
  2157  001094  0E02               	movlw	2
  2158  001096  2648               	addwf	excerciseControl@rightWheelCommandedSpeed,f,c
  2159  001098  0E00               	movlw	0
  2160  00109A  2249               	addwfc	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2161                           
  2162                           ;main.c: 347: leftWheelCommandedSpeed += 2;
  2163  00109C  0E02               	movlw	2
  2164  00109E  2646               	addwf	excerciseControl@leftWheelCommandedSpeed,f,c
  2165  0010A0  0E00               	movlw	0
  2166  0010A2  2247               	addwfc	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;main.c: 348: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2170  0010A4  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2171  0010A8  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2172  0010AC  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2173  0010B0  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2174  0010B4  0E72               	movlw	114
  2175  0010B6  EC4A  F013         	call	_wheelVelocity
  2176                           
  2177                           ;main.c: 349: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2178  0010BA  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2179  0010BE  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2180  0010C2  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2181  0010C6  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2182  0010CA  0E6C               	movlw	108
  2183  0010CC  EC4A  F013         	call	_wheelVelocity
  2184  0010D0                     l170:
  2185                           
  2186                           ;main.c: 350: }
  2187                           ;main.c: 351: if(rightWheelMeasuredSpeed > 70)
  2188  0010D0  0100               	movlb	0	; () banked
  2189  0010D2  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2190  0010D4  D02C               	goto	l171
  2191  0010D6  0100               	movlb	0	; () banked
  2192  0010D8  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2193  0010DA  E105               	bnz	u2070
  2194  0010DC  0E47               	movlw	71
  2195  0010DE  0100               	movlb	0	; () banked
  2196  0010E0  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2197  0010E2  A0D8               	btfss	status,0,c
  2198  0010E4  D024               	goto	l171
  2199  0010E6                     u2070:
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;main.c: 352: {
  2203                           ;main.c: 353: rightWheelCommandedSpeed -= 2;
  2204  0010E6  0EFE               	movlw	254
  2205  0010E8  2648               	addwf	excerciseControl@rightWheelCommandedSpeed,f,c
  2206  0010EA  0EFF               	movlw	255
  2207  0010EC  2249               	addwfc	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2208                           
  2209                           ;main.c: 354: leftWheelCommandedSpeed -= 2;
  2210  0010EE  0EFE               	movlw	254
  2211  0010F0  2646               	addwf	excerciseControl@leftWheelCommandedSpeed,f,c
  2212  0010F2  0EFF               	movlw	255
  2213  0010F4  2247               	addwfc	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;main.c: 355: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2217  0010F6  0648               	decf	excerciseControl@rightWheelCommandedSpeed,f,c
  2218  0010F8  A0D8               	btfss	status,0,c
  2219  0010FA  0649               	decf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2220  0010FC  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2221  001100  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2222  001104  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2223  001108  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2224  00110C  0E72               	movlw	114
  2225  00110E  EC4A  F013         	call	_wheelVelocity
  2226                           
  2227                           ;main.c: 356: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2228  001112  0646               	decf	excerciseControl@leftWheelCommandedSpeed,f,c
  2229  001114  A0D8               	btfss	status,0,c
  2230  001116  0647               	decf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2231  001118  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2232  00111C  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2233  001120  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2234  001124  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2235  001128  0E6C               	movlw	108
  2236  00112A  EC4A  F013         	call	_wheelVelocity
  2237  00112E                     l171:
  2238                           
  2239                           ;main.c: 357: }
  2240                           ;main.c: 358: if(leftWheelCount > rightWheelCount + 1)
  2241  00112E  0E01               	movlw	1
  2242  001130  0100               	movlb	0	; () banked
  2243  001132  258F               	addwf	_rightWheelCount& (0+255),w,b
  2244  001134  0100               	movlb	0	; () banked
  2245  001136  6F60               	movwf	??_excerciseControl& (0+255),b
  2246  001138  0E00               	movlw	0
  2247  00113A  0100               	movlb	0	; () banked
  2248  00113C  2190               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2249  00113E  0100               	movlb	0	; () banked
  2250  001140  6F61               	movwf	(??_excerciseControl+1)& (0+255),b
  2251  001142  0E00               	movlw	0
  2252  001144  0100               	movlb	0	; () banked
  2253  001146  2191               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2254  001148  0100               	movlb	0	; () banked
  2255  00114A  6F62               	movwf	(??_excerciseControl+2)& (0+255),b
  2256  00114C  0E00               	movlw	0
  2257  00114E  0100               	movlb	0	; () banked
  2258  001150  2192               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2259  001152  0100               	movlb	0	; () banked
  2260  001154  6F63               	movwf	(??_excerciseControl+3)& (0+255),b
  2261  001156  0100               	movlb	0	; () banked
  2262  001158  518B               	movf	_leftWheelCount& (0+255),w,b
  2263  00115A  0100               	movlb	0	; () banked
  2264  00115C  5D60               	subwf	??_excerciseControl& (0+255),w,b
  2265  00115E  0100               	movlb	0	; () banked
  2266  001160  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  2267  001162  0100               	movlb	0	; () banked
  2268  001164  5961               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2269  001166  0100               	movlb	0	; () banked
  2270  001168  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  2271  00116A  0100               	movlb	0	; () banked
  2272  00116C  5962               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2273  00116E  0100               	movlb	0	; () banked
  2274  001170  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  2275  001172  0100               	movlb	0	; () banked
  2276  001174  5963               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2277  001176  B0D8               	btfsc	status,0,c
  2278  001178  D041               	goto	l2539
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main.c: 360: {
  2282                           ;main.c: 361: speedCompensation -= (leftWheelCount - rightWheelCount)/2;
  2283  00117A  C08F  F060         	movff	_rightWheelCount,??_excerciseControl
  2284  00117E  C090  F061         	movff	_rightWheelCount+1,??_excerciseControl+1
  2285  001182  C091  F062         	movff	_rightWheelCount+2,??_excerciseControl+2
  2286  001186  C092  F063         	movff	_rightWheelCount+3,??_excerciseControl+3
  2287  00118A  0100               	movlb	0	; () banked
  2288  00118C  1F60               	comf	??_excerciseControl& (0+255),f,b
  2289  00118E  1F61               	comf	(??_excerciseControl+1)& (0+255),f,b
  2290  001190  1F62               	comf	(??_excerciseControl+2)& (0+255),f,b
  2291  001192  1F63               	comf	(??_excerciseControl+3)& (0+255),f,b
  2292  001194  2B60               	incf	??_excerciseControl& (0+255),f,b
  2293  001196  0E00               	movlw	0
  2294  001198  2361               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2295  00119A  2362               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2296  00119C  2363               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2297  00119E  0100               	movlb	0	; () banked
  2298  0011A0  518B               	movf	_leftWheelCount& (0+255),w,b
  2299  0011A2  0100               	movlb	0	; () banked
  2300  0011A4  2560               	addwf	??_excerciseControl& (0+255),w,b
  2301  0011A6  0100               	movlb	0	; () banked
  2302  0011A8  6F64               	movwf	(??_excerciseControl+4)& (0+255),b
  2303  0011AA  0100               	movlb	0	; () banked
  2304  0011AC  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  2305  0011AE  0100               	movlb	0	; () banked
  2306  0011B0  2161               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2307  0011B2  0100               	movlb	0	; () banked
  2308  0011B4  6F65               	movwf	(??_excerciseControl+5)& (0+255),b
  2309  0011B6  0100               	movlb	0	; () banked
  2310  0011B8  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  2311  0011BA  0100               	movlb	0	; () banked
  2312  0011BC  2162               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2313  0011BE  0100               	movlb	0	; () banked
  2314  0011C0  6F66               	movwf	(??_excerciseControl+6)& (0+255),b
  2315  0011C2  0100               	movlb	0	; () banked
  2316  0011C4  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  2317  0011C6  0100               	movlb	0	; () banked
  2318  0011C8  2163               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2319  0011CA  0100               	movlb	0	; () banked
  2320  0011CC  6F67               	movwf	(??_excerciseControl+7)& (0+255),b
  2321  0011CE  0100               	movlb	0	; () banked
  2322  0011D0  90D8               	bcf	status,0,c
  2323  0011D2  3367               	rrcf	(??_excerciseControl+7)& (0+255),f,b
  2324  0011D4  3366               	rrcf	(??_excerciseControl+6)& (0+255),f,b
  2325  0011D6  3365               	rrcf	(??_excerciseControl+5)& (0+255),f,b
  2326  0011D8  3364               	rrcf	(??_excerciseControl+4)& (0+255),f,b
  2327  0011DA  0100               	movlb	0	; () banked
  2328  0011DC  5164               	movf	(??_excerciseControl+4)& (0+255),w,b
  2329  0011DE  5E4A               	subwf	_speedCompensation,f,c
  2330  0011E0  0100               	movlb	0	; () banked
  2331  0011E2  5165               	movf	(??_excerciseControl+5)& (0+255),w,b
  2332  0011E4  5A4B               	subwfb	_speedCompensation+1,f,c
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;main.c: 362: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2336  0011E6  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2337  0011EA  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2338  0011EE  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2339  0011F2  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2340  0011F6  0E6C               	movlw	108
  2341  0011F8  EC4A  F013         	call	_wheelVelocity
  2342  0011FC                     l2539:
  2343                           
  2344                           ;main.c: 363: }
  2345                           ;main.c: 364: if(rightWheelCount > (leftWheelCount + 1) )
  2346  0011FC  0E01               	movlw	1
  2347  0011FE  0100               	movlb	0	; () banked
  2348  001200  258B               	addwf	_leftWheelCount& (0+255),w,b
  2349  001202  0100               	movlb	0	; () banked
  2350  001204  6F60               	movwf	??_excerciseControl& (0+255),b
  2351  001206  0E00               	movlw	0
  2352  001208  0100               	movlb	0	; () banked
  2353  00120A  218C               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2354  00120C  0100               	movlb	0	; () banked
  2355  00120E  6F61               	movwf	(??_excerciseControl+1)& (0+255),b
  2356  001210  0E00               	movlw	0
  2357  001212  0100               	movlb	0	; () banked
  2358  001214  218D               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2359  001216  0100               	movlb	0	; () banked
  2360  001218  6F62               	movwf	(??_excerciseControl+2)& (0+255),b
  2361  00121A  0E00               	movlw	0
  2362  00121C  0100               	movlb	0	; () banked
  2363  00121E  218E               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2364  001220  0100               	movlb	0	; () banked
  2365  001222  6F63               	movwf	(??_excerciseControl+3)& (0+255),b
  2366  001224  0100               	movlb	0	; () banked
  2367  001226  518F               	movf	_rightWheelCount& (0+255),w,b
  2368  001228  0100               	movlb	0	; () banked
  2369  00122A  5D60               	subwf	??_excerciseControl& (0+255),w,b
  2370  00122C  0100               	movlb	0	; () banked
  2371  00122E  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
  2372  001230  0100               	movlb	0	; () banked
  2373  001232  5961               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2374  001234  0100               	movlb	0	; () banked
  2375  001236  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
  2376  001238  0100               	movlb	0	; () banked
  2377  00123A  5962               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2378  00123C  0100               	movlb	0	; () banked
  2379  00123E  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2380  001240  0100               	movlb	0	; () banked
  2381  001242  5963               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2382  001244  B0D8               	btfsc	status,0,c
  2383  001246  D041               	goto	l2545
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 366: {
  2387                           ;main.c: 367: speedCompensation += (rightWheelCount - leftWheelCount)/2;
  2388  001248  C08B  F060         	movff	_leftWheelCount,??_excerciseControl
  2389  00124C  C08C  F061         	movff	_leftWheelCount+1,??_excerciseControl+1
  2390  001250  C08D  F062         	movff	_leftWheelCount+2,??_excerciseControl+2
  2391  001254  C08E  F063         	movff	_leftWheelCount+3,??_excerciseControl+3
  2392  001258  0100               	movlb	0	; () banked
  2393  00125A  1F60               	comf	??_excerciseControl& (0+255),f,b
  2394  00125C  1F61               	comf	(??_excerciseControl+1)& (0+255),f,b
  2395  00125E  1F62               	comf	(??_excerciseControl+2)& (0+255),f,b
  2396  001260  1F63               	comf	(??_excerciseControl+3)& (0+255),f,b
  2397  001262  2B60               	incf	??_excerciseControl& (0+255),f,b
  2398  001264  0E00               	movlw	0
  2399  001266  2361               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2400  001268  2362               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2401  00126A  2363               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2402  00126C  0100               	movlb	0	; () banked
  2403  00126E  518F               	movf	_rightWheelCount& (0+255),w,b
  2404  001270  0100               	movlb	0	; () banked
  2405  001272  2560               	addwf	??_excerciseControl& (0+255),w,b
  2406  001274  0100               	movlb	0	; () banked
  2407  001276  6F64               	movwf	(??_excerciseControl+4)& (0+255),b
  2408  001278  0100               	movlb	0	; () banked
  2409  00127A  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
  2410  00127C  0100               	movlb	0	; () banked
  2411  00127E  2161               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2412  001280  0100               	movlb	0	; () banked
  2413  001282  6F65               	movwf	(??_excerciseControl+5)& (0+255),b
  2414  001284  0100               	movlb	0	; () banked
  2415  001286  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
  2416  001288  0100               	movlb	0	; () banked
  2417  00128A  2162               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2418  00128C  0100               	movlb	0	; () banked
  2419  00128E  6F66               	movwf	(??_excerciseControl+6)& (0+255),b
  2420  001290  0100               	movlb	0	; () banked
  2421  001292  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2422  001294  0100               	movlb	0	; () banked
  2423  001296  2163               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2424  001298  0100               	movlb	0	; () banked
  2425  00129A  6F67               	movwf	(??_excerciseControl+7)& (0+255),b
  2426  00129C  0100               	movlb	0	; () banked
  2427  00129E  90D8               	bcf	status,0,c
  2428  0012A0  3367               	rrcf	(??_excerciseControl+7)& (0+255),f,b
  2429  0012A2  3366               	rrcf	(??_excerciseControl+6)& (0+255),f,b
  2430  0012A4  3365               	rrcf	(??_excerciseControl+5)& (0+255),f,b
  2431  0012A6  3364               	rrcf	(??_excerciseControl+4)& (0+255),f,b
  2432  0012A8  0100               	movlb	0	; () banked
  2433  0012AA  5164               	movf	(??_excerciseControl+4)& (0+255),w,b
  2434  0012AC  264A               	addwf	_speedCompensation,f,c
  2435  0012AE  0100               	movlb	0	; () banked
  2436  0012B0  5165               	movf	(??_excerciseControl+5)& (0+255),w,b
  2437  0012B2  224B               	addwfc	_speedCompensation+1,f,c
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;main.c: 368: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2441  0012B4  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2442  0012B8  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2443  0012BC  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2444  0012C0  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2445  0012C4  0E6C               	movlw	108
  2446  0012C6  EC4A  F013         	call	_wheelVelocity
  2447  0012CA                     l2545:
  2448                           
  2449                           ;main.c: 369: }
  2450                           ;main.c: 370: if(rightWheelCount >= 115)
  2451  0012CA  0100               	movlb	0	; () banked
  2452  0012CC  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2453  0012CE  0100               	movlb	0	; () banked
  2454  0012D0  1191               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2455  0012D2  0100               	movlb	0	; () banked
  2456  0012D4  1190               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  2457  0012D6  E105               	bnz	u2100
  2458  0012D8  0E73               	movlw	115
  2459  0012DA  0100               	movlb	0	; () banked
  2460  0012DC  5D8F               	subwf	_rightWheelCount& (0+255),w,b
  2461  0012DE  A0D8               	btfss	status,0,c
  2462  0012E0  D055               	goto	l2569
  2463  0012E2                     u2100:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;main.c: 371: {
  2467                           ;main.c: 372: rightWheelCount = 0;
  2468  0012E2  0E00               	movlw	0
  2469  0012E4  0100               	movlb	0	; () banked
  2470  0012E6  6F8F               	movwf	_rightWheelCount& (0+255),b
  2471  0012E8  0E00               	movlw	0
  2472  0012EA  6F90               	movwf	(_rightWheelCount+1)& (0+255),b
  2473  0012EC  0E00               	movlw	0
  2474  0012EE  6F91               	movwf	(_rightWheelCount+2)& (0+255),b
  2475  0012F0  0E00               	movlw	0
  2476  0012F2  6F92               	movwf	(_rightWheelCount+3)& (0+255),b
  2477                           
  2478                           ;main.c: 373: leftWheelCount = 0;
  2479  0012F4  0E00               	movlw	0
  2480  0012F6  0100               	movlb	0	; () banked
  2481  0012F8  6F8B               	movwf	_leftWheelCount& (0+255),b
  2482  0012FA  0E00               	movlw	0
  2483  0012FC  6F8C               	movwf	(_leftWheelCount+1)& (0+255),b
  2484  0012FE  0E00               	movlw	0
  2485  001300  6F8D               	movwf	(_leftWheelCount+2)& (0+255),b
  2486  001302  0E00               	movlw	0
  2487  001304  6F8E               	movwf	(_leftWheelCount+3)& (0+255),b
  2488                           
  2489                           ;main.c: 374: leftWheelCommandedSpeed = 0;
  2490  001306  0E00               	movlw	0
  2491  001308  6E47               	movwf	excerciseControl@leftWheelCommandedSpeed+1,c
  2492  00130A  0E00               	movlw	0
  2493  00130C  6E46               	movwf	excerciseControl@leftWheelCommandedSpeed,c
  2494                           
  2495                           ;main.c: 375: rightWheelCommandedSpeed = 0;
  2496  00130E  0E00               	movlw	0
  2497  001310  6E49               	movwf	excerciseControl@rightWheelCommandedSpeed+1,c
  2498  001312  0E00               	movlw	0
  2499  001314  6E48               	movwf	excerciseControl@rightWheelCommandedSpeed,c
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;main.c: 376: event += 1;
  2503  001316  0100               	movlb	0	; () banked
  2504  001318  2B97               	incf	_event& (0+255),f,b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 377: speedCompensation = 0;
  2508  00131A  0E00               	movlw	0
  2509  00131C  6E4B               	movwf	_speedCompensation+1,c
  2510  00131E  0E00               	movlw	0
  2511  001320  6E4A               	movwf	_speedCompensation,c
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;main.c: 378: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2515  001322  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2516  001326  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2517  00132A  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2518  00132E  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2519  001332  0E72               	movlw	114
  2520  001334  EC4A  F013         	call	_wheelVelocity
  2521                           
  2522                           ;main.c: 379: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2523  001338  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2524  00133C  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2525  001340  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2526  001344  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2527  001348  0E6C               	movlw	108
  2528  00134A  EC4A  F013         	call	_wheelVelocity
  2529                           
  2530                           ;main.c: 380: for(int i = 0; i<20 ; i++)
  2531  00134E  0E00               	movlw	0
  2532  001350  6E3D               	movwf	excerciseControl@i+1,c
  2533  001352  0E00               	movlw	0
  2534  001354  6E3C               	movwf	excerciseControl@i,c
  2535  001356                     l2559:
  2536  001356  BE3D               	btfsc	excerciseControl@i+1,7,c
  2537  001358  D006               	goto	l2563
  2538  00135A  503D               	movf	excerciseControl@i+1,w,c
  2539  00135C  E10F               	bnz	l2567
  2540  00135E  0E14               	movlw	20
  2541  001360  5C3C               	subwf	excerciseControl@i,w,c
  2542  001362  B0D8               	btfsc	status,0,c
  2543  001364  D00B               	goto	l2567
  2544  001366                     l2563:
  2545                           
  2546                           ;main.c: 381: {
  2547                           ;main.c: 382: _delay((unsigned long)((50)*(8000000/4000.0)));
  2548  001366  0E82               	movlw	130
  2549  001368  0100               	movlb	0	; () banked
  2550  00136A  6F60               	movwf	??_excerciseControl& (0+255),b
  2551  00136C  0EDE               	movlw	222
  2552  00136E                     u2377:
  2553  00136E  2EE8               	decfsz	wreg,f,c
  2554  001370  D7FE               	goto	u2377
  2555  001372  2F60               	decfsz	??_excerciseControl& (0+255),f,b
  2556  001374  D7FC               	goto	u2377
  2557  001376  4A3C               	infsnz	excerciseControl@i,f,c
  2558  001378  2A3D               	incf	excerciseControl@i+1,f,c
  2559  00137A  D7ED               	goto	l2559
  2560  00137C                     l2567:
  2561                           
  2562                           ;main.c: 383: }
  2563                           ;main.c: 384: rightWheelCommandedSpeed = 30;
  2564  00137C  0E00               	movlw	0
  2565  00137E  6E49               	movwf	excerciseControl@rightWheelCommandedSpeed+1,c
  2566  001380  0E1E               	movlw	30
  2567  001382  6E48               	movwf	excerciseControl@rightWheelCommandedSpeed,c
  2568                           
  2569                           ;main.c: 385: leftWheelCommandedSpeed = -30;
  2570  001384  0EFF               	movlw	255
  2571  001386  6E47               	movwf	excerciseControl@leftWheelCommandedSpeed+1,c
  2572  001388  0EE2               	movlw	226
  2573  00138A  6E46               	movwf	excerciseControl@leftWheelCommandedSpeed,c
  2574  00138C                     l2569:
  2575                           
  2576                           ;main.c: 386: }
  2577                           ;main.c: 388: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2578  00138C  0E46               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2579  00138E  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2580  001390  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  2581  001392  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  2582  001394  0E48               	movlw	low excerciseControl@rightWheelCommandedSpeed
  2583  001396  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  2584  001398  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  2585  00139A  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  2586  00139C  0E4A               	movlw	low _speedCompensation
  2587  00139E  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  2588  0013A0  0E00               	movlw	high _speedCompensation
  2589  0013A2  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  2590  0013A4  ECE3  F010         	call	_limitWheelSpeeds	;wreg free
  2591                           
  2592                           ;main.c: 389: break;
  2593  0013A8  0012               	return	
  2594  0013AA                     l2571:
  2595                           
  2596                           ;main.c: 396: if(rightWheelMeasuredSpeed < 15)
  2597  0013AA  0100               	movlb	0	; () banked
  2598  0013AC  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2599  0013AE  D008               	goto	l2573
  2600  0013B0  0100               	movlb	0	; () banked
  2601  0013B2  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2602  0013B4  E120               	bnz	l2575
  2603  0013B6  0E0F               	movlw	15
  2604  0013B8  0100               	movlb	0	; () banked
  2605  0013BA  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2606  0013BC  B0D8               	btfsc	status,0,c
  2607  0013BE  D01B               	goto	l2575
  2608  0013C0                     l2573:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 397: {
  2612                           ;main.c: 398: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  2613  0013C0  4A48               	infsnz	excerciseControl@rightWheelCommandedSpeed,f,c
  2614  0013C2  2A49               	incf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2615  0013C4  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2616  0013C8  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2617  0013CC  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2618  0013D0  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2619  0013D4  0E72               	movlw	114
  2620  0013D6  EC4A  F013         	call	_wheelVelocity
  2621                           
  2622                           ;main.c: 399: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2623  0013DA  0646               	decf	excerciseControl@leftWheelCommandedSpeed,f,c
  2624  0013DC  A0D8               	btfss	status,0,c
  2625  0013DE  0647               	decf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2626  0013E0  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2627  0013E4  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2628  0013E8  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2629  0013EC  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2630  0013F0  0E6C               	movlw	108
  2631  0013F2  EC4A  F013         	call	_wheelVelocity
  2632  0013F6                     l2575:
  2633                           
  2634                           ;main.c: 400: }
  2635                           ;main.c: 401: if(rightWheelMeasuredSpeed > 30)
  2636  0013F6  0100               	movlb	0	; () banked
  2637  0013F8  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2638  0013FA  D023               	goto	l2579
  2639  0013FC  0100               	movlb	0	; () banked
  2640  0013FE  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2641  001400  E105               	bnz	u2140
  2642  001402  0E1F               	movlw	31
  2643  001404  0100               	movlb	0	; () banked
  2644  001406  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2645  001408  A0D8               	btfss	status,0,c
  2646  00140A  D01B               	goto	l2579
  2647  00140C                     u2140:
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;main.c: 402: {
  2651                           ;main.c: 403: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2652  00140C  0648               	decf	excerciseControl@rightWheelCommandedSpeed,f,c
  2653  00140E  A0D8               	btfss	status,0,c
  2654  001410  0649               	decf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  2655  001412  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2656  001416  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2657  00141A  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2658  00141E  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2659  001422  0E72               	movlw	114
  2660  001424  EC4A  F013         	call	_wheelVelocity
  2661                           
  2662                           ;main.c: 404: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  2663  001428  4A46               	infsnz	excerciseControl@leftWheelCommandedSpeed,f,c
  2664  00142A  2A47               	incf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  2665  00142C  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2666  001430  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2667  001434  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2668  001438  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2669  00143C  0E6C               	movlw	108
  2670  00143E  EC4A  F013         	call	_wheelVelocity
  2671  001442                     l2579:
  2672                           
  2673                           ;main.c: 405: }
  2674                           ;main.c: 406: if(leftWheelCount > (rightWheelCount + 1))
  2675  001442  0E01               	movlw	1
  2676  001444  0100               	movlb	0	; () banked
  2677  001446  258F               	addwf	_rightWheelCount& (0+255),w,b
  2678  001448  0100               	movlb	0	; () banked
  2679  00144A  6F60               	movwf	??_excerciseControl& (0+255),b
  2680  00144C  0E00               	movlw	0
  2681  00144E  0100               	movlb	0	; () banked
  2682  001450  2190               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2683  001452  0100               	movlb	0	; () banked
  2684  001454  6F61               	movwf	(??_excerciseControl+1)& (0+255),b
  2685  001456  0E00               	movlw	0
  2686  001458  0100               	movlb	0	; () banked
  2687  00145A  2191               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2688  00145C  0100               	movlb	0	; () banked
  2689  00145E  6F62               	movwf	(??_excerciseControl+2)& (0+255),b
  2690  001460  0E00               	movlw	0
  2691  001462  0100               	movlb	0	; () banked
  2692  001464  2192               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2693  001466  0100               	movlb	0	; () banked
  2694  001468  6F63               	movwf	(??_excerciseControl+3)& (0+255),b
  2695  00146A  0100               	movlb	0	; () banked
  2696  00146C  518B               	movf	_leftWheelCount& (0+255),w,b
  2697  00146E  0100               	movlb	0	; () banked
  2698  001470  5D60               	subwf	??_excerciseControl& (0+255),w,b
  2699  001472  0100               	movlb	0	; () banked
  2700  001474  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  2701  001476  0100               	movlb	0	; () banked
  2702  001478  5961               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2703  00147A  0100               	movlb	0	; () banked
  2704  00147C  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  2705  00147E  0100               	movlb	0	; () banked
  2706  001480  5962               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2707  001482  0100               	movlb	0	; () banked
  2708  001484  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  2709  001486  0100               	movlb	0	; () banked
  2710  001488  5963               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2711  00148A  B0D8               	btfsc	status,0,c
  2712  00148C  D041               	goto	l2585
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;main.c: 408: {
  2716                           ;main.c: 409: speedCompensation -= ((leftWheelCount - rightWheelCount)/2);
  2717  00148E  C08F  F060         	movff	_rightWheelCount,??_excerciseControl
  2718  001492  C090  F061         	movff	_rightWheelCount+1,??_excerciseControl+1
  2719  001496  C091  F062         	movff	_rightWheelCount+2,??_excerciseControl+2
  2720  00149A  C092  F063         	movff	_rightWheelCount+3,??_excerciseControl+3
  2721  00149E  0100               	movlb	0	; () banked
  2722  0014A0  1F60               	comf	??_excerciseControl& (0+255),f,b
  2723  0014A2  1F61               	comf	(??_excerciseControl+1)& (0+255),f,b
  2724  0014A4  1F62               	comf	(??_excerciseControl+2)& (0+255),f,b
  2725  0014A6  1F63               	comf	(??_excerciseControl+3)& (0+255),f,b
  2726  0014A8  2B60               	incf	??_excerciseControl& (0+255),f,b
  2727  0014AA  0E00               	movlw	0
  2728  0014AC  2361               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2729  0014AE  2362               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2730  0014B0  2363               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2731  0014B2  0100               	movlb	0	; () banked
  2732  0014B4  518B               	movf	_leftWheelCount& (0+255),w,b
  2733  0014B6  0100               	movlb	0	; () banked
  2734  0014B8  2560               	addwf	??_excerciseControl& (0+255),w,b
  2735  0014BA  0100               	movlb	0	; () banked
  2736  0014BC  6F64               	movwf	(??_excerciseControl+4)& (0+255),b
  2737  0014BE  0100               	movlb	0	; () banked
  2738  0014C0  518C               	movf	(_leftWheelCount+1)& (0+255),w,b
  2739  0014C2  0100               	movlb	0	; () banked
  2740  0014C4  2161               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2741  0014C6  0100               	movlb	0	; () banked
  2742  0014C8  6F65               	movwf	(??_excerciseControl+5)& (0+255),b
  2743  0014CA  0100               	movlb	0	; () banked
  2744  0014CC  518D               	movf	(_leftWheelCount+2)& (0+255),w,b
  2745  0014CE  0100               	movlb	0	; () banked
  2746  0014D0  2162               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2747  0014D2  0100               	movlb	0	; () banked
  2748  0014D4  6F66               	movwf	(??_excerciseControl+6)& (0+255),b
  2749  0014D6  0100               	movlb	0	; () banked
  2750  0014D8  518E               	movf	(_leftWheelCount+3)& (0+255),w,b
  2751  0014DA  0100               	movlb	0	; () banked
  2752  0014DC  2163               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2753  0014DE  0100               	movlb	0	; () banked
  2754  0014E0  6F67               	movwf	(??_excerciseControl+7)& (0+255),b
  2755  0014E2  0100               	movlb	0	; () banked
  2756  0014E4  90D8               	bcf	status,0,c
  2757  0014E6  3367               	rrcf	(??_excerciseControl+7)& (0+255),f,b
  2758  0014E8  3366               	rrcf	(??_excerciseControl+6)& (0+255),f,b
  2759  0014EA  3365               	rrcf	(??_excerciseControl+5)& (0+255),f,b
  2760  0014EC  3364               	rrcf	(??_excerciseControl+4)& (0+255),f,b
  2761  0014EE  0100               	movlb	0	; () banked
  2762  0014F0  5164               	movf	(??_excerciseControl+4)& (0+255),w,b
  2763  0014F2  5E4A               	subwf	_speedCompensation,f,c
  2764  0014F4  0100               	movlb	0	; () banked
  2765  0014F6  5165               	movf	(??_excerciseControl+5)& (0+255),w,b
  2766  0014F8  5A4B               	subwfb	_speedCompensation+1,f,c
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 410: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2770  0014FA  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2771  0014FE  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2772  001502  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2773  001506  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2774  00150A  0E6C               	movlw	108
  2775  00150C  EC4A  F013         	call	_wheelVelocity
  2776  001510                     l2585:
  2777                           
  2778                           ;main.c: 411: }
  2779                           ;main.c: 412: if(rightWheelCount > leftWheelCount + 1)
  2780  001510  0E01               	movlw	1
  2781  001512  0100               	movlb	0	; () banked
  2782  001514  258B               	addwf	_leftWheelCount& (0+255),w,b
  2783  001516  0100               	movlb	0	; () banked
  2784  001518  6F60               	movwf	??_excerciseControl& (0+255),b
  2785  00151A  0E00               	movlw	0
  2786  00151C  0100               	movlb	0	; () banked
  2787  00151E  218C               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2788  001520  0100               	movlb	0	; () banked
  2789  001522  6F61               	movwf	(??_excerciseControl+1)& (0+255),b
  2790  001524  0E00               	movlw	0
  2791  001526  0100               	movlb	0	; () banked
  2792  001528  218D               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2793  00152A  0100               	movlb	0	; () banked
  2794  00152C  6F62               	movwf	(??_excerciseControl+2)& (0+255),b
  2795  00152E  0E00               	movlw	0
  2796  001530  0100               	movlb	0	; () banked
  2797  001532  218E               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2798  001534  0100               	movlb	0	; () banked
  2799  001536  6F63               	movwf	(??_excerciseControl+3)& (0+255),b
  2800  001538  0100               	movlb	0	; () banked
  2801  00153A  518F               	movf	_rightWheelCount& (0+255),w,b
  2802  00153C  0100               	movlb	0	; () banked
  2803  00153E  5D60               	subwf	??_excerciseControl& (0+255),w,b
  2804  001540  0100               	movlb	0	; () banked
  2805  001542  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
  2806  001544  0100               	movlb	0	; () banked
  2807  001546  5961               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2808  001548  0100               	movlb	0	; () banked
  2809  00154A  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
  2810  00154C  0100               	movlb	0	; () banked
  2811  00154E  5962               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2812  001550  0100               	movlb	0	; () banked
  2813  001552  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2814  001554  0100               	movlb	0	; () banked
  2815  001556  5963               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2816  001558  B0D8               	btfsc	status,0,c
  2817  00155A  D041               	goto	l2591
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;main.c: 414: {
  2821                           ;main.c: 415: speedCompensation += (rightWheelCount - leftWheelCount)/2;
  2822  00155C  C08B  F060         	movff	_leftWheelCount,??_excerciseControl
  2823  001560  C08C  F061         	movff	_leftWheelCount+1,??_excerciseControl+1
  2824  001564  C08D  F062         	movff	_leftWheelCount+2,??_excerciseControl+2
  2825  001568  C08E  F063         	movff	_leftWheelCount+3,??_excerciseControl+3
  2826  00156C  0100               	movlb	0	; () banked
  2827  00156E  1F60               	comf	??_excerciseControl& (0+255),f,b
  2828  001570  1F61               	comf	(??_excerciseControl+1)& (0+255),f,b
  2829  001572  1F62               	comf	(??_excerciseControl+2)& (0+255),f,b
  2830  001574  1F63               	comf	(??_excerciseControl+3)& (0+255),f,b
  2831  001576  2B60               	incf	??_excerciseControl& (0+255),f,b
  2832  001578  0E00               	movlw	0
  2833  00157A  2361               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2834  00157C  2362               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2835  00157E  2363               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2836  001580  0100               	movlb	0	; () banked
  2837  001582  518F               	movf	_rightWheelCount& (0+255),w,b
  2838  001584  0100               	movlb	0	; () banked
  2839  001586  2560               	addwf	??_excerciseControl& (0+255),w,b
  2840  001588  0100               	movlb	0	; () banked
  2841  00158A  6F64               	movwf	(??_excerciseControl+4)& (0+255),b
  2842  00158C  0100               	movlb	0	; () banked
  2843  00158E  5190               	movf	(_rightWheelCount+1)& (0+255),w,b
  2844  001590  0100               	movlb	0	; () banked
  2845  001592  2161               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2846  001594  0100               	movlb	0	; () banked
  2847  001596  6F65               	movwf	(??_excerciseControl+5)& (0+255),b
  2848  001598  0100               	movlb	0	; () banked
  2849  00159A  5191               	movf	(_rightWheelCount+2)& (0+255),w,b
  2850  00159C  0100               	movlb	0	; () banked
  2851  00159E  2162               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2852  0015A0  0100               	movlb	0	; () banked
  2853  0015A2  6F66               	movwf	(??_excerciseControl+6)& (0+255),b
  2854  0015A4  0100               	movlb	0	; () banked
  2855  0015A6  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2856  0015A8  0100               	movlb	0	; () banked
  2857  0015AA  2163               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2858  0015AC  0100               	movlb	0	; () banked
  2859  0015AE  6F67               	movwf	(??_excerciseControl+7)& (0+255),b
  2860  0015B0  0100               	movlb	0	; () banked
  2861  0015B2  90D8               	bcf	status,0,c
  2862  0015B4  3367               	rrcf	(??_excerciseControl+7)& (0+255),f,b
  2863  0015B6  3366               	rrcf	(??_excerciseControl+6)& (0+255),f,b
  2864  0015B8  3365               	rrcf	(??_excerciseControl+5)& (0+255),f,b
  2865  0015BA  3364               	rrcf	(??_excerciseControl+4)& (0+255),f,b
  2866  0015BC  0100               	movlb	0	; () banked
  2867  0015BE  5164               	movf	(??_excerciseControl+4)& (0+255),w,b
  2868  0015C0  264A               	addwf	_speedCompensation,f,c
  2869  0015C2  0100               	movlb	0	; () banked
  2870  0015C4  5165               	movf	(??_excerciseControl+5)& (0+255),w,b
  2871  0015C6  224B               	addwfc	_speedCompensation+1,f,c
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;main.c: 416: wheelVelocity('l', leftWheelCommandedSpeed,speedCompensation);
  2875  0015C8  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2876  0015CC  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2877  0015D0  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2878  0015D4  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2879  0015D8  0E6C               	movlw	108
  2880  0015DA  EC4A  F013         	call	_wheelVelocity
  2881  0015DE                     l2591:
  2882                           
  2883                           ;main.c: 417: }
  2884                           ;main.c: 419: if(rightWheelCount >= 30)
  2885  0015DE  0100               	movlb	0	; () banked
  2886  0015E0  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  2887  0015E2  0100               	movlb	0	; () banked
  2888  0015E4  1191               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2889  0015E6  0100               	movlb	0	; () banked
  2890  0015E8  1190               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  2891  0015EA  E105               	bnz	u2170
  2892  0015EC  0E1E               	movlw	30
  2893  0015EE  0100               	movlb	0	; () banked
  2894  0015F0  5D8F               	subwf	_rightWheelCount& (0+255),w,b
  2895  0015F2  A0D8               	btfss	status,0,c
  2896  0015F4  D04B               	goto	l2611
  2897  0015F6                     u2170:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 420: {
  2901                           ;main.c: 421: rightWheelCount = 0;
  2902  0015F6  0E00               	movlw	0
  2903  0015F8  0100               	movlb	0	; () banked
  2904  0015FA  6F8F               	movwf	_rightWheelCount& (0+255),b
  2905  0015FC  0E00               	movlw	0
  2906  0015FE  6F90               	movwf	(_rightWheelCount+1)& (0+255),b
  2907  001600  0E00               	movlw	0
  2908  001602  6F91               	movwf	(_rightWheelCount+2)& (0+255),b
  2909  001604  0E00               	movlw	0
  2910  001606  6F92               	movwf	(_rightWheelCount+3)& (0+255),b
  2911                           
  2912                           ;main.c: 422: leftWheelCount = 0;
  2913  001608  0E00               	movlw	0
  2914  00160A  0100               	movlb	0	; () banked
  2915  00160C  6F8B               	movwf	_leftWheelCount& (0+255),b
  2916  00160E  0E00               	movlw	0
  2917  001610  6F8C               	movwf	(_leftWheelCount+1)& (0+255),b
  2918  001612  0E00               	movlw	0
  2919  001614  6F8D               	movwf	(_leftWheelCount+2)& (0+255),b
  2920  001616  0E00               	movlw	0
  2921  001618  6F8E               	movwf	(_leftWheelCount+3)& (0+255),b
  2922                           
  2923                           ;main.c: 423: leftWheelCommandedSpeed = 0;
  2924  00161A  0E00               	movlw	0
  2925  00161C  6E47               	movwf	excerciseControl@leftWheelCommandedSpeed+1,c
  2926  00161E  0E00               	movlw	0
  2927  001620  6E46               	movwf	excerciseControl@leftWheelCommandedSpeed,c
  2928                           
  2929                           ;main.c: 424: rightWheelCommandedSpeed = 0;
  2930  001622  0E00               	movlw	0
  2931  001624  6E49               	movwf	excerciseControl@rightWheelCommandedSpeed+1,c
  2932  001626  0E00               	movlw	0
  2933  001628  6E48               	movwf	excerciseControl@rightWheelCommandedSpeed,c
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;main.c: 425: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2937  00162A  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2938  00162E  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2939  001632  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2940  001636  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2941  00163A  0E72               	movlw	114
  2942  00163C  EC4A  F013         	call	_wheelVelocity
  2943                           
  2944                           ;main.c: 426: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2945  001640  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2946  001644  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2947  001648  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2948  00164C  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2949  001650  0E6C               	movlw	108
  2950  001652  EC4A  F013         	call	_wheelVelocity
  2951  001656                     l184:
  2952  001656  B081               	btfsc	3969,0,c	;volatile
  2953  001658  D7FE               	goto	l184
  2954                           
  2955                           ;main.c: 430: }
  2956                           ;main.c: 431: for(int i = 0; i<20 ; i++)
  2957  00165A  0E00               	movlw	0
  2958  00165C  6E3F               	movwf	excerciseControl@i_1151+1,c
  2959  00165E  0E00               	movlw	0
  2960  001660  6E3E               	movwf	excerciseControl@i_1151,c
  2961  001662                     l2601:
  2962  001662  BE3F               	btfsc	excerciseControl@i_1151+1,7,c
  2963  001664  D006               	goto	l2605
  2964  001666  503F               	movf	excerciseControl@i_1151+1,w,c
  2965  001668  E10F               	bnz	l2609
  2966  00166A  0E14               	movlw	20
  2967  00166C  5C3E               	subwf	excerciseControl@i_1151,w,c
  2968  00166E  B0D8               	btfsc	status,0,c
  2969  001670  D00B               	goto	l2609
  2970  001672                     l2605:
  2971                           
  2972                           ;main.c: 432: {
  2973                           ;main.c: 433: _delay((unsigned long)((50)*(8000000/4000.0)));
  2974  001672  0E82               	movlw	130
  2975  001674  0100               	movlb	0	; () banked
  2976  001676  6F60               	movwf	??_excerciseControl& (0+255),b
  2977  001678  0EDE               	movlw	222
  2978  00167A                     u2387:
  2979  00167A  2EE8               	decfsz	wreg,f,c
  2980  00167C  D7FE               	goto	u2387
  2981  00167E  2F60               	decfsz	??_excerciseControl& (0+255),f,b
  2982  001680  D7FC               	goto	u2387
  2983  001682  4A3E               	infsnz	excerciseControl@i_1151,f,c
  2984  001684  2A3F               	incf	excerciseControl@i_1151+1,f,c
  2985  001686  D7ED               	goto	l2601
  2986  001688                     l2609:
  2987                           
  2988                           ;main.c: 434: }
  2989                           ;main.c: 436: event++;
  2990  001688  0100               	movlb	0	; () banked
  2991  00168A  2B97               	incf	_event& (0+255),f,b
  2992  00168C                     l2611:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 437: }
  2996                           ;main.c: 438: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2997  00168C  0E46               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2998  00168E  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2999  001690  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3000  001692  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3001  001694  0E48               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3002  001696  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3003  001698  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3004  00169A  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3005  00169C  0E4A               	movlw	low _speedCompensation
  3006  00169E  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3007  0016A0  0E00               	movlw	high _speedCompensation
  3008  0016A2  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3009  0016A4  ECE3  F010         	call	_limitWheelSpeeds	;wreg free
  3010                           
  3011                           ;main.c: 439: break;
  3012  0016A8  0012               	return	
  3013  0016AA                     l2613:
  3014                           
  3015                           ;main.c: 446: if(rightWheelMeasuredSpeed < 30)
  3016  0016AA  0100               	movlb	0	; () banked
  3017  0016AC  BF96               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  3018  0016AE  D008               	goto	l2615
  3019  0016B0  0100               	movlb	0	; () banked
  3020  0016B2  5196               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  3021  0016B4  E11F               	bnz	l190
  3022  0016B6  0E1E               	movlw	30
  3023  0016B8  0100               	movlb	0	; () banked
  3024  0016BA  5D95               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  3025  0016BC  B0D8               	btfsc	status,0,c
  3026  0016BE  D01A               	goto	l190
  3027  0016C0                     l2615:
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main.c: 447: {
  3031                           ;main.c: 448: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  3032  0016C0  4A48               	infsnz	excerciseControl@rightWheelCommandedSpeed,f,c
  3033  0016C2  2A49               	incf	excerciseControl@rightWheelCommandedSpeed+1,f,c
  3034  0016C4  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3035  0016C8  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3036  0016CC  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3037  0016D0  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3038  0016D4  0E72               	movlw	114
  3039  0016D6  EC4A  F013         	call	_wheelVelocity
  3040                           
  3041                           ;main.c: 449: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  3042  0016DA  4A46               	infsnz	excerciseControl@leftWheelCommandedSpeed,f,c
  3043  0016DC  2A47               	incf	excerciseControl@leftWheelCommandedSpeed+1,f,c
  3044  0016DE  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3045  0016E2  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3046  0016E6  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3047  0016EA  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3048  0016EE  0E6C               	movlw	108
  3049  0016F0  EC4A  F013         	call	_wheelVelocity
  3050  0016F4                     l190:
  3051                           
  3052                           ;main.c: 450: }
  3053                           ;main.c: 451: if((leftWheelCount * 1.25f) > (rightWheelCount + 1) )
  3054  0016F4  0E01               	movlw	1
  3055  0016F6  0100               	movlb	0	; () banked
  3056  0016F8  258F               	addwf	_rightWheelCount& (0+255),w,b
  3057  0016FA  6E1B               	movwf	___lltoft@c,c
  3058  0016FC  0E00               	movlw	0
  3059  0016FE  0100               	movlb	0	; () banked
  3060  001700  2190               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  3061  001702  6E1C               	movwf	___lltoft@c+1,c
  3062  001704  0E00               	movlw	0
  3063  001706  0100               	movlb	0	; () banked
  3064  001708  2191               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  3065  00170A  6E1D               	movwf	___lltoft@c+2,c
  3066  00170C  0E00               	movlw	0
  3067  00170E  0100               	movlb	0	; () banked
  3068  001710  2192               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  3069  001712  6E1E               	movwf	___lltoft@c+3,c
  3070  001714  ECA6  F012         	call	___lltoft	;wreg free
  3071  001718  C01B  F033         	movff	?___lltoft,___ftge@ff1
  3072  00171C  C01C  F034         	movff	?___lltoft+1,___ftge@ff1+1
  3073  001720  C01D  F035         	movff	?___lltoft+2,___ftge@ff1+2
  3074  001724  0E00               	movlw	0
  3075  001726  6E27               	movwf	___ftmul@f2,c
  3076  001728  0EA0               	movlw	160
  3077  00172A  6E28               	movwf	___ftmul@f2+1,c
  3078  00172C  0E3F               	movlw	63
  3079  00172E  6E29               	movwf	___ftmul@f2+2,c
  3080  001730  C08B  F01B         	movff	_leftWheelCount,___lltoft@c
  3081  001734  C08C  F01C         	movff	_leftWheelCount+1,___lltoft@c+1
  3082  001738  C08D  F01D         	movff	_leftWheelCount+2,___lltoft@c+2
  3083  00173C  C08E  F01E         	movff	_leftWheelCount+3,___lltoft@c+3
  3084  001740  ECA6  F012         	call	___lltoft	;wreg free
  3085  001744  C01B  F024         	movff	?___lltoft,___ftmul@f1
  3086  001748  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  3087  00174C  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  3088  001750  ECF6  F00F         	call	___ftmul	;wreg free
  3089  001754  C024  F036         	movff	?___ftmul,___ftge@ff2
  3090  001758  C025  F037         	movff	?___ftmul+1,___ftge@ff2+1
  3091  00175C  C026  F038         	movff	?___ftmul+2,___ftge@ff2+2
  3092  001760  EC5E  F012         	call	___ftge	;wreg free
  3093  001764  B0D8               	btfsc	status,0,c
  3094  001766  D00E               	goto	l2621
  3095                           
  3096                           ;main.c: 453: {
  3097                           ;main.c: 454: speedCompensation--;
  3098  001768  064A               	decf	_speedCompensation,f,c
  3099  00176A  A0D8               	btfss	status,0,c
  3100  00176C  064B               	decf	_speedCompensation+1,f,c
  3101                           
  3102                           ;main.c: 455: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3103  00176E  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3104  001772  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3105  001776  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3106  00177A  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3107  00177E  0E6C               	movlw	108
  3108  001780  EC4A  F013         	call	_wheelVelocity
  3109  001784                     l2621:
  3110                           
  3111                           ;main.c: 456: }
  3112                           ;main.c: 457: if(rightWheelCount > ((leftWheelCount + 1)*1.25f))
  3113  001784  0E00               	movlw	0
  3114  001786  6E27               	movwf	___ftmul@f2,c
  3115  001788  0EA0               	movlw	160
  3116  00178A  6E28               	movwf	___ftmul@f2+1,c
  3117  00178C  0E3F               	movlw	63
  3118  00178E  6E29               	movwf	___ftmul@f2+2,c
  3119  001790  0E01               	movlw	1
  3120  001792  0100               	movlb	0	; () banked
  3121  001794  258B               	addwf	_leftWheelCount& (0+255),w,b
  3122  001796  6E1B               	movwf	___lltoft@c,c
  3123  001798  0E00               	movlw	0
  3124  00179A  0100               	movlb	0	; () banked
  3125  00179C  218C               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  3126  00179E  6E1C               	movwf	___lltoft@c+1,c
  3127  0017A0  0E00               	movlw	0
  3128  0017A2  0100               	movlb	0	; () banked
  3129  0017A4  218D               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  3130  0017A6  6E1D               	movwf	___lltoft@c+2,c
  3131  0017A8  0E00               	movlw	0
  3132  0017AA  0100               	movlb	0	; () banked
  3133  0017AC  218E               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  3134  0017AE  6E1E               	movwf	___lltoft@c+3,c
  3135  0017B0  ECA6  F012         	call	___lltoft	;wreg free
  3136  0017B4  C01B  F024         	movff	?___lltoft,___ftmul@f1
  3137  0017B8  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  3138  0017BC  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  3139  0017C0  ECF6  F00F         	call	___ftmul	;wreg free
  3140  0017C4  C024  F033         	movff	?___ftmul,___ftge@ff1
  3141  0017C8  C025  F034         	movff	?___ftmul+1,___ftge@ff1+1
  3142  0017CC  C026  F035         	movff	?___ftmul+2,___ftge@ff1+2
  3143  0017D0  C08F  F01B         	movff	_rightWheelCount,___lltoft@c
  3144  0017D4  C090  F01C         	movff	_rightWheelCount+1,___lltoft@c+1
  3145  0017D8  C091  F01D         	movff	_rightWheelCount+2,___lltoft@c+2
  3146  0017DC  C092  F01E         	movff	_rightWheelCount+3,___lltoft@c+3
  3147  0017E0  ECA6  F012         	call	___lltoft	;wreg free
  3148  0017E4  C01B  F036         	movff	?___lltoft,___ftge@ff2
  3149  0017E8  C01C  F037         	movff	?___lltoft+1,___ftge@ff2+1
  3150  0017EC  C01D  F038         	movff	?___lltoft+2,___ftge@ff2+2
  3151  0017F0  EC5E  F012         	call	___ftge	;wreg free
  3152  0017F4  B0D8               	btfsc	status,0,c
  3153  0017F6  D00D               	goto	l2627
  3154                           
  3155                           ;main.c: 459: {
  3156                           ;main.c: 460: speedCompensation++;
  3157  0017F8  4A4A               	infsnz	_speedCompensation,f,c
  3158  0017FA  2A4B               	incf	_speedCompensation+1,f,c
  3159                           
  3160                           ;main.c: 461: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3161  0017FC  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3162  001800  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3163  001804  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3164  001808  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3165  00180C  0E6C               	movlw	108
  3166  00180E  EC4A  F013         	call	_wheelVelocity
  3167  001812                     l2627:
  3168                           
  3169                           ;main.c: 462: }
  3170                           ;main.c: 463: if(rightWheelCount >= 500)
  3171  001812  0100               	movlb	0	; () banked
  3172  001814  5192               	movf	(_rightWheelCount+3)& (0+255),w,b
  3173  001816  0100               	movlb	0	; () banked
  3174  001818  1191               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3175  00181A  E108               	bnz	u2240
  3176  00181C  0EF4               	movlw	244
  3177  00181E  0100               	movlb	0	; () banked
  3178  001820  5D8F               	subwf	_rightWheelCount& (0+255),w,b
  3179  001822  0E01               	movlw	1
  3180  001824  0100               	movlb	0	; () banked
  3181  001826  5990               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  3182  001828  A0D8               	btfss	status,0,c
  3183  00182A  D034               	goto	l2637
  3184  00182C                     u2240:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 464: {
  3188                           ;main.c: 465: rightWheelCount = 0;
  3189  00182C  0E00               	movlw	0
  3190  00182E  0100               	movlb	0	; () banked
  3191  001830  6F8F               	movwf	_rightWheelCount& (0+255),b
  3192  001832  0E00               	movlw	0
  3193  001834  6F90               	movwf	(_rightWheelCount+1)& (0+255),b
  3194  001836  0E00               	movlw	0
  3195  001838  6F91               	movwf	(_rightWheelCount+2)& (0+255),b
  3196  00183A  0E00               	movlw	0
  3197  00183C  6F92               	movwf	(_rightWheelCount+3)& (0+255),b
  3198                           
  3199                           ;main.c: 466: leftWheelCount = 0;
  3200  00183E  0E00               	movlw	0
  3201  001840  0100               	movlb	0	; () banked
  3202  001842  6F8B               	movwf	_leftWheelCount& (0+255),b
  3203  001844  0E00               	movlw	0
  3204  001846  6F8C               	movwf	(_leftWheelCount+1)& (0+255),b
  3205  001848  0E00               	movlw	0
  3206  00184A  6F8D               	movwf	(_leftWheelCount+2)& (0+255),b
  3207  00184C  0E00               	movlw	0
  3208  00184E  6F8E               	movwf	(_leftWheelCount+3)& (0+255),b
  3209                           
  3210                           ;main.c: 467: leftWheelCommandedSpeed = 0;
  3211  001850  0E00               	movlw	0
  3212  001852  6E47               	movwf	excerciseControl@leftWheelCommandedSpeed+1,c
  3213  001854  0E00               	movlw	0
  3214  001856  6E46               	movwf	excerciseControl@leftWheelCommandedSpeed,c
  3215                           
  3216                           ;main.c: 468: rightWheelCommandedSpeed = 0;
  3217  001858  0E00               	movlw	0
  3218  00185A  6E49               	movwf	excerciseControl@rightWheelCommandedSpeed+1,c
  3219  00185C  0E00               	movlw	0
  3220  00185E  6E48               	movwf	excerciseControl@rightWheelCommandedSpeed,c
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 469: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3224  001860  C048  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3225  001864  C049  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3226  001868  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3227  00186C  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3228  001870  0E72               	movlw	114
  3229  001872  EC4A  F013         	call	_wheelVelocity
  3230                           
  3231                           ;main.c: 470: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3232  001876  C046  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3233  00187A  C047  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3234  00187E  C04A  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3235  001882  C04B  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3236  001886  0E6C               	movlw	108
  3237  001888  EC4A  F013         	call	_wheelVelocity
  3238  00188C                     l194:
  3239  00188C  B081               	btfsc	3969,0,c	;volatile
  3240  00188E  D7FE               	goto	l194
  3241                           
  3242                           ;main.c: 474: }
  3243                           ;main.c: 475: event++;
  3244  001890  0100               	movlb	0	; () banked
  3245  001892  2B97               	incf	_event& (0+255),f,b
  3246  001894                     l2637:
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;main.c: 476: }
  3250                           ;main.c: 477: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3251  001894  0E46               	movlw	low excerciseControl@leftWheelCommandedSpeed
  3252  001896  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3253  001898  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3254  00189A  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3255  00189C  0E48               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3256  00189E  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3257  0018A0  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3258  0018A2  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3259  0018A4  0E4A               	movlw	low _speedCompensation
  3260  0018A6  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3261  0018A8  0E00               	movlw	high _speedCompensation
  3262  0018AA  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3263  0018AC  ECE3  F010         	call	_limitWheelSpeeds	;wreg free
  3264                           
  3265                           ;main.c: 481: }
  3266                           
  3267                           ;main.c: 478: break;
  3268  0018B0  0012               	return	
  3269  0018B2                     l2641:
  3270  0018B2  0100               	movlb	0	; () banked
  3271  0018B4  5197               	movf	_event& (0+255),w,b
  3272                           
  3273                           ; Switch size 1, requested type "space"
  3274                           ; Number of cases is 3, Range of values is 0 to 2
  3275                           ; switch strategies available:
  3276                           ; Name         Instructions Cycles
  3277                           ; simple_byte           10     6 (average)
  3278                           ;	Chosen strategy is simple_byte
  3279  0018B6  0A00               	xorlw	0	; case 0
  3280  0018B8  B4D8               	btfsc	status,2,c
  3281  0018BA  EF1B  F008         	goto	l2519
  3282  0018BE  0A01               	xorlw	1	; case 1
  3283  0018C0  B4D8               	btfsc	status,2,c
  3284  0018C2  D573               	goto	l2571
  3285  0018C4  0A03               	xorlw	3	; case 2
  3286  0018C6  A4D8               	btfss	status,2,c
  3287  0018C8  0012               	return	
  3288  0018CA  D6EF               	goto	l2613
  3289  0018CC                     __end_of_excerciseControl:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           tblptrh	equ	0xFF7
  3293                           tblptrl	equ	0xFF6
  3294                           tablat	equ	0xFF5
  3295                           prodh	equ	0xFF4
  3296                           prodl	equ	0xFF3
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           postinc2	equ	0xFDE
  3302                           postdec2	equ	0xFDD
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _wheelVelocity *****************
  3308 ;; Defined at:
  3309 ;;		line 238 in file "main.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  wheel           1    wreg     unsigned char 
  3312 ;;  speed           2   18[COMRAM] int 
  3313 ;;  speedCompens    2   20[COMRAM] int 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  wheel           1   24[COMRAM] unsigned char 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;Total ram usage:        7 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    1
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_excerciseControl
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text9
  3340  002694                     __ptext9:
  3341                           	opt stack 0
  3342  002694                     _wheelVelocity:
  3343                           	opt stack 28
  3344                           
  3345                           ;incstack = 0
  3346                           ;wheelVelocity@wheel stored from wreg
  3347  002694  6E19               	movwf	wheelVelocity@wheel,c
  3348                           
  3349                           ;main.c: 240: if(wheel == 'r')
  3350  002696  0E72               	movlw	114
  3351  002698  1819               	xorwf	wheelVelocity@wheel,w,c
  3352  00269A  A4D8               	btfss	status,2,c
  3353  00269C  D006               	goto	l146
  3354                           
  3355                           ;main.c: 241: {
  3356                           ;main.c: 244: rightWheelCommandedPW = (int) (720 + speed * 1);
  3357  00269E  0ED0               	movlw	208
  3358  0026A0  2413               	addwf	wheelVelocity@speed,w,c
  3359  0026A2  6E44               	movwf	_rightWheelCommandedPW,c
  3360  0026A4  0E02               	movlw	2
  3361  0026A6  2014               	addwfc	wheelVelocity@speed+1,w,c
  3362  0026A8  6E45               	movwf	_rightWheelCommandedPW+1,c
  3363  0026AA                     l146:
  3364                           
  3365                           ;main.c: 245: }
  3366                           ;main.c: 247: if(wheel == 'l')
  3367  0026AA  0E6C               	movlw	108
  3368  0026AC  1819               	xorwf	wheelVelocity@wheel,w,c
  3369  0026AE  A4D8               	btfss	status,2,c
  3370  0026B0  0012               	return	
  3371                           
  3372                           ;main.c: 248: {
  3373                           ;main.c: 251: leftWheelCommandedPW = (int) (735 - (speedCompensation + speed * 1));
  3374  0026B2  5015               	movf	wheelVelocity@speedCompensation,w,c
  3375  0026B4  2413               	addwf	wheelVelocity@speed,w,c
  3376  0026B6  6E17               	movwf	??_wheelVelocity& (0+255),c
  3377  0026B8  5016               	movf	wheelVelocity@speedCompensation+1,w,c
  3378  0026BA  2014               	addwfc	wheelVelocity@speed+1,w,c
  3379  0026BC  6E18               	movwf	(??_wheelVelocity+1)& (0+255),c
  3380  0026BE  1E17               	comf	??_wheelVelocity,f,c
  3381  0026C0  1E18               	comf	??_wheelVelocity+1,f,c
  3382  0026C2  4A17               	infsnz	??_wheelVelocity,f,c
  3383  0026C4  2A18               	incf	??_wheelVelocity+1,f,c
  3384  0026C6  0EDF               	movlw	223
  3385  0026C8  2417               	addwf	??_wheelVelocity,w,c
  3386  0026CA  6E42               	movwf	_leftWheelCommandedPW,c
  3387  0026CC  0E02               	movlw	2
  3388  0026CE  2018               	addwfc	??_wheelVelocity+1,w,c
  3389  0026D0  6E43               	movwf	_leftWheelCommandedPW+1,c
  3390  0026D2  0012               	return	
  3391  0026D4                     __end_of_wheelVelocity:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           postdec1	equ	0xFE5
  3402                           fsr1l	equ	0xFE1
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409 ;; *************** function _limitWheelSpeeds *****************
  3410 ;; Defined at:
  3411 ;;		line 210 in file "main.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  leftWheelSpe    2   18[COMRAM] PTR int 
  3414 ;;		 -> excerciseControl@leftWheelCommandedSpeed(2), 
  3415 ;;  rightWheelSp    2   20[COMRAM] PTR int 
  3416 ;;		 -> excerciseControl@rightWheelCommandedSpeed(2), 
  3417 ;;  speedCompens    2   22[COMRAM] PTR int 
  3418 ;;		 -> speedCompensation(2), 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3430 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;Total ram usage:        8 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    1
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_excerciseControl
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text10
  3445  0021C6                     __ptext10:
  3446                           	opt stack 0
  3447  0021C6                     _limitWheelSpeeds:
  3448                           	opt stack 28
  3449                           
  3450                           ;main.c: 215: if (*leftWheelSpeed >= 50)
  3451                           
  3452                           ;incstack = 0
  3453  0021C6  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3454  0021CA  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3455  0021CE  0E01               	movlw	1
  3456  0021D0  BEDB               	btfsc	plusw2,7,c
  3457  0021D2  D00F               	goto	l1785
  3458  0021D4  0E01               	movlw	1
  3459  0021D6  50DB               	movf	plusw2,w,c
  3460  0021D8  E104               	bnz	u1120
  3461  0021DA  0E32               	movlw	50
  3462  0021DC  5CDE               	subwf	postinc2,w,c
  3463  0021DE  A0D8               	btfss	status,0,c
  3464  0021E0  D008               	goto	l1785
  3465  0021E2                     u1120:
  3466                           
  3467                           ;main.c: 216: {
  3468                           ;main.c: 217: *leftWheelSpeed = 50;
  3469  0021E2  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3470  0021E6  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3471  0021EA  0E32               	movlw	50
  3472  0021EC  6EDE               	movwf	postinc2,c
  3473  0021EE  0E00               	movlw	0
  3474  0021F0  6EDD               	movwf	postdec2,c
  3475  0021F2                     l1785:
  3476                           
  3477                           ;main.c: 218: }
  3478                           ;main.c: 219: if (*leftWheelSpeed <= -50)
  3479  0021F2  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3480  0021F6  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3481  0021FA  0E01               	movlw	1
  3482  0021FC  AEDB               	btfss	plusw2,7,c
  3483  0021FE  D00E               	goto	l1789
  3484  002200  0ECF               	movlw	207
  3485  002202  5CDE               	subwf	postinc2,w,c
  3486  002204  0EFF               	movlw	255
  3487  002206  58DE               	subwfb	postinc2,w,c
  3488  002208  B0D8               	btfsc	status,0,c
  3489  00220A  D008               	goto	l1789
  3490                           
  3491                           ;main.c: 220: {
  3492                           ;main.c: 221: *leftWheelSpeed = -50;
  3493  00220C  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3494  002210  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3495  002214  0ECE               	movlw	206
  3496  002216  6EDE               	movwf	postinc2,c
  3497  002218  0EFF               	movlw	255
  3498  00221A  6EDD               	movwf	postdec2,c
  3499  00221C                     l1789:
  3500                           
  3501                           ;main.c: 222: }
  3502                           ;main.c: 224: if (*rightWheelSpeed >= 50)
  3503  00221C  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3504  002220  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3505  002224  0E01               	movlw	1
  3506  002226  BEDB               	btfsc	plusw2,7,c
  3507  002228  D00F               	goto	l1793
  3508  00222A  0E01               	movlw	1
  3509  00222C  50DB               	movf	plusw2,w,c
  3510  00222E  E104               	bnz	u1140
  3511  002230  0E32               	movlw	50
  3512  002232  5CDE               	subwf	postinc2,w,c
  3513  002234  A0D8               	btfss	status,0,c
  3514  002236  D008               	goto	l1793
  3515  002238                     u1140:
  3516                           
  3517                           ;main.c: 225: {
  3518                           ;main.c: 226: *rightWheelSpeed = 50;
  3519  002238  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3520  00223C  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3521  002240  0E32               	movlw	50
  3522  002242  6EDE               	movwf	postinc2,c
  3523  002244  0E00               	movlw	0
  3524  002246  6EDD               	movwf	postdec2,c
  3525  002248                     l1793:
  3526                           
  3527                           ;main.c: 227: }
  3528                           ;main.c: 228: if (*rightWheelSpeed <= -50)
  3529  002248  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3530  00224C  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3531  002250  0E01               	movlw	1
  3532  002252  AEDB               	btfss	plusw2,7,c
  3533  002254  D00E               	goto	l1797
  3534  002256  0ECF               	movlw	207
  3535  002258  5CDE               	subwf	postinc2,w,c
  3536  00225A  0EFF               	movlw	255
  3537  00225C  58DE               	subwfb	postinc2,w,c
  3538  00225E  B0D8               	btfsc	status,0,c
  3539  002260  D008               	goto	l1797
  3540                           
  3541                           ;main.c: 229: {
  3542                           ;main.c: 230: *rightWheelSpeed = -50;
  3543  002262  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3544  002266  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3545  00226A  0ECE               	movlw	206
  3546  00226C  6EDE               	movwf	postinc2,c
  3547  00226E  0EFF               	movlw	255
  3548  002270  6EDD               	movwf	postdec2,c
  3549  002272                     l1797:
  3550                           
  3551                           ;main.c: 231: }
  3552                           ;main.c: 232: if(*speedCompensation > 10)
  3553  002272  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  3554  002276  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  3555  00227A  0E01               	movlw	1
  3556  00227C  BEDB               	btfsc	plusw2,7,c
  3557  00227E  0012               	return	
  3558  002280  0E01               	movlw	1
  3559  002282  50DB               	movf	plusw2,w,c
  3560  002284  E104               	bnz	u1160
  3561  002286  0E0B               	movlw	11
  3562  002288  5CDE               	subwf	postinc2,w,c
  3563  00228A  A0D8               	btfss	status,0,c
  3564  00228C  0012               	return	
  3565  00228E                     u1160:
  3566                           
  3567                           ;main.c: 233: {
  3568                           ;main.c: 234: *speedCompensation = 10;
  3569  00228E  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  3570  002292  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  3571  002296  0E0A               	movlw	10
  3572  002298  6EDE               	movwf	postinc2,c
  3573  00229A  0E00               	movlw	0
  3574  00229C  6EDD               	movwf	postdec2,c
  3575  00229E  0012               	return	
  3576  0022A0                     __end_of_limitWheelSpeeds:
  3577                           	opt stack 0
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           postinc2	equ	0xFDE
  3589                           postdec2	equ	0xFDD
  3590                           plusw2	equ	0xFDB
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function ___lltoft *****************
  3596 ;; Defined at:
  3597 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  c               4   26[COMRAM] unsigned long 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  exp             1   34[COMRAM] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  3   26[COMRAM] float 
  3604 ;; Registers used:
  3605 ;;		wreg, status,2, status,0, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;Total ram usage:        9 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    2
  3618 ;; This function calls:
  3619 ;;		___ftpack
  3620 ;; This function is called by:
  3621 ;;		_main
  3622 ;;		_excerciseControl
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text11
  3627  00254C                     __ptext11:
  3628                           	opt stack 0
  3629  00254C                     ___lltoft:
  3630                           	opt stack 27
  3631                           
  3632                           ;incstack = 0
  3633  00254C  0E8E               	movlw	142
  3634  00254E  6E23               	movwf	___lltoft@exp,c
  3635  002550  D006               	goto	l1897
  3636  002552                     l1895:
  3637  002552  90D8               	bcf	status,0,c
  3638  002554  321E               	rrcf	___lltoft@c+3,f,c
  3639  002556  321D               	rrcf	___lltoft@c+2,f,c
  3640  002558  321C               	rrcf	___lltoft@c+1,f,c
  3641  00255A  321B               	rrcf	___lltoft@c,f,c
  3642  00255C  2A23               	incf	___lltoft@exp,f,c
  3643  00255E                     l1897:
  3644  00255E  0E00               	movlw	0
  3645  002560  141B               	andwf	___lltoft@c,w,c
  3646  002562  6E1F               	movwf	??___lltoft& (0+255),c
  3647  002564  0E00               	movlw	0
  3648  002566  141C               	andwf	___lltoft@c+1,w,c
  3649  002568  6E20               	movwf	(??___lltoft+1)& (0+255),c
  3650  00256A  0E00               	movlw	0
  3651  00256C  141D               	andwf	___lltoft@c+2,w,c
  3652  00256E  6E21               	movwf	(??___lltoft+2)& (0+255),c
  3653  002570  0EFF               	movlw	255
  3654  002572  141E               	andwf	___lltoft@c+3,w,c
  3655  002574  6E22               	movwf	(??___lltoft+3)& (0+255),c
  3656  002576  501F               	movf	??___lltoft,w,c
  3657  002578  1020               	iorwf	??___lltoft+1,w,c
  3658  00257A  1021               	iorwf	??___lltoft+2,w,c
  3659  00257C  1022               	iorwf	??___lltoft+3,w,c
  3660  00257E  A4D8               	btfss	status,2,c
  3661  002580  D7E8               	goto	l1895
  3662  002582  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  3663  002586  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  3664  00258A  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  3665  00258E  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  3666  002592  0E00               	movlw	0
  3667  002594  6E17               	movwf	___ftpack@sign,c
  3668  002596  ECB3  F011         	call	___ftpack	;wreg free
  3669  00259A  C013  F01B         	movff	?___ftpack,?___lltoft
  3670  00259E  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  3671  0025A2  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  3672  0025A6  0012               	return	
  3673  0025A8                     __end_of___lltoft:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           postinc0	equ	0xFEE
  3682                           wreg	equ	0xFE8
  3683                           postdec1	equ	0xFE5
  3684                           fsr1l	equ	0xFE1
  3685                           postinc2	equ	0xFDE
  3686                           postdec2	equ	0xFDD
  3687                           plusw2	equ	0xFDB
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function ___ftmul *****************
  3693 ;; Defined at:
  3694 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  f1              3   35[COMRAM] float 
  3697 ;;  f2              3   38[COMRAM] float 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  3700 ;;  sign            1   49[COMRAM] unsigned char 
  3701 ;;  cntr            1   48[COMRAM] unsigned char 
  3702 ;;  exp             1   44[COMRAM] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  3   35[COMRAM] float 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3712 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;Total ram usage:       15 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    2
  3719 ;; This function calls:
  3720 ;;		___ftpack
  3721 ;; This function is called by:
  3722 ;;		_main
  3723 ;;		_excerciseControl
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text12
  3728  001FEC                     __ptext12:
  3729                           	opt stack 0
  3730  001FEC                     ___ftmul:
  3731                           	opt stack 27
  3732                           
  3733                           ;incstack = 0
  3734  001FEC  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  3735  001FF0  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  3736  001FF2  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  3737  001FF4  3425               	rlcf	___ftmul@f1+1,w,c
  3738  001FF6  362A               	rlcf	??___ftmul& (0+255),f,c
  3739  001FF8  E301               	bnc	u1211
  3740  001FFA  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  3741  001FFC                     u1211:
  3742  001FFC  502A               	movf	??___ftmul,w,c
  3743  001FFE  6E2D               	movwf	___ftmul@exp,c
  3744  002000  502D               	movf	___ftmul@exp,w,c
  3745  002002  A4D8               	btfss	status,2,c
  3746  002004  D007               	goto	l1833
  3747  002006  0E00               	movlw	0
  3748  002008  6E24               	movwf	?___ftmul,c
  3749  00200A  0E00               	movlw	0
  3750  00200C  6E25               	movwf	?___ftmul+1,c
  3751  00200E  0E00               	movlw	0
  3752  002010  6E26               	movwf	?___ftmul+2,c
  3753  002012  0012               	return	
  3754  002014                     l1833:
  3755  002014  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  3756  002018  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  3757  00201A  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  3758  00201C  3428               	rlcf	___ftmul@f2+1,w,c
  3759  00201E  362A               	rlcf	??___ftmul& (0+255),f,c
  3760  002020  E301               	bnc	u1231
  3761  002022  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  3762  002024                     u1231:
  3763  002024  502A               	movf	??___ftmul,w,c
  3764  002026  6E32               	movwf	___ftmul@sign,c
  3765  002028  5032               	movf	___ftmul@sign,w,c
  3766  00202A  A4D8               	btfss	status,2,c
  3767  00202C  D007               	goto	l1839
  3768  00202E  0E00               	movlw	0
  3769  002030  6E24               	movwf	?___ftmul,c
  3770  002032  0E00               	movlw	0
  3771  002034  6E25               	movwf	?___ftmul+1,c
  3772  002036  0E00               	movlw	0
  3773  002038  6E26               	movwf	?___ftmul+2,c
  3774  00203A  0012               	return	
  3775  00203C                     l1839:
  3776  00203C  5032               	movf	___ftmul@sign,w,c
  3777  00203E  0F7B               	addlw	123
  3778  002040  262D               	addwf	___ftmul@exp,f,c
  3779  002042  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  3780  002046  5029               	movf	___ftmul@f2+2,w,c
  3781  002048  1A32               	xorwf	___ftmul@sign,f,c
  3782  00204A  0E80               	movlw	128
  3783  00204C  1632               	andwf	___ftmul@sign,f,c
  3784  00204E  8E25               	bsf	___ftmul@f1+1,7,c
  3785  002050  8E28               	bsf	___ftmul@f2+1,7,c
  3786  002052  0EFF               	movlw	255
  3787  002054  1627               	andwf	___ftmul@f2,f,c
  3788  002056  0EFF               	movlw	255
  3789  002058  1628               	andwf	___ftmul@f2+1,f,c
  3790  00205A  0E00               	movlw	0
  3791  00205C  1629               	andwf	___ftmul@f2+2,f,c
  3792  00205E  0E00               	movlw	0
  3793  002060  6E2E               	movwf	___ftmul@f3_as_product,c
  3794  002062  0E00               	movlw	0
  3795  002064  6E2F               	movwf	___ftmul@f3_as_product+1,c
  3796  002066  0E00               	movlw	0
  3797  002068  6E30               	movwf	___ftmul@f3_as_product+2,c
  3798  00206A  0E07               	movlw	7
  3799  00206C  6E31               	movwf	___ftmul@cntr,c
  3800  00206E                     l1853:
  3801  00206E  A024               	btfss	___ftmul@f1,0,c
  3802  002070  D006               	goto	l1857
  3803  002072  5027               	movf	___ftmul@f2,w,c
  3804  002074  262E               	addwf	___ftmul@f3_as_product,f,c
  3805  002076  5028               	movf	___ftmul@f2+1,w,c
  3806  002078  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  3807  00207A  5029               	movf	___ftmul@f2+2,w,c
  3808  00207C  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  3809  00207E                     l1857:
  3810  00207E  90D8               	bcf	status,0,c
  3811  002080  3226               	rrcf	___ftmul@f1+2,f,c
  3812  002082  3225               	rrcf	___ftmul@f1+1,f,c
  3813  002084  3224               	rrcf	___ftmul@f1,f,c
  3814  002086  90D8               	bcf	status,0,c
  3815  002088  3627               	rlcf	___ftmul@f2,f,c
  3816  00208A  3628               	rlcf	___ftmul@f2+1,f,c
  3817  00208C  3629               	rlcf	___ftmul@f2+2,f,c
  3818  00208E  2E31               	decfsz	___ftmul@cntr,f,c
  3819  002090  D7EE               	goto	l1853
  3820  002092  0E09               	movlw	9
  3821  002094  6E31               	movwf	___ftmul@cntr,c
  3822  002096                     l1863:
  3823  002096  A024               	btfss	___ftmul@f1,0,c
  3824  002098  D006               	goto	l1867
  3825  00209A  5027               	movf	___ftmul@f2,w,c
  3826  00209C  262E               	addwf	___ftmul@f3_as_product,f,c
  3827  00209E  5028               	movf	___ftmul@f2+1,w,c
  3828  0020A0  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  3829  0020A2  5029               	movf	___ftmul@f2+2,w,c
  3830  0020A4  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  3831  0020A6                     l1867:
  3832  0020A6  90D8               	bcf	status,0,c
  3833  0020A8  3226               	rrcf	___ftmul@f1+2,f,c
  3834  0020AA  3225               	rrcf	___ftmul@f1+1,f,c
  3835  0020AC  3224               	rrcf	___ftmul@f1,f,c
  3836  0020AE  90D8               	bcf	status,0,c
  3837  0020B0  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  3838  0020B2  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  3839  0020B4  322E               	rrcf	___ftmul@f3_as_product,f,c
  3840  0020B6  2E31               	decfsz	___ftmul@cntr,f,c
  3841  0020B8  D7EE               	goto	l1863
  3842  0020BA  C02E  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3843  0020BE  C02F  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3844  0020C2  C030  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3845  0020C6  C02D  F016         	movff	___ftmul@exp,___ftpack@exp
  3846  0020CA  C032  F017         	movff	___ftmul@sign,___ftpack@sign
  3847  0020CE  ECB3  F011         	call	___ftpack	;wreg free
  3848  0020D2  C013  F024         	movff	?___ftpack,?___ftmul
  3849  0020D6  C014  F025         	movff	?___ftpack+1,?___ftmul+1
  3850  0020DA  C015  F026         	movff	?___ftpack+2,?___ftmul+2
  3851  0020DE  0012               	return	
  3852  0020E0                     __end_of___ftmul:
  3853                           	opt stack 0
  3854                           tblptru	equ	0xFF8
  3855                           tblptrh	equ	0xFF7
  3856                           tblptrl	equ	0xFF6
  3857                           tablat	equ	0xFF5
  3858                           prodh	equ	0xFF4
  3859                           prodl	equ	0xFF3
  3860                           postinc0	equ	0xFEE
  3861                           wreg	equ	0xFE8
  3862                           postdec1	equ	0xFE5
  3863                           fsr1l	equ	0xFE1
  3864                           postinc2	equ	0xFDE
  3865                           postdec2	equ	0xFDD
  3866                           plusw2	equ	0xFDB
  3867                           fsr2h	equ	0xFDA
  3868                           fsr2l	equ	0xFD9
  3869                           status	equ	0xFD8
  3870                           
  3871 ;; *************** function ___ftge *****************
  3872 ;; Defined at:
  3873 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  ff1             3   50[COMRAM] float 
  3876 ;;  ff2             3   53[COMRAM] float 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3888 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;Total ram usage:        9 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    1
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_excerciseControl
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text13
  3903  0024BC                     __ptext13:
  3904                           	opt stack 0
  3905  0024BC                     ___ftge:
  3906                           	opt stack 28
  3907                           
  3908                           ;incstack = 0
  3909  0024BC  AE35               	btfss	___ftge@ff1+2,7,c
  3910  0024BE  D016               	goto	l1879
  3911  0024C0  C033  F039         	movff	___ftge@ff1,??___ftge
  3912  0024C4  C034  F03A         	movff	___ftge@ff1+1,??___ftge+1
  3913  0024C8  C035  F03B         	movff	___ftge@ff1+2,??___ftge+2
  3914  0024CC  1E39               	comf	??___ftge,f,c
  3915  0024CE  1E3A               	comf	??___ftge+1,f,c
  3916  0024D0  1E3B               	comf	??___ftge+2,f,c
  3917  0024D2  2A39               	incf	??___ftge,f,c
  3918  0024D4  0E00               	movlw	0
  3919  0024D6  223A               	addwfc	??___ftge+1,f,c
  3920  0024D8  223B               	addwfc	??___ftge+2,f,c
  3921  0024DA  0E00               	movlw	0
  3922  0024DC  2439               	addwf	??___ftge,w,c
  3923  0024DE  6E33               	movwf	___ftge@ff1,c
  3924  0024E0  0E00               	movlw	0
  3925  0024E2  203A               	addwfc	??___ftge+1,w,c
  3926  0024E4  6E34               	movwf	___ftge@ff1+1,c
  3927  0024E6  0E80               	movlw	128
  3928  0024E8  203B               	addwfc	??___ftge+2,w,c
  3929  0024EA  6E35               	movwf	___ftge@ff1+2,c
  3930  0024EC                     l1879:
  3931  0024EC  AE38               	btfss	___ftge@ff2+2,7,c
  3932  0024EE  D016               	goto	l1883
  3933  0024F0  C036  F039         	movff	___ftge@ff2,??___ftge
  3934  0024F4  C037  F03A         	movff	___ftge@ff2+1,??___ftge+1
  3935  0024F8  C038  F03B         	movff	___ftge@ff2+2,??___ftge+2
  3936  0024FC  1E39               	comf	??___ftge,f,c
  3937  0024FE  1E3A               	comf	??___ftge+1,f,c
  3938  002500  1E3B               	comf	??___ftge+2,f,c
  3939  002502  2A39               	incf	??___ftge,f,c
  3940  002504  0E00               	movlw	0
  3941  002506  223A               	addwfc	??___ftge+1,f,c
  3942  002508  223B               	addwfc	??___ftge+2,f,c
  3943  00250A  0E00               	movlw	0
  3944  00250C  2439               	addwf	??___ftge,w,c
  3945  00250E  6E36               	movwf	___ftge@ff2,c
  3946  002510  0E00               	movlw	0
  3947  002512  203A               	addwfc	??___ftge+1,w,c
  3948  002514  6E37               	movwf	___ftge@ff2+1,c
  3949  002516  0E80               	movlw	128
  3950  002518  203B               	addwfc	??___ftge+2,w,c
  3951  00251A  6E38               	movwf	___ftge@ff2+2,c
  3952  00251C                     l1883:
  3953  00251C  0E00               	movlw	0
  3954  00251E  1A33               	xorwf	___ftge@ff1,f,c
  3955  002520  0E00               	movlw	0
  3956  002522  1A34               	xorwf	___ftge@ff1+1,f,c
  3957  002524  0E80               	movlw	128
  3958  002526  1A35               	xorwf	___ftge@ff1+2,f,c
  3959  002528  0E00               	movlw	0
  3960  00252A  1A36               	xorwf	___ftge@ff2,f,c
  3961  00252C  0E00               	movlw	0
  3962  00252E  1A37               	xorwf	___ftge@ff2+1,f,c
  3963  002530  0E80               	movlw	128
  3964  002532  1A38               	xorwf	___ftge@ff2+2,f,c
  3965  002534  5036               	movf	___ftge@ff2,w,c
  3966  002536  5C33               	subwf	___ftge@ff1,w,c
  3967  002538  5037               	movf	___ftge@ff2+1,w,c
  3968  00253A  5834               	subwfb	___ftge@ff1+1,w,c
  3969  00253C  5038               	movf	___ftge@ff2+2,w,c
  3970  00253E  5835               	subwfb	___ftge@ff1+2,w,c
  3971  002540  B0D8               	btfsc	status,0,c
  3972  002542  D002               	goto	l1889
  3973  002544  90D8               	bcf	status,0,c
  3974  002546  0012               	return	
  3975  002548                     l1889:
  3976  002548  80D8               	bsf	status,0,c
  3977  00254A  0012               	return	
  3978  00254C                     __end_of___ftge:
  3979                           	opt stack 0
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           prodh	equ	0xFF4
  3985                           prodl	equ	0xFF3
  3986                           postinc0	equ	0xFEE
  3987                           wreg	equ	0xFE8
  3988                           postdec1	equ	0xFE5
  3989                           fsr1l	equ	0xFE1
  3990                           postinc2	equ	0xFDE
  3991                           postdec2	equ	0xFDD
  3992                           plusw2	equ	0xFDB
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _configureTimers *****************
  3998 ;; Defined at:
  3999 ;;		line 484 in file "main.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      void 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    1
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_main
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text14
  4028  002414                     __ptext14:
  4029                           	opt stack 0
  4030  002414                     _configureTimers:
  4031                           	opt stack 29
  4032                           
  4033                           ;main.c: 486: (INTCONbits.GIE = 0);
  4034                           
  4035                           ;incstack = 0
  4036  002414  9EF2               	bcf	intcon,7,c	;volatile
  4037                           
  4038                           ;main.c: 488: T1CON = 0;
  4039  002416  0E00               	movlw	0
  4040  002418  6ECD               	movwf	4045,c	;volatile
  4041                           
  4042                           ;main.c: 489: T1CONbits.TMR1CS = 0b00;
  4043  00241A  0E3F               	movlw	-193
  4044  00241C  16CD               	andwf	4045,f,c	;volatile
  4045                           
  4046                           ;main.c: 490: T1CONbits.T1CKPS = 0b10;
  4047  00241E  50CD               	movf	4045,w,c	;volatile
  4048  002420  0BCF               	andlw	-49
  4049  002422  0920               	iorlw	32
  4050  002424  6ECD               	movwf	4045,c	;volatile
  4051                           
  4052                           ;main.c: 491: T5CON = 0;
  4053  002426  0E00               	movlw	0
  4054  002428  010F               	movlb	15	; () banked
  4055  00242A  6F4E               	movwf	78,b	;volatile
  4056                           
  4057                           ;main.c: 492: T5CONbits.TMR5CS = 0b00;
  4058  00242C  0E3F               	movlw	-193
  4059  00242E  010F               	movlb	15	; () banked
  4060  002430  174E               	andwf	78,f,b	;volatile
  4061                           
  4062                           ;main.c: 493: T5CONbits.T5CKPS = 0b10;
  4063  002432  010F               	movlb	15	; () banked
  4064  002434  514E               	movf	78,w,b	;volatile
  4065  002436  0BCF               	andlw	-49
  4066  002438  0920               	iorlw	32
  4067  00243A  6F4E               	movwf	78,b	;volatile
  4068                           
  4069                           ;main.c: 498: CCP3CON = 0;
  4070  00243C  0E00               	movlw	0
  4071  00243E  010F               	movlb	15	; () banked
  4072  002440  6F5D               	movwf	93,b	;volatile
  4073                           
  4074                           ;main.c: 499: CCP2CON = 0;
  4075  002442  0E00               	movlw	0
  4076  002444  6E66               	movwf	3942,c	;volatile
  4077                           
  4078                           ;main.c: 500: CCP3CONbits.CCP3M = 0b1010;
  4079  002446  010F               	movlb	15	; () banked
  4080  002448  515D               	movf	93,w,b	;volatile
  4081  00244A  0BF0               	andlw	-16
  4082  00244C  090A               	iorlw	10
  4083  00244E  6F5D               	movwf	93,b	;volatile
  4084                           
  4085                           ;main.c: 501: CCP2CONbits.CCP2M = 0b1010;
  4086  002450  5066               	movf	3942,w,c	;volatile
  4087  002452  0BF0               	andlw	-16
  4088  002454  090A               	iorlw	10
  4089  002456  6E66               	movwf	3942,c	;volatile
  4090                           
  4091                           ;main.c: 508: CCPTMRS0bits.C3TSEL = 0;
  4092  002458  0E3F               	movlw	-193
  4093  00245A  010F               	movlb	15	; () banked
  4094  00245C  1749               	andwf	73,f,b	;volatile
  4095                           
  4096                           ;main.c: 509: CCPTMRS0bits.C2TSEL = 0b10;
  4097  00245E  010F               	movlb	15	; () banked
  4098  002460  5149               	movf	73,w,b	;volatile
  4099  002462  0BE7               	andlw	-25
  4100  002464  0910               	iorlw	16
  4101  002466  6F49               	movwf	73,b	;volatile
  4102                           
  4103                           ;main.c: 511: CCPR3 = 675;
  4104  002468  0E02               	movlw	2
  4105  00246A  010F               	movlb	15	; () banked
  4106  00246C  6F5F               	movwf	95,b	;volatile
  4107  00246E  0EA3               	movlw	163
  4108  002470  6F5E               	movwf	94,b	;volatile
  4109                           
  4110                           ;main.c: 512: CCPR2 = 675;
  4111  002472  0E02               	movlw	2
  4112  002474  6E68               	movwf	3944,c	;volatile
  4113  002476  0EA3               	movlw	163
  4114  002478  6E67               	movwf	3943,c	;volatile
  4115                           
  4116                           ; BSR set to: 15
  4117                           ;main.c: 514: CCP3IE = 1;
  4118  00247A  807A               	bsf	3962,0,c	;volatile
  4119                           
  4120                           ; BSR set to: 15
  4121                           ;main.c: 515: CCP2IE = 1;
  4122  00247C  80A0               	bsf	4000,0,c	;volatile
  4123                           
  4124                           ; BSR set to: 15
  4125                           ;main.c: 518: PIE1bits.TMR2IE = 1;
  4126  00247E  829D               	bsf	3997,1,c	;volatile
  4127                           
  4128                           ;main.c: 519: T2CON = 0;
  4129  002480  0E00               	movlw	0
  4130  002482  6EBA               	movwf	4026,c	;volatile
  4131                           
  4132                           ;main.c: 520: T2CONbits.T2CKPS = 0b10;
  4133  002484  50BA               	movf	4026,w,c	;volatile
  4134  002486  0BFC               	andlw	-4
  4135  002488  0902               	iorlw	2
  4136  00248A  6EBA               	movwf	4026,c	;volatile
  4137                           
  4138                           ; BSR set to: 15
  4139                           ;main.c: 521: T2CONbits.TMR2ON = 1;
  4140  00248C  84BA               	bsf	4026,2,c	;volatile
  4141                           
  4142                           ;main.c: 522: PR2 = 125;
  4143  00248E  0E7D               	movlw	125
  4144  002490  6EBB               	movwf	4027,c	;volatile
  4145                           
  4146                           ; BSR set to: 15
  4147                           ;main.c: 528: INTCONbits.GIE = 1;
  4148  002492  8EF2               	bsf	intcon,7,c	;volatile
  4149                           
  4150                           ; BSR set to: 15
  4151                           ;main.c: 529: INTCONbits.PEIE = 1;
  4152  002494  8CF2               	bsf	intcon,6,c	;volatile
  4153                           
  4154                           ;main.c: 531: TMR1 = 0;
  4155  002496  0E00               	movlw	0
  4156  002498  6ECF               	movwf	4047,c	;volatile
  4157  00249A  0E00               	movlw	0
  4158  00249C  6ECE               	movwf	4046,c	;volatile
  4159                           
  4160                           ;main.c: 532: TMR5 = 0;
  4161  00249E  0E00               	movlw	0
  4162  0024A0  010F               	movlb	15	; () banked
  4163  0024A2  6F50               	movwf	80,b	;volatile
  4164  0024A4  0E00               	movlw	0
  4165  0024A6  6F4F               	movwf	79,b	;volatile
  4166                           
  4167                           ; BSR set to: 15
  4168                           ;main.c: 533: TMR1ON = 1;
  4169  0024A8  80CD               	bsf	4045,0,c	;volatile
  4170                           
  4171                           ; BSR set to: 15
  4172                           ;main.c: 534: TMR5ON = 1;
  4173  0024AA  010F               	movlb	15	; () banked
  4174  0024AC  814E               	bsf	78,0,b	;volatile
  4175                           
  4176                           ; BSR set to: 15
  4177                           ;main.c: 536: (INTCONbits.GIE = 1);
  4178  0024AE  8EF2               	bsf	intcon,7,c	;volatile
  4179                           
  4180                           ; BSR set to: 15
  4181                           ;main.c: 538: TRISDbits.TRISD0 = 0;
  4182  0024B0  9095               	bcf	3989,0,c	;volatile
  4183                           
  4184                           ; BSR set to: 15
  4185                           ;main.c: 539: TRISDbits.TRISD1 = 0;
  4186  0024B2  9295               	bcf	3989,1,c	;volatile
  4187                           
  4188                           ;main.c: 540: ANSELD = 0;
  4189  0024B4  0E00               	movlw	0
  4190  0024B6  010F               	movlb	15	; () banked
  4191  0024B8  6F3B               	movwf	59,b	;volatile
  4192                           
  4193                           ; BSR set to: 15
  4194  0024BA  0012               	return		;funcret
  4195  0024BC                     __end_of_configureTimers:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           postinc0	equ	0xFEE
  4205                           wreg	equ	0xFE8
  4206                           postdec1	equ	0xFE5
  4207                           fsr1l	equ	0xFE1
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           plusw2	equ	0xFDB
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function _configureComparators *****************
  4216 ;; Defined at:
  4217 ;;		line 544 in file "main.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;		None
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, status,2
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;Total ram usage:        0 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    1
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_main
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text15
  4246  0025A8                     __ptext15:
  4247                           	opt stack 0
  4248  0025A8                     _configureComparators:
  4249                           	opt stack 29
  4250                           
  4251                           ;main.c: 548: VREFCON0bits.FVREN=1;
  4252                           
  4253                           ; BSR set to: 15
  4254                           ;incstack = 0
  4255  0025A8  010F               	movlb	15	; () banked
  4256  0025AA  8F42               	bsf	66,7,b	;volatile
  4257                           
  4258                           ;main.c: 549: VREFCON0bits.FVRST=0;
  4259  0025AC  010F               	movlb	15	; () banked
  4260  0025AE  9D42               	bcf	66,6,b	;volatile
  4261                           
  4262                           ; BSR set to: 15
  4263                           ;main.c: 550: VREFCON0bits.FVRS=0b01;
  4264  0025B0  010F               	movlb	15	; () banked
  4265  0025B2  5142               	movf	66,w,b	;volatile
  4266  0025B4  0BCF               	andlw	-49
  4267  0025B6  0910               	iorlw	16
  4268  0025B8  6F42               	movwf	66,b	;volatile
  4269                           
  4270                           ; BSR set to: 15
  4271                           ;main.c: 552: TRISBbits.TRISB1 = 1;
  4272  0025BA  8293               	bsf	3987,1,c	;volatile
  4273                           
  4274                           ; BSR set to: 15
  4275                           ;main.c: 553: ANSELBbits.ANSB1 = 1;
  4276  0025BC  010F               	movlb	15	; () banked
  4277  0025BE  8339               	bsf	57,1,b	;volatile
  4278                           
  4279                           ; BSR set to: 15
  4280                           ;main.c: 557: CM2CON0bits.C2ON = 1;
  4281  0025C0  8E78               	bsf	3960,7,c	;volatile
  4282                           
  4283                           ; BSR set to: 15
  4284                           ;main.c: 558: CM2CON0bits.C2OUT = 0;
  4285  0025C2  9C78               	bcf	3960,6,c	;volatile
  4286                           
  4287                           ; BSR set to: 15
  4288                           ;main.c: 559: CM2CON0bits.C2OE = 0;
  4289  0025C4  9A78               	bcf	3960,5,c	;volatile
  4290                           
  4291                           ; BSR set to: 15
  4292                           ;main.c: 560: CM2CON0bits.C2POL = 1;
  4293  0025C6  8878               	bsf	3960,4,c	;volatile
  4294                           
  4295                           ; BSR set to: 15
  4296                           ;main.c: 561: CM2CON0bits.C2SP = 1;
  4297  0025C8  8678               	bsf	3960,3,c	;volatile
  4298                           
  4299                           ; BSR set to: 15
  4300                           ;main.c: 562: CM2CON0bits.C2R = 1;
  4301  0025CA  8478               	bsf	3960,2,c	;volatile
  4302                           
  4303                           ;main.c: 563: CM2CON0bits.C2CH = 0b11;
  4304  0025CC  0E03               	movlw	3
  4305  0025CE  1278               	iorwf	3960,f,c	;volatile
  4306                           
  4307                           ; BSR set to: 15
  4308                           ;main.c: 565: CM2CON1bits.C2RSEL = 1;
  4309  0025D0  8877               	bsf	3959,4,c	;volatile
  4310                           
  4311                           ; BSR set to: 15
  4312                           ;main.c: 566: CM2CON1bits.C2HYS = 0;
  4313  0025D2  9477               	bcf	3959,2,c	;volatile
  4314                           
  4315                           ; BSR set to: 15
  4316                           ;main.c: 567: CM2CON1bits.C2SYNC = 0;
  4317  0025D4  9077               	bcf	3959,0,c	;volatile
  4318                           
  4319                           ; BSR set to: 15
  4320                           ;main.c: 573: TRISBbits.TRISB3 = 1;
  4321  0025D6  8693               	bsf	3987,3,c	;volatile
  4322                           
  4323                           ; BSR set to: 15
  4324                           ;main.c: 574: ANSELBbits.ANSB3 = 1;
  4325  0025D8  010F               	movlb	15	; () banked
  4326  0025DA  8739               	bsf	57,3,b	;volatile
  4327                           
  4328                           ; BSR set to: 15
  4329                           ;main.c: 577: CM1CON0bits.C1ON = 1;
  4330  0025DC  8E79               	bsf	3961,7,c	;volatile
  4331                           
  4332                           ; BSR set to: 15
  4333                           ;main.c: 578: CM1CON0bits.C1OUT = 0;
  4334  0025DE  9C79               	bcf	3961,6,c	;volatile
  4335                           
  4336                           ; BSR set to: 15
  4337                           ;main.c: 579: CM1CON0bits.C1OE = 0;
  4338  0025E0  9A79               	bcf	3961,5,c	;volatile
  4339                           
  4340                           ; BSR set to: 15
  4341                           ;main.c: 580: CM1CON0bits.C1POL = 1;
  4342  0025E2  8879               	bsf	3961,4,c	;volatile
  4343                           
  4344                           ; BSR set to: 15
  4345                           ;main.c: 581: CM1CON0bits.C1SP = 1;
  4346  0025E4  8679               	bsf	3961,3,c	;volatile
  4347                           
  4348                           ; BSR set to: 15
  4349                           ;main.c: 582: CM1CON0bits.C1R = 1;
  4350  0025E6  8479               	bsf	3961,2,c	;volatile
  4351                           
  4352                           ;main.c: 583: CM1CON0bits.C1CH = 0b10;
  4353  0025E8  5079               	movf	3961,w,c	;volatile
  4354  0025EA  0BFC               	andlw	-4
  4355  0025EC  0902               	iorlw	2
  4356  0025EE  6E79               	movwf	3961,c	;volatile
  4357                           
  4358                           ; BSR set to: 15
  4359                           ;main.c: 585: CM2CON1bits.C1RSEL = 1;
  4360  0025F0  8A77               	bsf	3959,5,c	;volatile
  4361                           
  4362                           ; BSR set to: 15
  4363                           ;main.c: 586: CM2CON1bits.C1HYS = 0;
  4364  0025F2  9677               	bcf	3959,3,c	;volatile
  4365                           
  4366                           ; BSR set to: 15
  4367                           ;main.c: 587: CM2CON1bits.C1SYNC = 0;
  4368  0025F4  9277               	bcf	3959,1,c	;volatile
  4369                           
  4370                           ; BSR set to: 15
  4371                           ;main.c: 590: PIR2bits.C1IF = 0;
  4372  0025F6  9CA1               	bcf	4001,6,c	;volatile
  4373                           
  4374                           ; BSR set to: 15
  4375                           ;main.c: 591: PIR2bits.C2IF = 0;
  4376  0025F8  9AA1               	bcf	4001,5,c	;volatile
  4377                           
  4378                           ; BSR set to: 15
  4379                           ;main.c: 592: PIE2bits.C2IE = 1;
  4380  0025FA  8AA0               	bsf	4000,5,c	;volatile
  4381                           
  4382                           ; BSR set to: 15
  4383                           ;main.c: 593: PIE2bits.C1IE = 1;
  4384  0025FC  8CA0               	bsf	4000,6,c	;volatile
  4385                           
  4386                           ; BSR set to: 15
  4387  0025FE  0012               	return		;funcret
  4388  002600                     __end_of_configureComparators:
  4389                           	opt stack 0
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           intcon	equ	0xFF2
  4397                           postinc0	equ	0xFEE
  4398                           wreg	equ	0xFE8
  4399                           postdec1	equ	0xFE5
  4400                           fsr1l	equ	0xFE1
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           plusw2	equ	0xFDB
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function ___fttol *****************
  4409 ;; Defined at:
  4410 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  f1              3    0[BANK0 ] float 
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  lval            4   10[BANK0 ] unsigned long 
  4415 ;;  exp1            1   14[BANK0 ] unsigned char 
  4416 ;;  sign1           1    9[BANK0 ] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  4    0[BANK0 ] long 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:       15 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    1
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text16
  4441  001EA8                     __ptext16:
  4442                           	opt stack 0
  4443  001EA8                     ___fttol:
  4444                           	opt stack 29
  4445                           
  4446                           ; BSR set to: 15
  4447                           ;incstack = 0
  4448  001EA8  C062  F064         	movff	___fttol@f1+2,??___fttol
  4449  001EAC  0100               	movlb	0	; () banked
  4450  001EAE  6B65               	clrf	(??___fttol+1)& (0+255),b
  4451  001EB0  6B66               	clrf	(??___fttol+2)& (0+255),b
  4452  001EB2  0100               	movlb	0	; () banked
  4453  001EB4  3561               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4454  001EB6  0100               	movlb	0	; () banked
  4455  001EB8  3764               	rlcf	??___fttol& (0+255),f,b
  4456  001EBA  E301               	bnc	u2261
  4457  001EBC  8165               	bsf	(??___fttol+1)& (0+255),0,b
  4458  001EBE                     u2261:
  4459  001EBE  0100               	movlb	0	; () banked
  4460  001EC0  5164               	movf	??___fttol& (0+255),w,b
  4461  001EC2  0100               	movlb	0	; () banked
  4462  001EC4  6F6E               	movwf	___fttol@exp1& (0+255),b
  4463  001EC6  0100               	movlb	0	; () banked
  4464  001EC8  516E               	movf	___fttol@exp1& (0+255),w,b
  4465  001ECA  A4D8               	btfss	status,2,c
  4466  001ECC  D00A               	goto	l2649
  4467                           
  4468                           ; BSR set to: 0
  4469  001ECE  0E00               	movlw	0
  4470  001ED0  0100               	movlb	0	; () banked
  4471  001ED2  6F60               	movwf	?___fttol& (0+255),b
  4472  001ED4  0E00               	movlw	0
  4473  001ED6  6F61               	movwf	(?___fttol+1)& (0+255),b
  4474  001ED8  0E00               	movlw	0
  4475  001EDA  6F62               	movwf	(?___fttol+2)& (0+255),b
  4476  001EDC  0E00               	movlw	0
  4477  001EDE  6F63               	movwf	(?___fttol+3)& (0+255),b
  4478                           
  4479                           ; BSR set to: 0
  4480  001EE0  0012               	return	
  4481  001EE2                     l2649:
  4482                           
  4483                           ; BSR set to: 0
  4484  001EE2  0E17               	movlw	23
  4485  001EE4  0100               	movlb	0	; () banked
  4486  001EE6  6F64               	movwf	??___fttol& (0+255),b
  4487  001EE8  C060  F065         	movff	___fttol@f1,??___fttol+1
  4488  001EEC  C061  F066         	movff	___fttol@f1+1,??___fttol+2
  4489  001EF0  C062  F067         	movff	___fttol@f1+2,??___fttol+3
  4490  001EF4  0100               	movlb	0	; () banked
  4491  001EF6  2964               	incf	??___fttol& (0+255),w,b
  4492  001EF8  0100               	movlb	0	; () banked
  4493  001EFA  6F68               	movwf	(??___fttol+4)& (0+255),b
  4494  001EFC  D005               	goto	u2280
  4495  001EFE                     u2285:
  4496  001EFE  0100               	movlb	0	; () banked
  4497  001F00  90D8               	bcf	status,0,c
  4498  001F02  3367               	rrcf	(??___fttol+3)& (0+255),f,b
  4499  001F04  3366               	rrcf	(??___fttol+2)& (0+255),f,b
  4500  001F06  3365               	rrcf	(??___fttol+1)& (0+255),f,b
  4501  001F08                     u2280:
  4502  001F08  0100               	movlb	0	; () banked
  4503  001F0A  2F68               	decfsz	(??___fttol+4)& (0+255),f,b
  4504  001F0C  D7F8               	goto	u2285
  4505  001F0E  0100               	movlb	0	; () banked
  4506  001F10  5165               	movf	(??___fttol+1)& (0+255),w,b
  4507  001F12  0100               	movlb	0	; () banked
  4508  001F14  6F69               	movwf	___fttol@sign1& (0+255),b
  4509                           
  4510                           ; BSR set to: 0
  4511  001F16  0100               	movlb	0	; () banked
  4512  001F18  8F61               	bsf	(___fttol@f1+1)& (0+255),7,b
  4513                           
  4514                           ; BSR set to: 0
  4515  001F1A  0EFF               	movlw	255
  4516  001F1C  0100               	movlb	0	; () banked
  4517  001F1E  1760               	andwf	___fttol@f1& (0+255),f,b
  4518  001F20  0EFF               	movlw	255
  4519  001F22  0100               	movlb	0	; () banked
  4520  001F24  1761               	andwf	(___fttol@f1+1)& (0+255),f,b
  4521  001F26  0E00               	movlw	0
  4522  001F28  0100               	movlb	0	; () banked
  4523  001F2A  1762               	andwf	(___fttol@f1+2)& (0+255),f,b
  4524                           
  4525                           ; BSR set to: 0
  4526  001F2C  0100               	movlb	0	; () banked
  4527  001F2E  5160               	movf	___fttol@f1& (0+255),w,b
  4528  001F30  0100               	movlb	0	; () banked
  4529  001F32  6F6A               	movwf	___fttol@lval& (0+255),b
  4530  001F34  0100               	movlb	0	; () banked
  4531  001F36  5161               	movf	(___fttol@f1+1)& (0+255),w,b
  4532  001F38  0100               	movlb	0	; () banked
  4533  001F3A  6F6B               	movwf	(___fttol@lval+1)& (0+255),b
  4534  001F3C  0100               	movlb	0	; () banked
  4535  001F3E  5162               	movf	(___fttol@f1+2)& (0+255),w,b
  4536  001F40  0100               	movlb	0	; () banked
  4537  001F42  6F6C               	movwf	(___fttol@lval+2)& (0+255),b
  4538  001F44  0100               	movlb	0	; () banked
  4539  001F46  6B6D               	clrf	(___fttol@lval+3)& (0+255),b
  4540                           
  4541                           ; BSR set to: 0
  4542  001F48  0E8E               	movlw	142
  4543  001F4A  0100               	movlb	0	; () banked
  4544  001F4C  5F6E               	subwf	___fttol@exp1& (0+255),f,b
  4545                           
  4546                           ; BSR set to: 0
  4547  001F4E  0100               	movlb	0	; () banked
  4548  001F50  AF6E               	btfss	___fttol@exp1& (0+255),7,b
  4549  001F52  D01A               	goto	l2671
  4550                           
  4551                           ; BSR set to: 0
  4552  001F54  0100               	movlb	0	; () banked
  4553  001F56  516E               	movf	___fttol@exp1& (0+255),w,b
  4554  001F58  0A80               	xorlw	128
  4555  001F5A  0F8F               	addlw	143
  4556  001F5C  B0D8               	btfsc	status,0,c
  4557  001F5E  D00A               	goto	l2667
  4558                           
  4559                           ; BSR set to: 0
  4560  001F60  0E00               	movlw	0
  4561  001F62  0100               	movlb	0	; () banked
  4562  001F64  6F60               	movwf	?___fttol& (0+255),b
  4563  001F66  0E00               	movlw	0
  4564  001F68  6F61               	movwf	(?___fttol+1)& (0+255),b
  4565  001F6A  0E00               	movlw	0
  4566  001F6C  6F62               	movwf	(?___fttol+2)& (0+255),b
  4567  001F6E  0E00               	movlw	0
  4568  001F70  6F63               	movwf	(?___fttol+3)& (0+255),b
  4569                           
  4570                           ; BSR set to: 0
  4571  001F72  0012               	return	
  4572  001F74                     l2667:
  4573                           
  4574                           ; BSR set to: 0
  4575  001F74  0100               	movlb	0	; () banked
  4576  001F76  90D8               	bcf	status,0,c
  4577  001F78  336D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4578  001F7A  336C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4579  001F7C  336B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4580  001F7E  336A               	rrcf	___fttol@lval& (0+255),f,b
  4581                           
  4582                           ; BSR set to: 0
  4583  001F80  0100               	movlb	0	; () banked
  4584  001F82  3F6E               	incfsz	___fttol@exp1& (0+255),f,b
  4585  001F84  D7F7               	goto	l2667
  4586                           
  4587                           ; BSR set to: 0
  4588  001F86  D01B               	goto	l2681
  4589  001F88                     l2671:
  4590                           
  4591                           ; BSR set to: 0
  4592  001F88  0E17               	movlw	23
  4593  001F8A  0100               	movlb	0	; () banked
  4594  001F8C  656E               	cpfsgt	___fttol@exp1& (0+255),b
  4595  001F8E  D012               	goto	l2679
  4596                           
  4597                           ; BSR set to: 0
  4598  001F90  0E00               	movlw	0
  4599  001F92  0100               	movlb	0	; () banked
  4600  001F94  6F60               	movwf	?___fttol& (0+255),b
  4601  001F96  0E00               	movlw	0
  4602  001F98  6F61               	movwf	(?___fttol+1)& (0+255),b
  4603  001F9A  0E00               	movlw	0
  4604  001F9C  6F62               	movwf	(?___fttol+2)& (0+255),b
  4605  001F9E  0E00               	movlw	0
  4606  001FA0  6F63               	movwf	(?___fttol+3)& (0+255),b
  4607                           
  4608                           ; BSR set to: 0
  4609  001FA2  0012               	return	
  4610  001FA4                     l2677:
  4611                           
  4612                           ; BSR set to: 0
  4613  001FA4  0100               	movlb	0	; () banked
  4614  001FA6  90D8               	bcf	status,0,c
  4615  001FA8  376A               	rlcf	___fttol@lval& (0+255),f,b
  4616  001FAA  376B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4617  001FAC  376C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4618  001FAE  376D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4619  001FB0  0100               	movlb	0	; () banked
  4620  001FB2  076E               	decf	___fttol@exp1& (0+255),f,b
  4621  001FB4                     l2679:
  4622                           
  4623                           ; BSR set to: 0
  4624  001FB4  0100               	movlb	0	; () banked
  4625  001FB6  516E               	movf	___fttol@exp1& (0+255),w,b
  4626  001FB8  0100               	movlb	0	; () banked
  4627  001FBA  A4D8               	btfss	status,2,c
  4628  001FBC  D7F3               	goto	l2677
  4629  001FBE                     l2681:
  4630                           
  4631                           ; BSR set to: 0
  4632  001FBE  0100               	movlb	0	; () banked
  4633  001FC0  5169               	movf	___fttol@sign1& (0+255),w,b
  4634  001FC2  0100               	movlb	0	; () banked
  4635  001FC4  B4D8               	btfsc	status,2,c
  4636  001FC6  D009               	goto	l2685
  4637                           
  4638                           ; BSR set to: 0
  4639  001FC8  0100               	movlb	0	; () banked
  4640  001FCA  1F6D               	comf	(___fttol@lval+3)& (0+255),f,b
  4641  001FCC  1F6C               	comf	(___fttol@lval+2)& (0+255),f,b
  4642  001FCE  1F6B               	comf	(___fttol@lval+1)& (0+255),f,b
  4643  001FD0  6D6A               	negf	___fttol@lval& (0+255),b
  4644  001FD2  0E00               	movlw	0
  4645  001FD4  236B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4646  001FD6  236C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4647  001FD8  236D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4648  001FDA                     l2685:
  4649                           
  4650                           ; BSR set to: 0
  4651  001FDA  C06A  F060         	movff	___fttol@lval,?___fttol
  4652  001FDE  C06B  F061         	movff	___fttol@lval+1,?___fttol+1
  4653  001FE2  C06C  F062         	movff	___fttol@lval+2,?___fttol+2
  4654  001FE6  C06D  F063         	movff	___fttol@lval+3,?___fttol+3
  4655  001FEA  0012               	return	
  4656  001FEC                     __end_of___fttol:
  4657                           	opt stack 0
  4658                           tblptru	equ	0xFF8
  4659                           tblptrh	equ	0xFF7
  4660                           tblptrl	equ	0xFF6
  4661                           tablat	equ	0xFF5
  4662                           prodh	equ	0xFF4
  4663                           prodl	equ	0xFF3
  4664                           intcon	equ	0xFF2
  4665                           postinc0	equ	0xFEE
  4666                           wreg	equ	0xFE8
  4667                           postdec1	equ	0xFE5
  4668                           fsr1l	equ	0xFE1
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           plusw2	equ	0xFDB
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function ___ftdiv *****************
  4677 ;; Defined at:
  4678 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  f1              3   50[COMRAM] float 
  4681 ;;  f2              3   53[COMRAM] float 
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;  f3              3   60[COMRAM] float 
  4684 ;;  sign            1   64[COMRAM] unsigned char 
  4685 ;;  exp             1   63[COMRAM] unsigned char 
  4686 ;;  cntr            1   59[COMRAM] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  3   50[COMRAM] float 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4696 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;Total ram usage:       15 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    2
  4703 ;; This function calls:
  4704 ;;		___ftpack
  4705 ;; This function is called by:
  4706 ;;		_main
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text17
  4711  0020E0                     __ptext17:
  4712                           	opt stack 0
  4713  0020E0                     ___ftdiv:
  4714                           	opt stack 28
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;incstack = 0
  4718  0020E0  C035  F039         	movff	___ftdiv@f1+2,??___ftdiv
  4719  0020E4  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  4720  0020E6  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  4721  0020E8  3434               	rlcf	___ftdiv@f1+1,w,c
  4722  0020EA  3639               	rlcf	??___ftdiv& (0+255),f,c
  4723  0020EC  E301               	bnc	u1731
  4724  0020EE  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4725  0020F0                     u1731:
  4726  0020F0  5039               	movf	??___ftdiv,w,c
  4727  0020F2  6E40               	movwf	___ftdiv@exp,c
  4728  0020F4  5040               	movf	___ftdiv@exp,w,c
  4729  0020F6  A4D8               	btfss	status,2,c
  4730  0020F8  D007               	goto	l2301
  4731  0020FA  0E00               	movlw	0
  4732  0020FC  6E33               	movwf	?___ftdiv,c
  4733  0020FE  0E00               	movlw	0
  4734  002100  6E34               	movwf	?___ftdiv+1,c
  4735  002102  0E00               	movlw	0
  4736  002104  6E35               	movwf	?___ftdiv+2,c
  4737  002106  0012               	return	
  4738  002108                     l2301:
  4739  002108  C038  F039         	movff	___ftdiv@f2+2,??___ftdiv
  4740  00210C  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  4741  00210E  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  4742  002110  3437               	rlcf	___ftdiv@f2+1,w,c
  4743  002112  3639               	rlcf	??___ftdiv& (0+255),f,c
  4744  002114  E301               	bnc	u1751
  4745  002116  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4746  002118                     u1751:
  4747  002118  5039               	movf	??___ftdiv,w,c
  4748  00211A  6E41               	movwf	___ftdiv@sign,c
  4749  00211C  5041               	movf	___ftdiv@sign,w,c
  4750  00211E  A4D8               	btfss	status,2,c
  4751  002120  D007               	goto	l2307
  4752  002122  0E00               	movlw	0
  4753  002124  6E33               	movwf	?___ftdiv,c
  4754  002126  0E00               	movlw	0
  4755  002128  6E34               	movwf	?___ftdiv+1,c
  4756  00212A  0E00               	movlw	0
  4757  00212C  6E35               	movwf	?___ftdiv+2,c
  4758  00212E  0012               	return	
  4759  002130                     l2307:
  4760  002130  0E00               	movlw	0
  4761  002132  6E3D               	movwf	___ftdiv@f3,c
  4762  002134  0E00               	movlw	0
  4763  002136  6E3E               	movwf	___ftdiv@f3+1,c
  4764  002138  0E00               	movlw	0
  4765  00213A  6E3F               	movwf	___ftdiv@f3+2,c
  4766  00213C  5041               	movf	___ftdiv@sign,w,c
  4767  00213E  0F89               	addlw	137
  4768  002140  5E40               	subwf	___ftdiv@exp,f,c
  4769  002142  C035  F041         	movff	___ftdiv@f1+2,___ftdiv@sign
  4770  002146  5038               	movf	___ftdiv@f2+2,w,c
  4771  002148  1A41               	xorwf	___ftdiv@sign,f,c
  4772  00214A  0E80               	movlw	128
  4773  00214C  1641               	andwf	___ftdiv@sign,f,c
  4774  00214E  8E34               	bsf	___ftdiv@f1+1,7,c
  4775  002150  0EFF               	movlw	255
  4776  002152  1633               	andwf	___ftdiv@f1,f,c
  4777  002154  0EFF               	movlw	255
  4778  002156  1634               	andwf	___ftdiv@f1+1,f,c
  4779  002158  0E00               	movlw	0
  4780  00215A  1635               	andwf	___ftdiv@f1+2,f,c
  4781  00215C  8E37               	bsf	___ftdiv@f2+1,7,c
  4782  00215E  0EFF               	movlw	255
  4783  002160  1636               	andwf	___ftdiv@f2,f,c
  4784  002162  0EFF               	movlw	255
  4785  002164  1637               	andwf	___ftdiv@f2+1,f,c
  4786  002166  0E00               	movlw	0
  4787  002168  1638               	andwf	___ftdiv@f2+2,f,c
  4788  00216A  0E18               	movlw	24
  4789  00216C  6E3C               	movwf	___ftdiv@cntr,c
  4790  00216E                     l2327:
  4791  00216E  90D8               	bcf	status,0,c
  4792  002170  363D               	rlcf	___ftdiv@f3,f,c
  4793  002172  363E               	rlcf	___ftdiv@f3+1,f,c
  4794  002174  363F               	rlcf	___ftdiv@f3+2,f,c
  4795  002176  5036               	movf	___ftdiv@f2,w,c
  4796  002178  5C33               	subwf	___ftdiv@f1,w,c
  4797  00217A  5037               	movf	___ftdiv@f2+1,w,c
  4798  00217C  5834               	subwfb	___ftdiv@f1+1,w,c
  4799  00217E  5038               	movf	___ftdiv@f2+2,w,c
  4800  002180  5835               	subwfb	___ftdiv@f1+2,w,c
  4801  002182  A0D8               	btfss	status,0,c
  4802  002184  D007               	goto	l593
  4803  002186  5036               	movf	___ftdiv@f2,w,c
  4804  002188  5E33               	subwf	___ftdiv@f1,f,c
  4805  00218A  5037               	movf	___ftdiv@f2+1,w,c
  4806  00218C  5A34               	subwfb	___ftdiv@f1+1,f,c
  4807  00218E  5038               	movf	___ftdiv@f2+2,w,c
  4808  002190  5A35               	subwfb	___ftdiv@f1+2,f,c
  4809  002192  803D               	bsf	___ftdiv@f3,0,c
  4810  002194                     l593:
  4811  002194  90D8               	bcf	status,0,c
  4812  002196  3633               	rlcf	___ftdiv@f1,f,c
  4813  002198  3634               	rlcf	___ftdiv@f1+1,f,c
  4814  00219A  3635               	rlcf	___ftdiv@f1+2,f,c
  4815  00219C  2E3C               	decfsz	___ftdiv@cntr,f,c
  4816  00219E  D7E7               	goto	l2327
  4817  0021A0  C03D  F013         	movff	___ftdiv@f3,___ftpack@arg
  4818  0021A4  C03E  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4819  0021A8  C03F  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4820  0021AC  C040  F016         	movff	___ftdiv@exp,___ftpack@exp
  4821  0021B0  C041  F017         	movff	___ftdiv@sign,___ftpack@sign
  4822  0021B4  ECB3  F011         	call	___ftpack	;wreg free
  4823  0021B8  C013  F033         	movff	?___ftpack,?___ftdiv
  4824  0021BC  C014  F034         	movff	?___ftpack+1,?___ftdiv+1
  4825  0021C0  C015  F035         	movff	?___ftpack+2,?___ftdiv+2
  4826  0021C4  0012               	return	
  4827  0021C6                     __end_of___ftdiv:
  4828                           	opt stack 0
  4829                           tblptru	equ	0xFF8
  4830                           tblptrh	equ	0xFF7
  4831                           tblptrl	equ	0xFF6
  4832                           tablat	equ	0xFF5
  4833                           prodh	equ	0xFF4
  4834                           prodl	equ	0xFF3
  4835                           intcon	equ	0xFF2
  4836                           postinc0	equ	0xFEE
  4837                           wreg	equ	0xFE8
  4838                           postdec1	equ	0xFE5
  4839                           fsr1l	equ	0xFE1
  4840                           postinc2	equ	0xFDE
  4841                           postdec2	equ	0xFDD
  4842                           plusw2	equ	0xFDB
  4843                           fsr2h	equ	0xFDA
  4844                           fsr2l	equ	0xFD9
  4845                           status	equ	0xFD8
  4846                           
  4847 ;; *************** function ___ftpack *****************
  4848 ;; Defined at:
  4849 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  arg             3   18[COMRAM] unsigned um
  4852 ;;  exp             1   21[COMRAM] unsigned char 
  4853 ;;  sign            1   22[COMRAM] unsigned char 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;		None
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  3   18[COMRAM] float 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4865 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;Total ram usage:        8 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    1
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		___ftdiv
  4876 ;;		___ftmul
  4877 ;;		___lltoft
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text18
  4882  002366                     __ptext18:
  4883                           	opt stack 0
  4884  002366                     ___ftpack:
  4885                           	opt stack 27
  4886                           
  4887                           ;incstack = 0
  4888  002366  5016               	movf	___ftpack@exp,w,c
  4889  002368  B4D8               	btfsc	status,2,c
  4890  00236A  D005               	goto	l1749
  4891  00236C  5013               	movf	___ftpack@arg,w,c
  4892  00236E  1014               	iorwf	___ftpack@arg+1,w,c
  4893  002370  1015               	iorwf	___ftpack@arg+2,w,c
  4894  002372  A4D8               	btfss	status,2,c
  4895  002374  D00C               	goto	l1755
  4896  002376                     l1749:
  4897  002376  0E00               	movlw	0
  4898  002378  6E13               	movwf	?___ftpack,c
  4899  00237A  0E00               	movlw	0
  4900  00237C  6E14               	movwf	?___ftpack+1,c
  4901  00237E  0E00               	movlw	0
  4902  002380  6E15               	movwf	?___ftpack+2,c
  4903  002382  0012               	return	
  4904  002384                     l1753:
  4905  002384  2A16               	incf	___ftpack@exp,f,c
  4906  002386  90D8               	bcf	status,0,c
  4907  002388  3215               	rrcf	___ftpack@arg+2,f,c
  4908  00238A  3214               	rrcf	___ftpack@arg+1,f,c
  4909  00238C  3213               	rrcf	___ftpack@arg,f,c
  4910  00238E                     l1755:
  4911  00238E  0E00               	movlw	0
  4912  002390  1413               	andwf	___ftpack@arg,w,c
  4913  002392  6E18               	movwf	??___ftpack& (0+255),c
  4914  002394  0E00               	movlw	0
  4915  002396  1414               	andwf	___ftpack@arg+1,w,c
  4916  002398  6E19               	movwf	(??___ftpack+1)& (0+255),c
  4917  00239A  0EFE               	movlw	254
  4918  00239C  1415               	andwf	___ftpack@arg+2,w,c
  4919  00239E  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  4920  0023A0  5018               	movf	??___ftpack,w,c
  4921  0023A2  1019               	iorwf	??___ftpack+1,w,c
  4922  0023A4  101A               	iorwf	??___ftpack+2,w,c
  4923  0023A6  B4D8               	btfsc	status,2,c
  4924  0023A8  D00C               	goto	l1761
  4925  0023AA  D7EC               	goto	l1753
  4926  0023AC                     l1757:
  4927  0023AC  2A16               	incf	___ftpack@exp,f,c
  4928  0023AE  0E01               	movlw	1
  4929  0023B0  2613               	addwf	___ftpack@arg,f,c
  4930  0023B2  0E00               	movlw	0
  4931  0023B4  2214               	addwfc	___ftpack@arg+1,f,c
  4932  0023B6  0E00               	movlw	0
  4933  0023B8  2215               	addwfc	___ftpack@arg+2,f,c
  4934  0023BA  90D8               	bcf	status,0,c
  4935  0023BC  3215               	rrcf	___ftpack@arg+2,f,c
  4936  0023BE  3214               	rrcf	___ftpack@arg+1,f,c
  4937  0023C0  3213               	rrcf	___ftpack@arg,f,c
  4938  0023C2                     l1761:
  4939  0023C2  0E00               	movlw	0
  4940  0023C4  1413               	andwf	___ftpack@arg,w,c
  4941  0023C6  6E18               	movwf	??___ftpack& (0+255),c
  4942  0023C8  0E00               	movlw	0
  4943  0023CA  1414               	andwf	___ftpack@arg+1,w,c
  4944  0023CC  6E19               	movwf	(??___ftpack+1)& (0+255),c
  4945  0023CE  0EFF               	movlw	255
  4946  0023D0  1415               	andwf	___ftpack@arg+2,w,c
  4947  0023D2  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  4948  0023D4  5018               	movf	??___ftpack,w,c
  4949  0023D6  1019               	iorwf	??___ftpack+1,w,c
  4950  0023D8  101A               	iorwf	??___ftpack+2,w,c
  4951  0023DA  B4D8               	btfsc	status,2,c
  4952  0023DC  D006               	goto	l1765
  4953  0023DE  D7E6               	goto	l1757
  4954  0023E0                     l1763:
  4955  0023E0  0616               	decf	___ftpack@exp,f,c
  4956  0023E2  90D8               	bcf	status,0,c
  4957  0023E4  3613               	rlcf	___ftpack@arg,f,c
  4958  0023E6  3614               	rlcf	___ftpack@arg+1,f,c
  4959  0023E8  3615               	rlcf	___ftpack@arg+2,f,c
  4960  0023EA                     l1765:
  4961  0023EA  BE14               	btfsc	___ftpack@arg+1,7,c
  4962  0023EC  D003               	goto	l535
  4963  0023EE  0E02               	movlw	2
  4964  0023F0  6016               	cpfslt	___ftpack@exp,c
  4965  0023F2  D7F6               	goto	l1763
  4966  0023F4                     l535:
  4967  0023F4  A016               	btfss	___ftpack@exp,0,c
  4968  0023F6  9E14               	bcf	___ftpack@arg+1,7,c
  4969  0023F8  90D8               	bcf	status,0,c
  4970  0023FA  3216               	rrcf	___ftpack@exp,f,c
  4971  0023FC  5016               	movf	___ftpack@exp,w,c
  4972  0023FE  1215               	iorwf	___ftpack@arg+2,f,c
  4973  002400  5017               	movf	___ftpack@sign,w,c
  4974  002402  A4D8               	btfss	status,2,c
  4975  002404  8E15               	bsf	___ftpack@arg+2,7,c
  4976  002406  C013  F013         	movff	___ftpack@arg,?___ftpack
  4977  00240A  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  4978  00240E  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  4979  002412  0012               	return	
  4980  002414                     __end_of___ftpack:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           intcon	equ	0xFF2
  4989                           postinc0	equ	0xFEE
  4990                           wreg	equ	0xFE8
  4991                           postdec1	equ	0xFE5
  4992                           fsr1l	equ	0xFE1
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           plusw2	equ	0xFDB
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _LCDinit *****************
  5001 ;; Defined at:
  5002 ;;		line 60 in file "lcd.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;		None
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  1    wreg      void 
  5009 ;; Registers used:
  5010 ;;		wreg, status,2, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;Total ram usage:        1 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    2
  5023 ;; This function calls:
  5024 ;;		_LCDcheckBF
  5025 ;;		_LCDcmd
  5026 ;; This function is called by:
  5027 ;;		_main
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text19
  5032  0022A0                     __ptext19:
  5033                           	opt stack 0
  5034  0022A0                     _LCDinit:
  5035                           	opt stack 28
  5036                           
  5037                           ;lcd.c: 63: TRISA = 0;
  5038                           
  5039                           ;incstack = 0
  5040  0022A0  0E00               	movlw	0
  5041  0022A2  6E92               	movwf	3986,c	;volatile
  5042                           
  5043                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  5044  0022A4  9096               	bcf	3990,0,c	;volatile
  5045                           
  5046                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  5047  0022A6  9296               	bcf	3990,1,c	;volatile
  5048                           
  5049                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  5050  0022A8  9496               	bcf	3990,2,c	;volatile
  5051                           
  5052                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  5053  0022AA  908D               	bcf	3981,0,c	;volatile
  5054                           
  5055                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  5056  0022AC  928D               	bcf	3981,1,c	;volatile
  5057                           
  5058                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  5059  0022AE  848D               	bsf	3981,2,c	;volatile
  5060                           
  5061                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  5062  0022B0  0E21               	movlw	33
  5063  0022B2  6E14               	movwf	??_LCDinit& (0+255),c
  5064  0022B4  0E76               	movlw	118
  5065  0022B6                     u2397:
  5066  0022B6  2EE8               	decfsz	wreg,f,c
  5067  0022B8  D7FE               	goto	u2397
  5068  0022BA  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5069  0022BC  D7FC               	goto	u2397
  5070  0022BE  D000               	nop2	
  5071                           
  5072                           ;lcd.c: 74: LCDcmd(0b00110000);
  5073  0022C0  0E30               	movlw	48
  5074  0022C2  ECCE  F013         	call	_LCDcmd
  5075                           
  5076                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  5077  0022C6  0E27               	movlw	39
  5078  0022C8  6E14               	movwf	??_LCDinit& (0+255),c
  5079  0022CA  0EF5               	movlw	245
  5080  0022CC                     u2407:
  5081  0022CC  2EE8               	decfsz	wreg,f,c
  5082  0022CE  D7FE               	goto	u2407
  5083  0022D0  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5084  0022D2  D7FC               	goto	u2407
  5085  0022D4  F000               	nop	
  5086                           
  5087                           ;lcd.c: 76: LCDcmd(0b00110000);
  5088  0022D6  0E30               	movlw	48
  5089  0022D8  ECCE  F013         	call	_LCDcmd
  5090                           
  5091                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  5092  0022DC  0E27               	movlw	39
  5093  0022DE  6E14               	movwf	??_LCDinit& (0+255),c
  5094  0022E0  0EF5               	movlw	245
  5095  0022E2                     u2417:
  5096  0022E2  2EE8               	decfsz	wreg,f,c
  5097  0022E4  D7FE               	goto	u2417
  5098  0022E6  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5099  0022E8  D7FC               	goto	u2417
  5100  0022EA  F000               	nop	
  5101                           
  5102                           ;lcd.c: 78: LCDcmd(0b00110000);
  5103  0022EC  0E30               	movlw	48
  5104  0022EE  ECCE  F013         	call	_LCDcmd
  5105                           
  5106                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  5107  0022F2  0E27               	movlw	39
  5108  0022F4  6E14               	movwf	??_LCDinit& (0+255),c
  5109  0022F6  0EF5               	movlw	245
  5110  0022F8                     u2427:
  5111  0022F8  2EE8               	decfsz	wreg,f,c
  5112  0022FA  D7FE               	goto	u2427
  5113  0022FC  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5114  0022FE  D7FC               	goto	u2427
  5115  002300  F000               	nop	
  5116                           
  5117                           ;lcd.c: 80: LCDcmd(0b00111000);
  5118  002302  0E38               	movlw	56
  5119  002304  ECCE  F013         	call	_LCDcmd
  5120                           
  5121                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  5122  002308  0E27               	movlw	39
  5123  00230A  6E14               	movwf	??_LCDinit& (0+255),c
  5124  00230C  0EF5               	movlw	245
  5125  00230E                     u2437:
  5126  00230E  2EE8               	decfsz	wreg,f,c
  5127  002310  D7FE               	goto	u2437
  5128  002312  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5129  002314  D7FC               	goto	u2437
  5130  002316  F000               	nop	
  5131                           
  5132                           ;lcd.c: 82: LCDcmd(0b00001000);
  5133  002318  0E08               	movlw	8
  5134  00231A  ECCE  F013         	call	_LCDcmd
  5135                           
  5136                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  5137  00231E  0E27               	movlw	39
  5138  002320  6E14               	movwf	??_LCDinit& (0+255),c
  5139  002322  0EF5               	movlw	245
  5140  002324                     u2447:
  5141  002324  2EE8               	decfsz	wreg,f,c
  5142  002326  D7FE               	goto	u2447
  5143  002328  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5144  00232A  D7FC               	goto	u2447
  5145  00232C  F000               	nop	
  5146                           
  5147                           ;lcd.c: 84: LCDcmd(0b00000001);
  5148  00232E  0E01               	movlw	1
  5149  002330  ECCE  F013         	call	_LCDcmd
  5150                           
  5151                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  5152  002334  0E27               	movlw	39
  5153  002336  6E14               	movwf	??_LCDinit& (0+255),c
  5154  002338  0EF5               	movlw	245
  5155  00233A                     u2457:
  5156  00233A  2EE8               	decfsz	wreg,f,c
  5157  00233C  D7FE               	goto	u2457
  5158  00233E  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5159  002340  D7FC               	goto	u2457
  5160  002342  F000               	nop	
  5161                           
  5162                           ;lcd.c: 86: LCDcmd(0b00000110);
  5163  002344  0E06               	movlw	6
  5164  002346  ECCE  F013         	call	_LCDcmd
  5165                           
  5166                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  5167  00234A  0E27               	movlw	39
  5168  00234C  6E14               	movwf	??_LCDinit& (0+255),c
  5169  00234E  0EF5               	movlw	245
  5170  002350                     u2467:
  5171  002350  2EE8               	decfsz	wreg,f,c
  5172  002352  D7FE               	goto	u2467
  5173  002354  2E14               	decfsz	??_LCDinit& (0+255),f,c
  5174  002356  D7FC               	goto	u2467
  5175  002358  F000               	nop	
  5176                           
  5177                           ;lcd.c: 90: LCDcmd(0b00001111);
  5178  00235A  0E0F               	movlw	15
  5179  00235C  ECCE  F013         	call	_LCDcmd
  5180                           
  5181                           ;lcd.c: 91: LCDcheckBF();
  5182  002360  ECAB  F013         	call	_LCDcheckBF	;wreg free
  5183  002364  0012               	return		;funcret
  5184  002366                     __end_of_LCDinit:
  5185                           	opt stack 0
  5186                           tblptru	equ	0xFF8
  5187                           tblptrh	equ	0xFF7
  5188                           tblptrl	equ	0xFF6
  5189                           tablat	equ	0xFF5
  5190                           prodh	equ	0xFF4
  5191                           prodl	equ	0xFF3
  5192                           intcon	equ	0xFF2
  5193                           postinc0	equ	0xFEE
  5194                           wreg	equ	0xFE8
  5195                           postdec1	equ	0xFE5
  5196                           fsr1l	equ	0xFE1
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           plusw2	equ	0xFDB
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _LCDgotoLineTwo *****************
  5205 ;; Defined at:
  5206 ;;		line 142 in file "lcd.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;		None
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  1    wreg      void 
  5213 ;; Registers used:
  5214 ;;		wreg, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : 0/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;Total ram usage:        0 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    2
  5227 ;; This function calls:
  5228 ;;		_LCDcheckBF
  5229 ;;		_LCDcmd
  5230 ;; This function is called by:
  5231 ;;		_main
  5232 ;;		_LCDputs
  5233 ;;		_LCDwriteLineTwo
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text20
  5238  00277C                     __ptext20:
  5239                           	opt stack 0
  5240  00277C                     _LCDgotoLineTwo:
  5241                           	opt stack 28
  5242                           
  5243                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  5244                           
  5245                           ;incstack = 0
  5246  00277C  908D               	bcf	3981,0,c	;volatile
  5247                           
  5248                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  5249  00277E  928D               	bcf	3981,1,c	;volatile
  5250                           
  5251                           ;lcd.c: 146: LCDcmd(0b11000000);
  5252  002780  0EC0               	movlw	192
  5253  002782  ECCE  F013         	call	_LCDcmd
  5254                           
  5255                           ;lcd.c: 147: LCDcheckBF();
  5256  002786  ECAB  F013         	call	_LCDcheckBF	;wreg free
  5257  00278A  0012               	return		;funcret
  5258  00278C                     __end_of_LCDgotoLineTwo:
  5259                           	opt stack 0
  5260                           tblptru	equ	0xFF8
  5261                           tblptrh	equ	0xFF7
  5262                           tblptrl	equ	0xFF6
  5263                           tablat	equ	0xFF5
  5264                           prodh	equ	0xFF4
  5265                           prodl	equ	0xFF3
  5266                           intcon	equ	0xFF2
  5267                           postinc0	equ	0xFEE
  5268                           wreg	equ	0xFE8
  5269                           postdec1	equ	0xFE5
  5270                           fsr1l	equ	0xFE1
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           plusw2	equ	0xFDB
  5274                           fsr2h	equ	0xFDA
  5275                           fsr2l	equ	0xFD9
  5276                           status	equ	0xFD8
  5277                           
  5278 ;; *************** function _LCDclear *****************
  5279 ;; Defined at:
  5280 ;;		line 126 in file "lcd.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;		None
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;Total ram usage:        0 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    2
  5301 ;; This function calls:
  5302 ;;		_LCDcheckBF
  5303 ;;		_LCDcmd
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;;		_LCDputs
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text21
  5311  00278C                     __ptext21:
  5312                           	opt stack 0
  5313  00278C                     _LCDclear:
  5314                           	opt stack 28
  5315                           
  5316                           ;lcd.c: 128: LATEbits.LATE0 = 0;
  5317                           
  5318                           ;incstack = 0
  5319  00278C  908D               	bcf	3981,0,c	;volatile
  5320                           
  5321                           ;lcd.c: 129: LATEbits.LATE1 = 0;
  5322  00278E  928D               	bcf	3981,1,c	;volatile
  5323                           
  5324                           ;lcd.c: 130: LCDcmd(0b00000001);
  5325  002790  0E01               	movlw	1
  5326  002792  ECCE  F013         	call	_LCDcmd
  5327                           
  5328                           ;lcd.c: 131: LCDcheckBF();
  5329  002796  ECAB  F013         	call	_LCDcheckBF	;wreg free
  5330  00279A  0012               	return		;funcret
  5331  00279C                     __end_of_LCDclear:
  5332                           	opt stack 0
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           intcon	equ	0xFF2
  5340                           postinc0	equ	0xFEE
  5341                           wreg	equ	0xFE8
  5342                           postdec1	equ	0xFE5
  5343                           fsr1l	equ	0xFE1
  5344                           postinc2	equ	0xFDE
  5345                           postdec2	equ	0xFDD
  5346                           plusw2	equ	0xFDB
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function _LCDcmd *****************
  5352 ;; Defined at:
  5353 ;;		line 94 in file "lcd.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  command         1    wreg     unsigned char 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  command         1   18[COMRAM] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		wreg
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;Total ram usage:        1 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    1
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_LCDinit
  5378 ;;		_LCDwrite
  5379 ;;		_LCDclear
  5380 ;;		_LCDgotoLineTwo
  5381 ;;		_LCDgotoLineOne
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           	psect	text22
  5386  00279C                     __ptext22:
  5387                           	opt stack 0
  5388  00279C                     _LCDcmd:
  5389                           	opt stack 26
  5390                           
  5391                           ;incstack = 0
  5392                           ;LCDcmd@command stored from wreg
  5393  00279C  6E13               	movwf	LCDcmd@command,c
  5394                           
  5395                           ;lcd.c: 96: LATA = command;
  5396  00279E  C013  FF89         	movff	LCDcmd@command,3977	;volatile
  5397                           
  5398                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  5399  0027A2  948D               	bcf	3981,2,c	;volatile
  5400                           
  5401                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  5402  0027A4  848D               	bsf	3981,2,c	;volatile
  5403  0027A6  0012               	return		;funcret
  5404  0027A8                     __end_of_LCDcmd:
  5405                           	opt stack 0
  5406                           tblptru	equ	0xFF8
  5407                           tblptrh	equ	0xFF7
  5408                           tblptrl	equ	0xFF6
  5409                           tablat	equ	0xFF5
  5410                           prodh	equ	0xFF4
  5411                           prodl	equ	0xFF3
  5412                           intcon	equ	0xFF2
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1l	equ	0xFE1
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           plusw2	equ	0xFDB
  5420                           fsr2h	equ	0xFDA
  5421                           fsr2l	equ	0xFD9
  5422                           status	equ	0xFD8
  5423                           
  5424 ;; *************** function _LCDcheckBF *****************
  5425 ;; Defined at:
  5426 ;;		line 101 in file "lcd.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;		None
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  1    wreg      void 
  5433 ;; Registers used:
  5434 ;;		None
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5444 ;;Total ram usage:        0 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    1
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_LCDinit
  5451 ;;		_LCDwrite
  5452 ;;		_LCDclear
  5453 ;;		_LCDgotoLineTwo
  5454 ;;		_LCDgotoLineOne
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text23
  5459  002756                     __ptext23:
  5460                           	opt stack 0
  5461  002756                     _LCDcheckBF:
  5462                           	opt stack 26
  5463                           
  5464                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  5465                           
  5466                           ;incstack = 0
  5467  002756  8E92               	bsf	3986,7,c	;volatile
  5468                           
  5469                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  5470  002758  908D               	bcf	3981,0,c	;volatile
  5471                           
  5472                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  5473  00275A  828D               	bsf	3981,1,c	;volatile
  5474  00275C                     l236:
  5475                           
  5476                           ;lcd.c: 110: {
  5477                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  5478  00275C  948D               	bcf	3981,2,c	;volatile
  5479                           
  5480                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  5481  00275E  848D               	bsf	3981,2,c	;volatile
  5482  002760  BE80               	btfsc	3968,7,c	;volatile
  5483  002762  D7FC               	goto	l236
  5484                           
  5485                           ;lcd.c: 113: }
  5486                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  5487  002764  848D               	bsf	3981,2,c	;volatile
  5488                           
  5489                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  5490  002766  9E92               	bcf	3986,7,c	;volatile
  5491  002768  0012               	return		;funcret
  5492  00276A                     __end_of_LCDcheckBF:
  5493                           	opt stack 0
  5494                           tblptru	equ	0xFF8
  5495                           tblptrh	equ	0xFF7
  5496                           tblptrl	equ	0xFF6
  5497                           tablat	equ	0xFF5
  5498                           prodh	equ	0xFF4
  5499                           prodl	equ	0xFF3
  5500                           intcon	equ	0xFF2
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           postdec1	equ	0xFE5
  5504                           fsr1l	equ	0xFE1
  5505                           postinc2	equ	0xFDE
  5506                           postdec2	equ	0xFDD
  5507                           plusw2	equ	0xFDB
  5508                           fsr2h	equ	0xFDA
  5509                           fsr2l	equ	0xFD9
  5510                           status	equ	0xFD8
  5511                           
  5512 ;; *************** function _ISR *****************
  5513 ;; Defined at:
  5514 ;;		line 256 in file "main.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;		None
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;  dummy           1   17[COMRAM] unsigned char 
  5519 ;;  dummy           1   16[COMRAM] unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;Total ram usage:       18 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; This function calls:
  5536 ;;		Nothing
  5537 ;; This function is called by:
  5538 ;;		Interrupt level 2
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	intcode
  5543  000008                     __pintcode:
  5544                           	opt stack 0
  5545  000008                     _ISR:
  5546                           	opt stack 26
  5547                           
  5548                           ;incstack = 0
  5549  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5550  00000A  CFFA F003          	movff	pclath,??_ISR+2
  5551  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  5552  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  5553  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  5554  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  5555  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  5556  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  5557  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  5558  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  5559  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  5560  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  5561  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  5562  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  5563  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  5564                           
  5565                           ;main.c: 259: if (CCP2IE && CCP2IF)
  5566  000042  B0A0               	btfsc	4000,0,c	;volatile
  5567  000044  A0A1               	btfss	4001,0,c	;volatile
  5568  000046  D01E               	goto	i2l151
  5569                           
  5570                           ;main.c: 260: {
  5571                           ;main.c: 262: if(LATDbits.LATD1 == 1)
  5572  000048  A28C               	btfss	3980,1,c	;volatile
  5573  00004A  D010               	goto	i2l152
  5574                           
  5575                           ;main.c: 263: {
  5576                           ;main.c: 264: LATDbits.LATD1 = 0;
  5577  00004C  928C               	bcf	3980,1,c	;volatile
  5578                           
  5579                           ;main.c: 265: CCPR2 = 8000 - CCPR2;
  5580  00004E  CF67 F001          	movff	3943,??_ISR	;volatile
  5581  000052  CF68 F002          	movff	3944,??_ISR+1	;volatile
  5582  000056  1E01               	comf	??_ISR,f,c
  5583  000058  1E02               	comf	??_ISR+1,f,c
  5584  00005A  4A01               	infsnz	??_ISR,f,c
  5585  00005C  2A02               	incf	??_ISR+1,f,c
  5586  00005E  0E40               	movlw	64
  5587  000060  2401               	addwf	??_ISR,w,c
  5588  000062  6E67               	movwf	3943,c	;volatile
  5589  000064  0E1F               	movlw	31
  5590  000066  2002               	addwfc	??_ISR+1,w,c
  5591  000068  6E68               	movwf	3944,c	;volatile
  5592                           
  5593                           ;main.c: 266: }
  5594  00006A  D005               	goto	i2l2437
  5595  00006C                     i2l152:
  5596                           
  5597                           ;main.c: 267: else
  5598                           ;main.c: 268: {
  5599                           ;main.c: 269: LATDbits.LATD1 = 1;
  5600  00006C  828C               	bsf	3980,1,c	;volatile
  5601                           
  5602                           ;main.c: 270: CCPR2 = leftWheelCommandedPW;
  5603  00006E  C042  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  5604  000072  C043  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  5605  000076                     i2l2437:
  5606                           
  5607                           ;main.c: 271: }
  5608                           ;main.c: 272: TMR5 = 0;
  5609  000076  0E00               	movlw	0
  5610  000078  010F               	movlb	15	; () banked
  5611  00007A  6F50               	movwf	80,b	;volatile
  5612  00007C  0E00               	movlw	0
  5613  00007E  6F4F               	movwf	79,b	;volatile
  5614                           
  5615                           ; BSR set to: 15
  5616                           ;main.c: 273: CCP2IF = 0;
  5617  000080  90A1               	bcf	4001,0,c	;volatile
  5618                           
  5619                           ; BSR set to: 15
  5620                           ;main.c: 274: return;
  5621  000082  D047               	goto	i2l154
  5622  000084                     i2l151:
  5623                           
  5624                           ;main.c: 275: }
  5625                           ;main.c: 279: if (CCP3IE && CCP3IF)
  5626  000084  B07A               	btfsc	3962,0,c	;volatile
  5627  000086  A07B               	btfss	3963,0,c	;volatile
  5628  000088  D01F               	goto	i2l155
  5629                           
  5630                           ;main.c: 280: {
  5631                           ;main.c: 282: if(LATDbits.LATD0 == 1)
  5632  00008A  A08C               	btfss	3980,0,c	;volatile
  5633  00008C  D012               	goto	i2l156
  5634                           
  5635                           ;main.c: 283: {
  5636                           ;main.c: 284: LATDbits.LATD0 = 0;
  5637  00008E  908C               	bcf	3980,0,c	;volatile
  5638                           
  5639                           ;main.c: 285: CCPR3 = 8000 - CCPR3;
  5640  000090  CF5E F001          	movff	3934,??_ISR	;volatile
  5641  000094  CF5F F002          	movff	3935,??_ISR+1	;volatile
  5642  000098  1E01               	comf	??_ISR,f,c
  5643  00009A  1E02               	comf	??_ISR+1,f,c
  5644  00009C  4A01               	infsnz	??_ISR,f,c
  5645  00009E  2A02               	incf	??_ISR+1,f,c
  5646  0000A0  0E40               	movlw	64
  5647  0000A2  2401               	addwf	??_ISR,w,c
  5648  0000A4  010F               	movlb	15	; () banked
  5649  0000A6  6F5E               	movwf	94,b	;volatile
  5650  0000A8  0E1F               	movlw	31
  5651  0000AA  2002               	addwfc	??_ISR+1,w,c
  5652  0000AC  010F               	movlb	15	; () banked
  5653  0000AE  6F5F               	movwf	95,b	;volatile
  5654                           
  5655                           ;main.c: 286: }
  5656  0000B0  D005               	goto	i2l157
  5657  0000B2                     i2l156:
  5658                           
  5659                           ;main.c: 287: else
  5660                           ;main.c: 288: {
  5661                           ;main.c: 289: LATDbits.LATD0 = 1;
  5662  0000B2  808C               	bsf	3980,0,c	;volatile
  5663                           
  5664                           ;main.c: 290: CCPR3 = rightWheelCommandedPW;
  5665  0000B4  C044  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  5666  0000B8  C045  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  5667  0000BC                     i2l157:
  5668                           
  5669                           ;main.c: 291: }
  5670                           ;main.c: 292: CCP3IF = 0;
  5671  0000BC  907B               	bcf	3963,0,c	;volatile
  5672                           
  5673                           ;main.c: 293: TMR1 = 0;
  5674  0000BE  0E00               	movlw	0
  5675  0000C0  6ECF               	movwf	4047,c	;volatile
  5676  0000C2  0E00               	movlw	0
  5677  0000C4  6ECE               	movwf	4046,c	;volatile
  5678                           
  5679                           ;main.c: 295: return;
  5680  0000C6  D025               	goto	i2l154
  5681  0000C8                     i2l155:
  5682                           
  5683                           ;main.c: 298: }
  5684                           ;main.c: 303: if(C1IF && C1IE)
  5685  0000C8  BCA1               	btfsc	4001,6,c	;volatile
  5686  0000CA  ACA0               	btfss	4000,6,c	;volatile
  5687  0000CC  D00A               	goto	i2l2463
  5688                           
  5689                           ;main.c: 304: {
  5690                           ;main.c: 305: leftWheelCount++;
  5691  0000CE  0E01               	movlw	1
  5692  0000D0  0100               	movlb	0	; () banked
  5693  0000D2  278B               	addwf	_leftWheelCount& (0+255),f,b
  5694  0000D4  0E00               	movlw	0
  5695  0000D6  238C               	addwfc	(_leftWheelCount+1)& (0+255),f,b
  5696  0000D8  238D               	addwfc	(_leftWheelCount+2)& (0+255),f,b
  5697  0000DA  238E               	addwfc	(_leftWheelCount+3)& (0+255),f,b
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;main.c: 306: char dummy = CM1CON0;
  5701  0000DC  CF79 F011          	movff	3961,ISR@dummy	;volatile
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;main.c: 307: C1IF = 0;
  5705  0000E0  9CA1               	bcf	4001,6,c	;volatile
  5706  0000E2                     i2l2463:
  5707                           
  5708                           ;main.c: 308: }
  5709                           ;main.c: 309: if(C2IF && C2IE)
  5710  0000E2  BAA1               	btfsc	4001,5,c	;volatile
  5711  0000E4  AAA0               	btfss	4000,5,c	;volatile
  5712  0000E6  D00A               	goto	i2l2473
  5713                           
  5714                           ;main.c: 310: {
  5715                           ;main.c: 311: rightWheelCount++;
  5716  0000E8  0E01               	movlw	1
  5717  0000EA  0100               	movlb	0	; () banked
  5718  0000EC  278F               	addwf	_rightWheelCount& (0+255),f,b
  5719  0000EE  0E00               	movlw	0
  5720  0000F0  2390               	addwfc	(_rightWheelCount+1)& (0+255),f,b
  5721  0000F2  2391               	addwfc	(_rightWheelCount+2)& (0+255),f,b
  5722  0000F4  2392               	addwfc	(_rightWheelCount+3)& (0+255),f,b
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;main.c: 313: char dummy = CM2CON0;
  5726  0000F6  CF78 F012          	movff	3960,ISR@dummy_1129	;volatile
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;main.c: 314: C2IF = 0;
  5730  0000FA  9AA1               	bcf	4001,5,c	;volatile
  5731  0000FC                     i2l2473:
  5732                           
  5733                           ;main.c: 315: }
  5734                           ;main.c: 320: if (TMR2IE && TMR2IF)
  5735  0000FC  B29D               	btfsc	3997,1,c	;volatile
  5736  0000FE  A29E               	btfss	3998,1,c	;volatile
  5737  000100  D008               	goto	i2l154
  5738                           
  5739                           ;main.c: 321: {
  5740                           ;main.c: 322: elapsedMillis++;
  5741  000102  0E01               	movlw	1
  5742  000104  0100               	movlb	0	; () banked
  5743  000106  2787               	addwf	_elapsedMillis& (0+255),f,b
  5744  000108  0E00               	movlw	0
  5745  00010A  2388               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  5746  00010C  2389               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  5747  00010E  238A               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;main.c: 323: PIR1bits.TMR2IF = 0;
  5751  000110  929E               	bcf	3998,1,c	;volatile
  5752  000112                     i2l154:
  5753  000112  C010  FFF5         	movff	??_ISR+15,tablat
  5754  000116  C00F  FFF8         	movff	??_ISR+14,tblptru
  5755  00011A  C00E  FFF7         	movff	??_ISR+13,tblptrh
  5756  00011E  C00D  FFF6         	movff	??_ISR+12,tblptrl
  5757  000122  C00C  FFF4         	movff	??_ISR+11,prodh
  5758  000126  C00B  FFF3         	movff	??_ISR+10,prodl
  5759  00012A  C00A  FFDA         	movff	??_ISR+9,fsr2h
  5760  00012E  C009  FFD9         	movff	??_ISR+8,fsr2l
  5761  000132  C008  FFE2         	movff	??_ISR+7,fsr1h
  5762  000136  C007  FFE1         	movff	??_ISR+6,fsr1l
  5763  00013A  C006  FFEA         	movff	??_ISR+5,fsr0h
  5764  00013E  C005  FFE9         	movff	??_ISR+4,fsr0l
  5765  000142  C004  FFFB         	movff	??_ISR+3,pclatu
  5766  000146  C003  FFFA         	movff	??_ISR+2,pclath
  5767  00014A  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5768  00014C  0011               	retfie		f
  5769  00014E                     __end_of_ISR:
  5770                           	opt stack 0
  5771                           pclatu	equ	0xFFB
  5772                           pclath	equ	0xFFA
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           fsr0h	equ	0xFEA
  5782                           fsr0l	equ	0xFE9
  5783                           wreg	equ	0xFE8
  5784                           postdec1	equ	0xFE5
  5785                           fsr1h	equ	0xFE2
  5786                           fsr1l	equ	0xFE1
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           plusw2	equ	0xFDB
  5790                           fsr2h	equ	0xFDA
  5791                           fsr2l	equ	0xFD9
  5792                           status	equ	0xFD8
  5793                           pclatu	equ	0xFFB
  5794                           pclath	equ	0xFFA
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           intcon	equ	0xFF2
  5802                           postinc0	equ	0xFEE
  5803                           fsr0h	equ	0xFEA
  5804                           fsr0l	equ	0xFE9
  5805                           wreg	equ	0xFE8
  5806                           postdec1	equ	0xFE5
  5807                           fsr1h	equ	0xFE2
  5808                           fsr1l	equ	0xFE1
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           plusw2	equ	0xFDB
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816                           	psect	rparam
  5817  0000                     pclatu	equ	0xFFB
  5818                           pclath	equ	0xFFA
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           postinc0	equ	0xFEE
  5827                           fsr0h	equ	0xFEA
  5828                           fsr0l	equ	0xFE9
  5829                           wreg	equ	0xFE8
  5830                           postdec1	equ	0xFE5
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           plusw2	equ	0xFDB
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840                           	psect	temp
  5841  00004C                     btemp:
  5842                           	opt stack 0
  5843  00004C                     	ds	1
  5844  0000                     int$flags	set	btemp
  5845                           pclatu	equ	0xFFB
  5846                           pclath	equ	0xFFA
  5847                           tblptru	equ	0xFF8
  5848                           tblptrh	equ	0xFF7
  5849                           tblptrl	equ	0xFF6
  5850                           tablat	equ	0xFF5
  5851                           prodh	equ	0xFF4
  5852                           prodl	equ	0xFF3
  5853                           intcon	equ	0xFF2
  5854                           postinc0	equ	0xFEE
  5855                           fsr0h	equ	0xFEA
  5856                           fsr0l	equ	0xFE9
  5857                           wreg	equ	0xFE8
  5858                           postdec1	equ	0xFE5
  5859                           fsr1h	equ	0xFE2
  5860                           fsr1l	equ	0xFE1
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           plusw2	equ	0xFDB
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    10
    Data        8
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      75
    BANK0           160     39      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[8]), STR_3(CODE[8]), STR_2(CODE[10]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@speedCompensation	PTR int  size(2) Largest target is 2
		 -> speedCompensation(COMRAM[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@rightWheelCommandedSpeed(COMRAM[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@leftWheelCommandedSpeed(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->___ftdiv
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    _excerciseControl->___ftge
    ___lltoft->___ftpack
    ___ftmul->___lltoft
    ___ftge->___ftmul
    ___fttol->___ftdiv
    ___ftdiv->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd
    _LCDclear->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   20813
                                             15 BANK0     24    24      0
                           _LCDclear
                     _LCDgotoLineTwo
                            _LCDinit
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
               _configureComparators
                    _configureTimers
                   _excerciseControl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              28    22      6    1890
                                             30 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             20 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _excerciseControl                                    12    12      0    9833
                                             59 COMRAM     4     4      0
                                              0 BANK0      8     8      0
                             ___ftge
                            ___ftmul
                           ___lltoft
                   _limitWheelSpeeds
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (2) _wheelVelocity                                        7     3      4    2926
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _limitWheelSpeeds                                     8     2      6     796
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2612
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2971
                                             35 COMRAM    15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             50 COMRAM     9     3      6
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _configureTimers                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureComparators                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     525
                                              0 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2669
                                             50 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2031
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDclear                                             0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       2
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDcheckBF
     _LCDcmd
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___lltoft
     ___ftpack
   _configureComparators
   _configureTimers
   _excerciseControl
     ___ftge
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft
       ___ftpack
     _limitWheelSpeeds
     _wheelVelocity
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      38       5       35.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      4B       1       79.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      83      12        0.0%
DATA                 0      0      83       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Apr 22 21:38:01 2016

                     ___wmul@multiplicand 0015                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l146 26AA                                       l170 10D0  
                                     l171 112E                                       l236 275C  
                                     l190 16F4                                       l184 1656  
                                     l169 107E                                       l194 188C  
                                     l535 23F4                                       l718 2648  
                                     l728 268A                                       l593 2194  
                            __CFG_CPB$OFF 000000                                       _PR2 000FBB  
                            __CFG_CPD$OFF 000000                                       _ISR 0008  
                             ?_LCDcheckBF 0001                                       wreg 000FE8  
                                    ?_ISR 0001                              ___ftdiv@cntr 003C  
                            ___ftdiv@sign 0041                                      _C1IE 007D06  
                                    _C1IF 007D0E                                      _C2IE 007D05  
                                    _C2IF 007D0D                                      l2105 1D94  
                                    l2131 1E0A                                      l2107 1D98  
                                    l2301 2108                                      l2141 1E38  
                                    l2133 1E12                                      l2125 1DDE  
                                    l2143 1E3E                                      l2119 1DC4  
                                    l2137 1E26                                      l2129 1E02  
                                    l2073 1CB2                                      l2307 2130  
                                    l2147 1E86                                      l2083 1CEA  
                                    l2093 1D46                                      l2077 1CC2  
                                    l2149 1E8E                                      l2327 216E  
                                    l2095 1D6C                                      l2601 1662  
                                    l2611 168C                                      l2523 1094  
                                    l2621 1784                                      l2613 16AA  
                                    l2605 1672                                      l2615 16C0  
                                    l2519 1036                                      l1911 261E  
                                    l2703 1942                                      l1761 23C2  
                                    l1753 2384                                      l1833 2014  
                                    l2609 1688                                      l2545 12CA  
                                    l2641 18B2                                      l1921 263E  
                                    l1913 2622                                      l1817 274E  
                                    l2713 19F2                                      l1763 23E0  
                                    l1755 238E                                      l2627 1812  
                                    l2571 13AA                                      l2563 1366  
                                    l2539 11FC                                      l1931 2668  
                                    l1765 23EA                                      l1757 23AC  
                                    l1749 2376                                      l1853 206E  
                                    l2637 1894                                      l2573 13C0  
                                    l1909 2616                                      l1933 266C  
                                    l2671 1F88                                      l1863 2096  
                                    l1839 203C                                      l2591 15DE  
                                    l2575 13F6                                      l2567 137C  
                                    l2559 1356                                      l2719 1A52  
                                    l2681 1FBE                                      l2649 1EE2  
                                    l1857 207E                                      l1793 2248  
                                    l1785 21F2                                      l2585 1510  
                                    l2569 138C                                      l1937 2680  
                                    l1929 2660                                      l2667 1F74  
                                    l1883 251C                                      l1867 20A6  
                                    l2579 1442                                      l2685 1FDA  
                                    l2677 1FA4                                      l1797 2272  
                                    l1789 221C                                      l2679 1FB4  
                                    l1879 24EC                                      l1895 2552  
                         __end_of_LCDinit 2366                                      l1889 2548  
                                    l1897 255E                                      STR_1 100B  
                                    STR_2 1016                                      STR_3 1020  
                                    STR_4 1028                                      u1120 21E2  
                                    u1211 1FFC                                      u1140 2238  
                                    u2100 12E2                                      u1231 2024  
                                    u1160 228E                                      u2140 140C  
                                    _LATA 000F89                                      u2070 10E6  
                                    u2240 182C                                      u2170 15F6  
                                    u2261 1EBE                                      u2407 22CC  
                                    u2280 1F08                                      u2417 22E2  
                                    u2427 22F8                                      u1731 20F0  
                                    u2437 230E                                      u2285 1EFE  
                                    u2447 2324                                      u1751 2118  
                                    u2457 233A                                      u2377 136E  
                                    u2467 2350                                      u2387 167A  
                                    u2397 22B6                                      _TMR1 000FCE  
                                    _TMR5 000F4F                          ?_configureTimers 0001  
                                    _main 18CC                              ___ftpack@arg 0013  
                            ___ftpack@exp 0016                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 004C  
                           __CFG_BORV$190 000000                                      pclat 000FFA  
                         ??_wheelVelocity 0017                                      prodh 000FF4  
                                    prodl 000FF3                                      start 014E  
                           __CFG_IESO$OFF 000000                              ___ftmul@cntr 0031  
                            ___param_bank 000010                              ___ftmul@sign 0032  
                                   ??_ISR 0001                              ___fttol@exp1 006E  
                       excerciseControl@i 003C                              ___fttol@lval 006A  
                        __end_of_LCDclear 279C                                     ?_main 0001  
                                   _CCPR2 000F67                                     _CCPR3 000F5E  
                         __end_of___ftdiv 21C6                           __end_of___ftmul 20E0  
                                   _T1CON 000FCD                           __end_of___fttol 1FEC  
                                   _T2CON 000FBA                                     _T5CON 000F4E  
                         __end_of___lwdiv 2652                           __end_of___lwmod 2694  
                                   i2l151 0084                                     i2l152 006C  
                                   i2l154 0112                                     i2l155 00C8  
                                   i2l156 00B2                                     i2l157 00BC  
                        __end_of_LCDwrite 277C                                     _TRISA 000F92  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0023                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                __end_of_limitWheelSpeeds 22A0                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers 100B  
                                   _event 0097                           __end_of_isdigit 2756  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0017  
                                   _putch 27A8                                     tablat 000FF5  
                                   plusw2 000FDB                                     status 000FD8  
                          __CFG_HFOFST$ON 000000                       __size_of_LCDcheckBF 0014  
                         __initialization 26D4                              __end_of_main 1CA8  
                                  ??_main 006F                             ___fttol@sign1 0069  
                           ISR@dummy_1129 0012                             __activetblptr 000002  
                               ??_LCDinit 0014                       main@speedLastMillis 0083  
                      wheelVelocity@speed 0013                        wheelVelocity@wheel 0019  
            __end_of_configureComparators 2600                                    _CCP2IE 007D00  
                                  _CCP2IF 007D08                                    _CCP3IE 007BD0  
                                  _CCP3IF 007BD8                                    ?_putch 0001  
                                  _ANSELD 000F3B                          __end_of___ftpack 2414  
                        __end_of___lltoft 25A8                                    i2l2437 0076  
                          __CFG_WDTEN$OFF 000000                                    i2l2463 00E2  
                                  i2l2473 00FC                                    _LCDcmd 279C  
                                  _TMR2IE 007CE9                                    _TMR2IF 007CF1  
                                  _TMR1ON 007E68                                    _TMR5ON 007A70  
                       ?_excerciseControl 0001                            __CFG_PWRTEN$ON 000000  
                          __CFG_XINST$OFF 000000                        ??_excerciseControl 0060  
                            _CCPTMRS0bits 000F49                                    ___ftge 24BC  
                                  ___wmul 2712                            __CFG_STVREN$ON 000000  
                               ??___ftdiv 0039                                 ??___ftmul 002A  
                               ??___fttol 0064                                 ??___lwdiv 0017  
                               ??___lwmod 001E                            _leftWheelCount 008B  
                                  clear_0 26DA                                    _printf 1CA8  
                   ___ftmul@f3_as_product 002E                              __pdataCOMRAM 0042  
                               ??_isdigit 0013                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                     main@controlLastMillis 0077  
       limitWheelSpeeds@speedCompensation 0017                                __accesstop 0060  
                 __end_of__initialization 2704                           __CFG_PBADEN$OFF 000000  
                              ___ftge@ff1 0033                                ___ftge@ff2 0036  
                               ?_LCDclear 0001                             ___rparam_used 000001  
                              ___ftdiv@f1 0033                                ___ftdiv@f2 0036  
                              ___ftdiv@f3 003D                   __size_of_LCDgotoLineTwo 0010  
                               ?_LCDwrite 0001                                ___ftmul@f1 0024  
                              ___ftmul@f2 0027                                ___fttol@f1 0060  
                          __pcstackCOMRAM 0001                                ___lltoft@c 001B  
                           __end_of_putch 27B2                              ??_LCDcheckBF 0013  
                                 ??_putch 0015                                __pbssBANK0 0087  
                                 ?_LCDcmd 0001                     _rightWheelCommandedPW 0044  
                         __CFG_PLLCFG$OFF 000000                                ??_LCDclear 0014  
                              ??_LCDwrite 0014                        __end_of_LCDcheckBF 276A  
                      __CFG_CCP2MX$PORTB3 000000                                   ?___ftge 0033  
          limitWheelSpeeds@leftWheelSpeed 0013                                   ?___wmul 0013  
                      __CFG_CCP3MX$PORTB5 000000                      main@leftCountTracker 007F  
                    _configureComparators 25A8                                   _CM1CON0 000F79  
                                 _CM2CON0 000F78                                   _CCP2CON 000F66  
                                 _CCP3CON 000F5D                                 ?___ftpack 0013  
                                 ?_printf 001F                                 ?___lltoft 001B  
                                 _LCDinit 22A0                         ?_limitWheelSpeeds 0013  
                      ??_limitWheelSpeeds 0019                           __size_of_LCDcmd 000C  
                                 __Hparam 0000                     __end_of_wheelVelocity 26D4  
                                 __Lparam 0000                  __size_of_configureTimers 00A8  
                         __size_of___ftge 0090                     ?_configureComparators 0001  
                                 ___ftdiv 20E0                           __size_of___wmul 0026  
                                 ___ftmul 1FEC                                   ___fttol 1EA8  
                                 ___lwdiv 2600                                   ___lwmod 2652  
                            __psmallconst 1000                                   __pcinit 26D4  
                              ??___ftpack 0018                                   __ramtop 1000  
                              ??___lltoft 001F                                   __ptext0 18CC  
                                 __ptext1 1CA8                                   __ptext2 27A8  
                                 __ptext3 276A                                   __ptext4 2738  
                                 __ptext5 2712                                   __ptext6 2652  
                                 __ptext7 2600                                   __ptext8 1032  
                                 __ptext9 2694                           __size_of_printf 0200  
                            __size_of_ISR 0146                                 _T1CONbits 000FCD  
                                 _dpowers 1001                                 _T2CONbits 000FBA  
                  excerciseControl@i_1151 003E                                   _isdigit 2738  
                               _T5CONbits 000F4E                      end_of_initialization 2704  
                           __Lmediumconst 0000                    _leftWheelMeasuredSpeed 0093  
         limitWheelSpeeds@rightWheelSpeed 0015                            _LCDgotoLineTwo 277C  
                                 printf@c 0031                                   printf@f 001F  
                       main@lcdLastMillis 007B                                   postdec1 000FE5  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                                 _PORTAbits 000F80  
                               _PORTBbits 000F81                 __size_of_excerciseControl 089A  
                               _TRISAbits 000F92                                 _TRISBbits 000F93  
                               _TRISDbits 000F95                                 _TRISEbits 000F96  
                           LCDcmd@command 0013                               _CM1CON0bits 000F79  
                  __end_of_LCDgotoLineTwo 278C                               _CM2CON0bits 000F78  
                             _CM2CON1bits 000F77                               ___ftdiv@exp 0040  
                          __end_of_LCDcmd 27A8                               printf@width 002F  
                             _CCP2CONbits 000F66                               _CCP3CONbits 000F5D  
                       __size_of_LCDclear 0010                               ___ftmul@exp 002D  
                  ??_configureComparators 0013                         __size_of_LCDwrite 0012  
                 _rightWheelMeasuredSpeed 0095                      _leftWheelCommandedPW 0042  
                          __end_of___ftge 254C                            __end_of___wmul 2738  
                           __pidataCOMRAM 27B2                         ??_configureTimers 0013  
                          __end_of_printf 1EA8                       start_initialization 26D4  
                             __end_of_ISR 014E                                  ??_LCDcmd 0013  
                         ?_LCDgotoLineTwo 0001                                  ??___ftge 0039  
                                ??___wmul 0017                           _rightWheelCount 008F  
                                ??_printf 0025                         __size_of___ftpack 00AE  
                       __size_of___lltoft 005C                               __pbssCOMRAM 004A  
                                ?_LCDinit 0001                             __pcstackBANK0 0060  
                            _isdigit$1794 0014                                  ISR@dummy 0011  
                        ___lwdiv@dividend 0013                 __size_of_limitWheelSpeeds 00DA  
                               __pintcode 0008                                  ?___ftdiv 0033  
                                ?___ftmul 0024                                  ?___fttol 0060  
                                ?___lwdiv 0013                                  ?___lwmod 001A  
excerciseControl@rightWheelCommandedSpeed 0048                          __CFG_PRICLKEN$ON 000000  
                        _excerciseControl 1032                               __smallconst 1000  
                                ?_isdigit 0001                          ___lwdiv@quotient 0017  
                          __size_of_putch 000A                            ___wmul@product 0017  
                                _LATDbits 000F8C                                  _LATEbits 000F8D  
                                _LCDclear 278C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                                  _LCDwrite 276A  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                        __CFG_WDTPS$32768 000000                         ___wmul@multiplier 0013  
                              printf@flag 002C                                printf@prec 002B  
                        __size_of_LCDinit 00C6                    __size_of_wheelVelocity 0040  
                               copy_data0 26F8                                  __Hrparam 0000  
                         _configureTimers 2414                                  __Lrparam 0000  
                      __CFG_BOREN$SBORDIS 000000                     main@rightCountTracker 0081  
                       __CFG_P2BMX$PORTD2 000000                          __size_of___ftdiv 00E6  
                        __size_of___ftmul 00F4                          __size_of___fttol 0144  
                        __size_of___lwdiv 0052                          __size_of___lwmod 0042  
                                ___ftpack 2366                                  ___lltoft 254C  
                              _ANSELBbits 000F39                          __size_of_isdigit 001E  
                         ___lwdiv@divisor 0015                           ___lwdiv@counter 0019  
                                __ptext10 21C6                                  __ptext11 254C  
                                __ptext20 277C                                  __ptext12 1FEC  
                                __ptext21 278C                                  __ptext13 24BC  
                                __ptext22 279C                                  __ptext14 2414  
                                __ptext23 2756                                  __ptext15 25A8  
                                __ptext16 1EA8                                  __ptext17 20E0  
                                __ptext18 2366                                  __ptext19 22A0  
                        ??_LCDgotoLineTwo 0014                             _elapsedMillis 0087  
                           __size_of_main 03DC            wheelVelocity@speedCompensation 0015  
                        _limitWheelSpeeds 21C6                             _wheelVelocity 2694  
                                int$flags 004C             __size_of_configureComparators 0058  
                               printf@val 002D                         _speedCompensation 004A  
                              _LCDcheckBF 2756                                 putch@data 0015  
                              _INTCONbits 000FF2                                  isdigit@c 0015  
                                intlevel2 0000                   __end_of_configureTimers 24BC  
                        ___lwmod@dividend 001A                              _VREFCON0bits 000F42  
                __end_of_excerciseControl 18CC   excerciseControl@leftWheelCommandedSpeed 0046  
                              _OSCCONbits 000FD3                            ?_wheelVelocity 0013  
                                printf@ap 0029                           ___lwmod@divisor 001C  
                         ___lwmod@counter 001E                         __CFG_T3CMX$PORTB5 000000  
                       __CFG_FOSC$INTIO67 000000                             LCDwrite@input 0014  

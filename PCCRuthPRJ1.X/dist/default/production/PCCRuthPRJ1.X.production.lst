

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Mon Apr 25 11:51:22 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  0031A6                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _leftWheelCommandedPW
    58  0031A6  02E9               	dw	745
    59                           
    60                           ;initializer for _rightWheelCommandedPW
    61  0031A8  02D5               	dw	725
    62                           
    63                           	psect	idataBANK0
    64  0031AA                     __pidataBANK0:
    65                           	opt stack 0
    66                           
    67                           ;initializer for excerciseControl@leftWheelCommandedSpeed
    68  0031AA  0023               	dw	35
    69                           
    70                           ;initializer for excerciseControl@rightWheelCommandedSpeed
    71  0031AC  0019               	dw	25
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  000A               	dw	10
    81  001005  0064               	dw	100
    82  001007  03E8               	dw	1000
    83  001009  2710               	dw	10000
    84  00100B                     __end_of_dpowers:
    85                           	opt stack 0
    86  0000                     _CCPR3	set	3934
    87  0000                     _TMR5	set	3919
    88  0000                     _ANSELBbits	set	3897
    89  0000                     _ANSELD	set	3899
    90  0000                     _CCP3CON	set	3933
    91  0000                     _CCP3CONbits	set	3933
    92  0000                     _CCPTMRS0bits	set	3913
    93  0000                     _T5CON	set	3918
    94  0000                     _T5CONbits	set	3918
    95  0000                     _VREFCON0bits	set	3906
    96  0000                     _TMR5ON	set	31344
    97  0000                     _CCPR2	set	3943
    98  0000                     _TMR1	set	4046
    99  0000                     _CCP2CON	set	3942
   100  0000                     _CCP2CONbits	set	3942
   101  0000                     _CM1CON0	set	3961
   102  0000                     _CM1CON0bits	set	3961
   103  0000                     _CM2CON0	set	3960
   104  0000                     _CM2CON0bits	set	3960
   105  0000                     _CM2CON1bits	set	3959
   106  0000                     _INTCONbits	set	4082
   107  0000                     _LATA	set	3977
   108  0000                     _LATDbits	set	3980
   109  0000                     _LATEbits	set	3981
   110  0000                     _OSCCONbits	set	4051
   111  0000                     _PIE1bits	set	3997
   112  0000                     _PIE2bits	set	4000
   113  0000                     _PIR1bits	set	3998
   114  0000                     _PIR2bits	set	4001
   115  0000                     _PORTAbits	set	3968
   116  0000                     _PR2	set	4027
   117  0000                     _T1CON	set	4045
   118  0000                     _T1CONbits	set	4045
   119  0000                     _T2CON	set	4026
   120  0000                     _T2CONbits	set	4026
   121  0000                     _TRISA	set	3986
   122  0000                     _TRISAbits	set	3986
   123  0000                     _TRISBbits	set	3987
   124  0000                     _TRISDbits	set	3989
   125  0000                     _TRISEbits	set	3990
   126  0000                     _C1IE	set	32006
   127  0000                     _C1IF	set	32014
   128  0000                     _C2IE	set	32005
   129  0000                     _C2IF	set	32013
   130  0000                     _CCP2IE	set	32000
   131  0000                     _CCP2IF	set	32008
   132  0000                     _CCP3IE	set	31696
   133  0000                     _CCP3IF	set	31704
   134  0000                     _TMR1ON	set	32360
   135  0000                     _TMR2IE	set	31977
   136  0000                     _TMR2IF	set	31985
   137  00100B                     STR_1:
   138  00100B  45                 	db	69	;'E'
   139  00100C  76                 	db	118	;'v'
   140  00100D  65                 	db	101	;'e'
   141  00100E  6E                 	db	110	;'n'
   142  00100F  74                 	db	116	;'t'
   143  001010  3A                 	db	58	;':'
   144  001011  20                 	db	32
   145  001012  25                 	db	37
   146  001013  33                 	db	51	;'3'
   147  001014  64                 	db	100	;'d'
   148  001015  00                 	db	0
   149  001016                     STR_2:
   150  001016  53                 	db	83	;'S'
   151  001017  70                 	db	112	;'p'
   152  001018  65                 	db	101	;'e'
   153  001019  65                 	db	101	;'e'
   154  00101A  64                 	db	100	;'d'
   155  00101B  3A                 	db	58	;':'
   156  00101C  20                 	db	32
   157  00101D  25                 	db	37
   158  00101E  64                 	db	100	;'d'
   159  00101F  00                 	db	0
   160  001020                     STR_3:
   161  001020  4C                 	db	76	;'L'
   162  001021  57                 	db	87	;'W'
   163  001022  3A                 	db	58	;':'
   164  001023  20                 	db	32
   165  001024  25                 	db	37
   166  001025  64                 	db	100	;'d'
   167  001026  20                 	db	32
   168  001027  00                 	db	0
   169  001028                     STR_4:
   170  001028  20                 	db	32
   171  001029  52                 	db	82	;'R'
   172  00102A  57                 	db	87	;'W'
   173  00102B  3A                 	db	58	;':'
   174  00102C  20                 	db	32
   175  00102D  25                 	db	37
   176  00102E  64                 	db	100	;'d'
   177  00102F  00                 	db	0
   178                           
   179                           ; #config settings
   180  001030  00                 	db	0	; dummy byte at the end
   181  0000                     
   182                           	psect	cinit
   183  002E60                     __pcinit:
   184                           	opt stack 0
   185  002E60                     start_initialization:
   186                           	opt stack 0
   187  002E60                     __initialization:
   188                           	opt stack 0
   189                           
   190                           ; Clear objects allocated to BANK0 (19 bytes)
   191  002E60  EE00  F0BC         	lfsr	0,__pbssBANK0
   192  002E64  0E13               	movlw	19
   193  002E66                     clear_0:
   194  002E66  6AEE               	clrf	postinc0,c
   195  002E68  06E8               	decf	wreg,f,c
   196  002E6A  E1FD               	bnz	clear_0
   197                           
   198                           ; Clear objects allocated to COMRAM (2 bytes)
   199  002E6C  6A4B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   200  002E6E  6A4A               	clrf	__pbssCOMRAM& (0+255),c
   201                           
   202                           ; Initialize objects allocated to BANK0 (4 bytes)
   203                           ; load TBLPTR registers with __pidataBANK0
   204  002E70  0EAA               	movlw	low __pidataBANK0
   205  002E72  6EF6               	movwf	tblptrl,c
   206  002E74  0E31               	movlw	high __pidataBANK0
   207  002E76  6EF7               	movwf	tblptrh,c
   208  002E78  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   209  002E7A  6EF8               	movwf	tblptru,c
   210  002E7C  EE00  F0CF         	lfsr	0,__pdataBANK0
   211  002E80  EE10 F004          	lfsr	1,4
   212  002E84                     copy_data0:
   213  002E84  0009               	tblrd		*+
   214  002E86  CFF5 FFEE          	movff	tablat,postinc0
   215  002E8A  50E5               	movf	postdec1,w,c
   216  002E8C  50E1               	movf	fsr1l,w,c
   217  002E8E  E1FA               	bnz	copy_data0
   218                           
   219                           ; Initialize objects allocated to COMRAM (4 bytes)
   220                           ; load TBLPTR registers with __pidataCOMRAM
   221  002E90  0EA6               	movlw	low __pidataCOMRAM
   222  002E92  6EF6               	movwf	tblptrl,c
   223  002E94  0E31               	movlw	high __pidataCOMRAM
   224  002E96  6EF7               	movwf	tblptrh,c
   225  002E98  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   226  002E9A  6EF8               	movwf	tblptru,c
   227  002E9C  EE00  F046         	lfsr	0,__pdataCOMRAM
   228  002EA0  EE10 F004          	lfsr	1,4
   229  002EA4                     copy_data1:
   230  002EA4  0009               	tblrd		*+
   231  002EA6  CFF5 FFEE          	movff	tablat,postinc0
   232  002EAA  50E5               	movf	postdec1,w,c
   233  002EAC  50E1               	movf	fsr1l,w,c
   234  002EAE  E1FA               	bnz	copy_data1
   235  002EB0                     end_of_initialization:
   236                           	opt stack 0
   237  002EB0                     __end_of__initialization:
   238                           	opt stack 0
   239  002EB0  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   240  002EB2  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   241  002EB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   242  002EB6  6EF8               	movwf	tblptru,c
   243  002EB8  0100               	movlb	0
   244  002EBA  EF28  F00E         	goto	_main	;jump to C main() function
   245                           tblptru	equ	0xFF8
   246                           tblptrh	equ	0xFF7
   247                           tblptrl	equ	0xFF6
   248                           tablat	equ	0xFF5
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           postdec1	equ	0xFE5
   252                           fsr1l	equ	0xFE1
   253                           
   254                           	psect	bssCOMRAM
   255  00004A                     __pbssCOMRAM:
   256                           	opt stack 0
   257  00004A                     _errno:
   258                           	opt stack 0
   259  00004A                     	ds	2
   260                           tblptru	equ	0xFF8
   261                           tblptrh	equ	0xFF7
   262                           tblptrl	equ	0xFF6
   263                           tablat	equ	0xFF5
   264                           postinc0	equ	0xFEE
   265                           wreg	equ	0xFE8
   266                           postdec1	equ	0xFE5
   267                           fsr1l	equ	0xFE1
   268                           
   269                           	psect	dataCOMRAM
   270  000046                     __pdataCOMRAM:
   271                           	opt stack 0
   272  000046                     _leftWheelCommandedPW:
   273                           	opt stack 0
   274  000046                     	ds	2
   275  000048                     _rightWheelCommandedPW:
   276                           	opt stack 0
   277  000048                     	ds	2
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           postdec1	equ	0xFE5
   285                           fsr1l	equ	0xFE1
   286                           
   287                           	psect	bssBANK0
   288  0000BC                     __pbssBANK0:
   289                           	opt stack 0
   290  0000BC                     _elapsedMillis:
   291                           	opt stack 0
   292  0000BC                     	ds	4
   293  0000C0                     _leftWheelCount:
   294                           	opt stack 0
   295  0000C0                     	ds	4
   296  0000C4                     _rightWheelCount:
   297                           	opt stack 0
   298  0000C4                     	ds	4
   299  0000C8                     _leftWheelMeasuredSpeed:
   300                           	opt stack 0
   301  0000C8                     	ds	2
   302  0000CA                     _rightWheelMeasuredSpeed:
   303                           	opt stack 0
   304  0000CA                     	ds	2
   305  0000CC                     _event:
   306                           	opt stack 0
   307  0000CC                     	ds	1
   308  0000CD                     _speedCompensation:
   309                           	opt stack 0
   310  0000CD                     	ds	2
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	dataBANK0
   321  0000CF                     __pdataBANK0:
   322                           	opt stack 0
   323  0000CF                     excerciseControl@leftWheelCommandedSpeed:
   324                           	opt stack 0
   325  0000CF                     	ds	2
   326  0000D1                     excerciseControl@rightWheelCommandedSpeed:
   327                           	opt stack 0
   328  0000D1                     	ds	2
   329                           tblptru	equ	0xFF8
   330                           tblptrh	equ	0xFF7
   331                           tblptrl	equ	0xFF6
   332                           tablat	equ	0xFF5
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           postdec1	equ	0xFE5
   336                           fsr1l	equ	0xFE1
   337                           
   338                           	psect	cstackBANK0
   339  000060                     __pcstackBANK0:
   340                           	opt stack 0
   341  000060                     sqrt@og:
   342                           	opt stack 0
   343                           
   344                           ; 3 bytes @ 0x0
   345  000060                     	ds	3
   346  000063                     sqrt@z:
   347                           	opt stack 0
   348                           
   349                           ; 3 bytes @ 0x3
   350  000063                     	ds	3
   351  000066                     sqrt@i:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x6
   355  000066                     	ds	1
   356  000067                     sqrt@q:
   357                           	opt stack 0
   358                           
   359                           ; 3 bytes @ 0x7
   360  000067                     	ds	3
   361  00006A                     sqrt@x:
   362                           	opt stack 0
   363                           
   364                           ; 3 bytes @ 0xA
   365  00006A                     	ds	3
   366  00006D                     ??___fttol:
   367                           
   368                           ; 1 bytes @ 0xD
   369  00006D                     	ds	5
   370  000072                     ___fttol@sign1:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x12
   374  000072                     	ds	1
   375  000073                     ___fttol@lval:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x13
   379  000073                     	ds	4
   380  000077                     ___fttol@exp1:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x17
   384  000077                     	ds	1
   385  000078                     ?___altoft:
   386                           	opt stack 0
   387  000078                     ___altoft@c:
   388                           	opt stack 0
   389                           
   390                           ; 4 bytes @ 0x18
   391  000078                     	ds	4
   392  00007C                     ??___altoft:
   393                           
   394                           ; 1 bytes @ 0x1C
   395  00007C                     	ds	4
   396  000080                     ___altoft@exp:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x20
   400  000080                     	ds	1
   401  000081                     ___altoft@sign:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x21
   405  000081                     	ds	1
   406  000082                     ?_trunc:
   407                           	opt stack 0
   408  000082                     trunc@x:
   409                           	opt stack 0
   410                           
   411                           ; 3 bytes @ 0x22
   412  000082                     	ds	3
   413  000085                     trunc@i:
   414                           	opt stack 0
   415                           
   416                           ; 3 bytes @ 0x25
   417  000085                     	ds	3
   418  000088                     trunc@expon:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x28
   422  000088                     	ds	2
   423  00008A                     ?___ftneg:
   424                           	opt stack 0
   425  00008A                     ___ftneg@f1:
   426                           	opt stack 0
   427                           
   428                           ; 3 bytes @ 0x2A
   429  00008A                     	ds	3
   430  00008D                     ?_round:
   431                           	opt stack 0
   432  00008D                     round@x:
   433                           	opt stack 0
   434                           
   435                           ; 3 bytes @ 0x2D
   436  00008D                     	ds	3
   437  000090                     round@f:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0x30
   441  000090                     	ds	3
   442  000093                     ??_excerciseControl:
   443                           
   444                           ; 1 bytes @ 0x33
   445  000093                     	ds	4
   446  000097                     _excerciseControl$2065:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x37
   450  000097                     	ds	3
   451  00009A                     excerciseControl@i:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x3A
   455  00009A                     	ds	2
   456  00009C                     excerciseControl@i_1033:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x3C
   460  00009C                     	ds	2
   461  00009E                     _excerciseControl$2063:
   462                           	opt stack 0
   463                           
   464                           ; 3 bytes @ 0x3E
   465  00009E                     	ds	3
   466  0000A1                     _excerciseControl$2064:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x41
   470  0000A1                     	ds	3
   471  0000A4                     ??_main:
   472                           
   473                           ; 1 bytes @ 0x44
   474  0000A4                     	ds	8
   475  0000AC                     main@controlLastMillis:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x4C
   479  0000AC                     	ds	4
   480  0000B0                     main@lcdLastMillis:
   481                           	opt stack 0
   482                           
   483                           ; 4 bytes @ 0x50
   484  0000B0                     	ds	4
   485  0000B4                     main@leftCountTracker:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x54
   489  0000B4                     	ds	2
   490  0000B6                     main@rightCountTracker:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x56
   494  0000B6                     	ds	2
   495  0000B8                     main@speedLastMillis:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x58
   499  0000B8                     	ds	4
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1l	equ	0xFE1
   508                           
   509                           	psect	cstackCOMRAM
   510  000001                     __pcstackCOMRAM:
   511                           	opt stack 0
   512  000001                     ??_ISR:
   513  000001                     
   514                           ; 1 bytes @ 0x0
   515  000001                     	ds	16
   516  000011                     ISR@dummy:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x10
   520  000011                     	ds	1
   521  000012                     ISR@dummy_1019:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x11
   525  000012                     	ds	1
   526  000013                     ??_isdigit:
   527  000013                     ?___wmul:
   528                           	opt stack 0
   529  000013                     ?___lwdiv:
   530                           	opt stack 0
   531  000013                     ?___ftpack:
   532                           	opt stack 0
   533  000013                     LCDcmd@command:
   534                           	opt stack 0
   535  000013                     limitWheelSpeeds@leftWheelSpeed:
   536                           	opt stack 0
   537  000013                     wheelVelocity@speed:
   538                           	opt stack 0
   539  000013                     ___wmul@multiplier:
   540                           	opt stack 0
   541  000013                     ___lwdiv@dividend:
   542                           	opt stack 0
   543  000013                     ___ftpack@arg:
   544                           	opt stack 0
   545  000013                     frexp@value:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0x12
   549  000013                     	ds	1
   550  000014                     ??_LCDinit:
   551  000014                     LCDwrite@input:
   552                           	opt stack 0
   553  000014                     _isdigit$1676:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x13
   557  000014                     	ds	1
   558  000015                     putch@data:
   559                           	opt stack 0
   560  000015                     isdigit@c:
   561                           	opt stack 0
   562  000015                     limitWheelSpeeds@rightWheelSpeed:
   563                           	opt stack 0
   564  000015                     wheelVelocity@speedCompensation:
   565                           	opt stack 0
   566  000015                     ___wmul@multiplicand:
   567                           	opt stack 0
   568  000015                     ___lwdiv@divisor:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x14
   572  000015                     	ds	1
   573  000016                     ___ftpack@exp:
   574                           	opt stack 0
   575  000016                     frexp@eptr:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x15
   579  000016                     	ds	1
   580  000017                     ??_wheelVelocity:
   581  000017                     ___ftpack@sign:
   582                           	opt stack 0
   583  000017                     limitWheelSpeeds@speedCompensation:
   584                           	opt stack 0
   585  000017                     ___wmul@product:
   586                           	opt stack 0
   587  000017                     ___lwdiv@quotient:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x16
   591  000017                     	ds	1
   592  000018                     ??___ftpack:
   593  000018                     ??_frexp:
   594                           
   595                           ; 1 bytes @ 0x17
   596  000018                     	ds	1
   597  000019                     wheelVelocity@wheel:
   598                           	opt stack 0
   599  000019                     ___lwdiv@counter:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x18
   603  000019                     	ds	1
   604  00001A                     ?___lwmod:
   605                           	opt stack 0
   606  00001A                     ___lwmod@dividend:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x19
   610  00001A                     	ds	1
   611  00001B                     ?___awtoft:
   612                           	opt stack 0
   613  00001B                     ?___lltoft:
   614                           	opt stack 0
   615  00001B                     ___awtoft@c:
   616                           	opt stack 0
   617  00001B                     ___lltoft@c:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x1A
   621  00001B                     	ds	1
   622  00001C                     ___lwmod@divisor:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x1B
   626  00001C                     	ds	2
   627  00001E                     ___awtoft@sign:
   628                           	opt stack 0
   629  00001E                     ___lwmod@counter:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x1D
   633  00001E                     	ds	1
   634  00001F                     ??___lltoft:
   635  00001F                     ?_printf:
   636                           	opt stack 0
   637  00001F                     printf@f:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x1E
   641  00001F                     	ds	4
   642  000023                     ___lltoft@exp:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x22
   646  000023                     	ds	1
   647  000024                     ?___ftadd:
   648                           	opt stack 0
   649  000024                     ?___ftmul:
   650                           	opt stack 0
   651  000024                     ___ftadd@f1:
   652                           	opt stack 0
   653  000024                     ___ftmul@f1:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x23
   657  000024                     	ds	1
   658  000025                     ??_printf:
   659                           
   660                           ; 1 bytes @ 0x24
   661  000025                     	ds	2
   662  000027                     ___ftadd@f2:
   663                           	opt stack 0
   664  000027                     ___ftmul@f2:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0x26
   668  000027                     	ds	2
   669  000029                     printf@ap:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x28
   673  000029                     	ds	1
   674  00002A                     ??___ftadd:
   675  00002A                     ??___ftmul:
   676                           
   677                           ; 1 bytes @ 0x29
   678  00002A                     	ds	1
   679  00002B                     printf@prec:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x2A
   683  00002B                     	ds	1
   684  00002C                     printf@flag:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x2B
   688  00002C                     	ds	1
   689  00002D                     ___ftadd@sign:
   690                           	opt stack 0
   691  00002D                     ___ftmul@exp:
   692                           	opt stack 0
   693  00002D                     printf@val:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x2C
   697  00002D                     	ds	1
   698  00002E                     ___ftadd@exp2:
   699                           	opt stack 0
   700  00002E                     ___ftmul@f3_as_product:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x2D
   704  00002E                     	ds	1
   705  00002F                     ___ftadd@exp1:
   706                           	opt stack 0
   707  00002F                     printf@width:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x2E
   711  00002F                     	ds	1
   712  000030                     ?___ftsub:
   713                           	opt stack 0
   714  000030                     ___ftsub@f1:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x2F
   718  000030                     	ds	1
   719  000031                     printf@c:
   720                           	opt stack 0
   721  000031                     ___ftmul@cntr:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x30
   725  000031                     	ds	1
   726  000032                     ___ftmul@sign:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x31
   730  000032                     	ds	1
   731  000033                     ?___ftdiv:
   732                           	opt stack 0
   733  000033                     ___ftdiv@f1:
   734                           	opt stack 0
   735  000033                     ___ftge@ff1:
   736                           	opt stack 0
   737  000033                     ___ftsub@f2:
   738                           	opt stack 0
   739                           
   740                           ; 3 bytes @ 0x32
   741  000033                     	ds	3
   742  000036                     ___ftdiv@f2:
   743                           	opt stack 0
   744  000036                     ___ftge@ff2:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x35
   748  000036                     	ds	3
   749  000039                     ??___ftdiv:
   750  000039                     ??___ftge:
   751                           
   752                           ; 1 bytes @ 0x38
   753  000039                     	ds	3
   754  00003C                     ?_sqrt:
   755                           	opt stack 0
   756  00003C                     ___ftdiv@cntr:
   757                           	opt stack 0
   758  00003C                     sqrt@a:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x3B
   762  00003C                     	ds	1
   763  00003D                     ___ftdiv@f3:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x3C
   767  00003D                     	ds	2
   768  00003F                     ??_sqrt:
   769                           
   770                           ; 1 bytes @ 0x3E
   771  00003F                     	ds	1
   772  000040                     ___ftdiv@exp:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x3F
   776  000040                     	ds	1
   777  000041                     ___ftdiv@sign:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x40
   781  000041                     	ds	1
   782  000042                     ?___fttol:
   783                           	opt stack 0
   784  000042                     ___fttol@f1:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x41
   788  000042                     	ds	4
   789  000046                     tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           tblptrl	equ	0xFF6
   792                           tablat	equ	0xFF5
   793                           postinc0	equ	0xFEE
   794                           wreg	equ	0xFE8
   795                           postdec1	equ	0xFE5
   796                           fsr1l	equ	0xFE1
   797                           
   798                           ; 1 bytes @ 0x45
   799 ;;
   800 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   801 ;;
   802 ;; *************** function _main *****************
   803 ;; Defined at:
   804 ;;		line 139 in file "main.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  speedLastMil    4   88[BANK0 ] unsigned long 
   809 ;;  lcdLastMilli    4   80[BANK0 ] unsigned long 
   810 ;;  controlLastM    4   76[BANK0 ] unsigned long 
   811 ;;  rightCountTr    2   86[BANK0 ] int 
   812 ;;  leftCountTra    2   84[BANK0 ] int 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   823 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   824 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   825 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   826 ;;Total ram usage:       24 bytes
   827 ;; Hardware stack levels required when called:    6
   828 ;; This function calls:
   829 ;;		_LCDclear
   830 ;;		_LCDgotoLineTwo
   831 ;;		_LCDinit
   832 ;;		___ftdiv
   833 ;;		___ftmul
   834 ;;		___fttol
   835 ;;		___lltoft
   836 ;;		_configureComparators
   837 ;;		_configureTimers
   838 ;;		_excerciseControl
   839 ;;		_printf
   840 ;; This function is called by:
   841 ;;		Startup code after reset
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text0
   846  001C50                     __ptext0:
   847                           	opt stack 0
   848  001C50                     _main:
   849                           	opt stack 25
   850                           
   851                           ;main.c: 141: OSCCONbits.IRCF = 0b110;
   852                           
   853                           ;incstack = 0
   854  001C50  50D3               	movf	4051,w,c	;volatile
   855  001C52  0B8F               	andlw	-113
   856  001C54  0960               	iorlw	96
   857  001C56  6ED3               	movwf	4051,c	;volatile
   858                           
   859                           ;main.c: 144: configureComparators();
   860  001C58  ECB9  F017         	call	_configureComparators	;wreg free
   861                           
   862                           ;main.c: 145: configureTimers();
   863  001C5C  EC7B  F015         	call	_configureTimers	;wreg free
   864                           
   865                           ;main.c: 147: TRISBbits.TRISB4 = 1;
   866  001C60  8893               	bsf	3987,4,c	;volatile
   867                           
   868                           ;main.c: 148: ANSELBbits.ANSB4 = 0;
   869  001C62  010F               	movlb	15	; () banked
   870  001C64  9939               	bcf	57,4,b	;volatile
   871                           
   872                           ;main.c: 152: unsigned long controlLastMillis = 0;
   873  001C66  0E00               	movlw	0
   874  001C68  0100               	movlb	0	; () banked
   875  001C6A  6FAC               	movwf	main@controlLastMillis& (0+255),b
   876  001C6C  0E00               	movlw	0
   877  001C6E  6FAD               	movwf	(main@controlLastMillis+1)& (0+255),b
   878  001C70  0E00               	movlw	0
   879  001C72  6FAE               	movwf	(main@controlLastMillis+2)& (0+255),b
   880  001C74  0E00               	movlw	0
   881  001C76  6FAF               	movwf	(main@controlLastMillis+3)& (0+255),b
   882                           
   883                           ;main.c: 153: unsigned long lcdLastMillis = 0;
   884  001C78  0E00               	movlw	0
   885  001C7A  0100               	movlb	0	; () banked
   886  001C7C  6FB0               	movwf	main@lcdLastMillis& (0+255),b
   887  001C7E  0E00               	movlw	0
   888  001C80  6FB1               	movwf	(main@lcdLastMillis+1)& (0+255),b
   889  001C82  0E00               	movlw	0
   890  001C84  6FB2               	movwf	(main@lcdLastMillis+2)& (0+255),b
   891  001C86  0E00               	movlw	0
   892  001C88  6FB3               	movwf	(main@lcdLastMillis+3)& (0+255),b
   893                           
   894                           ;main.c: 154: unsigned long speedLastMillis = 0;
   895  001C8A  0E00               	movlw	0
   896  001C8C  0100               	movlb	0	; () banked
   897  001C8E  6FB8               	movwf	main@speedLastMillis& (0+255),b
   898  001C90  0E00               	movlw	0
   899  001C92  6FB9               	movwf	(main@speedLastMillis+1)& (0+255),b
   900  001C94  0E00               	movlw	0
   901  001C96  6FBA               	movwf	(main@speedLastMillis+2)& (0+255),b
   902  001C98  0E00               	movlw	0
   903  001C9A  6FBB               	movwf	(main@speedLastMillis+3)& (0+255),b
   904                           
   905                           ;main.c: 155: int leftCountTracker = 0;
   906  001C9C  0E00               	movlw	0
   907  001C9E  0100               	movlb	0	; () banked
   908  001CA0  6FB5               	movwf	(main@leftCountTracker+1)& (0+255),b
   909  001CA2  0E00               	movlw	0
   910  001CA4  6FB4               	movwf	main@leftCountTracker& (0+255),b
   911                           
   912                           ;main.c: 156: int rightCountTracker = 0;
   913  001CA6  0E00               	movlw	0
   914  001CA8  0100               	movlb	0	; () banked
   915  001CAA  6FB7               	movwf	(main@rightCountTracker+1)& (0+255),b
   916  001CAC  0E00               	movlw	0
   917  001CAE  6FB6               	movwf	main@rightCountTracker& (0+255),b
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 159: LCDinit();
   921  001CB0  ECC1  F014         	call	_LCDinit	;wreg free
   922                           
   923                           ;main.c: 160: printf("Event: %3d", event);
   924  001CB4  0E0B               	movlw	low STR_1
   925  001CB6  6E1F               	movwf	printf@f,c
   926  001CB8  0E10               	movlw	high STR_1
   927  001CBA  6E20               	movwf	printf@f+1,c
   928  001CBC  C0CC  F021         	movff	_event,?_printf+2
   929  001CC0  6A22               	clrf	?_printf+3,c
   930  001CC2  EC16  F010         	call	_printf	;wreg free
   931  001CC6                     l3452:
   932                           
   933                           ;main.c: 165: {
   934                           ;main.c: 170: if(lcdLastMillis + 250 < elapsedMillis)
   935  001CC6  0EFA               	movlw	250
   936  001CC8  0100               	movlb	0	; () banked
   937  001CCA  25B0               	addwf	main@lcdLastMillis& (0+255),w,b
   938  001CCC  0100               	movlb	0	; () banked
   939  001CCE  6FA4               	movwf	??_main& (0+255),b
   940  001CD0  0E00               	movlw	0
   941  001CD2  0100               	movlb	0	; () banked
   942  001CD4  21B1               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
   943  001CD6  0100               	movlb	0	; () banked
   944  001CD8  6FA5               	movwf	(??_main+1)& (0+255),b
   945  001CDA  0E00               	movlw	0
   946  001CDC  0100               	movlb	0	; () banked
   947  001CDE  21B2               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
   948  001CE0  0100               	movlb	0	; () banked
   949  001CE2  6FA6               	movwf	(??_main+2)& (0+255),b
   950  001CE4  0E00               	movlw	0
   951  001CE6  0100               	movlb	0	; () banked
   952  001CE8  21B3               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
   953  001CEA  0100               	movlb	0	; () banked
   954  001CEC  6FA7               	movwf	(??_main+3)& (0+255),b
   955  001CEE  0100               	movlb	0	; () banked
   956  001CF0  51BC               	movf	_elapsedMillis& (0+255),w,b
   957  001CF2  0100               	movlb	0	; () banked
   958  001CF4  5DA4               	subwf	??_main& (0+255),w,b
   959  001CF6  0100               	movlb	0	; () banked
   960  001CF8  51BD               	movf	(_elapsedMillis+1)& (0+255),w,b
   961  001CFA  0100               	movlb	0	; () banked
   962  001CFC  59A5               	subwfb	(??_main+1)& (0+255),w,b
   963  001CFE  0100               	movlb	0	; () banked
   964  001D00  51BE               	movf	(_elapsedMillis+2)& (0+255),w,b
   965  001D02  0100               	movlb	0	; () banked
   966  001D04  59A6               	subwfb	(??_main+2)& (0+255),w,b
   967  001D06  0100               	movlb	0	; () banked
   968  001D08  51BF               	movf	(_elapsedMillis+3)& (0+255),w,b
   969  001D0A  0100               	movlb	0	; () banked
   970  001D0C  59A7               	subwfb	(??_main+3)& (0+255),w,b
   971  001D0E  B0D8               	btfsc	status,0,c
   972  001D10  D032               	goto	l3462
   973                           
   974                           ; BSR set to: 0
   975                           ;main.c: 171: {
   976                           ;main.c: 172: LCDclear();
   977  001D12  ECC0  F018         	call	_LCDclear	;wreg free
   978                           
   979                           ;main.c: 173: printf("Speed: %d", rightWheelMeasuredSpeed);
   980  001D16  0E16               	movlw	low STR_2
   981  001D18  6E1F               	movwf	printf@f,c
   982  001D1A  0E10               	movlw	high STR_2
   983  001D1C  6E20               	movwf	printf@f+1,c
   984  001D1E  C0CA  F021         	movff	_rightWheelMeasuredSpeed,?_printf+2
   985  001D22  C0CB  F022         	movff	_rightWheelMeasuredSpeed+1,?_printf+3
   986  001D26  EC16  F010         	call	_printf	;wreg free
   987                           
   988                           ;main.c: 174: lcdLastMillis = elapsedMillis;
   989  001D2A  C0BC  F0B0         	movff	_elapsedMillis,main@lcdLastMillis
   990  001D2E  C0BD  F0B1         	movff	_elapsedMillis+1,main@lcdLastMillis+1
   991  001D32  C0BE  F0B2         	movff	_elapsedMillis+2,main@lcdLastMillis+2
   992  001D36  C0BF  F0B3         	movff	_elapsedMillis+3,main@lcdLastMillis+3
   993                           
   994                           ;main.c: 175: LCDgotoLineTwo();
   995  001D3A  ECB8  F018         	call	_LCDgotoLineTwo	;wreg free
   996                           
   997                           ;main.c: 176: printf("LW: %d ", leftWheelCount);
   998  001D3E  0E20               	movlw	low STR_3
   999  001D40  6E1F               	movwf	printf@f,c
  1000  001D42  0E10               	movlw	high STR_3
  1001  001D44  6E20               	movwf	printf@f+1,c
  1002  001D46  C0C0  F021         	movff	_leftWheelCount,?_printf+2
  1003  001D4A  C0C1  F022         	movff	_leftWheelCount+1,?_printf+3
  1004  001D4E  C0C2  F023         	movff	_leftWheelCount+2,?_printf+4
  1005  001D52  C0C3  F024         	movff	_leftWheelCount+3,?_printf+5
  1006  001D56  EC16  F010         	call	_printf	;wreg free
  1007                           
  1008                           ;main.c: 177: printf(" RW: %d", rightWheelCount);
  1009  001D5A  0E28               	movlw	low STR_4
  1010  001D5C  6E1F               	movwf	printf@f,c
  1011  001D5E  0E10               	movlw	high STR_4
  1012  001D60  6E20               	movwf	printf@f+1,c
  1013  001D62  C0C4  F021         	movff	_rightWheelCount,?_printf+2
  1014  001D66  C0C5  F022         	movff	_rightWheelCount+1,?_printf+3
  1015  001D6A  C0C6  F023         	movff	_rightWheelCount+2,?_printf+4
  1016  001D6E  C0C7  F024         	movff	_rightWheelCount+3,?_printf+5
  1017  001D72  EC16  F010         	call	_printf	;wreg free
  1018  001D76                     l3462:
  1019                           
  1020                           ;main.c: 178: }
  1021                           ;main.c: 182: if(controlLastMillis + 100 < elapsedMillis)
  1022  001D76  0E64               	movlw	100
  1023  001D78  0100               	movlb	0	; () banked
  1024  001D7A  25AC               	addwf	main@controlLastMillis& (0+255),w,b
  1025  001D7C  0100               	movlb	0	; () banked
  1026  001D7E  6FA4               	movwf	??_main& (0+255),b
  1027  001D80  0E00               	movlw	0
  1028  001D82  0100               	movlb	0	; () banked
  1029  001D84  21AD               	addwfc	(main@controlLastMillis+1)& (0+255),w,b
  1030  001D86  0100               	movlb	0	; () banked
  1031  001D88  6FA5               	movwf	(??_main+1)& (0+255),b
  1032  001D8A  0E00               	movlw	0
  1033  001D8C  0100               	movlb	0	; () banked
  1034  001D8E  21AE               	addwfc	(main@controlLastMillis+2)& (0+255),w,b
  1035  001D90  0100               	movlb	0	; () banked
  1036  001D92  6FA6               	movwf	(??_main+2)& (0+255),b
  1037  001D94  0E00               	movlw	0
  1038  001D96  0100               	movlb	0	; () banked
  1039  001D98  21AF               	addwfc	(main@controlLastMillis+3)& (0+255),w,b
  1040  001D9A  0100               	movlb	0	; () banked
  1041  001D9C  6FA7               	movwf	(??_main+3)& (0+255),b
  1042  001D9E  0100               	movlb	0	; () banked
  1043  001DA0  51BC               	movf	_elapsedMillis& (0+255),w,b
  1044  001DA2  0100               	movlb	0	; () banked
  1045  001DA4  5DA4               	subwf	??_main& (0+255),w,b
  1046  001DA6  0100               	movlb	0	; () banked
  1047  001DA8  51BD               	movf	(_elapsedMillis+1)& (0+255),w,b
  1048  001DAA  0100               	movlb	0	; () banked
  1049  001DAC  59A5               	subwfb	(??_main+1)& (0+255),w,b
  1050  001DAE  0100               	movlb	0	; () banked
  1051  001DB0  51BE               	movf	(_elapsedMillis+2)& (0+255),w,b
  1052  001DB2  0100               	movlb	0	; () banked
  1053  001DB4  59A6               	subwfb	(??_main+2)& (0+255),w,b
  1054  001DB6  0100               	movlb	0	; () banked
  1055  001DB8  51BF               	movf	(_elapsedMillis+3)& (0+255),w,b
  1056  001DBA  0100               	movlb	0	; () banked
  1057  001DBC  59A7               	subwfb	(??_main+3)& (0+255),w,b
  1058  001DBE  B0D8               	btfsc	status,0,c
  1059  001DC0  D00A               	goto	l3468
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;main.c: 183: {
  1063                           ;main.c: 184: controlLastMillis = elapsedMillis;
  1064  001DC2  C0BC  F0AC         	movff	_elapsedMillis,main@controlLastMillis
  1065  001DC6  C0BD  F0AD         	movff	_elapsedMillis+1,main@controlLastMillis+1
  1066  001DCA  C0BE  F0AE         	movff	_elapsedMillis+2,main@controlLastMillis+2
  1067  001DCE  C0BF  F0AF         	movff	_elapsedMillis+3,main@controlLastMillis+3
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;main.c: 185: excerciseControl();
  1071  001DD2  EC19  F008         	call	_excerciseControl	;wreg free
  1072  001DD6                     l3468:
  1073                           
  1074                           ;main.c: 186: }
  1075                           ;main.c: 189: if(speedLastMillis + 500 < elapsedMillis)
  1076  001DD6  0EF4               	movlw	244
  1077  001DD8  0100               	movlb	0	; () banked
  1078  001DDA  25B8               	addwf	main@speedLastMillis& (0+255),w,b
  1079  001DDC  0100               	movlb	0	; () banked
  1080  001DDE  6FA4               	movwf	??_main& (0+255),b
  1081  001DE0  0E01               	movlw	1
  1082  001DE2  0100               	movlb	0	; () banked
  1083  001DE4  21B9               	addwfc	(main@speedLastMillis+1)& (0+255),w,b
  1084  001DE6  0100               	movlb	0	; () banked
  1085  001DE8  6FA5               	movwf	(??_main+1)& (0+255),b
  1086  001DEA  0E00               	movlw	0
  1087  001DEC  0100               	movlb	0	; () banked
  1088  001DEE  21BA               	addwfc	(main@speedLastMillis+2)& (0+255),w,b
  1089  001DF0  0100               	movlb	0	; () banked
  1090  001DF2  6FA6               	movwf	(??_main+2)& (0+255),b
  1091  001DF4  0E00               	movlw	0
  1092  001DF6  0100               	movlb	0	; () banked
  1093  001DF8  21BB               	addwfc	(main@speedLastMillis+3)& (0+255),w,b
  1094  001DFA  0100               	movlb	0	; () banked
  1095  001DFC  6FA7               	movwf	(??_main+3)& (0+255),b
  1096  001DFE  0100               	movlb	0	; () banked
  1097  001E00  51BC               	movf	_elapsedMillis& (0+255),w,b
  1098  001E02  0100               	movlb	0	; () banked
  1099  001E04  5DA4               	subwf	??_main& (0+255),w,b
  1100  001E06  0100               	movlb	0	; () banked
  1101  001E08  51BD               	movf	(_elapsedMillis+1)& (0+255),w,b
  1102  001E0A  0100               	movlb	0	; () banked
  1103  001E0C  59A5               	subwfb	(??_main+1)& (0+255),w,b
  1104  001E0E  0100               	movlb	0	; () banked
  1105  001E10  51BE               	movf	(_elapsedMillis+2)& (0+255),w,b
  1106  001E12  0100               	movlb	0	; () banked
  1107  001E14  59A6               	subwfb	(??_main+2)& (0+255),w,b
  1108  001E16  0100               	movlb	0	; () banked
  1109  001E18  51BF               	movf	(_elapsedMillis+3)& (0+255),w,b
  1110  001E1A  0100               	movlb	0	; () banked
  1111  001E1C  59A7               	subwfb	(??_main+3)& (0+255),w,b
  1112  001E1E  B0D8               	btfsc	status,0,c
  1113  001E20  D752               	goto	l3452
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;main.c: 190: {
  1117                           ;main.c: 195: rightWheelMeasuredSpeed = (int) ((rightWheelCount - rightCountTracker) * (
      +                          2.4 * 500 ) / (elapsedMillis - speedLastMillis));
  1118  001E22  C0B8  F0A4         	movff	main@speedLastMillis,??_main
  1119  001E26  C0B9  F0A5         	movff	main@speedLastMillis+1,??_main+1
  1120  001E2A  C0BA  F0A6         	movff	main@speedLastMillis+2,??_main+2
  1121  001E2E  C0BB  F0A7         	movff	main@speedLastMillis+3,??_main+3
  1122  001E32  0100               	movlb	0	; () banked
  1123  001E34  1FA4               	comf	??_main& (0+255),f,b
  1124  001E36  1FA5               	comf	(??_main+1)& (0+255),f,b
  1125  001E38  1FA6               	comf	(??_main+2)& (0+255),f,b
  1126  001E3A  1FA7               	comf	(??_main+3)& (0+255),f,b
  1127  001E3C  2BA4               	incf	??_main& (0+255),f,b
  1128  001E3E  0E00               	movlw	0
  1129  001E40  23A5               	addwfc	(??_main+1)& (0+255),f,b
  1130  001E42  23A6               	addwfc	(??_main+2)& (0+255),f,b
  1131  001E44  23A7               	addwfc	(??_main+3)& (0+255),f,b
  1132  001E46  0100               	movlb	0	; () banked
  1133  001E48  51BC               	movf	_elapsedMillis& (0+255),w,b
  1134  001E4A  0100               	movlb	0	; () banked
  1135  001E4C  25A4               	addwf	??_main& (0+255),w,b
  1136  001E4E  6E1B               	movwf	___lltoft@c,c
  1137  001E50  0100               	movlb	0	; () banked
  1138  001E52  51BD               	movf	(_elapsedMillis+1)& (0+255),w,b
  1139  001E54  0100               	movlb	0	; () banked
  1140  001E56  21A5               	addwfc	(??_main+1)& (0+255),w,b
  1141  001E58  6E1C               	movwf	___lltoft@c+1,c
  1142  001E5A  0100               	movlb	0	; () banked
  1143  001E5C  51BE               	movf	(_elapsedMillis+2)& (0+255),w,b
  1144  001E5E  0100               	movlb	0	; () banked
  1145  001E60  21A6               	addwfc	(??_main+2)& (0+255),w,b
  1146  001E62  6E1D               	movwf	___lltoft@c+2,c
  1147  001E64  0100               	movlb	0	; () banked
  1148  001E66  51BF               	movf	(_elapsedMillis+3)& (0+255),w,b
  1149  001E68  0100               	movlb	0	; () banked
  1150  001E6A  21A7               	addwfc	(??_main+3)& (0+255),w,b
  1151  001E6C  6E1E               	movwf	___lltoft@c+3,c
  1152  001E6E  EC5F  F017         	call	___lltoft	;wreg free
  1153  001E72  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1154  001E76  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1155  001E7A  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1156  001E7E  0E00               	movlw	0
  1157  001E80  6E27               	movwf	___ftmul@f2,c
  1158  001E82  0E96               	movlw	150
  1159  001E84  6E28               	movwf	___ftmul@f2+1,c
  1160  001E86  0E44               	movlw	68
  1161  001E88  6E29               	movwf	___ftmul@f2+2,c
  1162  001E8A  C0B6  F0A8         	movff	main@rightCountTracker,??_main+4
  1163  001E8E  C0B7  F0A9         	movff	main@rightCountTracker+1,??_main+5
  1164  001E92  0E00               	movlw	0
  1165  001E94  0100               	movlb	0	; () banked
  1166  001E96  BFA9               	btfsc	(??_main+5)& (0+255),7,b
  1167  001E98  0EFF               	movlw	255
  1168  001E9A  6FAA               	movwf	(??_main+6)& (0+255),b
  1169  001E9C  6FAB               	movwf	(??_main+7)& (0+255),b
  1170  001E9E  0100               	movlb	0	; () banked
  1171  001EA0  1FA8               	comf	(??_main+4)& (0+255),f,b
  1172  001EA2  1FA9               	comf	(??_main+5)& (0+255),f,b
  1173  001EA4  1FAA               	comf	(??_main+6)& (0+255),f,b
  1174  001EA6  1FAB               	comf	(??_main+7)& (0+255),f,b
  1175  001EA8  2BA8               	incf	(??_main+4)& (0+255),f,b
  1176  001EAA  0E00               	movlw	0
  1177  001EAC  23A9               	addwfc	(??_main+5)& (0+255),f,b
  1178  001EAE  23AA               	addwfc	(??_main+6)& (0+255),f,b
  1179  001EB0  23AB               	addwfc	(??_main+7)& (0+255),f,b
  1180  001EB2  0100               	movlb	0	; () banked
  1181  001EB4  51C4               	movf	_rightWheelCount& (0+255),w,b
  1182  001EB6  0100               	movlb	0	; () banked
  1183  001EB8  25A8               	addwf	(??_main+4)& (0+255),w,b
  1184  001EBA  6E1B               	movwf	___lltoft@c,c
  1185  001EBC  0100               	movlb	0	; () banked
  1186  001EBE  51C5               	movf	(_rightWheelCount+1)& (0+255),w,b
  1187  001EC0  0100               	movlb	0	; () banked
  1188  001EC2  21A9               	addwfc	(??_main+5)& (0+255),w,b
  1189  001EC4  6E1C               	movwf	___lltoft@c+1,c
  1190  001EC6  0100               	movlb	0	; () banked
  1191  001EC8  51C6               	movf	(_rightWheelCount+2)& (0+255),w,b
  1192  001ECA  0100               	movlb	0	; () banked
  1193  001ECC  21AA               	addwfc	(??_main+6)& (0+255),w,b
  1194  001ECE  6E1D               	movwf	___lltoft@c+2,c
  1195  001ED0  0100               	movlb	0	; () banked
  1196  001ED2  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  1197  001ED4  0100               	movlb	0	; () banked
  1198  001ED6  21AB               	addwfc	(??_main+7)& (0+255),w,b
  1199  001ED8  6E1E               	movwf	___lltoft@c+3,c
  1200  001EDA  EC5F  F017         	call	___lltoft	;wreg free
  1201  001EDE  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1202  001EE2  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1203  001EE6  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1204  001EEA  ECD4  F013         	call	___ftmul	;wreg free
  1205  001EEE  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1206  001EF2  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1207  001EF6  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1208  001EFA  EC4E  F014         	call	___ftdiv	;wreg free
  1209  001EFE  C033  F042         	movff	?___ftdiv,___fttol@f1
  1210  001F02  C034  F043         	movff	?___ftdiv+1,___fttol@f1+1
  1211  001F06  C035  F044         	movff	?___ftdiv+2,___fttol@f1+2
  1212  001F0A  ECBB  F012         	call	___fttol	;wreg free
  1213  001F0E  C042  F0CA         	movff	?___fttol,_rightWheelMeasuredSpeed
  1214  001F12  C043  F0CB         	movff	?___fttol+1,_rightWheelMeasuredSpeed+1
  1215                           
  1216                           ;main.c: 197: leftWheelMeasuredSpeed = (int) ((leftWheelCount - leftCountTracker) * (2.4
      +                           * 500) / (elapsedMillis - speedLastMillis));
  1217  001F16  C0B8  F0A4         	movff	main@speedLastMillis,??_main
  1218  001F1A  C0B9  F0A5         	movff	main@speedLastMillis+1,??_main+1
  1219  001F1E  C0BA  F0A6         	movff	main@speedLastMillis+2,??_main+2
  1220  001F22  C0BB  F0A7         	movff	main@speedLastMillis+3,??_main+3
  1221  001F26  0100               	movlb	0	; () banked
  1222  001F28  1FA4               	comf	??_main& (0+255),f,b
  1223  001F2A  1FA5               	comf	(??_main+1)& (0+255),f,b
  1224  001F2C  1FA6               	comf	(??_main+2)& (0+255),f,b
  1225  001F2E  1FA7               	comf	(??_main+3)& (0+255),f,b
  1226  001F30  2BA4               	incf	??_main& (0+255),f,b
  1227  001F32  0E00               	movlw	0
  1228  001F34  23A5               	addwfc	(??_main+1)& (0+255),f,b
  1229  001F36  23A6               	addwfc	(??_main+2)& (0+255),f,b
  1230  001F38  23A7               	addwfc	(??_main+3)& (0+255),f,b
  1231  001F3A  0100               	movlb	0	; () banked
  1232  001F3C  51BC               	movf	_elapsedMillis& (0+255),w,b
  1233  001F3E  0100               	movlb	0	; () banked
  1234  001F40  25A4               	addwf	??_main& (0+255),w,b
  1235  001F42  6E1B               	movwf	___lltoft@c,c
  1236  001F44  0100               	movlb	0	; () banked
  1237  001F46  51BD               	movf	(_elapsedMillis+1)& (0+255),w,b
  1238  001F48  0100               	movlb	0	; () banked
  1239  001F4A  21A5               	addwfc	(??_main+1)& (0+255),w,b
  1240  001F4C  6E1C               	movwf	___lltoft@c+1,c
  1241  001F4E  0100               	movlb	0	; () banked
  1242  001F50  51BE               	movf	(_elapsedMillis+2)& (0+255),w,b
  1243  001F52  0100               	movlb	0	; () banked
  1244  001F54  21A6               	addwfc	(??_main+2)& (0+255),w,b
  1245  001F56  6E1D               	movwf	___lltoft@c+2,c
  1246  001F58  0100               	movlb	0	; () banked
  1247  001F5A  51BF               	movf	(_elapsedMillis+3)& (0+255),w,b
  1248  001F5C  0100               	movlb	0	; () banked
  1249  001F5E  21A7               	addwfc	(??_main+3)& (0+255),w,b
  1250  001F60  6E1E               	movwf	___lltoft@c+3,c
  1251  001F62  EC5F  F017         	call	___lltoft	;wreg free
  1252  001F66  C01B  F036         	movff	?___lltoft,___ftdiv@f2
  1253  001F6A  C01C  F037         	movff	?___lltoft+1,___ftdiv@f2+1
  1254  001F6E  C01D  F038         	movff	?___lltoft+2,___ftdiv@f2+2
  1255  001F72  0E00               	movlw	0
  1256  001F74  6E27               	movwf	___ftmul@f2,c
  1257  001F76  0E96               	movlw	150
  1258  001F78  6E28               	movwf	___ftmul@f2+1,c
  1259  001F7A  0E44               	movlw	68
  1260  001F7C  6E29               	movwf	___ftmul@f2+2,c
  1261  001F7E  C0B4  F0A8         	movff	main@leftCountTracker,??_main+4
  1262  001F82  C0B5  F0A9         	movff	main@leftCountTracker+1,??_main+5
  1263  001F86  0E00               	movlw	0
  1264  001F88  0100               	movlb	0	; () banked
  1265  001F8A  BFA9               	btfsc	(??_main+5)& (0+255),7,b
  1266  001F8C  0EFF               	movlw	255
  1267  001F8E  6FAA               	movwf	(??_main+6)& (0+255),b
  1268  001F90  6FAB               	movwf	(??_main+7)& (0+255),b
  1269  001F92  0100               	movlb	0	; () banked
  1270  001F94  1FA8               	comf	(??_main+4)& (0+255),f,b
  1271  001F96  1FA9               	comf	(??_main+5)& (0+255),f,b
  1272  001F98  1FAA               	comf	(??_main+6)& (0+255),f,b
  1273  001F9A  1FAB               	comf	(??_main+7)& (0+255),f,b
  1274  001F9C  2BA8               	incf	(??_main+4)& (0+255),f,b
  1275  001F9E  0E00               	movlw	0
  1276  001FA0  23A9               	addwfc	(??_main+5)& (0+255),f,b
  1277  001FA2  23AA               	addwfc	(??_main+6)& (0+255),f,b
  1278  001FA4  23AB               	addwfc	(??_main+7)& (0+255),f,b
  1279  001FA6  0100               	movlb	0	; () banked
  1280  001FA8  51C0               	movf	_leftWheelCount& (0+255),w,b
  1281  001FAA  0100               	movlb	0	; () banked
  1282  001FAC  25A8               	addwf	(??_main+4)& (0+255),w,b
  1283  001FAE  6E1B               	movwf	___lltoft@c,c
  1284  001FB0  0100               	movlb	0	; () banked
  1285  001FB2  51C1               	movf	(_leftWheelCount+1)& (0+255),w,b
  1286  001FB4  0100               	movlb	0	; () banked
  1287  001FB6  21A9               	addwfc	(??_main+5)& (0+255),w,b
  1288  001FB8  6E1C               	movwf	___lltoft@c+1,c
  1289  001FBA  0100               	movlb	0	; () banked
  1290  001FBC  51C2               	movf	(_leftWheelCount+2)& (0+255),w,b
  1291  001FBE  0100               	movlb	0	; () banked
  1292  001FC0  21AA               	addwfc	(??_main+6)& (0+255),w,b
  1293  001FC2  6E1D               	movwf	___lltoft@c+2,c
  1294  001FC4  0100               	movlb	0	; () banked
  1295  001FC6  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  1296  001FC8  0100               	movlb	0	; () banked
  1297  001FCA  21AB               	addwfc	(??_main+7)& (0+255),w,b
  1298  001FCC  6E1E               	movwf	___lltoft@c+3,c
  1299  001FCE  EC5F  F017         	call	___lltoft	;wreg free
  1300  001FD2  C01B  F024         	movff	?___lltoft,___ftmul@f1
  1301  001FD6  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  1302  001FDA  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  1303  001FDE  ECD4  F013         	call	___ftmul	;wreg free
  1304  001FE2  C024  F033         	movff	?___ftmul,___ftdiv@f1
  1305  001FE6  C025  F034         	movff	?___ftmul+1,___ftdiv@f1+1
  1306  001FEA  C026  F035         	movff	?___ftmul+2,___ftdiv@f1+2
  1307  001FEE  EC4E  F014         	call	___ftdiv	;wreg free
  1308  001FF2  C033  F042         	movff	?___ftdiv,___fttol@f1
  1309  001FF6  C034  F043         	movff	?___ftdiv+1,___fttol@f1+1
  1310  001FFA  C035  F044         	movff	?___ftdiv+2,___fttol@f1+2
  1311  001FFE  ECBB  F012         	call	___fttol	;wreg free
  1312  002002  C042  F0C8         	movff	?___fttol,_leftWheelMeasuredSpeed
  1313  002006  C043  F0C9         	movff	?___fttol+1,_leftWheelMeasuredSpeed+1
  1314                           
  1315                           ;main.c: 199: speedLastMillis = elapsedMillis;
  1316  00200A  C0BC  F0B8         	movff	_elapsedMillis,main@speedLastMillis
  1317  00200E  C0BD  F0B9         	movff	_elapsedMillis+1,main@speedLastMillis+1
  1318  002012  C0BE  F0BA         	movff	_elapsedMillis+2,main@speedLastMillis+2
  1319  002016  C0BF  F0BB         	movff	_elapsedMillis+3,main@speedLastMillis+3
  1320                           
  1321                           ;main.c: 201: rightCountTracker = rightWheelCount;
  1322  00201A  C0C4  F0B6         	movff	_rightWheelCount,main@rightCountTracker
  1323  00201E  C0C5  F0B7         	movff	_rightWheelCount+1,main@rightCountTracker+1
  1324                           
  1325                           ;main.c: 203: leftCountTracker = leftWheelCount;
  1326  002022  C0C0  F0B4         	movff	_leftWheelCount,main@leftCountTracker
  1327  002026  C0C1  F0B5         	movff	_leftWheelCount+1,main@leftCountTracker+1
  1328  00202A  D64D               	goto	l3452
  1329  00202C                     __end_of_main:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           postinc0	equ	0xFEE
  1336                           wreg	equ	0xFE8
  1337                           postdec1	equ	0xFE5
  1338                           fsr1l	equ	0xFE1
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _printf *****************
  1342 ;; Defined at:
  1343 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  f               2   30[COMRAM] PTR const unsigned char 
  1346 ;;		 -> STR_4(8), STR_3(8), STR_2(10), STR_1(11), 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  tmpval          4    0        struct .
  1349 ;;  cp              3    0        PTR const unsigned char 
  1350 ;;  width           2   46[COMRAM] int 
  1351 ;;  val             2   44[COMRAM] unsigned int 
  1352 ;;  ap              2   40[COMRAM] PTR void [1]
  1353 ;;		 -> ?_printf(2), 
  1354 ;;  len             2    0        unsigned int 
  1355 ;;  c               1   48[COMRAM] char 
  1356 ;;  flag            1   43[COMRAM] unsigned char 
  1357 ;;  prec            1   42[COMRAM] char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  2   30[COMRAM] int 
  1360 ;; Registers used:
  1361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1367 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1369 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1370 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;Total ram usage:       19 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    4
  1374 ;; This function calls:
  1375 ;;		___lwdiv
  1376 ;;		___lwmod
  1377 ;;		___wmul
  1378 ;;		_isdigit
  1379 ;;		_putch
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text1
  1386  00202C                     __ptext1:
  1387                           	opt stack 0
  1388  00202C                     _printf:
  1389                           	opt stack 26
  1390                           
  1391                           ;doprnt.c: 466: va_list ap;
  1392                           ;doprnt.c: 499: signed char c;
  1393                           ;doprnt.c: 501: int width;
  1394                           ;doprnt.c: 506: signed char prec;
  1395                           ;doprnt.c: 508: unsigned char flag;
  1396                           ;doprnt.c: 523: union {
  1397                           ;doprnt.c: 524: unsigned long vd;
  1398                           ;doprnt.c: 525: double integ;
  1399                           ;doprnt.c: 526: } tmpval;
  1400                           ;doprnt.c: 528: unsigned int val;
  1401                           ;doprnt.c: 529: unsigned len;
  1402                           ;doprnt.c: 530: const char * cp;
  1403                           ;doprnt.c: 533: *ap = __va_start();
  1404                           
  1405                           ;incstack = 0
  1406  00202C  0E21               	movlw	low (?_printf+2)
  1407  00202E  6E29               	movwf	printf@ap,c
  1408  002030  0E00               	movlw	high (?_printf+2)
  1409  002032  6E2A               	movwf	printf@ap+1,c
  1410                           
  1411                           ;doprnt.c: 536: while(c = *f++) {
  1412  002034  D0EE               	goto	l2622
  1413  002036                     l2546:
  1414                           
  1415                           ;doprnt.c: 538: if(c != '%')
  1416  002036  0E25               	movlw	37
  1417  002038  1831               	xorwf	printf@c,w,c
  1418  00203A  B4D8               	btfsc	status,2,c
  1419  00203C  D004               	goto	l2550
  1420                           
  1421                           ;doprnt.c: 540: {
  1422                           ;doprnt.c: 541: (putch(c) );
  1423  00203E  5031               	movf	printf@c,w,c
  1424  002040  ECCE  F018         	call	_putch
  1425                           
  1426                           ;doprnt.c: 542: continue;
  1427  002044  D0E6               	goto	l2622
  1428  002046                     l2550:
  1429                           
  1430                           ;doprnt.c: 543: }
  1431                           ;doprnt.c: 546: width = 0;
  1432  002046  0E00               	movlw	0
  1433  002048  6E30               	movwf	printf@width+1,c
  1434  00204A  0E00               	movlw	0
  1435  00204C  6E2F               	movwf	printf@width,c
  1436                           
  1437                           ;doprnt.c: 548: flag = 0;
  1438  00204E  0E00               	movlw	0
  1439  002050  6E2C               	movwf	printf@flag,c
  1440                           
  1441                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1442  002052  C01F  FFF6         	movff	printf@f,tblptrl
  1443  002056  C020  FFF7         	movff	printf@f+1,tblptrh
  1444  00205A                     	if	0	;tblptru may be non-zero
  1445  00205A                     	endif
  1446  00205A                     	if	0	;tblptru may be non-zero
  1447  00205A                     	endif
  1448  00205A  0008               	tblrd		*
  1449  00205C  50F5               	movf	tablat,w,c
  1450  00205E  EC96  F018         	call	_isdigit
  1451  002062  A0D8               	btfss	status,0,c
  1452  002064  D032               	goto	l2566
  1453                           
  1454                           ;doprnt.c: 598: width = 0;
  1455  002066  0E00               	movlw	0
  1456  002068  6E30               	movwf	printf@width+1,c
  1457  00206A  0E00               	movlw	0
  1458  00206C  6E2F               	movwf	printf@width,c
  1459  00206E                     l2556:
  1460                           
  1461                           ;doprnt.c: 600: width *= 10;
  1462  00206E  C02F  F013         	movff	printf@width,___wmul@multiplier
  1463  002072  C030  F014         	movff	printf@width+1,___wmul@multiplier+1
  1464  002076  0E00               	movlw	0
  1465  002078  6E16               	movwf	___wmul@multiplicand+1,c
  1466  00207A  0E0A               	movlw	10
  1467  00207C  6E15               	movwf	___wmul@multiplicand,c
  1468  00207E  EC83  F018         	call	___wmul	;wreg free
  1469  002082  C013  F02F         	movff	?___wmul,printf@width
  1470  002086  C014  F030         	movff	?___wmul+1,printf@width+1
  1471                           
  1472                           ;doprnt.c: 601: width += *f++ - '0';
  1473  00208A  0ED0               	movlw	208
  1474  00208C  6E25               	movwf	??_printf& (0+255),c
  1475  00208E  0EFF               	movlw	255
  1476  002090  6E26               	movwf	(??_printf+1)& (0+255),c
  1477  002092  C01F  FFF6         	movff	printf@f,tblptrl
  1478  002096  C020  FFF7         	movff	printf@f+1,tblptrh
  1479  00209A                     	if	0	;tblptru may be non-zero
  1480  00209A                     	endif
  1481  00209A                     	if	0	;tblptru may be non-zero
  1482  00209A                     	endif
  1483  00209A  0008               	tblrd		*
  1484  00209C  50F5               	movf	tablat,w,c
  1485  00209E  6E27               	movwf	(??_printf+2)& (0+255),c
  1486  0020A0  6A28               	clrf	(??_printf+3)& (0+255),c
  1487  0020A2  5025               	movf	??_printf,w,c
  1488  0020A4  2627               	addwf	??_printf+2,f,c
  1489  0020A6  5026               	movf	??_printf+1,w,c
  1490  0020A8  2228               	addwfc	??_printf+3,f,c
  1491  0020AA  5027               	movf	??_printf+2,w,c
  1492  0020AC  262F               	addwf	printf@width,f,c
  1493  0020AE  5028               	movf	??_printf+3,w,c
  1494  0020B0  2230               	addwfc	printf@width+1,f,c
  1495  0020B2  4A1F               	infsnz	printf@f,f,c
  1496  0020B4  2A20               	incf	printf@f+1,f,c
  1497                           
  1498                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1499  0020B6  C01F  FFF6         	movff	printf@f,tblptrl
  1500  0020BA  C020  FFF7         	movff	printf@f+1,tblptrh
  1501  0020BE                     	if	0	;tblptru may be non-zero
  1502  0020BE                     	endif
  1503  0020BE                     	if	0	;tblptru may be non-zero
  1504  0020BE                     	endif
  1505  0020BE  0008               	tblrd		*
  1506  0020C0  50F5               	movf	tablat,w,c
  1507  0020C2  EC96  F018         	call	_isdigit
  1508  0020C6  B0D8               	btfsc	status,0,c
  1509  0020C8  D7D2               	goto	l2556
  1510  0020CA                     l2566:
  1511  0020CA  C01F  FFF6         	movff	printf@f,tblptrl
  1512  0020CE  C020  FFF7         	movff	printf@f+1,tblptrh
  1513  0020D2  4A1F               	infsnz	printf@f,f,c
  1514  0020D4  2A20               	incf	printf@f+1,f,c
  1515  0020D6                     	if	0	;tblptru may be non-zero
  1516  0020D6                     	endif
  1517  0020D6                     	if	0	;tblptru may be non-zero
  1518  0020D6                     	endif
  1519  0020D6  0008               	tblrd		*
  1520  0020D8  CFF5 F031          	movff	tablat,printf@c
  1521  0020DC  5031               	movf	printf@c,w,c
  1522                           
  1523                           ; Switch size 1, requested type "space"
  1524                           ; Number of cases is 3, Range of values is 0 to 105
  1525                           ; switch strategies available:
  1526                           ; Name         Instructions Cycles
  1527                           ; simple_byte           10     6 (average)
  1528                           ;	Chosen strategy is simple_byte
  1529  0020DE  0A00               	xorlw	0	; case 0
  1530  0020E0  B4D8               	btfsc	status,2,c
  1531  0020E2  0012               	return	
  1532  0020E4  0A64               	xorlw	100	; case 100
  1533  0020E6  B4D8               	btfsc	status,2,c
  1534  0020E8  D003               	goto	l2568
  1535  0020EA  0A0D               	xorlw	13	; case 105
  1536  0020EC  A4D8               	btfss	status,2,c
  1537  0020EE  D091               	goto	l2622
  1538  0020F0                     l2568:
  1539                           
  1540                           ;doprnt.c: 1253: {
  1541                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1542  0020F0  C029  FFD9         	movff	printf@ap,fsr2l
  1543  0020F4  C02A  FFDA         	movff	printf@ap+1,fsr2h
  1544  0020F8  CFDE F02D          	movff	postinc2,printf@val
  1545  0020FC  CFDD F02E          	movff	postdec2,printf@val+1
  1546  002100  0E02               	movlw	2
  1547  002102  2629               	addwf	printf@ap,f,c
  1548  002104  0E00               	movlw	0
  1549  002106  222A               	addwfc	printf@ap+1,f,c
  1550                           
  1551                           ;doprnt.c: 1261: if((int)val < 0) {
  1552  002108  AE2E               	btfss	printf@val+1,7,c
  1553  00210A  D006               	goto	l2578
  1554                           
  1555                           ;doprnt.c: 1262: flag |= 0x03;
  1556  00210C  0E03               	movlw	3
  1557  00210E  122C               	iorwf	printf@flag,f,c
  1558                           
  1559                           ;doprnt.c: 1263: val = -val;
  1560  002110  6C2D               	negf	printf@val,c
  1561  002112  1E2E               	comf	printf@val+1,f,c
  1562  002114  B0D8               	btfsc	status,0,c
  1563  002116  2A2E               	incf	printf@val+1,f,c
  1564  002118                     l2578:
  1565                           
  1566                           ;doprnt.c: 1264: }
  1567                           ;doprnt.c: 1266: }
  1568                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1569  002118  0E01               	movlw	1
  1570  00211A  6E31               	movwf	printf@c,c
  1571  00211C                     l2580:
  1572  00211C  0E05               	movlw	5
  1573  00211E  1831               	xorwf	printf@c,w,c
  1574  002120  B4D8               	btfsc	status,2,c
  1575  002122  D012               	goto	l2592
  1576                           
  1577                           ;doprnt.c: 1306: if(val < dpowers[c])
  1578  002124  5031               	movf	printf@c,w,c
  1579  002126  0D02               	mullw	2
  1580  002128  0E01               	movlw	low _dpowers
  1581  00212A  24F3               	addwf	prodl,w,c
  1582  00212C  6EF6               	movwf	tblptrl,c
  1583  00212E  0E10               	movlw	high _dpowers
  1584  002130  20F4               	addwfc	prodh,w,c
  1585  002132  6EF7               	movwf	tblptrh,c
  1586  002134                     	if	0	;There are less than 3 active tblptr bytes
  1587  002134                     	endif
  1588  002134  0009               	tblrd		*+
  1589  002136  50F5               	movf	tablat,w,c
  1590  002138  5C2D               	subwf	printf@val,w,c
  1591  00213A  0009               	tblrd		*+
  1592  00213C  50F5               	movf	tablat,w,c
  1593  00213E  582E               	subwfb	printf@val+1,w,c
  1594  002140  A0D8               	btfss	status,0,c
  1595  002142  D002               	goto	l2592
  1596                           
  1597                           ;doprnt.c: 1307: break;
  1598  002144  2A31               	incf	printf@c,f,c
  1599  002146  D7EA               	goto	l2580
  1600  002148                     l2592:
  1601                           
  1602                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1603  002148  502F               	movf	printf@width,w,c
  1604  00214A  1030               	iorwf	printf@width+1,w,c
  1605  00214C  B4D8               	btfsc	status,2,c
  1606  00214E  D009               	goto	l2598
  1607  002150  C02C  F025         	movff	printf@flag,??_printf
  1608  002154  0E03               	movlw	3
  1609  002156  1625               	andwf	??_printf,f,c
  1610  002158  B4D8               	btfsc	status,2,c
  1611  00215A  D003               	goto	l2598
  1612                           
  1613                           ;doprnt.c: 1346: width--;
  1614  00215C  062F               	decf	printf@width,f,c
  1615  00215E  A0D8               	btfss	status,0,c
  1616  002160  0630               	decf	printf@width+1,f,c
  1617  002162                     l2598:
  1618                           
  1619                           ;doprnt.c: 1381: if(width > c)
  1620  002162  0E80               	movlw	128
  1621  002164  BE31               	btfsc	printf@c,7,c
  1622  002166  0E7F               	movlw	127
  1623  002168  6E25               	movwf	??_printf& (0+255),c
  1624  00216A  502F               	movf	printf@width,w,c
  1625  00216C  5C31               	subwf	printf@c,w,c
  1626  00216E  5030               	movf	printf@width+1,w,c
  1627  002170  0A80               	xorlw	128
  1628  002172  5825               	subwfb	??_printf& (0+255),w,c
  1629  002174  B0D8               	btfsc	status,0,c
  1630  002176  D007               	goto	l2602
  1631                           
  1632                           ;doprnt.c: 1382: width -= c;
  1633  002178  5031               	movf	printf@c,w,c
  1634  00217A  5E2F               	subwf	printf@width,f,c
  1635  00217C  0E00               	movlw	0
  1636  00217E  BE31               	btfsc	printf@c,7,c
  1637  002180  0EFF               	movlw	255
  1638  002182  5A30               	subwfb	printf@width+1,f,c
  1639  002184  D004               	goto	l2604
  1640  002186                     l2602:
  1641                           
  1642                           ;doprnt.c: 1383: else
  1643                           ;doprnt.c: 1384: width = 0;
  1644  002186  0E00               	movlw	0
  1645  002188  6E30               	movwf	printf@width+1,c
  1646  00218A  0E00               	movlw	0
  1647  00218C  6E2F               	movwf	printf@width,c
  1648  00218E                     l2604:
  1649                           
  1650                           ;doprnt.c: 1422: {
  1651                           ;doprnt.c: 1424: if(width
  1652                           ;doprnt.c: 1428: )
  1653  00218E  502F               	movf	printf@width,w,c
  1654  002190  1030               	iorwf	printf@width+1,w,c
  1655  002192  B4D8               	btfsc	status,2,c
  1656  002194  D00A               	goto	l2610
  1657  002196                     l2606:
  1658                           
  1659                           ;doprnt.c: 1430: (putch(' ') );
  1660  002196  0E20               	movlw	32
  1661  002198  ECCE  F018         	call	_putch
  1662                           
  1663                           ;doprnt.c: 1431: while(--width);
  1664  00219C  062F               	decf	printf@width,f,c
  1665  00219E  A0D8               	btfss	status,0,c
  1666  0021A0  0630               	decf	printf@width+1,f,c
  1667  0021A2  502F               	movf	printf@width,w,c
  1668  0021A4  1030               	iorwf	printf@width+1,w,c
  1669  0021A6  A4D8               	btfss	status,2,c
  1670  0021A8  D7F6               	goto	l2606
  1671  0021AA                     l2610:
  1672                           
  1673                           ;doprnt.c: 1438: if(flag & 0x03)
  1674  0021AA  C02C  F025         	movff	printf@flag,??_printf
  1675  0021AE  0E03               	movlw	3
  1676  0021B0  1625               	andwf	??_printf,f,c
  1677  0021B2  B4D8               	btfsc	status,2,c
  1678  0021B4  D003               	goto	l2614
  1679                           
  1680                           ;doprnt.c: 1439: (putch('-') );
  1681  0021B6  0E2D               	movlw	45
  1682  0021B8  ECCE  F018         	call	_putch
  1683  0021BC                     l2614:
  1684                           
  1685                           ;doprnt.c: 1469: }
  1686                           ;doprnt.c: 1472: prec = c;
  1687  0021BC  C031  F02B         	movff	printf@c,printf@prec
  1688                           
  1689                           ;doprnt.c: 1474: while(prec--) {
  1690  0021C0  D024               	goto	l2620
  1691  0021C2                     l2616:
  1692                           
  1693                           ;doprnt.c: 1478: {
  1694                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1695  0021C2  502B               	movf	printf@prec,w,c
  1696  0021C4  0D02               	mullw	2
  1697  0021C6  0E01               	movlw	low _dpowers
  1698  0021C8  24F3               	addwf	prodl,w,c
  1699  0021CA  6EF6               	movwf	tblptrl,c
  1700  0021CC  0E10               	movlw	high _dpowers
  1701  0021CE  20F4               	addwfc	prodh,w,c
  1702  0021D0  6EF7               	movwf	tblptrh,c
  1703  0021D2                     	if	0	;There are less than 3 active tblptr bytes
  1704  0021D2                     	endif
  1705  0021D2  0009               	tblrd		*+
  1706  0021D4  CFF5 F015          	movff	tablat,___lwdiv@divisor
  1707  0021D8  000A               	tblrd		*-
  1708  0021DA  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  1709  0021DE  C02D  F013         	movff	printf@val,___lwdiv@dividend
  1710  0021E2  C02E  F014         	movff	printf@val+1,___lwdiv@dividend+1
  1711  0021E6  ECE5  F017         	call	___lwdiv	;wreg free
  1712  0021EA  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  1713  0021EE  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1714  0021F2  0E00               	movlw	0
  1715  0021F4  6E1D               	movwf	___lwmod@divisor+1,c
  1716  0021F6  0E0A               	movlw	10
  1717  0021F8  6E1C               	movwf	___lwmod@divisor,c
  1718  0021FA  EC0E  F018         	call	___lwmod	;wreg free
  1719  0021FE  501A               	movf	?___lwmod,w,c
  1720  002200  0F30               	addlw	48
  1721  002202  6E31               	movwf	printf@c,c
  1722                           
  1723                           ;doprnt.c: 1523: }
  1724                           ;doprnt.c: 1524: (putch(c) );
  1725  002204  5031               	movf	printf@c,w,c
  1726  002206  ECCE  F018         	call	_putch
  1727  00220A                     l2620:
  1728  00220A  062B               	decf	printf@prec,f,c
  1729  00220C  282B               	incf	printf@prec,w,c
  1730  00220E  A4D8               	btfss	status,2,c
  1731  002210  D7D8               	goto	l2616
  1732  002212                     l2622:
  1733  002212  C01F  FFF6         	movff	printf@f,tblptrl
  1734  002216  C020  FFF7         	movff	printf@f+1,tblptrh
  1735  00221A  4A1F               	infsnz	printf@f,f,c
  1736  00221C  2A20               	incf	printf@f+1,f,c
  1737  00221E                     	if	0	;tblptru may be non-zero
  1738  00221E                     	endif
  1739  00221E                     	if	0	;tblptru may be non-zero
  1740  00221E                     	endif
  1741  00221E  0008               	tblrd		*
  1742  002220  CFF5 F031          	movff	tablat,printf@c
  1743  002224  5031               	movf	printf@c,w,c
  1744  002226  B4D8               	btfsc	status,2,c
  1745  002228  0012               	return	
  1746  00222A  D705               	goto	l2546
  1747  00222C                     __end_of_printf:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           postinc2	equ	0xFDE
  1760                           postdec2	equ	0xFDD
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _putch *****************
  1766 ;; Defined at:
  1767 ;;		line 12 in file "printfLib.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  data            1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  data            1   20[COMRAM] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    3
  1788 ;; This function calls:
  1789 ;;		_LCDwrite
  1790 ;; This function is called by:
  1791 ;;		_printf
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text2
  1796  00319C                     __ptext2:
  1797                           	opt stack 0
  1798  00319C                     _putch:
  1799                           	opt stack 26
  1800                           
  1801                           ;incstack = 0
  1802                           ;putch@data stored from wreg
  1803  00319C  6E15               	movwf	putch@data,c
  1804                           
  1805                           ;printfLib.c: 13: LCDwrite(data);
  1806  00319E  5015               	movf	putch@data,w,c
  1807  0031A0  ECAF  F018         	call	_LCDwrite
  1808  0031A4  0012               	return		;funcret
  1809  0031A6                     __end_of_putch:
  1810                           	opt stack 0
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           prodh	equ	0xFF4
  1816                           prodl	equ	0xFF3
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           postdec1	equ	0xFE5
  1820                           fsr1l	equ	0xFE1
  1821                           postinc2	equ	0xFDE
  1822                           postdec2	equ	0xFDD
  1823                           fsr2h	equ	0xFDA
  1824                           fsr2l	equ	0xFD9
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _LCDwrite *****************
  1828 ;; Defined at:
  1829 ;;		line 118 in file "lcd.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  input           1    wreg     unsigned char 
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  input           1   19[COMRAM] unsigned char 
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;Total ram usage:        1 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    2
  1850 ;; This function calls:
  1851 ;;		_LCDcheckBF
  1852 ;;		_LCDcmd
  1853 ;; This function is called by:
  1854 ;;		_putch
  1855 ;;		_LCDputs
  1856 ;;		_LCDwriteLineOne
  1857 ;;		_LCDwriteLineTwo
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text3
  1862  00315E                     __ptext3:
  1863                           	opt stack 0
  1864  00315E                     _LCDwrite:
  1865                           	opt stack 26
  1866                           
  1867                           ;incstack = 0
  1868                           ;LCDwrite@input stored from wreg
  1869  00315E  6E14               	movwf	LCDwrite@input,c
  1870                           
  1871                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  1872  003160  808D               	bsf	3981,0,c	;volatile
  1873                           
  1874                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  1875  003162  928D               	bcf	3981,1,c	;volatile
  1876                           
  1877                           ;lcd.c: 122: LCDcmd(input);
  1878  003164  5014               	movf	LCDwrite@input,w,c
  1879  003166  ECC8  F018         	call	_LCDcmd
  1880                           
  1881                           ;lcd.c: 123: LCDcheckBF();
  1882  00316A  ECA5  F018         	call	_LCDcheckBF	;wreg free
  1883  00316E  0012               	return		;funcret
  1884  003170                     __end_of_LCDwrite:
  1885                           	opt stack 0
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           prodh	equ	0xFF4
  1891                           prodl	equ	0xFF3
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           postinc2	equ	0xFDE
  1897                           postdec2	equ	0xFDD
  1898                           fsr2h	equ	0xFDA
  1899                           fsr2l	equ	0xFD9
  1900                           status	equ	0xFD8
  1901                           
  1902 ;; *************** function _isdigit *****************
  1903 ;; Defined at:
  1904 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  c               1    wreg     unsigned char 
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;  c               1   20[COMRAM] unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;		None               void
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;Total ram usage:        3 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    1
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_printf
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text4
  1933  00312C                     __ptext4:
  1934                           	opt stack 0
  1935  00312C                     _isdigit:
  1936                           	opt stack 28
  1937                           
  1938                           ;incstack = 0
  1939                           ;isdigit@c stored from wreg
  1940  00312C  6E15               	movwf	isdigit@c,c
  1941  00312E  0E00               	movlw	0
  1942  003130  6E14               	movwf	_isdigit$1676,c
  1943  003132  0E3A               	movlw	58
  1944  003134  6015               	cpfslt	isdigit@c,c
  1945  003136  D005               	goto	l2344
  1946  003138  0E2F               	movlw	47
  1947  00313A  6415               	cpfsgt	isdigit@c,c
  1948  00313C  D002               	goto	l2344
  1949  00313E  0E01               	movlw	1
  1950  003140  6E14               	movwf	_isdigit$1676,c
  1951  003142                     l2344:
  1952  003142  C014  F013         	movff	_isdigit$1676,??_isdigit
  1953  003146  3013               	rrcf	??_isdigit,w,c
  1954  003148  0012               	return	
  1955  00314A                     __end_of_isdigit:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           postdec1	equ	0xFE5
  1966                           fsr1l	equ	0xFE1
  1967                           postinc2	equ	0xFDE
  1968                           postdec2	equ	0xFDD
  1969                           fsr2h	equ	0xFDA
  1970                           fsr2l	equ	0xFD9
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function ___wmul *****************
  1974 ;; Defined at:
  1975 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  multiplier      2   18[COMRAM] unsigned int 
  1978 ;;  multiplicand    2   20[COMRAM] unsigned int 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  product         2   22[COMRAM] unsigned int 
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  2   18[COMRAM] unsigned int 
  1983 ;; Registers used:
  1984 ;;		wreg, status,2, status,0, prodl, prodh
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;Total ram usage:        6 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    1
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_printf
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text5
  2005  003106                     __ptext5:
  2006                           	opt stack 0
  2007  003106                     ___wmul:
  2008                           	opt stack 28
  2009                           
  2010                           ;incstack = 0
  2011  003106  5013               	movf	___wmul@multiplier,w,c
  2012  003108  0215               	mulwf	___wmul@multiplicand,c
  2013  00310A  CFF3 F017          	movff	prodl,___wmul@product
  2014  00310E  CFF4 F018          	movff	prodh,___wmul@product+1
  2015  003112  5013               	movf	___wmul@multiplier,w,c
  2016  003114  0216               	mulwf	___wmul@multiplicand+1,c
  2017  003116  50F3               	movf	prodl,w,c
  2018  003118  2618               	addwf	___wmul@product+1,f,c
  2019  00311A  5014               	movf	___wmul@multiplier+1,w,c
  2020  00311C  0215               	mulwf	___wmul@multiplicand,c
  2021  00311E  50F3               	movf	prodl,w,c
  2022  003120  2618               	addwf	___wmul@product+1,f,c
  2023  003122  C017  F013         	movff	___wmul@product,?___wmul
  2024  003126  C018  F014         	movff	___wmul@product+1,?___wmul+1
  2025  00312A  0012               	return	
  2026  00312C                     __end_of___wmul:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           prodh	equ	0xFF4
  2033                           prodl	equ	0xFF3
  2034                           postinc0	equ	0xFEE
  2035                           wreg	equ	0xFE8
  2036                           postdec1	equ	0xFE5
  2037                           fsr1l	equ	0xFE1
  2038                           postinc2	equ	0xFDE
  2039                           postdec2	equ	0xFDD
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function ___lwmod *****************
  2045 ;; Defined at:
  2046 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  dividend        2   25[COMRAM] unsigned int 
  2049 ;;  divisor         2   27[COMRAM] unsigned int 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  counter         1   29[COMRAM] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2   25[COMRAM] unsigned int 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;Total ram usage:        5 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    1
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_printf
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text6
  2076  00301C                     __ptext6:
  2077                           	opt stack 0
  2078  00301C                     ___lwmod:
  2079                           	opt stack 28
  2080                           
  2081                           ;incstack = 0
  2082  00301C  501C               	movf	___lwmod@divisor,w,c
  2083  00301E  101D               	iorwf	___lwmod@divisor+1,w,c
  2084  003020  B4D8               	btfsc	status,2,c
  2085  003022  D018               	goto	l728
  2086  003024  0E01               	movlw	1
  2087  003026  6E1E               	movwf	___lwmod@counter,c
  2088  003028  D004               	goto	l2404
  2089  00302A                     l2402:
  2090  00302A  90D8               	bcf	status,0,c
  2091  00302C  361C               	rlcf	___lwmod@divisor,f,c
  2092  00302E  361D               	rlcf	___lwmod@divisor+1,f,c
  2093  003030  2A1E               	incf	___lwmod@counter,f,c
  2094  003032                     l2404:
  2095  003032  AE1D               	btfss	___lwmod@divisor+1,7,c
  2096  003034  D7FA               	goto	l2402
  2097  003036                     l2406:
  2098  003036  501C               	movf	___lwmod@divisor,w,c
  2099  003038  5C1A               	subwf	___lwmod@dividend,w,c
  2100  00303A  501D               	movf	___lwmod@divisor+1,w,c
  2101  00303C  581B               	subwfb	___lwmod@dividend+1,w,c
  2102  00303E  A0D8               	btfss	status,0,c
  2103  003040  D004               	goto	l2410
  2104  003042  501C               	movf	___lwmod@divisor,w,c
  2105  003044  5E1A               	subwf	___lwmod@dividend,f,c
  2106  003046  501D               	movf	___lwmod@divisor+1,w,c
  2107  003048  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2108  00304A                     l2410:
  2109  00304A  90D8               	bcf	status,0,c
  2110  00304C  321D               	rrcf	___lwmod@divisor+1,f,c
  2111  00304E  321C               	rrcf	___lwmod@divisor,f,c
  2112  003050  2E1E               	decfsz	___lwmod@counter,f,c
  2113  003052  D7F1               	goto	l2406
  2114  003054                     l728:
  2115  003054  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2116  003058  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2117  00305C  0012               	return		;funcret
  2118  00305E                     __end_of___lwmod:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           tblptrh	equ	0xFF7
  2122                           tblptrl	equ	0xFF6
  2123                           tablat	equ	0xFF5
  2124                           prodh	equ	0xFF4
  2125                           prodl	equ	0xFF3
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           postdec1	equ	0xFE5
  2129                           fsr1l	equ	0xFE1
  2130                           postinc2	equ	0xFDE
  2131                           postdec2	equ	0xFDD
  2132                           fsr2h	equ	0xFDA
  2133                           fsr2l	equ	0xFD9
  2134                           status	equ	0xFD8
  2135                           
  2136 ;; *************** function ___lwdiv *****************
  2137 ;; Defined at:
  2138 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  dividend        2   18[COMRAM] unsigned int 
  2141 ;;  divisor         2   20[COMRAM] unsigned int 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  quotient        2   22[COMRAM] unsigned int 
  2144 ;;  counter         1   24[COMRAM] unsigned char 
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  2   18[COMRAM] unsigned int 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;Total ram usage:        7 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    1
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_printf
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text7
  2169  002FCA                     __ptext7:
  2170                           	opt stack 0
  2171  002FCA                     ___lwdiv:
  2172                           	opt stack 28
  2173                           
  2174                           ;incstack = 0
  2175  002FCA  0E00               	movlw	0
  2176  002FCC  6E18               	movwf	___lwdiv@quotient+1,c
  2177  002FCE  0E00               	movlw	0
  2178  002FD0  6E17               	movwf	___lwdiv@quotient,c
  2179  002FD2  5015               	movf	___lwdiv@divisor,w,c
  2180  002FD4  1016               	iorwf	___lwdiv@divisor+1,w,c
  2181  002FD6  B4D8               	btfsc	status,2,c
  2182  002FD8  D01C               	goto	l718
  2183  002FDA  0E01               	movlw	1
  2184  002FDC  6E19               	movwf	___lwdiv@counter,c
  2185  002FDE  D004               	goto	l2384
  2186  002FE0                     l2382:
  2187  002FE0  90D8               	bcf	status,0,c
  2188  002FE2  3615               	rlcf	___lwdiv@divisor,f,c
  2189  002FE4  3616               	rlcf	___lwdiv@divisor+1,f,c
  2190  002FE6  2A19               	incf	___lwdiv@counter,f,c
  2191  002FE8                     l2384:
  2192  002FE8  AE16               	btfss	___lwdiv@divisor+1,7,c
  2193  002FEA  D7FA               	goto	l2382
  2194  002FEC                     l2386:
  2195  002FEC  90D8               	bcf	status,0,c
  2196  002FEE  3617               	rlcf	___lwdiv@quotient,f,c
  2197  002FF0  3618               	rlcf	___lwdiv@quotient+1,f,c
  2198  002FF2  5015               	movf	___lwdiv@divisor,w,c
  2199  002FF4  5C13               	subwf	___lwdiv@dividend,w,c
  2200  002FF6  5016               	movf	___lwdiv@divisor+1,w,c
  2201  002FF8  5814               	subwfb	___lwdiv@dividend+1,w,c
  2202  002FFA  A0D8               	btfss	status,0,c
  2203  002FFC  D005               	goto	l2394
  2204  002FFE  5015               	movf	___lwdiv@divisor,w,c
  2205  003000  5E13               	subwf	___lwdiv@dividend,f,c
  2206  003002  5016               	movf	___lwdiv@divisor+1,w,c
  2207  003004  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2208  003006  8017               	bsf	___lwdiv@quotient,0,c
  2209  003008                     l2394:
  2210  003008  90D8               	bcf	status,0,c
  2211  00300A  3216               	rrcf	___lwdiv@divisor+1,f,c
  2212  00300C  3215               	rrcf	___lwdiv@divisor,f,c
  2213  00300E  2E19               	decfsz	___lwdiv@counter,f,c
  2214  003010  D7ED               	goto	l2386
  2215  003012                     l718:
  2216  003012  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
  2217  003016  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2218  00301A  0012               	return		;funcret
  2219  00301C                     __end_of___lwdiv:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           tblptrh	equ	0xFF7
  2223                           tblptrl	equ	0xFF6
  2224                           tablat	equ	0xFF5
  2225                           prodh	equ	0xFF4
  2226                           prodl	equ	0xFF3
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postdec1	equ	0xFE5
  2230                           fsr1l	equ	0xFE1
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _excerciseControl *****************
  2238 ;; Defined at:
  2239 ;;		line 337 in file "main.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  i               2   60[BANK0 ] int 
  2244 ;;  i               2   58[BANK0 ] int 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;Total ram usage:       17 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    5
  2261 ;; This function calls:
  2262 ;;		___awtoft
  2263 ;;		___ftadd
  2264 ;;		___ftge
  2265 ;;		___ftmul
  2266 ;;		___ftsub
  2267 ;;		___fttol
  2268 ;;		___lltoft
  2269 ;;		_limitWheelSpeeds
  2270 ;;		_round
  2271 ;;		_sqrt
  2272 ;;		_wheelVelocity
  2273 ;; This function is called by:
  2274 ;;		_main
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text8
  2279  001032                     __ptext8:
  2280                           	opt stack 0
  2281  001032                     _excerciseControl:
  2282                           	opt stack 25
  2283                           
  2284                           ;main.c: 339: static int leftWheelCommandedSpeed = 35;
  2285                           ;main.c: 340: static int rightWheelCommandedSpeed = 25;
  2286                           ;main.c: 342: switch(event){
  2287                           
  2288                           ;incstack = 0
  2289  001032  EF1B  F00E         	goto	l3390
  2290  001036                     l3260:
  2291                           
  2292                           ;main.c: 347: if(rightWheelMeasuredSpeed < 20)
  2293  001036  0100               	movlb	0	; () banked
  2294  001038  BFCB               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2295  00103A  D008               	goto	l3262
  2296  00103C  0100               	movlb	0	; () banked
  2297  00103E  51CB               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2298  001040  E121               	bnz	l3268
  2299  001042  0E14               	movlw	20
  2300  001044  0100               	movlb	0	; () banked
  2301  001046  5DCA               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2302  001048  B0D8               	btfsc	status,0,c
  2303  00104A  D01C               	goto	l3268
  2304  00104C                     l3262:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 348: {
  2308                           ;main.c: 349: rightWheelCommandedSpeed += 1;
  2309  00104C  0100               	movlb	0	; () banked
  2310  00104E  4BD1               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2311  001050  2BD2               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2312                           
  2313                           ;main.c: 350: leftWheelCommandedSpeed += 1;
  2314  001052  0100               	movlb	0	; () banked
  2315  001054  4BCF               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2316  001056  2BD0               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;main.c: 351: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2320  001058  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2321  00105C  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2322  001060  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2323  001064  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2324  001068  0E72               	movlw	114
  2325  00106A  EC8D  F017         	call	_wheelVelocity
  2326                           
  2327                           ;main.c: 352: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2328  00106E  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2329  001072  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2330  001076  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2331  00107A  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2332  00107E  0E6C               	movlw	108
  2333  001080  EC8D  F017         	call	_wheelVelocity
  2334  001084                     l3268:
  2335                           
  2336                           ;main.c: 353: }
  2337                           ;main.c: 354: if(rightWheelMeasuredSpeed > 70)
  2338  001084  0100               	movlb	0	; () banked
  2339  001086  BFCB               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2340  001088  D02E               	goto	l3276
  2341  00108A  0100               	movlb	0	; () banked
  2342  00108C  51CB               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2343  00108E  E105               	bnz	u3220
  2344  001090  0E47               	movlw	71
  2345  001092  0100               	movlb	0	; () banked
  2346  001094  5DCA               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2347  001096  A0D8               	btfss	status,0,c
  2348  001098  D026               	goto	l3276
  2349  00109A                     u3220:
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;main.c: 355: {
  2353                           ;main.c: 356: rightWheelCommandedSpeed -= 1;
  2354  00109A  0100               	movlb	0	; () banked
  2355  00109C  07D1               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2356  00109E  A0D8               	btfss	status,0,c
  2357  0010A0  07D2               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2358                           
  2359                           ;main.c: 357: leftWheelCommandedSpeed -= 1;
  2360  0010A2  0100               	movlb	0	; () banked
  2361  0010A4  07CF               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2362  0010A6  A0D8               	btfss	status,0,c
  2363  0010A8  07D0               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;main.c: 358: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2367  0010AA  0100               	movlb	0	; () banked
  2368  0010AC  07D1               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2369  0010AE  A0D8               	btfss	status,0,c
  2370  0010B0  07D2               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2371  0010B2  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2372  0010B6  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2373  0010BA  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2374  0010BE  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2375  0010C2  0E72               	movlw	114
  2376  0010C4  EC8D  F017         	call	_wheelVelocity
  2377                           
  2378                           ;main.c: 359: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2379  0010C8  0100               	movlb	0	; () banked
  2380  0010CA  07CF               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2381  0010CC  A0D8               	btfss	status,0,c
  2382  0010CE  07D0               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2383  0010D0  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2384  0010D4  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2385  0010D8  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2386  0010DC  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2387  0010E0  0E6C               	movlw	108
  2388  0010E2  EC8D  F017         	call	_wheelVelocity
  2389  0010E6                     l3276:
  2390                           
  2391                           ;main.c: 360: }
  2392                           ;main.c: 361: if(leftWheelCount > rightWheelCount + 1)
  2393  0010E6  0E01               	movlw	1
  2394  0010E8  0100               	movlb	0	; () banked
  2395  0010EA  25C4               	addwf	_rightWheelCount& (0+255),w,b
  2396  0010EC  0100               	movlb	0	; () banked
  2397  0010EE  6F93               	movwf	??_excerciseControl& (0+255),b
  2398  0010F0  0E00               	movlw	0
  2399  0010F2  0100               	movlb	0	; () banked
  2400  0010F4  21C5               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2401  0010F6  0100               	movlb	0	; () banked
  2402  0010F8  6F94               	movwf	(??_excerciseControl+1)& (0+255),b
  2403  0010FA  0E00               	movlw	0
  2404  0010FC  0100               	movlb	0	; () banked
  2405  0010FE  21C6               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2406  001100  0100               	movlb	0	; () banked
  2407  001102  6F95               	movwf	(??_excerciseControl+2)& (0+255),b
  2408  001104  0E00               	movlw	0
  2409  001106  0100               	movlb	0	; () banked
  2410  001108  21C7               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2411  00110A  0100               	movlb	0	; () banked
  2412  00110C  6F96               	movwf	(??_excerciseControl+3)& (0+255),b
  2413  00110E  0100               	movlb	0	; () banked
  2414  001110  51C0               	movf	_leftWheelCount& (0+255),w,b
  2415  001112  0100               	movlb	0	; () banked
  2416  001114  5D93               	subwf	??_excerciseControl& (0+255),w,b
  2417  001116  0100               	movlb	0	; () banked
  2418  001118  51C1               	movf	(_leftWheelCount+1)& (0+255),w,b
  2419  00111A  0100               	movlb	0	; () banked
  2420  00111C  5994               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2421  00111E  0100               	movlb	0	; () banked
  2422  001120  51C2               	movf	(_leftWheelCount+2)& (0+255),w,b
  2423  001122  0100               	movlb	0	; () banked
  2424  001124  5995               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2425  001126  0100               	movlb	0	; () banked
  2426  001128  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  2427  00112A  0100               	movlb	0	; () banked
  2428  00112C  5996               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2429  00112E  B0D8               	btfsc	status,0,c
  2430  001130  D061               	goto	l3280
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;main.c: 363: {
  2434                           ;main.c: 364: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  2435  001132  C0C4  F093         	movff	_rightWheelCount,??_excerciseControl
  2436  001136  C0C5  F094         	movff	_rightWheelCount+1,??_excerciseControl+1
  2437  00113A  C0C6  F095         	movff	_rightWheelCount+2,??_excerciseControl+2
  2438  00113E  C0C7  F096         	movff	_rightWheelCount+3,??_excerciseControl+3
  2439  001142  0100               	movlb	0	; () banked
  2440  001144  1F93               	comf	??_excerciseControl& (0+255),f,b
  2441  001146  1F94               	comf	(??_excerciseControl+1)& (0+255),f,b
  2442  001148  1F95               	comf	(??_excerciseControl+2)& (0+255),f,b
  2443  00114A  1F96               	comf	(??_excerciseControl+3)& (0+255),f,b
  2444  00114C  2B93               	incf	??_excerciseControl& (0+255),f,b
  2445  00114E  0E00               	movlw	0
  2446  001150  2394               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2447  001152  2395               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2448  001154  2396               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2449  001156  0100               	movlb	0	; () banked
  2450  001158  51C0               	movf	_leftWheelCount& (0+255),w,b
  2451  00115A  0100               	movlb	0	; () banked
  2452  00115C  2593               	addwf	??_excerciseControl& (0+255),w,b
  2453  00115E  6E1B               	movwf	___lltoft@c,c
  2454  001160  0100               	movlb	0	; () banked
  2455  001162  51C1               	movf	(_leftWheelCount+1)& (0+255),w,b
  2456  001164  0100               	movlb	0	; () banked
  2457  001166  2194               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2458  001168  6E1C               	movwf	___lltoft@c+1,c
  2459  00116A  0100               	movlb	0	; () banked
  2460  00116C  51C2               	movf	(_leftWheelCount+2)& (0+255),w,b
  2461  00116E  0100               	movlb	0	; () banked
  2462  001170  2195               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2463  001172  6E1D               	movwf	___lltoft@c+2,c
  2464  001174  0100               	movlb	0	; () banked
  2465  001176  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  2466  001178  0100               	movlb	0	; () banked
  2467  00117A  2196               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2468  00117C  6E1E               	movwf	___lltoft@c+3,c
  2469  00117E  EC5F  F017         	call	___lltoft	;wreg free
  2470  001182  C01B  F03C         	movff	?___lltoft,sqrt@a
  2471  001186  C01C  F03D         	movff	?___lltoft+1,sqrt@a+1
  2472  00118A  C01D  F03E         	movff	?___lltoft+2,sqrt@a+2
  2473  00118E  ECEC  F011         	call	_sqrt	;wreg free
  2474  001192  C03C  F09E         	movff	?_sqrt,_excerciseControl$2063
  2475  001196  C03D  F09F         	movff	?_sqrt+1,_excerciseControl$2063+1
  2476  00119A  C03E  F0A0         	movff	?_sqrt+2,_excerciseControl$2063+2
  2477                           
  2478                           ;main.c: 363: {
  2479                           ;main.c: 364: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  2480  00119E  C09E  F033         	movff	_excerciseControl$2063,___ftsub@f2
  2481  0011A2  C09F  F034         	movff	_excerciseControl$2063+1,___ftsub@f2+1
  2482  0011A6  C0A0  F035         	movff	_excerciseControl$2063+2,___ftsub@f2+2
  2483  0011AA  C0CD  F01B         	movff	_speedCompensation,___awtoft@c
  2484  0011AE  C0CE  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  2485  0011B2  EC4F  F018         	call	___awtoft	;wreg free
  2486  0011B6  C01B  F030         	movff	?___awtoft,___ftsub@f1
  2487  0011BA  C01C  F031         	movff	?___awtoft+1,___ftsub@f1+1
  2488  0011BE  C01D  F032         	movff	?___awtoft+2,___ftsub@f1+2
  2489  0011C2  EC2F  F018         	call	___ftsub	;wreg free
  2490  0011C6  C030  F042         	movff	?___ftsub,___fttol@f1
  2491  0011CA  C031  F043         	movff	?___ftsub+1,___fttol@f1+1
  2492  0011CE  C032  F044         	movff	?___ftsub+2,___fttol@f1+2
  2493  0011D2  ECBB  F012         	call	___fttol	;wreg free
  2494  0011D6  C042  F0CD         	movff	?___fttol,_speedCompensation
  2495  0011DA  C043  F0CE         	movff	?___fttol+1,_speedCompensation+1
  2496                           
  2497                           ;main.c: 365: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2498  0011DE  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2499  0011E2  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2500  0011E6  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2501  0011EA  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2502  0011EE  0E6C               	movlw	108
  2503  0011F0  EC8D  F017         	call	_wheelVelocity
  2504  0011F4                     l3280:
  2505                           
  2506                           ;main.c: 366: }
  2507                           ;main.c: 367: if(rightWheelCount > (leftWheelCount + 1) )
  2508  0011F4  0E01               	movlw	1
  2509  0011F6  0100               	movlb	0	; () banked
  2510  0011F8  25C0               	addwf	_leftWheelCount& (0+255),w,b
  2511  0011FA  0100               	movlb	0	; () banked
  2512  0011FC  6F93               	movwf	??_excerciseControl& (0+255),b
  2513  0011FE  0E00               	movlw	0
  2514  001200  0100               	movlb	0	; () banked
  2515  001202  21C1               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  2516  001204  0100               	movlb	0	; () banked
  2517  001206  6F94               	movwf	(??_excerciseControl+1)& (0+255),b
  2518  001208  0E00               	movlw	0
  2519  00120A  0100               	movlb	0	; () banked
  2520  00120C  21C2               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  2521  00120E  0100               	movlb	0	; () banked
  2522  001210  6F95               	movwf	(??_excerciseControl+2)& (0+255),b
  2523  001212  0E00               	movlw	0
  2524  001214  0100               	movlb	0	; () banked
  2525  001216  21C3               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  2526  001218  0100               	movlb	0	; () banked
  2527  00121A  6F96               	movwf	(??_excerciseControl+3)& (0+255),b
  2528  00121C  0100               	movlb	0	; () banked
  2529  00121E  51C4               	movf	_rightWheelCount& (0+255),w,b
  2530  001220  0100               	movlb	0	; () banked
  2531  001222  5D93               	subwf	??_excerciseControl& (0+255),w,b
  2532  001224  0100               	movlb	0	; () banked
  2533  001226  51C5               	movf	(_rightWheelCount+1)& (0+255),w,b
  2534  001228  0100               	movlb	0	; () banked
  2535  00122A  5994               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2536  00122C  0100               	movlb	0	; () banked
  2537  00122E  51C6               	movf	(_rightWheelCount+2)& (0+255),w,b
  2538  001230  0100               	movlb	0	; () banked
  2539  001232  5995               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2540  001234  0100               	movlb	0	; () banked
  2541  001236  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  2542  001238  0100               	movlb	0	; () banked
  2543  00123A  5996               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2544  00123C  B0D8               	btfsc	status,0,c
  2545  00123E  D075               	goto	l3284
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;main.c: 369: {
  2549                           ;main.c: 370: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2550  001240  C0C0  F093         	movff	_leftWheelCount,??_excerciseControl
  2551  001244  C0C1  F094         	movff	_leftWheelCount+1,??_excerciseControl+1
  2552  001248  C0C2  F095         	movff	_leftWheelCount+2,??_excerciseControl+2
  2553  00124C  C0C3  F096         	movff	_leftWheelCount+3,??_excerciseControl+3
  2554  001250  0100               	movlb	0	; () banked
  2555  001252  1F93               	comf	??_excerciseControl& (0+255),f,b
  2556  001254  1F94               	comf	(??_excerciseControl+1)& (0+255),f,b
  2557  001256  1F95               	comf	(??_excerciseControl+2)& (0+255),f,b
  2558  001258  1F96               	comf	(??_excerciseControl+3)& (0+255),f,b
  2559  00125A  2B93               	incf	??_excerciseControl& (0+255),f,b
  2560  00125C  0E00               	movlw	0
  2561  00125E  2394               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2562  001260  2395               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2563  001262  2396               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  2564  001264  0100               	movlb	0	; () banked
  2565  001266  51C4               	movf	_rightWheelCount& (0+255),w,b
  2566  001268  0100               	movlb	0	; () banked
  2567  00126A  2593               	addwf	??_excerciseControl& (0+255),w,b
  2568  00126C  6E1B               	movwf	___lltoft@c,c
  2569  00126E  0100               	movlb	0	; () banked
  2570  001270  51C5               	movf	(_rightWheelCount+1)& (0+255),w,b
  2571  001272  0100               	movlb	0	; () banked
  2572  001274  2194               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  2573  001276  6E1C               	movwf	___lltoft@c+1,c
  2574  001278  0100               	movlb	0	; () banked
  2575  00127A  51C6               	movf	(_rightWheelCount+2)& (0+255),w,b
  2576  00127C  0100               	movlb	0	; () banked
  2577  00127E  2195               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  2578  001280  6E1D               	movwf	___lltoft@c+2,c
  2579  001282  0100               	movlb	0	; () banked
  2580  001284  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  2581  001286  0100               	movlb	0	; () banked
  2582  001288  2196               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  2583  00128A  6E1E               	movwf	___lltoft@c+3,c
  2584  00128C  EC5F  F017         	call	___lltoft	;wreg free
  2585  001290  C01B  F03C         	movff	?___lltoft,sqrt@a
  2586  001294  C01C  F03D         	movff	?___lltoft+1,sqrt@a+1
  2587  001298  C01D  F03E         	movff	?___lltoft+2,sqrt@a+2
  2588  00129C  ECEC  F011         	call	_sqrt	;wreg free
  2589  0012A0  C03C  F0A1         	movff	?_sqrt,_excerciseControl$2064
  2590  0012A4  C03D  F0A2         	movff	?_sqrt+1,_excerciseControl$2064+1
  2591  0012A8  C03E  F0A3         	movff	?_sqrt+2,_excerciseControl$2064+2
  2592                           
  2593                           ;main.c: 369: {
  2594                           ;main.c: 370: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2595  0012AC  0E00               	movlw	0
  2596  0012AE  6E27               	movwf	___ftadd@f2,c
  2597  0012B0  0EA0               	movlw	160
  2598  0012B2  6E28               	movwf	___ftadd@f2+1,c
  2599  0012B4  0E40               	movlw	64
  2600  0012B6  6E29               	movwf	___ftadd@f2+2,c
  2601  0012B8  C0A1  F024         	movff	_excerciseControl$2064,___ftadd@f1
  2602  0012BC  C0A2  F025         	movff	_excerciseControl$2064+1,___ftadd@f1+1
  2603  0012C0  C0A3  F026         	movff	_excerciseControl$2064+2,___ftadd@f1+2
  2604  0012C4  EC16  F011         	call	___ftadd	;wreg free
  2605  0012C8  C024  F097         	movff	?___ftadd,_excerciseControl$2065
  2606  0012CC  C025  F098         	movff	?___ftadd+1,_excerciseControl$2065+1
  2607  0012D0  C026  F099         	movff	?___ftadd+2,_excerciseControl$2065+2
  2608                           
  2609                           ;main.c: 369: {
  2610                           ;main.c: 370: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  2611  0012D4  C097  F027         	movff	_excerciseControl$2065,___ftadd@f2
  2612  0012D8  C098  F028         	movff	_excerciseControl$2065+1,___ftadd@f2+1
  2613  0012DC  C099  F029         	movff	_excerciseControl$2065+2,___ftadd@f2+2
  2614  0012E0  C0CD  F01B         	movff	_speedCompensation,___awtoft@c
  2615  0012E4  C0CE  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  2616  0012E8  EC4F  F018         	call	___awtoft	;wreg free
  2617  0012EC  C01B  F024         	movff	?___awtoft,___ftadd@f1
  2618  0012F0  C01C  F025         	movff	?___awtoft+1,___ftadd@f1+1
  2619  0012F4  C01D  F026         	movff	?___awtoft+2,___ftadd@f1+2
  2620  0012F8  EC16  F011         	call	___ftadd	;wreg free
  2621  0012FC  C024  F042         	movff	?___ftadd,___fttol@f1
  2622  001300  C025  F043         	movff	?___ftadd+1,___fttol@f1+1
  2623  001304  C026  F044         	movff	?___ftadd+2,___fttol@f1+2
  2624  001308  ECBB  F012         	call	___fttol	;wreg free
  2625  00130C  C042  F0CD         	movff	?___fttol,_speedCompensation
  2626  001310  C043  F0CE         	movff	?___fttol+1,_speedCompensation+1
  2627                           
  2628                           ;main.c: 371: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2629  001314  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2630  001318  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2631  00131C  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2632  001320  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2633  001324  0E6C               	movlw	108
  2634  001326  EC8D  F017         	call	_wheelVelocity
  2635  00132A                     l3284:
  2636                           
  2637                           ;main.c: 372: }
  2638                           ;main.c: 374: if(rightWheelCount >= 115)
  2639  00132A  0100               	movlb	0	; () banked
  2640  00132C  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  2641  00132E  0100               	movlb	0	; () banked
  2642  001330  11C6               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  2643  001332  0100               	movlb	0	; () banked
  2644  001334  11C5               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  2645  001336  E105               	bnz	u3250
  2646  001338  0E73               	movlw	115
  2647  00133A  0100               	movlb	0	; () banked
  2648  00133C  5DC4               	subwf	_rightWheelCount& (0+255),w,b
  2649  00133E  A0D8               	btfss	status,0,c
  2650  001340  D091               	goto	l3316
  2651  001342                     u3250:
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 375: {
  2655                           ;main.c: 376: if(leftWheelCount >= 115)
  2656  001342  0100               	movlb	0	; () banked
  2657  001344  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  2658  001346  0100               	movlb	0	; () banked
  2659  001348  11C2               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  2660  00134A  0100               	movlb	0	; () banked
  2661  00134C  11C1               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  2662  00134E  E105               	bnz	u3260
  2663  001350  0E73               	movlw	115
  2664  001352  0100               	movlb	0	; () banked
  2665  001354  5DC0               	subwf	_leftWheelCount& (0+255),w,b
  2666  001356  A0D8               	btfss	status,0,c
  2667  001358  D060               	goto	l3310
  2668  00135A                     u3260:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 377: {
  2672                           ;main.c: 378: rightWheelCount = 0;
  2673  00135A  0E00               	movlw	0
  2674  00135C  0100               	movlb	0	; () banked
  2675  00135E  6FC4               	movwf	_rightWheelCount& (0+255),b
  2676  001360  0E00               	movlw	0
  2677  001362  6FC5               	movwf	(_rightWheelCount+1)& (0+255),b
  2678  001364  0E00               	movlw	0
  2679  001366  6FC6               	movwf	(_rightWheelCount+2)& (0+255),b
  2680  001368  0E00               	movlw	0
  2681  00136A  6FC7               	movwf	(_rightWheelCount+3)& (0+255),b
  2682                           
  2683                           ;main.c: 379: leftWheelCount = 0;
  2684  00136C  0E00               	movlw	0
  2685  00136E  0100               	movlb	0	; () banked
  2686  001370  6FC0               	movwf	_leftWheelCount& (0+255),b
  2687  001372  0E00               	movlw	0
  2688  001374  6FC1               	movwf	(_leftWheelCount+1)& (0+255),b
  2689  001376  0E00               	movlw	0
  2690  001378  6FC2               	movwf	(_leftWheelCount+2)& (0+255),b
  2691  00137A  0E00               	movlw	0
  2692  00137C  6FC3               	movwf	(_leftWheelCount+3)& (0+255),b
  2693                           
  2694                           ;main.c: 380: leftWheelCommandedSpeed = 0;
  2695  00137E  0E00               	movlw	0
  2696  001380  0100               	movlb	0	; () banked
  2697  001382  6FD0               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2698  001384  0E00               	movlw	0
  2699  001386  6FCF               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2700                           
  2701                           ;main.c: 381: rightWheelCommandedSpeed = 0;
  2702  001388  0E00               	movlw	0
  2703  00138A  0100               	movlb	0	; () banked
  2704  00138C  6FD2               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2705  00138E  0E00               	movlw	0
  2706  001390  6FD1               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 382: event += 1;
  2710  001392  0100               	movlb	0	; () banked
  2711  001394  2BCC               	incf	_event& (0+255),f,b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 383: speedCompensation = 0;
  2715  001396  0E00               	movlw	0
  2716  001398  0100               	movlb	0	; () banked
  2717  00139A  6FCE               	movwf	(_speedCompensation+1)& (0+255),b
  2718  00139C  0E00               	movlw	0
  2719  00139E  6FCD               	movwf	_speedCompensation& (0+255),b
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;main.c: 384: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2723  0013A0  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2724  0013A4  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2725  0013A8  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2726  0013AC  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2727  0013B0  0E72               	movlw	114
  2728  0013B2  EC8D  F017         	call	_wheelVelocity
  2729                           
  2730                           ;main.c: 385: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  2731  0013B6  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2732  0013BA  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2733  0013BE  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2734  0013C2  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2735  0013C6  0E6C               	movlw	108
  2736  0013C8  EC8D  F017         	call	_wheelVelocity
  2737                           
  2738                           ;main.c: 386: for(int i = 0; i<20 ; i++)
  2739  0013CC  0E00               	movlw	0
  2740  0013CE  0100               	movlb	0	; () banked
  2741  0013D0  6F9B               	movwf	(excerciseControl@i+1)& (0+255),b
  2742  0013D2  0E00               	movlw	0
  2743  0013D4  6F9A               	movwf	excerciseControl@i& (0+255),b
  2744  0013D6                     l3300:
  2745                           
  2746                           ; BSR set to: 0
  2747  0013D6  0100               	movlb	0	; () banked
  2748  0013D8  BF9B               	btfsc	(excerciseControl@i+1)& (0+255),7,b
  2749  0013DA  D008               	goto	l3304
  2750  0013DC  0100               	movlb	0	; () banked
  2751  0013DE  519B               	movf	(excerciseControl@i+1)& (0+255),w,b
  2752  0013E0  E111               	bnz	l3308
  2753  0013E2  0E14               	movlw	20
  2754  0013E4  0100               	movlb	0	; () banked
  2755  0013E6  5D9A               	subwf	excerciseControl@i& (0+255),w,b
  2756  0013E8  B0D8               	btfsc	status,0,c
  2757  0013EA  D00C               	goto	l3308
  2758  0013EC                     l3304:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 387: {
  2762                           ;main.c: 388: _delay((unsigned long)((50)*(8000000/4000.0)));
  2763  0013EC  0E82               	movlw	130
  2764  0013EE  0100               	movlb	0	; () banked
  2765  0013F0  6F93               	movwf	??_excerciseControl& (0+255),b
  2766  0013F2  0EDE               	movlw	222
  2767  0013F4                     u3497:
  2768  0013F4  2EE8               	decfsz	wreg,f,c
  2769  0013F6  D7FE               	goto	u3497
  2770  0013F8  2F93               	decfsz	??_excerciseControl& (0+255),f,b
  2771  0013FA  D7FC               	goto	u3497
  2772  0013FC  0100               	movlb	0	; () banked
  2773  0013FE  4B9A               	infsnz	excerciseControl@i& (0+255),f,b
  2774  001400  2B9B               	incf	(excerciseControl@i+1)& (0+255),f,b
  2775  001402  D7E9               	goto	l3300
  2776  001404                     l3308:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 389: }
  2780                           ;main.c: 390: rightWheelCommandedSpeed = 25;
  2781  001404  0E00               	movlw	0
  2782  001406  0100               	movlb	0	; () banked
  2783  001408  6FD2               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2784  00140A  0E19               	movlw	25
  2785  00140C  6FD1               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2786                           
  2787                           ;main.c: 391: leftWheelCommandedSpeed = -30;
  2788  00140E  0EFF               	movlw	255
  2789  001410  0100               	movlb	0	; () banked
  2790  001412  6FD0               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2791  001414  0EE2               	movlw	226
  2792  001416  6FCF               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2793                           
  2794                           ;main.c: 392: }
  2795  001418  D025               	goto	l3316
  2796  00141A                     l3310:
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;main.c: 393: else
  2800                           ;main.c: 394: {
  2801                           ;main.c: 395: rightWheelCommandedSpeed = 0;
  2802  00141A  0E00               	movlw	0
  2803  00141C  0100               	movlb	0	; () banked
  2804  00141E  6FD2               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  2805  001420  0E00               	movlw	0
  2806  001422  6FD1               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  2807                           
  2808                           ;main.c: 396: leftWheelCommandedSpeed = 30;
  2809  001424  0E00               	movlw	0
  2810  001426  0100               	movlb	0	; () banked
  2811  001428  6FD0               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  2812  00142A  0E1E               	movlw	30
  2813  00142C  6FCF               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  2814                           
  2815                           ;main.c: 397: speedCompensation = 0;
  2816  00142E  0E00               	movlw	0
  2817  001430  0100               	movlb	0	; () banked
  2818  001432  6FCE               	movwf	(_speedCompensation+1)& (0+255),b
  2819  001434  0E00               	movlw	0
  2820  001436  6FCD               	movwf	_speedCompensation& (0+255),b
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 398: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2824  001438  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2825  00143C  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2826  001440  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2827  001444  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2828  001448  0E72               	movlw	114
  2829  00144A  EC8D  F017         	call	_wheelVelocity
  2830                           
  2831                           ;main.c: 399: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  2832  00144E  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2833  001452  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2834  001456  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2835  00145A  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2836  00145E  0E72               	movlw	114
  2837  001460  EC8D  F017         	call	_wheelVelocity
  2838  001464                     l3316:
  2839                           
  2840                           ;main.c: 400: }
  2841                           ;main.c: 403: }
  2842                           ;main.c: 405: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  2843  001464  0ECF               	movlw	low excerciseControl@leftWheelCommandedSpeed
  2844  001466  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  2845  001468  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  2846  00146A  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  2847  00146C  0ED1               	movlw	low excerciseControl@rightWheelCommandedSpeed
  2848  00146E  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  2849  001470  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  2850  001472  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  2851  001474  0ECD               	movlw	low _speedCompensation
  2852  001476  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  2853  001478  0E00               	movlw	high _speedCompensation
  2854  00147A  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  2855  00147C  EC52  F013         	call	_limitWheelSpeeds	;wreg free
  2856                           
  2857                           ;main.c: 406: break;
  2858  001480  0012               	return	
  2859  001482                     l3318:
  2860                           
  2861                           ;main.c: 413: if(rightWheelMeasuredSpeed < 15)
  2862  001482  0100               	movlb	0	; () banked
  2863  001484  BFCB               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2864  001486  D008               	goto	l3320
  2865  001488  0100               	movlb	0	; () banked
  2866  00148A  51CB               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2867  00148C  E122               	bnz	l3322
  2868  00148E  0E0F               	movlw	15
  2869  001490  0100               	movlb	0	; () banked
  2870  001492  5DCA               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2871  001494  B0D8               	btfsc	status,0,c
  2872  001496  D01D               	goto	l3322
  2873  001498                     l3320:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 414: {
  2877                           ;main.c: 415: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  2878  001498  0100               	movlb	0	; () banked
  2879  00149A  4BD1               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2880  00149C  2BD2               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2881  00149E  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2882  0014A2  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2883  0014A6  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2884  0014AA  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2885  0014AE  0E72               	movlw	114
  2886  0014B0  EC8D  F017         	call	_wheelVelocity
  2887                           
  2888                           ;main.c: 416: wheelVelocity('l', --leftWheelCommandedSpeed, speedCompensation);
  2889  0014B4  0100               	movlb	0	; () banked
  2890  0014B6  07CF               	decf	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2891  0014B8  A0D8               	btfss	status,0,c
  2892  0014BA  07D0               	decf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2893  0014BC  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2894  0014C0  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2895  0014C4  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2896  0014C8  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2897  0014CC  0E6C               	movlw	108
  2898  0014CE  EC8D  F017         	call	_wheelVelocity
  2899  0014D2                     l3322:
  2900                           
  2901                           ;main.c: 417: }
  2902                           ;main.c: 418: if(rightWheelMeasuredSpeed > 30)
  2903  0014D2  0100               	movlb	0	; () banked
  2904  0014D4  BFCB               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  2905  0014D6  D025               	goto	l3326
  2906  0014D8  0100               	movlb	0	; () banked
  2907  0014DA  51CB               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  2908  0014DC  E105               	bnz	u3300
  2909  0014DE  0E1F               	movlw	31
  2910  0014E0  0100               	movlb	0	; () banked
  2911  0014E2  5DCA               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  2912  0014E4  A0D8               	btfss	status,0,c
  2913  0014E6  D01D               	goto	l3326
  2914  0014E8                     u3300:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;main.c: 419: {
  2918                           ;main.c: 420: wheelVelocity('r', --rightWheelCommandedSpeed, speedCompensation);
  2919  0014E8  0100               	movlb	0	; () banked
  2920  0014EA  07D1               	decf	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  2921  0014EC  A0D8               	btfss	status,0,c
  2922  0014EE  07D2               	decf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  2923  0014F0  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  2924  0014F4  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  2925  0014F8  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2926  0014FC  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2927  001500  0E72               	movlw	114
  2928  001502  EC8D  F017         	call	_wheelVelocity
  2929                           
  2930                           ;main.c: 421: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  2931  001506  0100               	movlb	0	; () banked
  2932  001508  4BCF               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  2933  00150A  2BD0               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  2934  00150C  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  2935  001510  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  2936  001514  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  2937  001518  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  2938  00151C  0E6C               	movlw	108
  2939  00151E  EC8D  F017         	call	_wheelVelocity
  2940  001522                     l3326:
  2941                           
  2942                           ;main.c: 422: }
  2943                           ;main.c: 423: if(leftWheelCount > (rightWheelCount + 1))
  2944  001522  0E01               	movlw	1
  2945  001524  0100               	movlb	0	; () banked
  2946  001526  25C4               	addwf	_rightWheelCount& (0+255),w,b
  2947  001528  0100               	movlb	0	; () banked
  2948  00152A  6F93               	movwf	??_excerciseControl& (0+255),b
  2949  00152C  0E00               	movlw	0
  2950  00152E  0100               	movlb	0	; () banked
  2951  001530  21C5               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  2952  001532  0100               	movlb	0	; () banked
  2953  001534  6F94               	movwf	(??_excerciseControl+1)& (0+255),b
  2954  001536  0E00               	movlw	0
  2955  001538  0100               	movlb	0	; () banked
  2956  00153A  21C6               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  2957  00153C  0100               	movlb	0	; () banked
  2958  00153E  6F95               	movwf	(??_excerciseControl+2)& (0+255),b
  2959  001540  0E00               	movlw	0
  2960  001542  0100               	movlb	0	; () banked
  2961  001544  21C7               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  2962  001546  0100               	movlb	0	; () banked
  2963  001548  6F96               	movwf	(??_excerciseControl+3)& (0+255),b
  2964  00154A  0100               	movlb	0	; () banked
  2965  00154C  51C0               	movf	_leftWheelCount& (0+255),w,b
  2966  00154E  0100               	movlb	0	; () banked
  2967  001550  5D93               	subwf	??_excerciseControl& (0+255),w,b
  2968  001552  0100               	movlb	0	; () banked
  2969  001554  51C1               	movf	(_leftWheelCount+1)& (0+255),w,b
  2970  001556  0100               	movlb	0	; () banked
  2971  001558  5994               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  2972  00155A  0100               	movlb	0	; () banked
  2973  00155C  51C2               	movf	(_leftWheelCount+2)& (0+255),w,b
  2974  00155E  0100               	movlb	0	; () banked
  2975  001560  5995               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  2976  001562  0100               	movlb	0	; () banked
  2977  001564  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  2978  001566  0100               	movlb	0	; () banked
  2979  001568  5996               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  2980  00156A  B0D8               	btfsc	status,0,c
  2981  00156C  D061               	goto	l3330
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;main.c: 425: {
  2985                           ;main.c: 426: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount));
  2986  00156E  C0C4  F093         	movff	_rightWheelCount,??_excerciseControl
  2987  001572  C0C5  F094         	movff	_rightWheelCount+1,??_excerciseControl+1
  2988  001576  C0C6  F095         	movff	_rightWheelCount+2,??_excerciseControl+2
  2989  00157A  C0C7  F096         	movff	_rightWheelCount+3,??_excerciseControl+3
  2990  00157E  0100               	movlb	0	; () banked
  2991  001580  1F93               	comf	??_excerciseControl& (0+255),f,b
  2992  001582  1F94               	comf	(??_excerciseControl+1)& (0+255),f,b
  2993  001584  1F95               	comf	(??_excerciseControl+2)& (0+255),f,b
  2994  001586  1F96               	comf	(??_excerciseControl+3)& (0+255),f,b
  2995  001588  2B93               	incf	??_excerciseControl& (0+255),f,b
  2996  00158A  0E00               	movlw	0
  2997  00158C  2394               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  2998  00158E  2395               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  2999  001590  2396               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3000  001592  0100               	movlb	0	; () banked
  3001  001594  51C0               	movf	_leftWheelCount& (0+255),w,b
  3002  001596  0100               	movlb	0	; () banked
  3003  001598  2593               	addwf	??_excerciseControl& (0+255),w,b
  3004  00159A  6E1B               	movwf	___lltoft@c,c
  3005  00159C  0100               	movlb	0	; () banked
  3006  00159E  51C1               	movf	(_leftWheelCount+1)& (0+255),w,b
  3007  0015A0  0100               	movlb	0	; () banked
  3008  0015A2  2194               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3009  0015A4  6E1C               	movwf	___lltoft@c+1,c
  3010  0015A6  0100               	movlb	0	; () banked
  3011  0015A8  51C2               	movf	(_leftWheelCount+2)& (0+255),w,b
  3012  0015AA  0100               	movlb	0	; () banked
  3013  0015AC  2195               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3014  0015AE  6E1D               	movwf	___lltoft@c+2,c
  3015  0015B0  0100               	movlb	0	; () banked
  3016  0015B2  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  3017  0015B4  0100               	movlb	0	; () banked
  3018  0015B6  2196               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3019  0015B8  6E1E               	movwf	___lltoft@c+3,c
  3020  0015BA  EC5F  F017         	call	___lltoft	;wreg free
  3021  0015BE  C01B  F03C         	movff	?___lltoft,sqrt@a
  3022  0015C2  C01C  F03D         	movff	?___lltoft+1,sqrt@a+1
  3023  0015C6  C01D  F03E         	movff	?___lltoft+2,sqrt@a+2
  3024  0015CA  ECEC  F011         	call	_sqrt	;wreg free
  3025  0015CE  C03C  F09E         	movff	?_sqrt,_excerciseControl$2063
  3026  0015D2  C03D  F09F         	movff	?_sqrt+1,_excerciseControl$2063+1
  3027  0015D6  C03E  F0A0         	movff	?_sqrt+2,_excerciseControl$2063+2
  3028                           
  3029                           ;main.c: 425: {
  3030                           ;main.c: 426: speedCompensation -= (sqrt(leftWheelCount - rightWheelCount));
  3031  0015DA  C09E  F033         	movff	_excerciseControl$2063,___ftsub@f2
  3032  0015DE  C09F  F034         	movff	_excerciseControl$2063+1,___ftsub@f2+1
  3033  0015E2  C0A0  F035         	movff	_excerciseControl$2063+2,___ftsub@f2+2
  3034  0015E6  C0CD  F01B         	movff	_speedCompensation,___awtoft@c
  3035  0015EA  C0CE  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3036  0015EE  EC4F  F018         	call	___awtoft	;wreg free
  3037  0015F2  C01B  F030         	movff	?___awtoft,___ftsub@f1
  3038  0015F6  C01C  F031         	movff	?___awtoft+1,___ftsub@f1+1
  3039  0015FA  C01D  F032         	movff	?___awtoft+2,___ftsub@f1+2
  3040  0015FE  EC2F  F018         	call	___ftsub	;wreg free
  3041  001602  C030  F042         	movff	?___ftsub,___fttol@f1
  3042  001606  C031  F043         	movff	?___ftsub+1,___fttol@f1+1
  3043  00160A  C032  F044         	movff	?___ftsub+2,___fttol@f1+2
  3044  00160E  ECBB  F012         	call	___fttol	;wreg free
  3045  001612  C042  F0CD         	movff	?___fttol,_speedCompensation
  3046  001616  C043  F0CE         	movff	?___fttol+1,_speedCompensation+1
  3047                           
  3048                           ;main.c: 427: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3049  00161A  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3050  00161E  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3051  001622  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3052  001626  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3053  00162A  0E6C               	movlw	108
  3054  00162C  EC8D  F017         	call	_wheelVelocity
  3055  001630                     l3330:
  3056                           
  3057                           ;main.c: 428: }
  3058                           ;main.c: 429: if(rightWheelCount > leftWheelCount + 1)
  3059  001630  0E01               	movlw	1
  3060  001632  0100               	movlb	0	; () banked
  3061  001634  25C0               	addwf	_leftWheelCount& (0+255),w,b
  3062  001636  0100               	movlb	0	; () banked
  3063  001638  6F93               	movwf	??_excerciseControl& (0+255),b
  3064  00163A  0E00               	movlw	0
  3065  00163C  0100               	movlb	0	; () banked
  3066  00163E  21C1               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  3067  001640  0100               	movlb	0	; () banked
  3068  001642  6F94               	movwf	(??_excerciseControl+1)& (0+255),b
  3069  001644  0E00               	movlw	0
  3070  001646  0100               	movlb	0	; () banked
  3071  001648  21C2               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  3072  00164A  0100               	movlb	0	; () banked
  3073  00164C  6F95               	movwf	(??_excerciseControl+2)& (0+255),b
  3074  00164E  0E00               	movlw	0
  3075  001650  0100               	movlb	0	; () banked
  3076  001652  21C3               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  3077  001654  0100               	movlb	0	; () banked
  3078  001656  6F96               	movwf	(??_excerciseControl+3)& (0+255),b
  3079  001658  0100               	movlb	0	; () banked
  3080  00165A  51C4               	movf	_rightWheelCount& (0+255),w,b
  3081  00165C  0100               	movlb	0	; () banked
  3082  00165E  5D93               	subwf	??_excerciseControl& (0+255),w,b
  3083  001660  0100               	movlb	0	; () banked
  3084  001662  51C5               	movf	(_rightWheelCount+1)& (0+255),w,b
  3085  001664  0100               	movlb	0	; () banked
  3086  001666  5994               	subwfb	(??_excerciseControl+1)& (0+255),w,b
  3087  001668  0100               	movlb	0	; () banked
  3088  00166A  51C6               	movf	(_rightWheelCount+2)& (0+255),w,b
  3089  00166C  0100               	movlb	0	; () banked
  3090  00166E  5995               	subwfb	(??_excerciseControl+2)& (0+255),w,b
  3091  001670  0100               	movlb	0	; () banked
  3092  001672  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  3093  001674  0100               	movlb	0	; () banked
  3094  001676  5996               	subwfb	(??_excerciseControl+3)& (0+255),w,b
  3095  001678  B0D8               	btfsc	status,0,c
  3096  00167A  D075               	goto	l3334
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;main.c: 431: {
  3100                           ;main.c: 432: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3101  00167C  C0C0  F093         	movff	_leftWheelCount,??_excerciseControl
  3102  001680  C0C1  F094         	movff	_leftWheelCount+1,??_excerciseControl+1
  3103  001684  C0C2  F095         	movff	_leftWheelCount+2,??_excerciseControl+2
  3104  001688  C0C3  F096         	movff	_leftWheelCount+3,??_excerciseControl+3
  3105  00168C  0100               	movlb	0	; () banked
  3106  00168E  1F93               	comf	??_excerciseControl& (0+255),f,b
  3107  001690  1F94               	comf	(??_excerciseControl+1)& (0+255),f,b
  3108  001692  1F95               	comf	(??_excerciseControl+2)& (0+255),f,b
  3109  001694  1F96               	comf	(??_excerciseControl+3)& (0+255),f,b
  3110  001696  2B93               	incf	??_excerciseControl& (0+255),f,b
  3111  001698  0E00               	movlw	0
  3112  00169A  2394               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3113  00169C  2395               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3114  00169E  2396               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3115  0016A0  0100               	movlb	0	; () banked
  3116  0016A2  51C4               	movf	_rightWheelCount& (0+255),w,b
  3117  0016A4  0100               	movlb	0	; () banked
  3118  0016A6  2593               	addwf	??_excerciseControl& (0+255),w,b
  3119  0016A8  6E1B               	movwf	___lltoft@c,c
  3120  0016AA  0100               	movlb	0	; () banked
  3121  0016AC  51C5               	movf	(_rightWheelCount+1)& (0+255),w,b
  3122  0016AE  0100               	movlb	0	; () banked
  3123  0016B0  2194               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3124  0016B2  6E1C               	movwf	___lltoft@c+1,c
  3125  0016B4  0100               	movlb	0	; () banked
  3126  0016B6  51C6               	movf	(_rightWheelCount+2)& (0+255),w,b
  3127  0016B8  0100               	movlb	0	; () banked
  3128  0016BA  2195               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3129  0016BC  6E1D               	movwf	___lltoft@c+2,c
  3130  0016BE  0100               	movlb	0	; () banked
  3131  0016C0  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  3132  0016C2  0100               	movlb	0	; () banked
  3133  0016C4  2196               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3134  0016C6  6E1E               	movwf	___lltoft@c+3,c
  3135  0016C8  EC5F  F017         	call	___lltoft	;wreg free
  3136  0016CC  C01B  F03C         	movff	?___lltoft,sqrt@a
  3137  0016D0  C01C  F03D         	movff	?___lltoft+1,sqrt@a+1
  3138  0016D4  C01D  F03E         	movff	?___lltoft+2,sqrt@a+2
  3139  0016D8  ECEC  F011         	call	_sqrt	;wreg free
  3140  0016DC  C03C  F0A1         	movff	?_sqrt,_excerciseControl$2064
  3141  0016E0  C03D  F0A2         	movff	?_sqrt+1,_excerciseControl$2064+1
  3142  0016E4  C03E  F0A3         	movff	?_sqrt+2,_excerciseControl$2064+2
  3143                           
  3144                           ;main.c: 431: {
  3145                           ;main.c: 432: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3146  0016E8  0E00               	movlw	0
  3147  0016EA  6E27               	movwf	___ftadd@f2,c
  3148  0016EC  0EA0               	movlw	160
  3149  0016EE  6E28               	movwf	___ftadd@f2+1,c
  3150  0016F0  0E40               	movlw	64
  3151  0016F2  6E29               	movwf	___ftadd@f2+2,c
  3152  0016F4  C0A1  F024         	movff	_excerciseControl$2064,___ftadd@f1
  3153  0016F8  C0A2  F025         	movff	_excerciseControl$2064+1,___ftadd@f1+1
  3154  0016FC  C0A3  F026         	movff	_excerciseControl$2064+2,___ftadd@f1+2
  3155  001700  EC16  F011         	call	___ftadd	;wreg free
  3156  001704  C024  F097         	movff	?___ftadd,_excerciseControl$2065
  3157  001708  C025  F098         	movff	?___ftadd+1,_excerciseControl$2065+1
  3158  00170C  C026  F099         	movff	?___ftadd+2,_excerciseControl$2065+2
  3159                           
  3160                           ;main.c: 431: {
  3161                           ;main.c: 432: speedCompensation += sqrt(rightWheelCount - leftWheelCount) + 5;
  3162  001710  C097  F027         	movff	_excerciseControl$2065,___ftadd@f2
  3163  001714  C098  F028         	movff	_excerciseControl$2065+1,___ftadd@f2+1
  3164  001718  C099  F029         	movff	_excerciseControl$2065+2,___ftadd@f2+2
  3165  00171C  C0CD  F01B         	movff	_speedCompensation,___awtoft@c
  3166  001720  C0CE  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3167  001724  EC4F  F018         	call	___awtoft	;wreg free
  3168  001728  C01B  F024         	movff	?___awtoft,___ftadd@f1
  3169  00172C  C01C  F025         	movff	?___awtoft+1,___ftadd@f1+1
  3170  001730  C01D  F026         	movff	?___awtoft+2,___ftadd@f1+2
  3171  001734  EC16  F011         	call	___ftadd	;wreg free
  3172  001738  C024  F042         	movff	?___ftadd,___fttol@f1
  3173  00173C  C025  F043         	movff	?___ftadd+1,___fttol@f1+1
  3174  001740  C026  F044         	movff	?___ftadd+2,___fttol@f1+2
  3175  001744  ECBB  F012         	call	___fttol	;wreg free
  3176  001748  C042  F0CD         	movff	?___fttol,_speedCompensation
  3177  00174C  C043  F0CE         	movff	?___fttol+1,_speedCompensation+1
  3178                           
  3179                           ;main.c: 433: wheelVelocity('l', leftWheelCommandedSpeed,speedCompensation);
  3180  001750  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3181  001754  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3182  001758  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3183  00175C  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3184  001760  0E6C               	movlw	108
  3185  001762  EC8D  F017         	call	_wheelVelocity
  3186  001766                     l3334:
  3187                           
  3188                           ;main.c: 434: }
  3189                           ;main.c: 436: if(rightWheelCount >= 19)
  3190  001766  0100               	movlb	0	; () banked
  3191  001768  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  3192  00176A  0100               	movlb	0	; () banked
  3193  00176C  11C6               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3194  00176E  0100               	movlb	0	; () banked
  3195  001770  11C5               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  3196  001772  E105               	bnz	u3330
  3197  001774  0E13               	movlw	19
  3198  001776  0100               	movlb	0	; () banked
  3199  001778  5DC4               	subwf	_rightWheelCount& (0+255),w,b
  3200  00177A  A0D8               	btfss	status,0,c
  3201  00177C  D090               	goto	l3362
  3202  00177E                     u3330:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 437: {
  3206                           ;main.c: 438: if(leftWheelCount >= 19)
  3207  00177E  0100               	movlb	0	; () banked
  3208  001780  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  3209  001782  0100               	movlb	0	; () banked
  3210  001784  11C2               	iorwf	(_leftWheelCount+2)& (0+255),w,b
  3211  001786  0100               	movlb	0	; () banked
  3212  001788  11C1               	iorwf	(_leftWheelCount+1)& (0+255),w,b
  3213  00178A  E105               	bnz	u3340
  3214  00178C  0E13               	movlw	19
  3215  00178E  0100               	movlb	0	; () banked
  3216  001790  5DC0               	subwf	_leftWheelCount& (0+255),w,b
  3217  001792  A0D8               	btfss	status,0,c
  3218  001794  D05F               	goto	l3356
  3219  001796                     u3340:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 439: {
  3223                           ;main.c: 440: rightWheelCount = 0;
  3224  001796  0E00               	movlw	0
  3225  001798  0100               	movlb	0	; () banked
  3226  00179A  6FC4               	movwf	_rightWheelCount& (0+255),b
  3227  00179C  0E00               	movlw	0
  3228  00179E  6FC5               	movwf	(_rightWheelCount+1)& (0+255),b
  3229  0017A0  0E00               	movlw	0
  3230  0017A2  6FC6               	movwf	(_rightWheelCount+2)& (0+255),b
  3231  0017A4  0E00               	movlw	0
  3232  0017A6  6FC7               	movwf	(_rightWheelCount+3)& (0+255),b
  3233                           
  3234                           ;main.c: 441: leftWheelCount = 0;
  3235  0017A8  0E00               	movlw	0
  3236  0017AA  0100               	movlb	0	; () banked
  3237  0017AC  6FC0               	movwf	_leftWheelCount& (0+255),b
  3238  0017AE  0E00               	movlw	0
  3239  0017B0  6FC1               	movwf	(_leftWheelCount+1)& (0+255),b
  3240  0017B2  0E00               	movlw	0
  3241  0017B4  6FC2               	movwf	(_leftWheelCount+2)& (0+255),b
  3242  0017B6  0E00               	movlw	0
  3243  0017B8  6FC3               	movwf	(_leftWheelCount+3)& (0+255),b
  3244                           
  3245                           ;main.c: 442: leftWheelCommandedSpeed = 0;
  3246  0017BA  0E00               	movlw	0
  3247  0017BC  0100               	movlb	0	; () banked
  3248  0017BE  6FD0               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3249  0017C0  0E00               	movlw	0
  3250  0017C2  6FCF               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3251                           
  3252                           ;main.c: 443: rightWheelCommandedSpeed = 0;
  3253  0017C4  0E00               	movlw	0
  3254  0017C6  0100               	movlb	0	; () banked
  3255  0017C8  6FD2               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3256  0017CA  0E00               	movlw	0
  3257  0017CC  6FD1               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3258                           
  3259                           ;main.c: 444: speedCompensation = 0;
  3260  0017CE  0E00               	movlw	0
  3261  0017D0  0100               	movlb	0	; () banked
  3262  0017D2  6FCE               	movwf	(_speedCompensation+1)& (0+255),b
  3263  0017D4  0E00               	movlw	0
  3264  0017D6  6FCD               	movwf	_speedCompensation& (0+255),b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 445: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3268  0017D8  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3269  0017DC  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3270  0017E0  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3271  0017E4  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3272  0017E8  0E72               	movlw	114
  3273  0017EA  EC8D  F017         	call	_wheelVelocity
  3274                           
  3275                           ;main.c: 446: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3276  0017EE  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3277  0017F2  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3278  0017F6  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3279  0017FA  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3280  0017FE  0E6C               	movlw	108
  3281  001800  EC8D  F017         	call	_wheelVelocity
  3282                           
  3283                           ;main.c: 447: leftWheelCommandedSpeed = 35;
  3284  001804  0E00               	movlw	0
  3285  001806  0100               	movlb	0	; () banked
  3286  001808  6FD0               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3287  00180A  0E23               	movlw	35
  3288  00180C  6FCF               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3289                           
  3290                           ;main.c: 448: rightWheelCommandedSpeed = 25;
  3291  00180E  0E00               	movlw	0
  3292  001810  0100               	movlb	0	; () banked
  3293  001812  6FD2               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3294  001814  0E19               	movlw	25
  3295  001816  6FD1               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;main.c: 449: event++;
  3299  001818  0100               	movlb	0	; () banked
  3300  00181A  2BCC               	incf	_event& (0+255),f,b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 450: for(int i = 0; i<20 ; i++)
  3304  00181C  0E00               	movlw	0
  3305  00181E  0100               	movlb	0	; () banked
  3306  001820  6F9D               	movwf	(excerciseControl@i_1033+1)& (0+255),b
  3307  001822  0E00               	movlw	0
  3308  001824  6F9C               	movwf	excerciseControl@i_1033& (0+255),b
  3309  001826                     l3348:
  3310                           
  3311                           ; BSR set to: 0
  3312  001826  0100               	movlb	0	; () banked
  3313  001828  BF9D               	btfsc	(excerciseControl@i_1033+1)& (0+255),7,b
  3314  00182A  D008               	goto	l3352
  3315  00182C  0100               	movlb	0	; () banked
  3316  00182E  519D               	movf	(excerciseControl@i_1033+1)& (0+255),w,b
  3317  001830  E136               	bnz	l3362
  3318  001832  0E14               	movlw	20
  3319  001834  0100               	movlb	0	; () banked
  3320  001836  5D9C               	subwf	excerciseControl@i_1033& (0+255),w,b
  3321  001838  B0D8               	btfsc	status,0,c
  3322  00183A  D031               	goto	l3362
  3323  00183C                     l3352:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 451: {
  3327                           ;main.c: 452: _delay((unsigned long)((50)*(8000000/4000.0)));
  3328  00183C  0E82               	movlw	130
  3329  00183E  0100               	movlb	0	; () banked
  3330  001840  6F93               	movwf	??_excerciseControl& (0+255),b
  3331  001842  0EDE               	movlw	222
  3332  001844                     u3507:
  3333  001844  2EE8               	decfsz	wreg,f,c
  3334  001846  D7FE               	goto	u3507
  3335  001848  2F93               	decfsz	??_excerciseControl& (0+255),f,b
  3336  00184A  D7FC               	goto	u3507
  3337  00184C  0100               	movlb	0	; () banked
  3338  00184E  4B9C               	infsnz	excerciseControl@i_1033& (0+255),f,b
  3339  001850  2B9D               	incf	(excerciseControl@i_1033+1)& (0+255),f,b
  3340  001852  D7E9               	goto	l3348
  3341  001854                     l3356:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;main.c: 455: else
  3345                           ;main.c: 456: {
  3346                           ;main.c: 457: rightWheelCommandedSpeed = 0;
  3347  001854  0E00               	movlw	0
  3348  001856  0100               	movlb	0	; () banked
  3349  001858  6FD2               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3350  00185A  0E00               	movlw	0
  3351  00185C  6FD1               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3352                           
  3353                           ;main.c: 458: leftWheelCommandedSpeed = -30;
  3354  00185E  0EFF               	movlw	255
  3355  001860  0100               	movlb	0	; () banked
  3356  001862  6FD0               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3357  001864  0EE2               	movlw	226
  3358  001866  6FCF               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3359                           
  3360                           ;main.c: 459: speedCompensation = 0;
  3361  001868  0E00               	movlw	0
  3362  00186A  0100               	movlb	0	; () banked
  3363  00186C  6FCE               	movwf	(_speedCompensation+1)& (0+255),b
  3364  00186E  0E00               	movlw	0
  3365  001870  6FCD               	movwf	_speedCompensation& (0+255),b
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;main.c: 460: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3369  001872  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3370  001876  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3371  00187A  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3372  00187E  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3373  001882  0E72               	movlw	114
  3374  001884  EC8D  F017         	call	_wheelVelocity
  3375                           
  3376                           ;main.c: 461: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3377  001888  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3378  00188C  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3379  001890  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3380  001894  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3381  001898  0E72               	movlw	114
  3382  00189A  EC8D  F017         	call	_wheelVelocity
  3383  00189E                     l3362:
  3384                           
  3385                           ;main.c: 462: }
  3386                           ;main.c: 464: }
  3387                           ;main.c: 465: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3388  00189E  0ECF               	movlw	low excerciseControl@leftWheelCommandedSpeed
  3389  0018A0  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3390  0018A2  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3391  0018A4  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3392  0018A6  0ED1               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3393  0018A8  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3394  0018AA  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3395  0018AC  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3396  0018AE  0ECD               	movlw	low _speedCompensation
  3397  0018B0  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3398  0018B2  0E00               	movlw	high _speedCompensation
  3399  0018B4  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3400  0018B6  EC52  F013         	call	_limitWheelSpeeds	;wreg free
  3401                           
  3402                           ;main.c: 466: break;
  3403  0018BA  0012               	return	
  3404  0018BC                     l3364:
  3405                           
  3406                           ;main.c: 473: if(rightWheelMeasuredSpeed < 20)
  3407  0018BC  0100               	movlb	0	; () banked
  3408  0018BE  BFCB               	btfsc	(_rightWheelMeasuredSpeed+1)& (0+255),7,b
  3409  0018C0  D008               	goto	l3366
  3410  0018C2  0100               	movlb	0	; () banked
  3411  0018C4  51CB               	movf	(_rightWheelMeasuredSpeed+1)& (0+255),w,b
  3412  0018C6  E121               	bnz	l3368
  3413  0018C8  0E14               	movlw	20
  3414  0018CA  0100               	movlb	0	; () banked
  3415  0018CC  5DCA               	subwf	_rightWheelMeasuredSpeed& (0+255),w,b
  3416  0018CE  B0D8               	btfsc	status,0,c
  3417  0018D0  D01C               	goto	l3368
  3418  0018D2                     l3366:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;main.c: 474: {
  3422                           ;main.c: 475: wheelVelocity('r', ++rightWheelCommandedSpeed, speedCompensation);
  3423  0018D2  0100               	movlb	0	; () banked
  3424  0018D4  4BD1               	infsnz	excerciseControl@rightWheelCommandedSpeed& (0+255),f,b
  3425  0018D6  2BD2               	incf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),f,b
  3426  0018D8  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3427  0018DC  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3428  0018E0  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3429  0018E4  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3430  0018E8  0E72               	movlw	114
  3431  0018EA  EC8D  F017         	call	_wheelVelocity
  3432                           
  3433                           ;main.c: 476: wheelVelocity('l', ++leftWheelCommandedSpeed, speedCompensation);
  3434  0018EE  0100               	movlb	0	; () banked
  3435  0018F0  4BCF               	infsnz	excerciseControl@leftWheelCommandedSpeed& (0+255),f,b
  3436  0018F2  2BD0               	incf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),f,b
  3437  0018F4  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3438  0018F8  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3439  0018FC  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3440  001900  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3441  001904  0E6C               	movlw	108
  3442  001906  EC8D  F017         	call	_wheelVelocity
  3443  00190A                     l3368:
  3444                           
  3445                           ;main.c: 477: }
  3446                           ;main.c: 478: if(round(1.1f * (leftWheelCount)) > (rightWheelCount + 1) )
  3447  00190A  0E01               	movlw	1
  3448  00190C  0100               	movlb	0	; () banked
  3449  00190E  25C4               	addwf	_rightWheelCount& (0+255),w,b
  3450  001910  6E1B               	movwf	___lltoft@c,c
  3451  001912  0E00               	movlw	0
  3452  001914  0100               	movlb	0	; () banked
  3453  001916  21C5               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  3454  001918  6E1C               	movwf	___lltoft@c+1,c
  3455  00191A  0E00               	movlw	0
  3456  00191C  0100               	movlb	0	; () banked
  3457  00191E  21C6               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  3458  001920  6E1D               	movwf	___lltoft@c+2,c
  3459  001922  0E00               	movlw	0
  3460  001924  0100               	movlb	0	; () banked
  3461  001926  21C7               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  3462  001928  6E1E               	movwf	___lltoft@c+3,c
  3463  00192A  EC5F  F017         	call	___lltoft	;wreg free
  3464  00192E  C01B  F033         	movff	?___lltoft,___ftge@ff1
  3465  001932  C01C  F034         	movff	?___lltoft+1,___ftge@ff1+1
  3466  001936  C01D  F035         	movff	?___lltoft+2,___ftge@ff1+2
  3467  00193A  0ECD               	movlw	205
  3468  00193C  6E27               	movwf	___ftmul@f2,c
  3469  00193E  0E8C               	movlw	140
  3470  001940  6E28               	movwf	___ftmul@f2+1,c
  3471  001942  0E3F               	movlw	63
  3472  001944  6E29               	movwf	___ftmul@f2+2,c
  3473  001946  C0C0  F01B         	movff	_leftWheelCount,___lltoft@c
  3474  00194A  C0C1  F01C         	movff	_leftWheelCount+1,___lltoft@c+1
  3475  00194E  C0C2  F01D         	movff	_leftWheelCount+2,___lltoft@c+2
  3476  001952  C0C3  F01E         	movff	_leftWheelCount+3,___lltoft@c+3
  3477  001956  EC5F  F017         	call	___lltoft	;wreg free
  3478  00195A  C01B  F024         	movff	?___lltoft,___ftmul@f1
  3479  00195E  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  3480  001962  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  3481  001966  ECD4  F013         	call	___ftmul	;wreg free
  3482  00196A  C024  F08D         	movff	?___ftmul,round@x
  3483  00196E  C025  F08E         	movff	?___ftmul+1,round@x+1
  3484  001972  C026  F08F         	movff	?___ftmul+2,round@x+2
  3485  001976  EC66  F016         	call	_round	;wreg free
  3486  00197A  C08D  F036         	movff	?_round,___ftge@ff2
  3487  00197E  C08E  F037         	movff	?_round+1,___ftge@ff2+1
  3488  001982  C08F  F038         	movff	?_round+2,___ftge@ff2+2
  3489  001986  EC1E  F016         	call	___ftge	;wreg free
  3490  00198A  B0D8               	btfsc	status,0,c
  3491  00198C  D061               	goto	l3372
  3492                           
  3493                           ;main.c: 480: {
  3494                           ;main.c: 481: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  3495  00198E  C0C4  F093         	movff	_rightWheelCount,??_excerciseControl
  3496  001992  C0C5  F094         	movff	_rightWheelCount+1,??_excerciseControl+1
  3497  001996  C0C6  F095         	movff	_rightWheelCount+2,??_excerciseControl+2
  3498  00199A  C0C7  F096         	movff	_rightWheelCount+3,??_excerciseControl+3
  3499  00199E  0100               	movlb	0	; () banked
  3500  0019A0  1F93               	comf	??_excerciseControl& (0+255),f,b
  3501  0019A2  1F94               	comf	(??_excerciseControl+1)& (0+255),f,b
  3502  0019A4  1F95               	comf	(??_excerciseControl+2)& (0+255),f,b
  3503  0019A6  1F96               	comf	(??_excerciseControl+3)& (0+255),f,b
  3504  0019A8  2B93               	incf	??_excerciseControl& (0+255),f,b
  3505  0019AA  0E00               	movlw	0
  3506  0019AC  2394               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3507  0019AE  2395               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3508  0019B0  2396               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3509  0019B2  0100               	movlb	0	; () banked
  3510  0019B4  51C0               	movf	_leftWheelCount& (0+255),w,b
  3511  0019B6  0100               	movlb	0	; () banked
  3512  0019B8  2593               	addwf	??_excerciseControl& (0+255),w,b
  3513  0019BA  6E1B               	movwf	___lltoft@c,c
  3514  0019BC  0100               	movlb	0	; () banked
  3515  0019BE  51C1               	movf	(_leftWheelCount+1)& (0+255),w,b
  3516  0019C0  0100               	movlb	0	; () banked
  3517  0019C2  2194               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3518  0019C4  6E1C               	movwf	___lltoft@c+1,c
  3519  0019C6  0100               	movlb	0	; () banked
  3520  0019C8  51C2               	movf	(_leftWheelCount+2)& (0+255),w,b
  3521  0019CA  0100               	movlb	0	; () banked
  3522  0019CC  2195               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3523  0019CE  6E1D               	movwf	___lltoft@c+2,c
  3524  0019D0  0100               	movlb	0	; () banked
  3525  0019D2  51C3               	movf	(_leftWheelCount+3)& (0+255),w,b
  3526  0019D4  0100               	movlb	0	; () banked
  3527  0019D6  2196               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3528  0019D8  6E1E               	movwf	___lltoft@c+3,c
  3529  0019DA  EC5F  F017         	call	___lltoft	;wreg free
  3530  0019DE  C01B  F03C         	movff	?___lltoft,sqrt@a
  3531  0019E2  C01C  F03D         	movff	?___lltoft+1,sqrt@a+1
  3532  0019E6  C01D  F03E         	movff	?___lltoft+2,sqrt@a+2
  3533  0019EA  ECEC  F011         	call	_sqrt	;wreg free
  3534  0019EE  C03C  F09E         	movff	?_sqrt,_excerciseControl$2063
  3535  0019F2  C03D  F09F         	movff	?_sqrt+1,_excerciseControl$2063+1
  3536  0019F6  C03E  F0A0         	movff	?_sqrt+2,_excerciseControl$2063+2
  3537                           
  3538                           ;main.c: 480: {
  3539                           ;main.c: 481: speedCompensation -= sqrt(leftWheelCount - rightWheelCount);
  3540  0019FA  C09E  F033         	movff	_excerciseControl$2063,___ftsub@f2
  3541  0019FE  C09F  F034         	movff	_excerciseControl$2063+1,___ftsub@f2+1
  3542  001A02  C0A0  F035         	movff	_excerciseControl$2063+2,___ftsub@f2+2
  3543  001A06  C0CD  F01B         	movff	_speedCompensation,___awtoft@c
  3544  001A0A  C0CE  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3545  001A0E  EC4F  F018         	call	___awtoft	;wreg free
  3546  001A12  C01B  F030         	movff	?___awtoft,___ftsub@f1
  3547  001A16  C01C  F031         	movff	?___awtoft+1,___ftsub@f1+1
  3548  001A1A  C01D  F032         	movff	?___awtoft+2,___ftsub@f1+2
  3549  001A1E  EC2F  F018         	call	___ftsub	;wreg free
  3550  001A22  C030  F042         	movff	?___ftsub,___fttol@f1
  3551  001A26  C031  F043         	movff	?___ftsub+1,___fttol@f1+1
  3552  001A2A  C032  F044         	movff	?___ftsub+2,___fttol@f1+2
  3553  001A2E  ECBB  F012         	call	___fttol	;wreg free
  3554  001A32  C042  F0CD         	movff	?___fttol,_speedCompensation
  3555  001A36  C043  F0CE         	movff	?___fttol+1,_speedCompensation+1
  3556                           
  3557                           ;main.c: 482: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3558  001A3A  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3559  001A3E  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3560  001A42  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3561  001A46  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3562  001A4A  0E6C               	movlw	108
  3563  001A4C  EC8D  F017         	call	_wheelVelocity
  3564  001A50                     l3372:
  3565                           
  3566                           ;main.c: 483: }
  3567                           ;main.c: 484: if(rightWheelCount > round(1.1f * (leftWheelCount + 1)))
  3568  001A50  0ECD               	movlw	205
  3569  001A52  6E27               	movwf	___ftmul@f2,c
  3570  001A54  0E8C               	movlw	140
  3571  001A56  6E28               	movwf	___ftmul@f2+1,c
  3572  001A58  0E3F               	movlw	63
  3573  001A5A  6E29               	movwf	___ftmul@f2+2,c
  3574  001A5C  0E01               	movlw	1
  3575  001A5E  0100               	movlb	0	; () banked
  3576  001A60  25C0               	addwf	_leftWheelCount& (0+255),w,b
  3577  001A62  6E1B               	movwf	___lltoft@c,c
  3578  001A64  0E00               	movlw	0
  3579  001A66  0100               	movlb	0	; () banked
  3580  001A68  21C1               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  3581  001A6A  6E1C               	movwf	___lltoft@c+1,c
  3582  001A6C  0E00               	movlw	0
  3583  001A6E  0100               	movlb	0	; () banked
  3584  001A70  21C2               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  3585  001A72  6E1D               	movwf	___lltoft@c+2,c
  3586  001A74  0E00               	movlw	0
  3587  001A76  0100               	movlb	0	; () banked
  3588  001A78  21C3               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  3589  001A7A  6E1E               	movwf	___lltoft@c+3,c
  3590  001A7C  EC5F  F017         	call	___lltoft	;wreg free
  3591  001A80  C01B  F024         	movff	?___lltoft,___ftmul@f1
  3592  001A84  C01C  F025         	movff	?___lltoft+1,___ftmul@f1+1
  3593  001A88  C01D  F026         	movff	?___lltoft+2,___ftmul@f1+2
  3594  001A8C  ECD4  F013         	call	___ftmul	;wreg free
  3595  001A90  C024  F08D         	movff	?___ftmul,round@x
  3596  001A94  C025  F08E         	movff	?___ftmul+1,round@x+1
  3597  001A98  C026  F08F         	movff	?___ftmul+2,round@x+2
  3598  001A9C  EC66  F016         	call	_round	;wreg free
  3599  001AA0  C08D  F033         	movff	?_round,___ftge@ff1
  3600  001AA4  C08E  F034         	movff	?_round+1,___ftge@ff1+1
  3601  001AA8  C08F  F035         	movff	?_round+2,___ftge@ff1+2
  3602  001AAC  C0C4  F01B         	movff	_rightWheelCount,___lltoft@c
  3603  001AB0  C0C5  F01C         	movff	_rightWheelCount+1,___lltoft@c+1
  3604  001AB4  C0C6  F01D         	movff	_rightWheelCount+2,___lltoft@c+2
  3605  001AB8  C0C7  F01E         	movff	_rightWheelCount+3,___lltoft@c+3
  3606  001ABC  EC5F  F017         	call	___lltoft	;wreg free
  3607  001AC0  C01B  F036         	movff	?___lltoft,___ftge@ff2
  3608  001AC4  C01C  F037         	movff	?___lltoft+1,___ftge@ff2+1
  3609  001AC8  C01D  F038         	movff	?___lltoft+2,___ftge@ff2+2
  3610  001ACC  EC1E  F016         	call	___ftge	;wreg free
  3611  001AD0  B0D8               	btfsc	status,0,c
  3612  001AD2  D061               	goto	l3376
  3613                           
  3614                           ;main.c: 486: {
  3615                           ;main.c: 487: speedCompensation += sqrt(rightWheelCount - leftWheelCount);
  3616  001AD4  C0C0  F093         	movff	_leftWheelCount,??_excerciseControl
  3617  001AD8  C0C1  F094         	movff	_leftWheelCount+1,??_excerciseControl+1
  3618  001ADC  C0C2  F095         	movff	_leftWheelCount+2,??_excerciseControl+2
  3619  001AE0  C0C3  F096         	movff	_leftWheelCount+3,??_excerciseControl+3
  3620  001AE4  0100               	movlb	0	; () banked
  3621  001AE6  1F93               	comf	??_excerciseControl& (0+255),f,b
  3622  001AE8  1F94               	comf	(??_excerciseControl+1)& (0+255),f,b
  3623  001AEA  1F95               	comf	(??_excerciseControl+2)& (0+255),f,b
  3624  001AEC  1F96               	comf	(??_excerciseControl+3)& (0+255),f,b
  3625  001AEE  2B93               	incf	??_excerciseControl& (0+255),f,b
  3626  001AF0  0E00               	movlw	0
  3627  001AF2  2394               	addwfc	(??_excerciseControl+1)& (0+255),f,b
  3628  001AF4  2395               	addwfc	(??_excerciseControl+2)& (0+255),f,b
  3629  001AF6  2396               	addwfc	(??_excerciseControl+3)& (0+255),f,b
  3630  001AF8  0100               	movlb	0	; () banked
  3631  001AFA  51C4               	movf	_rightWheelCount& (0+255),w,b
  3632  001AFC  0100               	movlb	0	; () banked
  3633  001AFE  2593               	addwf	??_excerciseControl& (0+255),w,b
  3634  001B00  6E1B               	movwf	___lltoft@c,c
  3635  001B02  0100               	movlb	0	; () banked
  3636  001B04  51C5               	movf	(_rightWheelCount+1)& (0+255),w,b
  3637  001B06  0100               	movlb	0	; () banked
  3638  001B08  2194               	addwfc	(??_excerciseControl+1)& (0+255),w,b
  3639  001B0A  6E1C               	movwf	___lltoft@c+1,c
  3640  001B0C  0100               	movlb	0	; () banked
  3641  001B0E  51C6               	movf	(_rightWheelCount+2)& (0+255),w,b
  3642  001B10  0100               	movlb	0	; () banked
  3643  001B12  2195               	addwfc	(??_excerciseControl+2)& (0+255),w,b
  3644  001B14  6E1D               	movwf	___lltoft@c+2,c
  3645  001B16  0100               	movlb	0	; () banked
  3646  001B18  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  3647  001B1A  0100               	movlb	0	; () banked
  3648  001B1C  2196               	addwfc	(??_excerciseControl+3)& (0+255),w,b
  3649  001B1E  6E1E               	movwf	___lltoft@c+3,c
  3650  001B20  EC5F  F017         	call	___lltoft	;wreg free
  3651  001B24  C01B  F03C         	movff	?___lltoft,sqrt@a
  3652  001B28  C01C  F03D         	movff	?___lltoft+1,sqrt@a+1
  3653  001B2C  C01D  F03E         	movff	?___lltoft+2,sqrt@a+2
  3654  001B30  ECEC  F011         	call	_sqrt	;wreg free
  3655  001B34  C03C  F0A1         	movff	?_sqrt,_excerciseControl$2064
  3656  001B38  C03D  F0A2         	movff	?_sqrt+1,_excerciseControl$2064+1
  3657  001B3C  C03E  F0A3         	movff	?_sqrt+2,_excerciseControl$2064+2
  3658                           
  3659                           ;main.c: 486: {
  3660                           ;main.c: 487: speedCompensation += sqrt(rightWheelCount - leftWheelCount);
  3661  001B40  C0A1  F027         	movff	_excerciseControl$2064,___ftadd@f2
  3662  001B44  C0A2  F028         	movff	_excerciseControl$2064+1,___ftadd@f2+1
  3663  001B48  C0A3  F029         	movff	_excerciseControl$2064+2,___ftadd@f2+2
  3664  001B4C  C0CD  F01B         	movff	_speedCompensation,___awtoft@c
  3665  001B50  C0CE  F01C         	movff	_speedCompensation+1,___awtoft@c+1
  3666  001B54  EC4F  F018         	call	___awtoft	;wreg free
  3667  001B58  C01B  F024         	movff	?___awtoft,___ftadd@f1
  3668  001B5C  C01C  F025         	movff	?___awtoft+1,___ftadd@f1+1
  3669  001B60  C01D  F026         	movff	?___awtoft+2,___ftadd@f1+2
  3670  001B64  EC16  F011         	call	___ftadd	;wreg free
  3671  001B68  C024  F042         	movff	?___ftadd,___fttol@f1
  3672  001B6C  C025  F043         	movff	?___ftadd+1,___fttol@f1+1
  3673  001B70  C026  F044         	movff	?___ftadd+2,___fttol@f1+2
  3674  001B74  ECBB  F012         	call	___fttol	;wreg free
  3675  001B78  C042  F0CD         	movff	?___fttol,_speedCompensation
  3676  001B7C  C043  F0CE         	movff	?___fttol+1,_speedCompensation+1
  3677                           
  3678                           ;main.c: 488: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3679  001B80  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3680  001B84  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3681  001B88  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3682  001B8C  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3683  001B90  0E6C               	movlw	108
  3684  001B92  EC8D  F017         	call	_wheelVelocity
  3685  001B96                     l3376:
  3686                           
  3687                           ;main.c: 489: }
  3688                           ;main.c: 490: if(rightWheelCount >= 1000)
  3689  001B96  0100               	movlb	0	; () banked
  3690  001B98  51C7               	movf	(_rightWheelCount+3)& (0+255),w,b
  3691  001B9A  0100               	movlb	0	; () banked
  3692  001B9C  11C6               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  3693  001B9E  E108               	bnz	u3400
  3694  001BA0  0EE8               	movlw	232
  3695  001BA2  0100               	movlb	0	; () banked
  3696  001BA4  5DC4               	subwf	_rightWheelCount& (0+255),w,b
  3697  001BA6  0E03               	movlw	3
  3698  001BA8  0100               	movlb	0	; () banked
  3699  001BAA  59C5               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  3700  001BAC  A0D8               	btfss	status,0,c
  3701  001BAE  D034               	goto	l3386
  3702  001BB0                     u3400:
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 491: {
  3706                           ;main.c: 492: rightWheelCount = 0;
  3707  001BB0  0E00               	movlw	0
  3708  001BB2  0100               	movlb	0	; () banked
  3709  001BB4  6FC4               	movwf	_rightWheelCount& (0+255),b
  3710  001BB6  0E00               	movlw	0
  3711  001BB8  6FC5               	movwf	(_rightWheelCount+1)& (0+255),b
  3712  001BBA  0E00               	movlw	0
  3713  001BBC  6FC6               	movwf	(_rightWheelCount+2)& (0+255),b
  3714  001BBE  0E00               	movlw	0
  3715  001BC0  6FC7               	movwf	(_rightWheelCount+3)& (0+255),b
  3716                           
  3717                           ;main.c: 493: leftWheelCount = 0;
  3718  001BC2  0E00               	movlw	0
  3719  001BC4  0100               	movlb	0	; () banked
  3720  001BC6  6FC0               	movwf	_leftWheelCount& (0+255),b
  3721  001BC8  0E00               	movlw	0
  3722  001BCA  6FC1               	movwf	(_leftWheelCount+1)& (0+255),b
  3723  001BCC  0E00               	movlw	0
  3724  001BCE  6FC2               	movwf	(_leftWheelCount+2)& (0+255),b
  3725  001BD0  0E00               	movlw	0
  3726  001BD2  6FC3               	movwf	(_leftWheelCount+3)& (0+255),b
  3727                           
  3728                           ;main.c: 494: leftWheelCommandedSpeed = 0;
  3729  001BD4  0E00               	movlw	0
  3730  001BD6  0100               	movlb	0	; () banked
  3731  001BD8  6FD0               	movwf	(excerciseControl@leftWheelCommandedSpeed+1)& (0+255),b
  3732  001BDA  0E00               	movlw	0
  3733  001BDC  6FCF               	movwf	excerciseControl@leftWheelCommandedSpeed& (0+255),b
  3734                           
  3735                           ;main.c: 495: rightWheelCommandedSpeed = 0;
  3736  001BDE  0E00               	movlw	0
  3737  001BE0  0100               	movlb	0	; () banked
  3738  001BE2  6FD2               	movwf	(excerciseControl@rightWheelCommandedSpeed+1)& (0+255),b
  3739  001BE4  0E00               	movlw	0
  3740  001BE6  6FD1               	movwf	excerciseControl@rightWheelCommandedSpeed& (0+255),b
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;main.c: 496: wheelVelocity('r', rightWheelCommandedSpeed, speedCompensation);
  3744  001BE8  C0D1  F013         	movff	excerciseControl@rightWheelCommandedSpeed,wheelVelocity@speed
  3745  001BEC  C0D2  F014         	movff	excerciseControl@rightWheelCommandedSpeed+1,wheelVelocity@speed+1
  3746  001BF0  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3747  001BF4  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3748  001BF8  0E72               	movlw	114
  3749  001BFA  EC8D  F017         	call	_wheelVelocity
  3750                           
  3751                           ;main.c: 497: wheelVelocity('l', leftWheelCommandedSpeed, speedCompensation);
  3752  001BFE  C0CF  F013         	movff	excerciseControl@leftWheelCommandedSpeed,wheelVelocity@speed
  3753  001C02  C0D0  F014         	movff	excerciseControl@leftWheelCommandedSpeed+1,wheelVelocity@speed+1
  3754  001C06  C0CD  F015         	movff	_speedCompensation,wheelVelocity@speedCompensation
  3755  001C0A  C0CE  F016         	movff	_speedCompensation+1,wheelVelocity@speedCompensation+1
  3756  001C0E  0E6C               	movlw	108
  3757  001C10  EC8D  F017         	call	_wheelVelocity
  3758                           
  3759                           ;main.c: 498: event++;
  3760  001C14  0100               	movlb	0	; () banked
  3761  001C16  2BCC               	incf	_event& (0+255),f,b
  3762  001C18                     l3386:
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 499: }
  3766                           ;main.c: 500: limitWheelSpeeds(&leftWheelCommandedSpeed, &rightWheelCommandedSpeed, &spe
      +                          edCompensation);
  3767  001C18  0ECF               	movlw	low excerciseControl@leftWheelCommandedSpeed
  3768  001C1A  6E13               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  3769  001C1C  0E00               	movlw	high excerciseControl@leftWheelCommandedSpeed
  3770  001C1E  6E14               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  3771  001C20  0ED1               	movlw	low excerciseControl@rightWheelCommandedSpeed
  3772  001C22  6E15               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  3773  001C24  0E00               	movlw	high excerciseControl@rightWheelCommandedSpeed
  3774  001C26  6E16               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  3775  001C28  0ECD               	movlw	low _speedCompensation
  3776  001C2A  6E17               	movwf	limitWheelSpeeds@speedCompensation,c
  3777  001C2C  0E00               	movlw	high _speedCompensation
  3778  001C2E  6E18               	movwf	limitWheelSpeeds@speedCompensation+1,c
  3779  001C30  EC52  F013         	call	_limitWheelSpeeds	;wreg free
  3780                           
  3781                           ;main.c: 504: }
  3782                           
  3783                           ;main.c: 501: break;
  3784  001C34  0012               	return	
  3785  001C36                     l3390:
  3786  001C36  0100               	movlb	0	; () banked
  3787  001C38  51CC               	movf	_event& (0+255),w,b
  3788                           
  3789                           ; Switch size 1, requested type "space"
  3790                           ; Number of cases is 3, Range of values is 0 to 2
  3791                           ; switch strategies available:
  3792                           ; Name         Instructions Cycles
  3793                           ; simple_byte           10     6 (average)
  3794                           ;	Chosen strategy is simple_byte
  3795  001C3A  0A00               	xorlw	0	; case 0
  3796  001C3C  B4D8               	btfsc	status,2,c
  3797  001C3E  EF1B  F008         	goto	l3260
  3798  001C42  0A01               	xorlw	1	; case 1
  3799  001C44  B4D8               	btfsc	status,2,c
  3800  001C46  D41D               	goto	l3318
  3801  001C48  0A03               	xorlw	3	; case 2
  3802  001C4A  A4D8               	btfss	status,2,c
  3803  001C4C  0012               	return	
  3804  001C4E  D636               	goto	l3364
  3805  001C50                     __end_of_excerciseControl:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           postinc0	equ	0xFEE
  3814                           wreg	equ	0xFE8
  3815                           postdec1	equ	0xFE5
  3816                           fsr1l	equ	0xFE1
  3817                           postinc2	equ	0xFDE
  3818                           postdec2	equ	0xFDD
  3819                           fsr2h	equ	0xFDA
  3820                           fsr2l	equ	0xFD9
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _wheelVelocity *****************
  3824 ;; Defined at:
  3825 ;;		line 245 in file "main.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  wheel           1    wreg     unsigned char 
  3828 ;;  speed           2   18[COMRAM] int 
  3829 ;;  speedCompens    2   20[COMRAM] int 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  wheel           1   24[COMRAM] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3844 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3845 ;;Total ram usage:        7 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    1
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_excerciseControl
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text9
  3856  002F1A                     __ptext9:
  3857                           	opt stack 0
  3858  002F1A                     _wheelVelocity:
  3859                           	opt stack 28
  3860                           
  3861                           ;incstack = 0
  3862                           ;wheelVelocity@wheel stored from wreg
  3863  002F1A  6E19               	movwf	wheelVelocity@wheel,c
  3864                           
  3865                           ;main.c: 247: if(wheel == 'r')
  3866  002F1C  0E72               	movlw	114
  3867  002F1E  1819               	xorwf	wheelVelocity@wheel,w,c
  3868  002F20  A4D8               	btfss	status,2,c
  3869  002F22  D00D               	goto	l149
  3870                           
  3871                           ;main.c: 248: {
  3872                           ;main.c: 251: rightWheelCommandedPW = (int) (725 + speed * 2);
  3873  002F24  C013  F017         	movff	wheelVelocity@speed,??_wheelVelocity
  3874  002F28  C014  F018         	movff	wheelVelocity@speed+1,??_wheelVelocity+1
  3875  002F2C  90D8               	bcf	status,0,c
  3876  002F2E  3617               	rlcf	??_wheelVelocity,f,c
  3877  002F30  3618               	rlcf	??_wheelVelocity+1,f,c
  3878  002F32  0ED5               	movlw	213
  3879  002F34  2417               	addwf	??_wheelVelocity,w,c
  3880  002F36  6E48               	movwf	_rightWheelCommandedPW,c
  3881  002F38  0E02               	movlw	2
  3882  002F3A  2018               	addwfc	??_wheelVelocity+1,w,c
  3883  002F3C  6E49               	movwf	_rightWheelCommandedPW+1,c
  3884  002F3E                     l149:
  3885                           
  3886                           ;main.c: 252: }
  3887                           ;main.c: 254: if(wheel == 'l')
  3888  002F3E  0E6C               	movlw	108
  3889  002F40  1819               	xorwf	wheelVelocity@wheel,w,c
  3890  002F42  A4D8               	btfss	status,2,c
  3891  002F44  0012               	return	
  3892                           
  3893                           ;main.c: 255: {
  3894                           ;main.c: 258: leftWheelCommandedPW = (int) (745 - (speedCompensation + speed * 2));
  3895  002F46  C013  F017         	movff	wheelVelocity@speed,??_wheelVelocity
  3896  002F4A  C014  F018         	movff	wheelVelocity@speed+1,??_wheelVelocity+1
  3897  002F4E  90D8               	bcf	status,0,c
  3898  002F50  3617               	rlcf	??_wheelVelocity,f,c
  3899  002F52  3618               	rlcf	??_wheelVelocity+1,f,c
  3900  002F54  5015               	movf	wheelVelocity@speedCompensation,w,c
  3901  002F56  2617               	addwf	??_wheelVelocity,f,c
  3902  002F58  5016               	movf	wheelVelocity@speedCompensation+1,w,c
  3903  002F5A  2218               	addwfc	??_wheelVelocity+1,f,c
  3904  002F5C  1E17               	comf	??_wheelVelocity,f,c
  3905  002F5E  1E18               	comf	??_wheelVelocity+1,f,c
  3906  002F60  4A17               	infsnz	??_wheelVelocity,f,c
  3907  002F62  2A18               	incf	??_wheelVelocity+1,f,c
  3908  002F64  0EE9               	movlw	233
  3909  002F66  2417               	addwf	??_wheelVelocity,w,c
  3910  002F68  6E46               	movwf	_leftWheelCommandedPW,c
  3911  002F6A  0E02               	movlw	2
  3912  002F6C  2018               	addwfc	??_wheelVelocity+1,w,c
  3913  002F6E  6E47               	movwf	_leftWheelCommandedPW+1,c
  3914  002F70  0012               	return	
  3915  002F72                     __end_of_wheelVelocity:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           postdec1	equ	0xFE5
  3926                           fsr1l	equ	0xFE1
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _sqrt *****************
  3934 ;; Defined at:
  3935 ;;		line 9 in file "/Applications/microchip/xc8/v1.36/sources/common/sprcsqrt.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  a               3   59[COMRAM] void 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  x               3   10[BANK0 ] void 
  3940 ;;  q               3    7[BANK0 ] void 
  3941 ;;  z               3    3[BANK0 ] void 
  3942 ;;  og              3    0[BANK0 ] void 
  3943 ;;  i               1    6[BANK0 ] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  3   59[COMRAM] unsigned char 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3953 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Totals:         6      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;Total ram usage:       19 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    4
  3960 ;; This function calls:
  3961 ;;		___ftge
  3962 ;;		___ftmul
  3963 ;;		___ftsub
  3964 ;; This function is called by:
  3965 ;;		_excerciseControl
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text10
  3970  0023D8                     __ptext10:
  3971                           	opt stack 0
  3972  0023D8                     _sqrt:
  3973                           	opt stack 25
  3974                           
  3975                           ;incstack = 0
  3976  0023D8  0E00               	movlw	0
  3977  0023DA  6E33               	movwf	___ftge@ff1,c
  3978  0023DC  0E00               	movlw	0
  3979  0023DE  6E34               	movwf	___ftge@ff1+1,c
  3980  0023E0  0E00               	movlw	0
  3981  0023E2  6E35               	movwf	___ftge@ff1+2,c
  3982  0023E4  C03C  F036         	movff	sqrt@a,___ftge@ff2
  3983  0023E8  C03D  F037         	movff	sqrt@a+1,___ftge@ff2+1
  3984  0023EC  C03E  F038         	movff	sqrt@a+2,___ftge@ff2+2
  3985  0023F0  EC1E  F016         	call	___ftge	;wreg free
  3986  0023F4  A0D8               	btfss	status,0,c
  3987  0023F6  D00D               	goto	l870
  3988  0023F8  AE3E               	btfss	sqrt@a+2,7,c
  3989  0023FA  D004               	goto	l871
  3990  0023FC  0E00               	movlw	0
  3991  0023FE  6E4B               	movwf	_errno+1,c
  3992  002400  0E21               	movlw	33
  3993  002402  6E4A               	movwf	_errno,c
  3994  002404                     l871:
  3995  002404  0E00               	movlw	0
  3996  002406  6E3C               	movwf	?_sqrt,c
  3997  002408  0E00               	movlw	0
  3998  00240A  6E3D               	movwf	?_sqrt+1,c
  3999  00240C  0E00               	movlw	0
  4000  00240E  6E3E               	movwf	?_sqrt+2,c
  4001  002410  0012               	return	
  4002  002412                     l870:
  4003  002412  C03C  F063         	movff	sqrt@a,sqrt@z
  4004  002416  C03D  F064         	movff	sqrt@a+1,sqrt@z+1
  4005  00241A  C03E  F065         	movff	sqrt@a+2,sqrt@z+2
  4006  00241E  C03C  F03F         	movff	sqrt@a,??_sqrt
  4007  002422  C03D  F040         	movff	sqrt@a+1,??_sqrt+1
  4008  002426  C03E  F041         	movff	sqrt@a+2,??_sqrt+2
  4009  00242A  1E3F               	comf	??_sqrt,f,c
  4010  00242C  1E40               	comf	??_sqrt+1,f,c
  4011  00242E  1E41               	comf	??_sqrt+2,f,c
  4012  002430  2A3F               	incf	??_sqrt,f,c
  4013  002432  0E00               	movlw	0
  4014  002434  2240               	addwfc	??_sqrt+1,f,c
  4015  002436  2241               	addwfc	??_sqrt+2,f,c
  4016  002438  0EC8               	movlw	200
  4017  00243A  243F               	addwf	??_sqrt,w,c
  4018  00243C  0100               	movlb	0	; () banked
  4019  00243E  6F6A               	movwf	sqrt@x& (0+255),b
  4020  002440  0E6E               	movlw	110
  4021  002442  2040               	addwfc	??_sqrt+1,w,c
  4022  002444  0100               	movlb	0	; () banked
  4023  002446  6F6B               	movwf	(sqrt@x+1)& (0+255),b
  4024  002448  0EBE               	movlw	190
  4025  00244A  2041               	addwfc	??_sqrt+2,w,c
  4026  00244C  0100               	movlb	0	; () banked
  4027  00244E  6F6C               	movwf	(sqrt@x+2)& (0+255),b
  4028                           
  4029                           ; BSR set to: 0
  4030  002450  0100               	movlb	0	; () banked
  4031  002452  90D8               	bcf	status,0,c
  4032  002454  336C               	rrcf	(sqrt@x+2)& (0+255),f,b
  4033  002456  336B               	rrcf	(sqrt@x+1)& (0+255),f,b
  4034  002458  336A               	rrcf	sqrt@x& (0+255),f,b
  4035                           
  4036                           ; BSR set to: 0
  4037  00245A  0E00               	movlw	0
  4038  00245C  0100               	movlb	0	; () banked
  4039  00245E  5F63               	subwf	sqrt@z& (0+255),f,b
  4040  002460  0E80               	movlw	128
  4041  002462  0100               	movlb	0	; () banked
  4042  002464  5B64               	subwfb	(sqrt@z+1)& (0+255),f,b
  4043  002466  0E00               	movlw	0
  4044  002468  0100               	movlb	0	; () banked
  4045  00246A  5B65               	subwfb	(sqrt@z+2)& (0+255),f,b
  4046                           
  4047                           ; BSR set to: 0
  4048  00246C  0E04               	movlw	4
  4049  00246E  0100               	movlb	0	; () banked
  4050  002470  6F66               	movwf	sqrt@i& (0+255),b
  4051  002472                     l3210:
  4052                           
  4053                           ; BSR set to: 0
  4054  002472  C06A  F060         	movff	sqrt@x,sqrt@og
  4055  002476  C06B  F061         	movff	sqrt@x+1,sqrt@og+1
  4056  00247A  C06C  F062         	movff	sqrt@x+2,sqrt@og+2
  4057                           
  4058                           ; BSR set to: 0
  4059  00247E  C06A  F024         	movff	sqrt@x,___ftmul@f1
  4060  002482  C06B  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4061  002486  C06C  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4062  00248A  C063  F027         	movff	sqrt@z,___ftmul@f2
  4063  00248E  C064  F028         	movff	sqrt@z+1,___ftmul@f2+1
  4064  002492  C065  F029         	movff	sqrt@z+2,___ftmul@f2+2
  4065  002496  ECD4  F013         	call	___ftmul	;wreg free
  4066  00249A  C024  F067         	movff	?___ftmul,sqrt@q
  4067  00249E  C025  F068         	movff	?___ftmul+1,sqrt@q+1
  4068  0024A2  C026  F069         	movff	?___ftmul+2,sqrt@q+2
  4069  0024A6  C067  F024         	movff	sqrt@q,___ftmul@f1
  4070  0024AA  C068  F025         	movff	sqrt@q+1,___ftmul@f1+1
  4071  0024AE  C069  F026         	movff	sqrt@q+2,___ftmul@f1+2
  4072  0024B2  C06A  F027         	movff	sqrt@x,___ftmul@f2
  4073  0024B6  C06B  F028         	movff	sqrt@x+1,___ftmul@f2+1
  4074  0024BA  C06C  F029         	movff	sqrt@x+2,___ftmul@f2+2
  4075  0024BE  ECD4  F013         	call	___ftmul	;wreg free
  4076  0024C2  C024  F067         	movff	?___ftmul,sqrt@q
  4077  0024C6  C025  F068         	movff	?___ftmul+1,sqrt@q+1
  4078  0024CA  C026  F069         	movff	?___ftmul+2,sqrt@q+2
  4079  0024CE  C067  F024         	movff	sqrt@q,___ftmul@f1
  4080  0024D2  C068  F025         	movff	sqrt@q+1,___ftmul@f1+1
  4081  0024D6  C069  F026         	movff	sqrt@q+2,___ftmul@f1+2
  4082  0024DA  C06A  F027         	movff	sqrt@x,___ftmul@f2
  4083  0024DE  C06B  F028         	movff	sqrt@x+1,___ftmul@f2+1
  4084  0024E2  C06C  F029         	movff	sqrt@x+2,___ftmul@f2+2
  4085  0024E6  ECD4  F013         	call	___ftmul	;wreg free
  4086  0024EA  C024  F067         	movff	?___ftmul,sqrt@q
  4087  0024EE  C025  F068         	movff	?___ftmul+1,sqrt@q+1
  4088  0024F2  C026  F069         	movff	?___ftmul+2,sqrt@q+2
  4089  0024F6  C06A  F024         	movff	sqrt@x,___ftmul@f1
  4090  0024FA  C06B  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4091  0024FE  C06C  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4092  002502  0E00               	movlw	0
  4093  002504  6E27               	movwf	___ftmul@f2,c
  4094  002506  0EC0               	movlw	192
  4095  002508  6E28               	movwf	___ftmul@f2+1,c
  4096  00250A  0E3F               	movlw	63
  4097  00250C  6E29               	movwf	___ftmul@f2+2,c
  4098  00250E  ECD4  F013         	call	___ftmul	;wreg free
  4099  002512  C024  F06A         	movff	?___ftmul,sqrt@x
  4100  002516  C025  F06B         	movff	?___ftmul+1,sqrt@x+1
  4101  00251A  C026  F06C         	movff	?___ftmul+2,sqrt@x+2
  4102  00251E  C06A  F030         	movff	sqrt@x,___ftsub@f1
  4103  002522  C06B  F031         	movff	sqrt@x+1,___ftsub@f1+1
  4104  002526  C06C  F032         	movff	sqrt@x+2,___ftsub@f1+2
  4105  00252A  C067  F033         	movff	sqrt@q,___ftsub@f2
  4106  00252E  C068  F034         	movff	sqrt@q+1,___ftsub@f2+1
  4107  002532  C069  F035         	movff	sqrt@q+2,___ftsub@f2+2
  4108  002536  EC2F  F018         	call	___ftsub	;wreg free
  4109  00253A  C030  F06A         	movff	?___ftsub,sqrt@x
  4110  00253E  C031  F06B         	movff	?___ftsub+1,sqrt@x+1
  4111  002542  C032  F06C         	movff	?___ftsub+2,sqrt@x+2
  4112  002546  0100               	movlb	0	; () banked
  4113  002548  2F66               	decfsz	sqrt@i& (0+255),f,b
  4114  00254A  D793               	goto	l3210
  4115                           
  4116                           ; BSR set to: 0
  4117                           
  4118                           ; BSR set to: 0
  4119  00254C  C06A  F024         	movff	sqrt@x,___ftmul@f1
  4120  002550  C06B  F025         	movff	sqrt@x+1,___ftmul@f1+1
  4121  002554  C06C  F026         	movff	sqrt@x+2,___ftmul@f1+2
  4122  002558  C03C  F027         	movff	sqrt@a,___ftmul@f2
  4123  00255C  C03D  F028         	movff	sqrt@a+1,___ftmul@f2+1
  4124  002560  C03E  F029         	movff	sqrt@a+2,___ftmul@f2+2
  4125  002564  ECD4  F013         	call	___ftmul	;wreg free
  4126  002568  C024  F03C         	movff	?___ftmul,?_sqrt
  4127  00256C  C025  F03D         	movff	?___ftmul+1,?_sqrt+1
  4128  002570  C026  F03E         	movff	?___ftmul+2,?_sqrt+2
  4129  002574  0012               	return	
  4130  002576                     __end_of_sqrt:
  4131                           	opt stack 0
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           postinc0	equ	0xFEE
  4139                           wreg	equ	0xFE8
  4140                           postdec1	equ	0xFE5
  4141                           fsr1l	equ	0xFE1
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148 ;; *************** function ___ftsub *****************
  4149 ;; Defined at:
  4150 ;;		line 20 in file "/Applications/microchip/xc8/v1.36/sources/common/ftsub.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  f1              3   47[COMRAM] float 
  4153 ;;  f2              3   50[COMRAM] float 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  3   47[COMRAM] float 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4165 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;Total ram usage:        6 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    3
  4172 ;; This function calls:
  4173 ;;		___ftadd
  4174 ;; This function is called by:
  4175 ;;		_excerciseControl
  4176 ;;		_sqrt
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text11
  4181  00305E                     __ptext11:
  4182                           	opt stack 0
  4183  00305E                     ___ftsub:
  4184                           	opt stack 25
  4185                           
  4186                           ;incstack = 0
  4187  00305E  5033               	movf	___ftsub@f2,w,c
  4188  003060  1034               	iorwf	___ftsub@f2+1,w,c
  4189  003062  1035               	iorwf	___ftsub@f2+2,w,c
  4190  003064  B4D8               	btfsc	status,2,c
  4191  003066  D006               	goto	l3172
  4192  003068  0E00               	movlw	0
  4193  00306A  1A33               	xorwf	___ftsub@f2,f,c
  4194  00306C  0E00               	movlw	0
  4195  00306E  1A34               	xorwf	___ftsub@f2+1,f,c
  4196  003070  0E80               	movlw	128
  4197  003072  1A35               	xorwf	___ftsub@f2+2,f,c
  4198  003074                     l3172:
  4199  003074  C030  F024         	movff	___ftsub@f1,___ftadd@f1
  4200  003078  C031  F025         	movff	___ftsub@f1+1,___ftadd@f1+1
  4201  00307C  C032  F026         	movff	___ftsub@f1+2,___ftadd@f1+2
  4202  003080  C033  F027         	movff	___ftsub@f2,___ftadd@f2
  4203  003084  C034  F028         	movff	___ftsub@f2+1,___ftadd@f2+1
  4204  003088  C035  F029         	movff	___ftsub@f2+2,___ftadd@f2+2
  4205  00308C  EC16  F011         	call	___ftadd	;wreg free
  4206  003090  C024  F030         	movff	?___ftadd,?___ftsub
  4207  003094  C025  F031         	movff	?___ftadd+1,?___ftsub+1
  4208  003098  C026  F032         	movff	?___ftadd+2,?___ftsub+2
  4209  00309C  0012               	return	
  4210  00309E                     __end_of___ftsub:
  4211                           	opt stack 0
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           postinc0	equ	0xFEE
  4219                           wreg	equ	0xFE8
  4220                           postdec1	equ	0xFE5
  4221                           fsr1l	equ	0xFE1
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function ___ftmul *****************
  4229 ;; Defined at:
  4230 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  f1              3   35[COMRAM] float 
  4233 ;;  f2              3   38[COMRAM] float 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  4236 ;;  sign            1   49[COMRAM] unsigned char 
  4237 ;;  cntr            1   48[COMRAM] unsigned char 
  4238 ;;  exp             1   44[COMRAM] unsigned char 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  3   35[COMRAM] float 
  4241 ;; Registers used:
  4242 ;;		wreg, status,2, status,0, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4248 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;Total ram usage:       15 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    2
  4255 ;; This function calls:
  4256 ;;		___ftpack
  4257 ;; This function is called by:
  4258 ;;		_main
  4259 ;;		_excerciseControl
  4260 ;;		_sqrt
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text12
  4265  0027A8                     __ptext12:
  4266                           	opt stack 0
  4267  0027A8                     ___ftmul:
  4268                           	opt stack 26
  4269                           
  4270                           ;incstack = 0
  4271  0027A8  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  4272  0027AC  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4273  0027AE  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4274  0027B0  3425               	rlcf	___ftmul@f1+1,w,c
  4275  0027B2  362A               	rlcf	??___ftmul& (0+255),f,c
  4276  0027B4  E301               	bnc	u3081
  4277  0027B6  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4278  0027B8                     u3081:
  4279  0027B8  502A               	movf	??___ftmul,w,c
  4280  0027BA  6E2D               	movwf	___ftmul@exp,c
  4281  0027BC  502D               	movf	___ftmul@exp,w,c
  4282  0027BE  A4D8               	btfss	status,2,c
  4283  0027C0  D007               	goto	l3126
  4284  0027C2  0E00               	movlw	0
  4285  0027C4  6E24               	movwf	?___ftmul,c
  4286  0027C6  0E00               	movlw	0
  4287  0027C8  6E25               	movwf	?___ftmul+1,c
  4288  0027CA  0E00               	movlw	0
  4289  0027CC  6E26               	movwf	?___ftmul+2,c
  4290  0027CE  0012               	return	
  4291  0027D0                     l3126:
  4292  0027D0  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  4293  0027D4  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  4294  0027D6  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  4295  0027D8  3428               	rlcf	___ftmul@f2+1,w,c
  4296  0027DA  362A               	rlcf	??___ftmul& (0+255),f,c
  4297  0027DC  E301               	bnc	u3101
  4298  0027DE  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  4299  0027E0                     u3101:
  4300  0027E0  502A               	movf	??___ftmul,w,c
  4301  0027E2  6E32               	movwf	___ftmul@sign,c
  4302  0027E4  5032               	movf	___ftmul@sign,w,c
  4303  0027E6  A4D8               	btfss	status,2,c
  4304  0027E8  D007               	goto	l3132
  4305  0027EA  0E00               	movlw	0
  4306  0027EC  6E24               	movwf	?___ftmul,c
  4307  0027EE  0E00               	movlw	0
  4308  0027F0  6E25               	movwf	?___ftmul+1,c
  4309  0027F2  0E00               	movlw	0
  4310  0027F4  6E26               	movwf	?___ftmul+2,c
  4311  0027F6  0012               	return	
  4312  0027F8                     l3132:
  4313  0027F8  5032               	movf	___ftmul@sign,w,c
  4314  0027FA  0F7B               	addlw	123
  4315  0027FC  262D               	addwf	___ftmul@exp,f,c
  4316  0027FE  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  4317  002802  5029               	movf	___ftmul@f2+2,w,c
  4318  002804  1A32               	xorwf	___ftmul@sign,f,c
  4319  002806  0E80               	movlw	128
  4320  002808  1632               	andwf	___ftmul@sign,f,c
  4321  00280A  8E25               	bsf	___ftmul@f1+1,7,c
  4322  00280C  8E28               	bsf	___ftmul@f2+1,7,c
  4323  00280E  0EFF               	movlw	255
  4324  002810  1627               	andwf	___ftmul@f2,f,c
  4325  002812  0EFF               	movlw	255
  4326  002814  1628               	andwf	___ftmul@f2+1,f,c
  4327  002816  0E00               	movlw	0
  4328  002818  1629               	andwf	___ftmul@f2+2,f,c
  4329  00281A  0E00               	movlw	0
  4330  00281C  6E2E               	movwf	___ftmul@f3_as_product,c
  4331  00281E  0E00               	movlw	0
  4332  002820  6E2F               	movwf	___ftmul@f3_as_product+1,c
  4333  002822  0E00               	movlw	0
  4334  002824  6E30               	movwf	___ftmul@f3_as_product+2,c
  4335  002826  0E07               	movlw	7
  4336  002828  6E31               	movwf	___ftmul@cntr,c
  4337  00282A                     l3146:
  4338  00282A  A024               	btfss	___ftmul@f1,0,c
  4339  00282C  D006               	goto	l3150
  4340  00282E  5027               	movf	___ftmul@f2,w,c
  4341  002830  262E               	addwf	___ftmul@f3_as_product,f,c
  4342  002832  5028               	movf	___ftmul@f2+1,w,c
  4343  002834  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4344  002836  5029               	movf	___ftmul@f2+2,w,c
  4345  002838  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4346  00283A                     l3150:
  4347  00283A  90D8               	bcf	status,0,c
  4348  00283C  3226               	rrcf	___ftmul@f1+2,f,c
  4349  00283E  3225               	rrcf	___ftmul@f1+1,f,c
  4350  002840  3224               	rrcf	___ftmul@f1,f,c
  4351  002842  90D8               	bcf	status,0,c
  4352  002844  3627               	rlcf	___ftmul@f2,f,c
  4353  002846  3628               	rlcf	___ftmul@f2+1,f,c
  4354  002848  3629               	rlcf	___ftmul@f2+2,f,c
  4355  00284A  2E31               	decfsz	___ftmul@cntr,f,c
  4356  00284C  D7EE               	goto	l3146
  4357  00284E  0E09               	movlw	9
  4358  002850  6E31               	movwf	___ftmul@cntr,c
  4359  002852                     l3156:
  4360  002852  A024               	btfss	___ftmul@f1,0,c
  4361  002854  D006               	goto	l3160
  4362  002856  5027               	movf	___ftmul@f2,w,c
  4363  002858  262E               	addwf	___ftmul@f3_as_product,f,c
  4364  00285A  5028               	movf	___ftmul@f2+1,w,c
  4365  00285C  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  4366  00285E  5029               	movf	___ftmul@f2+2,w,c
  4367  002860  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  4368  002862                     l3160:
  4369  002862  90D8               	bcf	status,0,c
  4370  002864  3226               	rrcf	___ftmul@f1+2,f,c
  4371  002866  3225               	rrcf	___ftmul@f1+1,f,c
  4372  002868  3224               	rrcf	___ftmul@f1,f,c
  4373  00286A  90D8               	bcf	status,0,c
  4374  00286C  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  4375  00286E  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  4376  002870  322E               	rrcf	___ftmul@f3_as_product,f,c
  4377  002872  2E31               	decfsz	___ftmul@cntr,f,c
  4378  002874  D7EE               	goto	l3156
  4379  002876  C02E  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  4380  00287A  C02F  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4381  00287E  C030  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4382  002882  C02D  F016         	movff	___ftmul@exp,___ftpack@exp
  4383  002886  C032  F017         	movff	___ftmul@sign,___ftpack@sign
  4384  00288A  EC24  F015         	call	___ftpack	;wreg free
  4385  00288E  C013  F024         	movff	?___ftpack,?___ftmul
  4386  002892  C014  F025         	movff	?___ftpack+1,?___ftmul+1
  4387  002896  C015  F026         	movff	?___ftpack+2,?___ftmul+2
  4388  00289A  0012               	return	
  4389  00289C                     __end_of___ftmul:
  4390                           	opt stack 0
  4391                           tblptru	equ	0xFF8
  4392                           tblptrh	equ	0xFF7
  4393                           tblptrl	equ	0xFF6
  4394                           tablat	equ	0xFF5
  4395                           prodh	equ	0xFF4
  4396                           prodl	equ	0xFF3
  4397                           postinc0	equ	0xFEE
  4398                           wreg	equ	0xFE8
  4399                           postdec1	equ	0xFE5
  4400                           fsr1l	equ	0xFE1
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function ___ftge *****************
  4408 ;; Defined at:
  4409 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  ff1             3   50[COMRAM] float 
  4412 ;;  ff2             3   53[COMRAM] float 
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;		None               void
  4417 ;; Registers used:
  4418 ;;		wreg, status,2, status,0
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4424 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;Total ram usage:        9 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    1
  4431 ;; This function calls:
  4432 ;;		Nothing
  4433 ;; This function is called by:
  4434 ;;		_excerciseControl
  4435 ;;		_sqrt
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text13
  4440  002C3C                     __ptext13:
  4441                           	opt stack 0
  4442  002C3C                     ___ftge:
  4443                           	opt stack 27
  4444                           
  4445                           ;incstack = 0
  4446  002C3C  AE35               	btfss	___ftge@ff1+2,7,c
  4447  002C3E  D016               	goto	l2226
  4448  002C40  C033  F039         	movff	___ftge@ff1,??___ftge
  4449  002C44  C034  F03A         	movff	___ftge@ff1+1,??___ftge+1
  4450  002C48  C035  F03B         	movff	___ftge@ff1+2,??___ftge+2
  4451  002C4C  1E39               	comf	??___ftge,f,c
  4452  002C4E  1E3A               	comf	??___ftge+1,f,c
  4453  002C50  1E3B               	comf	??___ftge+2,f,c
  4454  002C52  2A39               	incf	??___ftge,f,c
  4455  002C54  0E00               	movlw	0
  4456  002C56  223A               	addwfc	??___ftge+1,f,c
  4457  002C58  223B               	addwfc	??___ftge+2,f,c
  4458  002C5A  0E00               	movlw	0
  4459  002C5C  2439               	addwf	??___ftge,w,c
  4460  002C5E  6E33               	movwf	___ftge@ff1,c
  4461  002C60  0E00               	movlw	0
  4462  002C62  203A               	addwfc	??___ftge+1,w,c
  4463  002C64  6E34               	movwf	___ftge@ff1+1,c
  4464  002C66  0E80               	movlw	128
  4465  002C68  203B               	addwfc	??___ftge+2,w,c
  4466  002C6A  6E35               	movwf	___ftge@ff1+2,c
  4467  002C6C                     l2226:
  4468  002C6C  AE38               	btfss	___ftge@ff2+2,7,c
  4469  002C6E  D016               	goto	l2230
  4470  002C70  C036  F039         	movff	___ftge@ff2,??___ftge
  4471  002C74  C037  F03A         	movff	___ftge@ff2+1,??___ftge+1
  4472  002C78  C038  F03B         	movff	___ftge@ff2+2,??___ftge+2
  4473  002C7C  1E39               	comf	??___ftge,f,c
  4474  002C7E  1E3A               	comf	??___ftge+1,f,c
  4475  002C80  1E3B               	comf	??___ftge+2,f,c
  4476  002C82  2A39               	incf	??___ftge,f,c
  4477  002C84  0E00               	movlw	0
  4478  002C86  223A               	addwfc	??___ftge+1,f,c
  4479  002C88  223B               	addwfc	??___ftge+2,f,c
  4480  002C8A  0E00               	movlw	0
  4481  002C8C  2439               	addwf	??___ftge,w,c
  4482  002C8E  6E36               	movwf	___ftge@ff2,c
  4483  002C90  0E00               	movlw	0
  4484  002C92  203A               	addwfc	??___ftge+1,w,c
  4485  002C94  6E37               	movwf	___ftge@ff2+1,c
  4486  002C96  0E80               	movlw	128
  4487  002C98  203B               	addwfc	??___ftge+2,w,c
  4488  002C9A  6E38               	movwf	___ftge@ff2+2,c
  4489  002C9C                     l2230:
  4490  002C9C  0E00               	movlw	0
  4491  002C9E  1A33               	xorwf	___ftge@ff1,f,c
  4492  002CA0  0E00               	movlw	0
  4493  002CA2  1A34               	xorwf	___ftge@ff1+1,f,c
  4494  002CA4  0E80               	movlw	128
  4495  002CA6  1A35               	xorwf	___ftge@ff1+2,f,c
  4496  002CA8  0E00               	movlw	0
  4497  002CAA  1A36               	xorwf	___ftge@ff2,f,c
  4498  002CAC  0E00               	movlw	0
  4499  002CAE  1A37               	xorwf	___ftge@ff2+1,f,c
  4500  002CB0  0E80               	movlw	128
  4501  002CB2  1A38               	xorwf	___ftge@ff2+2,f,c
  4502  002CB4  5036               	movf	___ftge@ff2,w,c
  4503  002CB6  5C33               	subwf	___ftge@ff1,w,c
  4504  002CB8  5037               	movf	___ftge@ff2+1,w,c
  4505  002CBA  5834               	subwfb	___ftge@ff1+1,w,c
  4506  002CBC  5038               	movf	___ftge@ff2+2,w,c
  4507  002CBE  5835               	subwfb	___ftge@ff1+2,w,c
  4508  002CC0  B0D8               	btfsc	status,0,c
  4509  002CC2  D002               	goto	l2236
  4510  002CC4  90D8               	bcf	status,0,c
  4511  002CC6  0012               	return	
  4512  002CC8                     l2236:
  4513  002CC8  80D8               	bsf	status,0,c
  4514  002CCA  0012               	return	
  4515  002CCC                     __end_of___ftge:
  4516                           	opt stack 0
  4517                           tblptru	equ	0xFF8
  4518                           tblptrh	equ	0xFF7
  4519                           tblptrl	equ	0xFF6
  4520                           tablat	equ	0xFF5
  4521                           prodh	equ	0xFF4
  4522                           prodl	equ	0xFF3
  4523                           postinc0	equ	0xFEE
  4524                           wreg	equ	0xFE8
  4525                           postdec1	equ	0xFE5
  4526                           fsr1l	equ	0xFE1
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _round *****************
  4534 ;; Defined at:
  4535 ;;		line 6 in file "/Applications/microchip/xc8/v1.36/sources/common/round.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  x               3   45[BANK0 ] float 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  f               3   48[BANK0 ] float 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  3   45[BANK0 ] float 
  4542 ;; Registers used:
  4543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4549 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;Total ram usage:        6 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    4
  4556 ;; This function calls:
  4557 ;;		___ftadd
  4558 ;;		___ftneg
  4559 ;;		_trunc
  4560 ;; This function is called by:
  4561 ;;		_excerciseControl
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text14
  4566  002CCC                     __ptext14:
  4567                           	opt stack 0
  4568  002CCC                     _round:
  4569                           	opt stack 25
  4570                           
  4571                           ;incstack = 0
  4572  002CCC  C08D  F082         	movff	round@x,trunc@x
  4573  002CD0  C08E  F083         	movff	round@x+1,trunc@x+1
  4574  002CD4  C08F  F084         	movff	round@x+2,trunc@x+2
  4575  002CD8  ECAD  F016         	call	_trunc	;wreg free
  4576  002CDC  C082  F08A         	movff	?_trunc,___ftneg@f1
  4577  002CE0  C083  F08B         	movff	?_trunc+1,___ftneg@f1+1
  4578  002CE4  C084  F08C         	movff	?_trunc+2,___ftneg@f1+2
  4579  002CE8  EC6B  F018         	call	___ftneg	;wreg free
  4580  002CEC  C08A  F024         	movff	?___ftneg,___ftadd@f1
  4581  002CF0  C08B  F025         	movff	?___ftneg+1,___ftadd@f1+1
  4582  002CF4  C08C  F026         	movff	?___ftneg+2,___ftadd@f1+2
  4583  002CF8  C08D  F027         	movff	round@x,___ftadd@f2
  4584  002CFC  C08E  F028         	movff	round@x+1,___ftadd@f2+1
  4585  002D00  C08F  F029         	movff	round@x+2,___ftadd@f2+2
  4586  002D04  EC16  F011         	call	___ftadd	;wreg free
  4587  002D08  C024  F090         	movff	?___ftadd,round@f
  4588  002D0C  C025  F091         	movff	?___ftadd+1,round@f+1
  4589  002D10  C026  F092         	movff	?___ftadd+2,round@f+2
  4590  002D14  C08D  F024         	movff	round@x,___ftadd@f1
  4591  002D18  C08E  F025         	movff	round@x+1,___ftadd@f1+1
  4592  002D1C  C08F  F026         	movff	round@x+2,___ftadd@f1+2
  4593  002D20  C090  F027         	movff	round@f,___ftadd@f2
  4594  002D24  C091  F028         	movff	round@f+1,___ftadd@f2+1
  4595  002D28  C092  F029         	movff	round@f+2,___ftadd@f2+2
  4596  002D2C  EC16  F011         	call	___ftadd	;wreg free
  4597  002D30  C024  F08D         	movff	?___ftadd,round@x
  4598  002D34  C025  F08E         	movff	?___ftadd+1,round@x+1
  4599  002D38  C026  F08F         	movff	?___ftadd+2,round@x+2
  4600  002D3C  C08D  F082         	movff	round@x,trunc@x
  4601  002D40  C08E  F083         	movff	round@x+1,trunc@x+1
  4602  002D44  C08F  F084         	movff	round@x+2,trunc@x+2
  4603  002D48  ECAD  F016         	call	_trunc	;wreg free
  4604  002D4C  C082  F08D         	movff	?_trunc,?_round
  4605  002D50  C083  F08E         	movff	?_trunc+1,?_round+1
  4606  002D54  C084  F08F         	movff	?_trunc+2,?_round+2
  4607  002D58  0012               	return	
  4608  002D5A                     __end_of_round:
  4609                           	opt stack 0
  4610                           tblptru	equ	0xFF8
  4611                           tblptrh	equ	0xFF7
  4612                           tblptrl	equ	0xFF6
  4613                           tablat	equ	0xFF5
  4614                           prodh	equ	0xFF4
  4615                           prodl	equ	0xFF3
  4616                           postinc0	equ	0xFEE
  4617                           wreg	equ	0xFE8
  4618                           postdec1	equ	0xFE5
  4619                           fsr1l	equ	0xFE1
  4620                           postinc2	equ	0xFDE
  4621                           postdec2	equ	0xFDD
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _trunc *****************
  4627 ;; Defined at:
  4628 ;;		line 13 in file "/Applications/microchip/xc8/v1.36/sources/common/trunc.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  x               3   34[BANK0 ] float 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  i               3   37[BANK0 ] float 
  4633 ;;  expon           2   40[BANK0 ] int 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  3   34[BANK0 ] int 
  4636 ;; Registers used:
  4637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4643 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;Total ram usage:        8 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    3
  4650 ;; This function calls:
  4651 ;;		___altoft
  4652 ;;		___fttol
  4653 ;;		_frexp
  4654 ;; This function is called by:
  4655 ;;		_round
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text15
  4660  002D5A                     __ptext15:
  4661                           	opt stack 0
  4662  002D5A                     _trunc:
  4663                           	opt stack 25
  4664                           
  4665                           ;incstack = 0
  4666  002D5A  C082  F013         	movff	trunc@x,frexp@value
  4667  002D5E  C083  F014         	movff	trunc@x+1,frexp@value+1
  4668  002D62  C084  F015         	movff	trunc@x+2,frexp@value+2
  4669  002D66  0E88               	movlw	low trunc@expon
  4670  002D68  6E16               	movwf	frexp@eptr,c
  4671  002D6A  0E00               	movlw	high trunc@expon
  4672  002D6C  6E17               	movwf	frexp@eptr+1,c
  4673  002D6E  ECF4  F016         	call	_frexp	;wreg free
  4674  002D72  0100               	movlb	0	; () banked
  4675  002D74  AF89               	btfss	(trunc@expon+1)& (0+255),7,b
  4676  002D76  D00A               	goto	l3184
  4677                           
  4678                           ; BSR set to: 0
  4679  002D78  0E00               	movlw	0
  4680  002D7A  0100               	movlb	0	; () banked
  4681  002D7C  6F82               	movwf	?_trunc& (0+255),b
  4682  002D7E  0E00               	movlw	0
  4683  002D80  0100               	movlb	0	; () banked
  4684  002D82  6F83               	movwf	(?_trunc+1)& (0+255),b
  4685  002D84  0E00               	movlw	0
  4686  002D86  0100               	movlb	0	; () banked
  4687  002D88  6F84               	movwf	(?_trunc+2)& (0+255),b
  4688                           
  4689                           ; BSR set to: 0
  4690  002D8A  0012               	return	
  4691  002D8C                     l3184:
  4692                           
  4693                           ; BSR set to: 0
  4694  002D8C  0100               	movlb	0	; () banked
  4695  002D8E  5189               	movf	(trunc@expon+1)& (0+255),w,b
  4696  002D90  E105               	bnz	u3160
  4697  002D92  0E15               	movlw	21
  4698  002D94  0100               	movlb	0	; () banked
  4699  002D96  5D88               	subwf	trunc@expon& (0+255),w,b
  4700  002D98  A0D8               	btfss	status,0,c
  4701  002D9A  D007               	goto	l3188
  4702  002D9C                     u3160:
  4703                           
  4704                           ; BSR set to: 0
  4705  002D9C  C082  F082         	movff	trunc@x,?_trunc
  4706  002DA0  C083  F083         	movff	trunc@x+1,?_trunc+1
  4707  002DA4  C084  F084         	movff	trunc@x+2,?_trunc+2
  4708  002DA8  0012               	return	
  4709  002DAA                     l3188:
  4710                           
  4711                           ; BSR set to: 0
  4712  002DAA  C082  F042         	movff	trunc@x,___fttol@f1
  4713  002DAE  C083  F043         	movff	trunc@x+1,___fttol@f1+1
  4714  002DB2  C084  F044         	movff	trunc@x+2,___fttol@f1+2
  4715  002DB6  ECBB  F012         	call	___fttol	;wreg free
  4716  002DBA  C042  F078         	movff	?___fttol,___altoft@c
  4717  002DBE  C043  F079         	movff	?___fttol+1,___altoft@c+1
  4718  002DC2  C044  F07A         	movff	?___fttol+2,___altoft@c+2
  4719  002DC6  C045  F07B         	movff	?___fttol+3,___altoft@c+3
  4720  002DCA  ECCF  F015         	call	___altoft	;wreg free
  4721  002DCE  C078  F085         	movff	?___altoft,trunc@i
  4722  002DD2  C079  F086         	movff	?___altoft+1,trunc@i+1
  4723  002DD6  C07A  F087         	movff	?___altoft+2,trunc@i+2
  4724  002DDA  C085  F082         	movff	trunc@i,?_trunc
  4725  002DDE  C086  F083         	movff	trunc@i+1,?_trunc+1
  4726  002DE2  C087  F084         	movff	trunc@i+2,?_trunc+2
  4727  002DE6  0012               	return	
  4728  002DE8                     __end_of_trunc:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           postdec1	equ	0xFE5
  4739                           fsr1l	equ	0xFE1
  4740                           postinc2	equ	0xFDE
  4741                           postdec2	equ	0xFDD
  4742                           fsr2h	equ	0xFDA
  4743                           fsr2l	equ	0xFD9
  4744                           status	equ	0xFD8
  4745                           
  4746 ;; *************** function _frexp *****************
  4747 ;; Defined at:
  4748 ;;		line 254 in file "/Applications/microchip/xc8/v1.36/sources/common/frexp.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  value           3   18[COMRAM] int 
  4751 ;;  eptr            2   21[COMRAM] PTR int 
  4752 ;;		 -> trunc@expon(2), 
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  3   18[COMRAM] PTR int 
  4757 ;; Registers used:
  4758 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4764 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;Total ram usage:        7 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    1
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_trunc
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text16
  4779  002DE8                     __ptext16:
  4780                           	opt stack 0
  4781  002DE8                     _frexp:
  4782                           	opt stack 26
  4783                           
  4784                           ;incstack = 0
  4785  002DE8  5013               	movf	frexp@value,w,c
  4786  002DEA  1014               	iorwf	frexp@value+1,w,c
  4787  002DEC  1015               	iorwf	frexp@value+2,w,c
  4788  002DEE  A4D8               	btfss	status,2,c
  4789  002DF0  D009               	goto	l2150
  4790  002DF2  C016  FFD9         	movff	frexp@eptr,fsr2l
  4791  002DF6  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4792  002DFA  0E00               	movlw	0
  4793  002DFC  6EDE               	movwf	postinc2,c
  4794  002DFE  0E00               	movlw	0
  4795  002E00  6EDD               	movwf	postdec2,c
  4796                           
  4797                           ;	Return value of _frexp is never used
  4798  002E02  0012               	return	
  4799  002E04                     l2150:
  4800  002E04  5015               	movf	frexp@value+2,w,c
  4801  002E06  0B7F               	andlw	127
  4802  002E08  6E18               	movwf	??_frexp& (0+255),c
  4803  002E0A  6A19               	clrf	(??_frexp+1)& (0+255),c
  4804  002E0C  90D8               	bcf	status,0,c
  4805  002E0E  3618               	rlcf	??_frexp,f,c
  4806  002E10  3619               	rlcf	??_frexp+1,f,c
  4807  002E12  C016  FFD9         	movff	frexp@eptr,fsr2l
  4808  002E16  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4809  002E1A  C018  FFDE         	movff	??_frexp,postinc2
  4810  002E1E  C019  FFDD         	movff	??_frexp+1,postdec2
  4811  002E22  AE14               	btfss	frexp@value+1,7,c
  4812  002E24  D003               	goto	u1760
  4813  002E26  6A18               	clrf	??_frexp& (0+255),c
  4814  002E28  2A18               	incf	??_frexp& (0+255),f,c
  4815  002E2A  D001               	goto	u1768
  4816  002E2C                     u1760:
  4817  002E2C  6A18               	clrf	??_frexp& (0+255),c
  4818  002E2E                     u1768:
  4819  002E2E  5018               	movf	??_frexp,w,c
  4820  002E30  C016  FFD9         	movff	frexp@eptr,fsr2l
  4821  002E34  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4822  002E38  12DE               	iorwf	postinc2,f,c
  4823  002E3A  0E00               	movlw	0
  4824  002E3C  12DD               	iorwf	postdec2,f,c
  4825  002E3E  C016  FFD9         	movff	frexp@eptr,fsr2l
  4826  002E42  C017  FFDA         	movff	frexp@eptr+1,fsr2h
  4827  002E46  0E82               	movlw	130
  4828  002E48  26DE               	addwf	postinc2,f,c
  4829  002E4A  0EFF               	movlw	255
  4830  002E4C  22DD               	addwfc	postdec2,f,c
  4831  002E4E  8015               	bsf	frexp@value+2,0,c
  4832  002E50  8215               	bsf	frexp@value+2,1,c
  4833  002E52  8415               	bsf	frexp@value+2,2,c
  4834  002E54  8615               	bsf	frexp@value+2,3,c
  4835  002E56  8815               	bsf	frexp@value+2,4,c
  4836  002E58  8A15               	bsf	frexp@value+2,5,c
  4837  002E5A  9C15               	bcf	frexp@value+2,6,c
  4838  002E5C  9E14               	bcf	frexp@value+1,7,c
  4839  002E5E  0012               	return	
  4840  002E60                     __end_of_frexp:
  4841                           	opt stack 0
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           postinc0	equ	0xFEE
  4849                           wreg	equ	0xFE8
  4850                           postdec1	equ	0xFE5
  4851                           fsr1l	equ	0xFE1
  4852                           postinc2	equ	0xFDE
  4853                           postdec2	equ	0xFDD
  4854                           fsr2h	equ	0xFDA
  4855                           fsr2l	equ	0xFD9
  4856                           status	equ	0xFD8
  4857                           
  4858 ;; *************** function ___fttol *****************
  4859 ;; Defined at:
  4860 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  f1              3   65[COMRAM] float 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  lval            4   19[BANK0 ] unsigned long 
  4865 ;;  exp1            1   23[BANK0 ] unsigned char 
  4866 ;;  sign1           1   18[BANK0 ] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  4   65[COMRAM] long 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4876 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Totals:         4      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;Total ram usage:       15 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    1
  4883 ;; This function calls:
  4884 ;;		Nothing
  4885 ;; This function is called by:
  4886 ;;		_main
  4887 ;;		_excerciseControl
  4888 ;;		_trunc
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text17
  4893  002576                     __ptext17:
  4894                           	opt stack 0
  4895  002576                     ___fttol:
  4896                           	opt stack 26
  4897                           
  4898                           ;incstack = 0
  4899  002576  C044  F06D         	movff	___fttol@f1+2,??___fttol
  4900  00257A  0100               	movlb	0	; () banked
  4901  00257C  6B6E               	clrf	(??___fttol+1)& (0+255),b
  4902  00257E  6B6F               	clrf	(??___fttol+2)& (0+255),b
  4903  002580  3443               	rlcf	___fttol@f1+1,w,c
  4904  002582  0100               	movlb	0	; () banked
  4905  002584  376D               	rlcf	??___fttol& (0+255),f,b
  4906  002586  E301               	bnc	u3001
  4907  002588  816E               	bsf	(??___fttol+1)& (0+255),0,b
  4908  00258A                     u3001:
  4909  00258A  0100               	movlb	0	; () banked
  4910  00258C  516D               	movf	??___fttol& (0+255),w,b
  4911  00258E  0100               	movlb	0	; () banked
  4912  002590  6F77               	movwf	___fttol@exp1& (0+255),b
  4913  002592  0100               	movlb	0	; () banked
  4914  002594  5177               	movf	___fttol@exp1& (0+255),w,b
  4915  002596  A4D8               	btfss	status,2,c
  4916  002598  D009               	goto	l3080
  4917                           
  4918                           ; BSR set to: 0
  4919  00259A  0E00               	movlw	0
  4920  00259C  6E42               	movwf	?___fttol,c
  4921  00259E  0E00               	movlw	0
  4922  0025A0  6E43               	movwf	?___fttol+1,c
  4923  0025A2  0E00               	movlw	0
  4924  0025A4  6E44               	movwf	?___fttol+2,c
  4925  0025A6  0E00               	movlw	0
  4926  0025A8  6E45               	movwf	?___fttol+3,c
  4927                           
  4928                           ; BSR set to: 0
  4929  0025AA  0012               	return	
  4930  0025AC                     l3080:
  4931                           
  4932                           ; BSR set to: 0
  4933  0025AC  0E17               	movlw	23
  4934  0025AE  0100               	movlb	0	; () banked
  4935  0025B0  6F6D               	movwf	??___fttol& (0+255),b
  4936  0025B2  C042  F06E         	movff	___fttol@f1,??___fttol+1
  4937  0025B6  C043  F06F         	movff	___fttol@f1+1,??___fttol+2
  4938  0025BA  C044  F070         	movff	___fttol@f1+2,??___fttol+3
  4939  0025BE  0100               	movlb	0	; () banked
  4940  0025C0  296D               	incf	??___fttol& (0+255),w,b
  4941  0025C2  0100               	movlb	0	; () banked
  4942  0025C4  6F71               	movwf	(??___fttol+4)& (0+255),b
  4943  0025C6  D005               	goto	u3020
  4944  0025C8                     u3025:
  4945  0025C8  0100               	movlb	0	; () banked
  4946  0025CA  90D8               	bcf	status,0,c
  4947  0025CC  3370               	rrcf	(??___fttol+3)& (0+255),f,b
  4948  0025CE  336F               	rrcf	(??___fttol+2)& (0+255),f,b
  4949  0025D0  336E               	rrcf	(??___fttol+1)& (0+255),f,b
  4950  0025D2                     u3020:
  4951  0025D2  0100               	movlb	0	; () banked
  4952  0025D4  2F71               	decfsz	(??___fttol+4)& (0+255),f,b
  4953  0025D6  D7F8               	goto	u3025
  4954  0025D8  0100               	movlb	0	; () banked
  4955  0025DA  516E               	movf	(??___fttol+1)& (0+255),w,b
  4956  0025DC  0100               	movlb	0	; () banked
  4957  0025DE  6F72               	movwf	___fttol@sign1& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960  0025E0  8E43               	bsf	___fttol@f1+1,7,c
  4961                           
  4962                           ; BSR set to: 0
  4963  0025E2  0EFF               	movlw	255
  4964  0025E4  1642               	andwf	___fttol@f1,f,c
  4965  0025E6  0EFF               	movlw	255
  4966  0025E8  1643               	andwf	___fttol@f1+1,f,c
  4967  0025EA  0E00               	movlw	0
  4968  0025EC  1644               	andwf	___fttol@f1+2,f,c
  4969                           
  4970                           ; BSR set to: 0
  4971  0025EE  5042               	movf	___fttol@f1,w,c
  4972  0025F0  0100               	movlb	0	; () banked
  4973  0025F2  6F73               	movwf	___fttol@lval& (0+255),b
  4974  0025F4  5043               	movf	___fttol@f1+1,w,c
  4975  0025F6  0100               	movlb	0	; () banked
  4976  0025F8  6F74               	movwf	(___fttol@lval+1)& (0+255),b
  4977  0025FA  5044               	movf	___fttol@f1+2,w,c
  4978  0025FC  0100               	movlb	0	; () banked
  4979  0025FE  6F75               	movwf	(___fttol@lval+2)& (0+255),b
  4980  002600  0100               	movlb	0	; () banked
  4981  002602  6B76               	clrf	(___fttol@lval+3)& (0+255),b
  4982                           
  4983                           ; BSR set to: 0
  4984  002604  0E8E               	movlw	142
  4985  002606  0100               	movlb	0	; () banked
  4986  002608  5F77               	subwf	___fttol@exp1& (0+255),f,b
  4987                           
  4988                           ; BSR set to: 0
  4989  00260A  0100               	movlb	0	; () banked
  4990  00260C  AF77               	btfss	___fttol@exp1& (0+255),7,b
  4991  00260E  D019               	goto	l3102
  4992                           
  4993                           ; BSR set to: 0
  4994  002610  0100               	movlb	0	; () banked
  4995  002612  5177               	movf	___fttol@exp1& (0+255),w,b
  4996  002614  0A80               	xorlw	128
  4997  002616  0F8F               	addlw	143
  4998  002618  B0D8               	btfsc	status,0,c
  4999  00261A  D009               	goto	l3098
  5000                           
  5001                           ; BSR set to: 0
  5002  00261C  0E00               	movlw	0
  5003  00261E  6E42               	movwf	?___fttol,c
  5004  002620  0E00               	movlw	0
  5005  002622  6E43               	movwf	?___fttol+1,c
  5006  002624  0E00               	movlw	0
  5007  002626  6E44               	movwf	?___fttol+2,c
  5008  002628  0E00               	movlw	0
  5009  00262A  6E45               	movwf	?___fttol+3,c
  5010                           
  5011                           ; BSR set to: 0
  5012  00262C  0012               	return	
  5013  00262E                     l3098:
  5014                           
  5015                           ; BSR set to: 0
  5016  00262E  0100               	movlb	0	; () banked
  5017  002630  90D8               	bcf	status,0,c
  5018  002632  3376               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5019  002634  3375               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5020  002636  3374               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5021  002638  3373               	rrcf	___fttol@lval& (0+255),f,b
  5022                           
  5023                           ; BSR set to: 0
  5024  00263A  0100               	movlb	0	; () banked
  5025  00263C  3F77               	incfsz	___fttol@exp1& (0+255),f,b
  5026  00263E  D7F7               	goto	l3098
  5027                           
  5028                           ; BSR set to: 0
  5029  002640  D01A               	goto	l3112
  5030  002642                     l3102:
  5031                           
  5032                           ; BSR set to: 0
  5033  002642  0E17               	movlw	23
  5034  002644  0100               	movlb	0	; () banked
  5035  002646  6577               	cpfsgt	___fttol@exp1& (0+255),b
  5036  002648  D011               	goto	l3110
  5037                           
  5038                           ; BSR set to: 0
  5039  00264A  0E00               	movlw	0
  5040  00264C  6E42               	movwf	?___fttol,c
  5041  00264E  0E00               	movlw	0
  5042  002650  6E43               	movwf	?___fttol+1,c
  5043  002652  0E00               	movlw	0
  5044  002654  6E44               	movwf	?___fttol+2,c
  5045  002656  0E00               	movlw	0
  5046  002658  6E45               	movwf	?___fttol+3,c
  5047                           
  5048                           ; BSR set to: 0
  5049  00265A  0012               	return	
  5050  00265C                     l3108:
  5051                           
  5052                           ; BSR set to: 0
  5053  00265C  0100               	movlb	0	; () banked
  5054  00265E  90D8               	bcf	status,0,c
  5055  002660  3773               	rlcf	___fttol@lval& (0+255),f,b
  5056  002662  3774               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5057  002664  3775               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5058  002666  3776               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5059  002668  0100               	movlb	0	; () banked
  5060  00266A  0777               	decf	___fttol@exp1& (0+255),f,b
  5061  00266C                     l3110:
  5062                           
  5063                           ; BSR set to: 0
  5064  00266C  0100               	movlb	0	; () banked
  5065  00266E  5177               	movf	___fttol@exp1& (0+255),w,b
  5066  002670  0100               	movlb	0	; () banked
  5067  002672  A4D8               	btfss	status,2,c
  5068  002674  D7F3               	goto	l3108
  5069  002676                     l3112:
  5070                           
  5071                           ; BSR set to: 0
  5072  002676  0100               	movlb	0	; () banked
  5073  002678  5172               	movf	___fttol@sign1& (0+255),w,b
  5074  00267A  0100               	movlb	0	; () banked
  5075  00267C  B4D8               	btfsc	status,2,c
  5076  00267E  D009               	goto	l3116
  5077                           
  5078                           ; BSR set to: 0
  5079  002680  0100               	movlb	0	; () banked
  5080  002682  1F76               	comf	(___fttol@lval+3)& (0+255),f,b
  5081  002684  1F75               	comf	(___fttol@lval+2)& (0+255),f,b
  5082  002686  1F74               	comf	(___fttol@lval+1)& (0+255),f,b
  5083  002688  6D73               	negf	___fttol@lval& (0+255),b
  5084  00268A  0E00               	movlw	0
  5085  00268C  2374               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5086  00268E  2375               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5087  002690  2376               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5088  002692                     l3116:
  5089                           
  5090                           ; BSR set to: 0
  5091  002692  C073  F042         	movff	___fttol@lval,?___fttol
  5092  002696  C074  F043         	movff	___fttol@lval+1,?___fttol+1
  5093  00269A  C075  F044         	movff	___fttol@lval+2,?___fttol+2
  5094  00269E  C076  F045         	movff	___fttol@lval+3,?___fttol+3
  5095  0026A2  0012               	return	
  5096  0026A4                     __end_of___fttol:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1l	equ	0xFE1
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function ___altoft *****************
  5115 ;; Defined at:
  5116 ;;		line 42 in file "/Applications/microchip/xc8/v1.36/sources/common/altoft.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  c               4   24[BANK0 ] long 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  sign            1   33[BANK0 ] unsigned char 
  5121 ;;  exp             1   32[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  3   24[BANK0 ] float 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:       10 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    2
  5138 ;; This function calls:
  5139 ;;		___ftpack
  5140 ;; This function is called by:
  5141 ;;		_trunc
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text18
  5146  002B9E                     __ptext18:
  5147                           	opt stack 0
  5148  002B9E                     ___altoft:
  5149                           	opt stack 25
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;incstack = 0
  5153  002B9E  0E00               	movlw	0
  5154  002BA0  0100               	movlb	0	; () banked
  5155  002BA2  6F81               	movwf	___altoft@sign& (0+255),b
  5156  002BA4  0E8E               	movlw	142
  5157  002BA6  0100               	movlb	0	; () banked
  5158  002BA8  6F80               	movwf	___altoft@exp& (0+255),b
  5159                           
  5160                           ; BSR set to: 0
  5161  002BAA  0100               	movlb	0	; () banked
  5162  002BAC  AF7B               	btfss	(___altoft@c+3)& (0+255),7,b
  5163  002BAE  D015               	goto	l2998
  5164                           
  5165                           ; BSR set to: 0
  5166  002BB0  0100               	movlb	0	; () banked
  5167  002BB2  1F7B               	comf	(___altoft@c+3)& (0+255),f,b
  5168  002BB4  1F7A               	comf	(___altoft@c+2)& (0+255),f,b
  5169  002BB6  1F79               	comf	(___altoft@c+1)& (0+255),f,b
  5170  002BB8  6D78               	negf	___altoft@c& (0+255),b
  5171  002BBA  0E00               	movlw	0
  5172  002BBC  2379               	addwfc	(___altoft@c+1)& (0+255),f,b
  5173  002BBE  237A               	addwfc	(___altoft@c+2)& (0+255),f,b
  5174  002BC0  237B               	addwfc	(___altoft@c+3)& (0+255),f,b
  5175                           
  5176                           ; BSR set to: 0
  5177  002BC2  0E01               	movlw	1
  5178  002BC4  0100               	movlb	0	; () banked
  5179  002BC6  6F81               	movwf	___altoft@sign& (0+255),b
  5180                           
  5181                           ; BSR set to: 0
  5182  002BC8  D008               	goto	l2998
  5183  002BCA                     l2996:
  5184                           
  5185                           ; BSR set to: 0
  5186  002BCA  0100               	movlb	0	; () banked
  5187  002BCC  90D8               	bcf	status,0,c
  5188  002BCE  337B               	rrcf	(___altoft@c+3)& (0+255),f,b
  5189  002BD0  337A               	rrcf	(___altoft@c+2)& (0+255),f,b
  5190  002BD2  3379               	rrcf	(___altoft@c+1)& (0+255),f,b
  5191  002BD4  3378               	rrcf	___altoft@c& (0+255),f,b
  5192  002BD6  0100               	movlb	0	; () banked
  5193  002BD8  2B80               	incf	___altoft@exp& (0+255),f,b
  5194  002BDA                     l2998:
  5195                           
  5196                           ; BSR set to: 0
  5197  002BDA  0E00               	movlw	0
  5198  002BDC  0100               	movlb	0	; () banked
  5199  002BDE  1578               	andwf	___altoft@c& (0+255),w,b
  5200  002BE0  0100               	movlb	0	; () banked
  5201  002BE2  6F7C               	movwf	??___altoft& (0+255),b
  5202  002BE4  0E00               	movlw	0
  5203  002BE6  0100               	movlb	0	; () banked
  5204  002BE8  1579               	andwf	(___altoft@c+1)& (0+255),w,b
  5205  002BEA  0100               	movlb	0	; () banked
  5206  002BEC  6F7D               	movwf	(??___altoft+1)& (0+255),b
  5207  002BEE  0E00               	movlw	0
  5208  002BF0  0100               	movlb	0	; () banked
  5209  002BF2  157A               	andwf	(___altoft@c+2)& (0+255),w,b
  5210  002BF4  0100               	movlb	0	; () banked
  5211  002BF6  6F7E               	movwf	(??___altoft+2)& (0+255),b
  5212  002BF8  0EFF               	movlw	255
  5213  002BFA  0100               	movlb	0	; () banked
  5214  002BFC  157B               	andwf	(___altoft@c+3)& (0+255),w,b
  5215  002BFE  0100               	movlb	0	; () banked
  5216  002C00  6F7F               	movwf	(??___altoft+3)& (0+255),b
  5217  002C02  0100               	movlb	0	; () banked
  5218  002C04  517C               	movf	??___altoft& (0+255),w,b
  5219  002C06  0100               	movlb	0	; () banked
  5220  002C08  117D               	iorwf	(??___altoft+1)& (0+255),w,b
  5221  002C0A  0100               	movlb	0	; () banked
  5222  002C0C  117E               	iorwf	(??___altoft+2)& (0+255),w,b
  5223  002C0E  0100               	movlb	0	; () banked
  5224  002C10  117F               	iorwf	(??___altoft+3)& (0+255),w,b
  5225  002C12  A4D8               	btfss	status,2,c
  5226  002C14  D7DA               	goto	l2996
  5227                           
  5228                           ; BSR set to: 0
  5229                           
  5230                           ; BSR set to: 0
  5231  002C16  C078  F013         	movff	___altoft@c,___ftpack@arg
  5232  002C1A  C079  F014         	movff	___altoft@c+1,___ftpack@arg+1
  5233  002C1E  C07A  F015         	movff	___altoft@c+2,___ftpack@arg+2
  5234  002C22  C080  F016         	movff	___altoft@exp,___ftpack@exp
  5235  002C26  C081  F017         	movff	___altoft@sign,___ftpack@sign
  5236  002C2A  EC24  F015         	call	___ftpack	;wreg free
  5237  002C2E  C013  F078         	movff	?___ftpack,?___altoft
  5238  002C32  C014  F079         	movff	?___ftpack+1,?___altoft+1
  5239  002C36  C015  F07A         	movff	?___ftpack+2,?___altoft+2
  5240  002C3A  0012               	return	
  5241  002C3C                     __end_of___altoft:
  5242                           	opt stack 0
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           postinc0	equ	0xFEE
  5250                           wreg	equ	0xFE8
  5251                           postdec1	equ	0xFE5
  5252                           fsr1l	equ	0xFE1
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function ___ftneg *****************
  5260 ;; Defined at:
  5261 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/ftneg.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  f1              3   42[BANK0 ] float 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  3   42[BANK0 ] float 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5275 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;Total ram usage:        3 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    1
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_round
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text19
  5290  0030D6                     __ptext19:
  5291                           	opt stack 0
  5292  0030D6                     ___ftneg:
  5293                           	opt stack 27
  5294                           
  5295                           ;incstack = 0
  5296  0030D6  0100               	movlb	0	; () banked
  5297  0030D8  518A               	movf	___ftneg@f1& (0+255),w,b
  5298  0030DA  0100               	movlb	0	; () banked
  5299  0030DC  118B               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  5300  0030DE  0100               	movlb	0	; () banked
  5301  0030E0  118C               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  5302  0030E2  B4D8               	btfsc	status,2,c
  5303  0030E4  D009               	goto	l615
  5304                           
  5305                           ; BSR set to: 0
  5306  0030E6  0E00               	movlw	0
  5307  0030E8  0100               	movlb	0	; () banked
  5308  0030EA  1B8A               	xorwf	___ftneg@f1& (0+255),f,b
  5309  0030EC  0E00               	movlw	0
  5310  0030EE  0100               	movlb	0	; () banked
  5311  0030F0  1B8B               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  5312  0030F2  0E80               	movlw	128
  5313  0030F4  0100               	movlb	0	; () banked
  5314  0030F6  1B8C               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  5315  0030F8                     l615:
  5316                           
  5317                           ; BSR set to: 0
  5318  0030F8  C08A  F08A         	movff	___ftneg@f1,?___ftneg
  5319  0030FC  C08B  F08B         	movff	___ftneg@f1+1,?___ftneg+1
  5320  003100  C08C  F08C         	movff	___ftneg@f1+2,?___ftneg+2
  5321                           
  5322                           ; BSR set to: 0
  5323  003104  0012               	return		;funcret
  5324  003106                     __end_of___ftneg:
  5325                           	opt stack 0
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           prodh	equ	0xFF4
  5331                           prodl	equ	0xFF3
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           postdec1	equ	0xFE5
  5335                           fsr1l	equ	0xFE1
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function ___ftadd *****************
  5343 ;; Defined at:
  5344 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  f1              3   35[COMRAM] float 
  5347 ;;  f2              3   38[COMRAM] float 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  exp1            1   46[COMRAM] unsigned char 
  5350 ;;  exp2            1   45[COMRAM] unsigned char 
  5351 ;;  sign            1   44[COMRAM] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  3   35[COMRAM] float 
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5361 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;Total ram usage:       12 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    2
  5368 ;; This function calls:
  5369 ;;		___ftpack
  5370 ;; This function is called by:
  5371 ;;		_excerciseControl
  5372 ;;		___ftsub
  5373 ;;		_round
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text20
  5378  00222C                     __ptext20:
  5379                           	opt stack 0
  5380  00222C                     ___ftadd:
  5381                           	opt stack 25
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;incstack = 0
  5385  00222C  C026  F02A         	movff	___ftadd@f1+2,??___ftadd
  5386  002230  6A2B               	clrf	(??___ftadd+1)& (0+255),c
  5387  002232  6A2C               	clrf	(??___ftadd+2)& (0+255),c
  5388  002234  3425               	rlcf	___ftadd@f1+1,w,c
  5389  002236  362A               	rlcf	??___ftadd& (0+255),f,c
  5390  002238  E301               	bnc	u2791
  5391  00223A  802B               	bsf	(??___ftadd+1)& (0+255),0,c
  5392  00223C                     u2791:
  5393  00223C  502A               	movf	??___ftadd,w,c
  5394  00223E  6E2F               	movwf	___ftadd@exp1,c
  5395  002240  C029  F02A         	movff	___ftadd@f2+2,??___ftadd
  5396  002244  6A2B               	clrf	(??___ftadd+1)& (0+255),c
  5397  002246  6A2C               	clrf	(??___ftadd+2)& (0+255),c
  5398  002248  3428               	rlcf	___ftadd@f2+1,w,c
  5399  00224A  362A               	rlcf	??___ftadd& (0+255),f,c
  5400  00224C  E301               	bnc	u2801
  5401  00224E  802B               	bsf	(??___ftadd+1)& (0+255),0,c
  5402  002250                     u2801:
  5403  002250  502A               	movf	??___ftadd,w,c
  5404  002252  6E2E               	movwf	___ftadd@exp2,c
  5405  002254  502F               	movf	___ftadd@exp1,w,c
  5406  002256  B4D8               	btfsc	status,2,c
  5407  002258  D00B               	goto	l558
  5408  00225A  502E               	movf	___ftadd@exp2,w,c
  5409  00225C  5C2F               	subwf	___ftadd@exp1,w,c
  5410  00225E  B0D8               	btfsc	status,0,c
  5411  002260  D00E               	goto	l3012
  5412  002262  502F               	movf	___ftadd@exp1,w,c
  5413  002264  0800               	sublw	0
  5414  002266  242E               	addwf	___ftadd@exp2,w,c
  5415  002268  6E2A               	movwf	??___ftadd& (0+255),c
  5416  00226A  0E18               	movlw	24
  5417  00226C  642A               	cpfsgt	??___ftadd,c
  5418  00226E  D007               	goto	l3012
  5419  002270                     l558:
  5420  002270  C027  F024         	movff	___ftadd@f2,?___ftadd
  5421  002274  C028  F025         	movff	___ftadd@f2+1,?___ftadd+1
  5422  002278  C029  F026         	movff	___ftadd@f2+2,?___ftadd+2
  5423  00227C  0012               	return	
  5424  00227E                     l3012:
  5425  00227E  502E               	movf	___ftadd@exp2,w,c
  5426  002280  B4D8               	btfsc	status,2,c
  5427  002282  D00B               	goto	l562
  5428  002284  502F               	movf	___ftadd@exp1,w,c
  5429  002286  5C2E               	subwf	___ftadd@exp2,w,c
  5430  002288  B0D8               	btfsc	status,0,c
  5431  00228A  D00E               	goto	l3018
  5432  00228C  502E               	movf	___ftadd@exp2,w,c
  5433  00228E  0800               	sublw	0
  5434  002290  242F               	addwf	___ftadd@exp1,w,c
  5435  002292  6E2A               	movwf	??___ftadd& (0+255),c
  5436  002294  0E18               	movlw	24
  5437  002296  642A               	cpfsgt	??___ftadd,c
  5438  002298  D007               	goto	l3018
  5439  00229A                     l562:
  5440  00229A  C024  F024         	movff	___ftadd@f1,?___ftadd
  5441  00229E  C025  F025         	movff	___ftadd@f1+1,?___ftadd+1
  5442  0022A2  C026  F026         	movff	___ftadd@f1+2,?___ftadd+2
  5443  0022A6  0012               	return	
  5444  0022A8                     l3018:
  5445  0022A8  0E06               	movlw	6
  5446  0022AA  6E2D               	movwf	___ftadd@sign,c
  5447  0022AC  BE26               	btfsc	___ftadd@f1+2,7,c
  5448  0022AE  8E2D               	bsf	___ftadd@sign,7,c
  5449  0022B0  BE29               	btfsc	___ftadd@f2+2,7,c
  5450  0022B2  8C2D               	bsf	___ftadd@sign,6,c
  5451  0022B4  8E25               	bsf	___ftadd@f1+1,7,c
  5452  0022B6  0EFF               	movlw	255
  5453  0022B8  1624               	andwf	___ftadd@f1,f,c
  5454  0022BA  0EFF               	movlw	255
  5455  0022BC  1625               	andwf	___ftadd@f1+1,f,c
  5456  0022BE  0E00               	movlw	0
  5457  0022C0  1626               	andwf	___ftadd@f1+2,f,c
  5458  0022C2  8E28               	bsf	___ftadd@f2+1,7,c
  5459  0022C4  0EFF               	movlw	255
  5460  0022C6  1627               	andwf	___ftadd@f2,f,c
  5461  0022C8  0EFF               	movlw	255
  5462  0022CA  1628               	andwf	___ftadd@f2+1,f,c
  5463  0022CC  0E00               	movlw	0
  5464  0022CE  1629               	andwf	___ftadd@f2+2,f,c
  5465  0022D0  502E               	movf	___ftadd@exp2,w,c
  5466  0022D2  5C2F               	subwf	___ftadd@exp1,w,c
  5467  0022D4  B0D8               	btfsc	status,0,c
  5468  0022D6  D01B               	goto	l3044
  5469  0022D8                     l3034:
  5470  0022D8  90D8               	bcf	status,0,c
  5471  0022DA  3627               	rlcf	___ftadd@f2,f,c
  5472  0022DC  3628               	rlcf	___ftadd@f2+1,f,c
  5473  0022DE  3629               	rlcf	___ftadd@f2+2,f,c
  5474  0022E0  062E               	decf	___ftadd@exp2,f,c
  5475  0022E2  502F               	movf	___ftadd@exp1,w,c
  5476  0022E4  182E               	xorwf	___ftadd@exp2,w,c
  5477  0022E6  B4D8               	btfsc	status,2,c
  5478  0022E8  D00D               	goto	l3042
  5479  0022EA  062D               	decf	___ftadd@sign,f,c
  5480  0022EC  C02D  F02A         	movff	___ftadd@sign,??___ftadd
  5481  0022F0  0E07               	movlw	7
  5482  0022F2  162A               	andwf	??___ftadd,f,c
  5483  0022F4  B4D8               	btfsc	status,2,c
  5484  0022F6  D006               	goto	l3042
  5485  0022F8  D7EF               	goto	l3034
  5486  0022FA                     l3040:
  5487  0022FA  90D8               	bcf	status,0,c
  5488  0022FC  3226               	rrcf	___ftadd@f1+2,f,c
  5489  0022FE  3225               	rrcf	___ftadd@f1+1,f,c
  5490  002300  3224               	rrcf	___ftadd@f1,f,c
  5491  002302  2A2F               	incf	___ftadd@exp1,f,c
  5492  002304                     l3042:
  5493  002304  502E               	movf	___ftadd@exp2,w,c
  5494  002306  182F               	xorwf	___ftadd@exp1,w,c
  5495  002308  B4D8               	btfsc	status,2,c
  5496  00230A  D01F               	goto	l573
  5497  00230C  D7F6               	goto	l3040
  5498  00230E                     l3044:
  5499  00230E  502F               	movf	___ftadd@exp1,w,c
  5500  002310  5C2E               	subwf	___ftadd@exp2,w,c
  5501  002312  B0D8               	btfsc	status,0,c
  5502  002314  D01A               	goto	l573
  5503  002316                     l3046:
  5504  002316  90D8               	bcf	status,0,c
  5505  002318  3624               	rlcf	___ftadd@f1,f,c
  5506  00231A  3625               	rlcf	___ftadd@f1+1,f,c
  5507  00231C  3626               	rlcf	___ftadd@f1+2,f,c
  5508  00231E  062F               	decf	___ftadd@exp1,f,c
  5509  002320  502F               	movf	___ftadd@exp1,w,c
  5510  002322  182E               	xorwf	___ftadd@exp2,w,c
  5511  002324  B4D8               	btfsc	status,2,c
  5512  002326  D00D               	goto	l3054
  5513  002328  062D               	decf	___ftadd@sign,f,c
  5514  00232A  C02D  F02A         	movff	___ftadd@sign,??___ftadd
  5515  00232E  0E07               	movlw	7
  5516  002330  162A               	andwf	??___ftadd,f,c
  5517  002332  B4D8               	btfsc	status,2,c
  5518  002334  D006               	goto	l3054
  5519  002336  D7EF               	goto	l3046
  5520  002338                     l3052:
  5521  002338  90D8               	bcf	status,0,c
  5522  00233A  3229               	rrcf	___ftadd@f2+2,f,c
  5523  00233C  3228               	rrcf	___ftadd@f2+1,f,c
  5524  00233E  3227               	rrcf	___ftadd@f2,f,c
  5525  002340  2A2E               	incf	___ftadd@exp2,f,c
  5526  002342                     l3054:
  5527  002342  502E               	movf	___ftadd@exp2,w,c
  5528  002344  182F               	xorwf	___ftadd@exp1,w,c
  5529  002346  A4D8               	btfss	status,2,c
  5530  002348  D7F7               	goto	l3052
  5531  00234A                     l573:
  5532  00234A  AE2D               	btfss	___ftadd@sign,7,c
  5533  00234C  D00C               	goto	l582
  5534  00234E  0EFF               	movlw	255
  5535  002350  1A24               	xorwf	___ftadd@f1,f,c
  5536  002352  0EFF               	movlw	255
  5537  002354  1A25               	xorwf	___ftadd@f1+1,f,c
  5538  002356  0EFF               	movlw	255
  5539  002358  1A26               	xorwf	___ftadd@f1+2,f,c
  5540  00235A  0E01               	movlw	1
  5541  00235C  2624               	addwf	___ftadd@f1,f,c
  5542  00235E  0E00               	movlw	0
  5543  002360  2225               	addwfc	___ftadd@f1+1,f,c
  5544  002362  0E00               	movlw	0
  5545  002364  2226               	addwfc	___ftadd@f1+2,f,c
  5546  002366                     l582:
  5547  002366  AC2D               	btfss	___ftadd@sign,6,c
  5548  002368  D00C               	goto	l3060
  5549  00236A  0EFF               	movlw	255
  5550  00236C  1A27               	xorwf	___ftadd@f2,f,c
  5551  00236E  0EFF               	movlw	255
  5552  002370  1A28               	xorwf	___ftadd@f2+1,f,c
  5553  002372  0EFF               	movlw	255
  5554  002374  1A29               	xorwf	___ftadd@f2+2,f,c
  5555  002376  0E01               	movlw	1
  5556  002378  2627               	addwf	___ftadd@f2,f,c
  5557  00237A  0E00               	movlw	0
  5558  00237C  2228               	addwfc	___ftadd@f2+1,f,c
  5559  00237E  0E00               	movlw	0
  5560  002380  2229               	addwfc	___ftadd@f2+2,f,c
  5561  002382                     l3060:
  5562  002382  0E00               	movlw	0
  5563  002384  6E2D               	movwf	___ftadd@sign,c
  5564  002386  5024               	movf	___ftadd@f1,w,c
  5565  002388  2627               	addwf	___ftadd@f2,f,c
  5566  00238A  5025               	movf	___ftadd@f1+1,w,c
  5567  00238C  2228               	addwfc	___ftadd@f2+1,f,c
  5568  00238E  5026               	movf	___ftadd@f1+2,w,c
  5569  002390  2229               	addwfc	___ftadd@f2+2,f,c
  5570  002392  AE29               	btfss	___ftadd@f2+2,7,c
  5571  002394  D00E               	goto	l3070
  5572  002396  0EFF               	movlw	255
  5573  002398  1A27               	xorwf	___ftadd@f2,f,c
  5574  00239A  0EFF               	movlw	255
  5575  00239C  1A28               	xorwf	___ftadd@f2+1,f,c
  5576  00239E  0EFF               	movlw	255
  5577  0023A0  1A29               	xorwf	___ftadd@f2+2,f,c
  5578  0023A2  0E01               	movlw	1
  5579  0023A4  2627               	addwf	___ftadd@f2,f,c
  5580  0023A6  0E00               	movlw	0
  5581  0023A8  2228               	addwfc	___ftadd@f2+1,f,c
  5582  0023AA  0E00               	movlw	0
  5583  0023AC  2229               	addwfc	___ftadd@f2+2,f,c
  5584  0023AE  0E01               	movlw	1
  5585  0023B0  6E2D               	movwf	___ftadd@sign,c
  5586  0023B2                     l3070:
  5587  0023B2  C027  F013         	movff	___ftadd@f2,___ftpack@arg
  5588  0023B6  C028  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  5589  0023BA  C029  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  5590  0023BE  C02F  F016         	movff	___ftadd@exp1,___ftpack@exp
  5591  0023C2  C02D  F017         	movff	___ftadd@sign,___ftpack@sign
  5592  0023C6  EC24  F015         	call	___ftpack	;wreg free
  5593  0023CA  C013  F024         	movff	?___ftpack,?___ftadd
  5594  0023CE  C014  F025         	movff	?___ftpack+1,?___ftadd+1
  5595  0023D2  C015  F026         	movff	?___ftpack+2,?___ftadd+2
  5596  0023D6  0012               	return	
  5597  0023D8                     __end_of___ftadd:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           postinc0	equ	0xFEE
  5606                           wreg	equ	0xFE8
  5607                           postdec1	equ	0xFE5
  5608                           fsr1l	equ	0xFE1
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function _limitWheelSpeeds *****************
  5616 ;; Defined at:
  5617 ;;		line 213 in file "main.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  leftWheelSpe    2   18[COMRAM] PTR int 
  5620 ;;		 -> excerciseControl@leftWheelCommandedSpeed(2), 
  5621 ;;  rightWheelSp    2   20[COMRAM] PTR int 
  5622 ;;		 -> excerciseControl@rightWheelCommandedSpeed(2), 
  5623 ;;  speedCompens    2   22[COMRAM] PTR int 
  5624 ;;		 -> speedCompensation(2), 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5636 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;Total ram usage:        8 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    1
  5643 ;; This function calls:
  5644 ;;		Nothing
  5645 ;; This function is called by:
  5646 ;;		_excerciseControl
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text21
  5651  0026A4                     __ptext21:
  5652                           	opt stack 0
  5653  0026A4                     _limitWheelSpeeds:
  5654                           	opt stack 28
  5655                           
  5656                           ;main.c: 218: if (*leftWheelSpeed >= 60)
  5657                           
  5658                           ;incstack = 0
  5659  0026A4  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5660  0026A8  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5661  0026AC  0E01               	movlw	1
  5662  0026AE  BEDB               	btfsc	plusw2,7,c
  5663  0026B0  D00F               	goto	l2266
  5664  0026B2  0E01               	movlw	1
  5665  0026B4  50DB               	movf	plusw2,w,c
  5666  0026B6  E104               	bnz	u1900
  5667  0026B8  0E3C               	movlw	60
  5668  0026BA  5CDE               	subwf	postinc2,w,c
  5669  0026BC  A0D8               	btfss	status,0,c
  5670  0026BE  D008               	goto	l2266
  5671  0026C0                     u1900:
  5672                           
  5673                           ;main.c: 219: {
  5674                           ;main.c: 220: *leftWheelSpeed = 60;
  5675  0026C0  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5676  0026C4  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5677  0026C8  0E3C               	movlw	60
  5678  0026CA  6EDE               	movwf	postinc2,c
  5679  0026CC  0E00               	movlw	0
  5680  0026CE  6EDD               	movwf	postdec2,c
  5681  0026D0                     l2266:
  5682                           
  5683                           ;main.c: 221: }
  5684                           ;main.c: 222: if (*leftWheelSpeed <= -60)
  5685  0026D0  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5686  0026D4  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5687  0026D8  0E01               	movlw	1
  5688  0026DA  AEDB               	btfss	plusw2,7,c
  5689  0026DC  D00E               	goto	l2270
  5690  0026DE  0EC5               	movlw	197
  5691  0026E0  5CDE               	subwf	postinc2,w,c
  5692  0026E2  0EFF               	movlw	255
  5693  0026E4  58DE               	subwfb	postinc2,w,c
  5694  0026E6  B0D8               	btfsc	status,0,c
  5695  0026E8  D008               	goto	l2270
  5696                           
  5697                           ;main.c: 223: {
  5698                           ;main.c: 224: *leftWheelSpeed = -60;
  5699  0026EA  C013  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  5700  0026EE  C014  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  5701  0026F2  0EC4               	movlw	196
  5702  0026F4  6EDE               	movwf	postinc2,c
  5703  0026F6  0EFF               	movlw	255
  5704  0026F8  6EDD               	movwf	postdec2,c
  5705  0026FA                     l2270:
  5706                           
  5707                           ;main.c: 225: }
  5708                           ;main.c: 227: if (*rightWheelSpeed >= 60)
  5709  0026FA  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5710  0026FE  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5711  002702  0E01               	movlw	1
  5712  002704  BEDB               	btfsc	plusw2,7,c
  5713  002706  D00F               	goto	l2274
  5714  002708  0E01               	movlw	1
  5715  00270A  50DB               	movf	plusw2,w,c
  5716  00270C  E104               	bnz	u1920
  5717  00270E  0E3C               	movlw	60
  5718  002710  5CDE               	subwf	postinc2,w,c
  5719  002712  A0D8               	btfss	status,0,c
  5720  002714  D008               	goto	l2274
  5721  002716                     u1920:
  5722                           
  5723                           ;main.c: 228: {
  5724                           ;main.c: 229: *rightWheelSpeed = 60;
  5725  002716  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5726  00271A  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5727  00271E  0E3C               	movlw	60
  5728  002720  6EDE               	movwf	postinc2,c
  5729  002722  0E00               	movlw	0
  5730  002724  6EDD               	movwf	postdec2,c
  5731  002726                     l2274:
  5732                           
  5733                           ;main.c: 230: }
  5734                           ;main.c: 231: if (*rightWheelSpeed <= -60)
  5735  002726  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5736  00272A  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5737  00272E  0E01               	movlw	1
  5738  002730  AEDB               	btfss	plusw2,7,c
  5739  002732  D00E               	goto	l2278
  5740  002734  0EC5               	movlw	197
  5741  002736  5CDE               	subwf	postinc2,w,c
  5742  002738  0EFF               	movlw	255
  5743  00273A  58DE               	subwfb	postinc2,w,c
  5744  00273C  B0D8               	btfsc	status,0,c
  5745  00273E  D008               	goto	l2278
  5746                           
  5747                           ;main.c: 232: {
  5748                           ;main.c: 233: *rightWheelSpeed = -60;
  5749  002740  C015  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  5750  002744  C016  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  5751  002748  0EC4               	movlw	196
  5752  00274A  6EDE               	movwf	postinc2,c
  5753  00274C  0EFF               	movlw	255
  5754  00274E  6EDD               	movwf	postdec2,c
  5755  002750                     l2278:
  5756                           
  5757                           ;main.c: 234: }
  5758                           ;main.c: 235: if(*speedCompensation > 30)
  5759  002750  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5760  002754  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5761  002758  0E01               	movlw	1
  5762  00275A  BEDB               	btfsc	plusw2,7,c
  5763  00275C  D00F               	goto	l2282
  5764  00275E  0E01               	movlw	1
  5765  002760  50DB               	movf	plusw2,w,c
  5766  002762  E104               	bnz	u1940
  5767  002764  0E1F               	movlw	31
  5768  002766  5CDE               	subwf	postinc2,w,c
  5769  002768  A0D8               	btfss	status,0,c
  5770  00276A  D008               	goto	l2282
  5771  00276C                     u1940:
  5772                           
  5773                           ;main.c: 236: {
  5774                           ;main.c: 237: *speedCompensation = 30;
  5775  00276C  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5776  002770  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5777  002774  0E1E               	movlw	30
  5778  002776  6EDE               	movwf	postinc2,c
  5779  002778  0E00               	movlw	0
  5780  00277A  6EDD               	movwf	postdec2,c
  5781  00277C                     l2282:
  5782                           
  5783                           ;main.c: 238: }
  5784                           ;main.c: 239: if(*speedCompensation < -30)
  5785  00277C  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5786  002780  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5787  002784  0E01               	movlw	1
  5788  002786  AEDB               	btfss	plusw2,7,c
  5789  002788  0012               	return	
  5790  00278A  0EE2               	movlw	226
  5791  00278C  5CDE               	subwf	postinc2,w,c
  5792  00278E  0EFF               	movlw	255
  5793  002790  58DE               	subwfb	postinc2,w,c
  5794  002792  B0D8               	btfsc	status,0,c
  5795  002794  0012               	return	
  5796                           
  5797                           ;main.c: 240: {
  5798                           ;main.c: 241: *speedCompensation = -30;
  5799  002796  C017  FFD9         	movff	limitWheelSpeeds@speedCompensation,fsr2l
  5800  00279A  C018  FFDA         	movff	limitWheelSpeeds@speedCompensation+1,fsr2h
  5801  00279E  0EE2               	movlw	226
  5802  0027A0  6EDE               	movwf	postinc2,c
  5803  0027A2  0EFF               	movlw	255
  5804  0027A4  6EDD               	movwf	postdec2,c
  5805  0027A6  0012               	return	
  5806  0027A8                     __end_of_limitWheelSpeeds:
  5807                           	opt stack 0
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           prodh	equ	0xFF4
  5813                           prodl	equ	0xFF3
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           postdec1	equ	0xFE5
  5817                           fsr1l	equ	0xFE1
  5818                           postinc2	equ	0xFDE
  5819                           postdec2	equ	0xFDD
  5820                           plusw2	equ	0xFDB
  5821                           fsr2h	equ	0xFDA
  5822                           fsr2l	equ	0xFD9
  5823                           status	equ	0xFD8
  5824                           
  5825 ;; *************** function ___lltoft *****************
  5826 ;; Defined at:
  5827 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;  c               4   26[COMRAM] unsigned long 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  exp             1   34[COMRAM] unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  3   26[COMRAM] float 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0, cstack
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;Total ram usage:        9 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    2
  5848 ;; This function calls:
  5849 ;;		___ftpack
  5850 ;; This function is called by:
  5851 ;;		_main
  5852 ;;		_excerciseControl
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text22
  5857  002EBE                     __ptext22:
  5858                           	opt stack 0
  5859  002EBE                     ___lltoft:
  5860                           	opt stack 27
  5861                           
  5862                           ;incstack = 0
  5863  002EBE  0E8E               	movlw	142
  5864  002EC0  6E23               	movwf	___lltoft@exp,c
  5865  002EC2  D006               	goto	l3252
  5866  002EC4                     l3250:
  5867  002EC4  90D8               	bcf	status,0,c
  5868  002EC6  321E               	rrcf	___lltoft@c+3,f,c
  5869  002EC8  321D               	rrcf	___lltoft@c+2,f,c
  5870  002ECA  321C               	rrcf	___lltoft@c+1,f,c
  5871  002ECC  321B               	rrcf	___lltoft@c,f,c
  5872  002ECE  2A23               	incf	___lltoft@exp,f,c
  5873  002ED0                     l3252:
  5874  002ED0  0E00               	movlw	0
  5875  002ED2  141B               	andwf	___lltoft@c,w,c
  5876  002ED4  6E1F               	movwf	??___lltoft& (0+255),c
  5877  002ED6  0E00               	movlw	0
  5878  002ED8  141C               	andwf	___lltoft@c+1,w,c
  5879  002EDA  6E20               	movwf	(??___lltoft+1)& (0+255),c
  5880  002EDC  0E00               	movlw	0
  5881  002EDE  141D               	andwf	___lltoft@c+2,w,c
  5882  002EE0  6E21               	movwf	(??___lltoft+2)& (0+255),c
  5883  002EE2  0EFF               	movlw	255
  5884  002EE4  141E               	andwf	___lltoft@c+3,w,c
  5885  002EE6  6E22               	movwf	(??___lltoft+3)& (0+255),c
  5886  002EE8  501F               	movf	??___lltoft,w,c
  5887  002EEA  1020               	iorwf	??___lltoft+1,w,c
  5888  002EEC  1021               	iorwf	??___lltoft+2,w,c
  5889  002EEE  1022               	iorwf	??___lltoft+3,w,c
  5890  002EF0  A4D8               	btfss	status,2,c
  5891  002EF2  D7E8               	goto	l3250
  5892  002EF4  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  5893  002EF8  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  5894  002EFC  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  5895  002F00  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  5896  002F04  0E00               	movlw	0
  5897  002F06  6E17               	movwf	___ftpack@sign,c
  5898  002F08  EC24  F015         	call	___ftpack	;wreg free
  5899  002F0C  C013  F01B         	movff	?___ftpack,?___lltoft
  5900  002F10  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  5901  002F14  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  5902  002F18  0012               	return	
  5903  002F1A                     __end_of___lltoft:
  5904                           	opt stack 0
  5905                           tblptru	equ	0xFF8
  5906                           tblptrh	equ	0xFF7
  5907                           tblptrl	equ	0xFF6
  5908                           tablat	equ	0xFF5
  5909                           prodh	equ	0xFF4
  5910                           prodl	equ	0xFF3
  5911                           postinc0	equ	0xFEE
  5912                           wreg	equ	0xFE8
  5913                           postdec1	equ	0xFE5
  5914                           fsr1l	equ	0xFE1
  5915                           postinc2	equ	0xFDE
  5916                           postdec2	equ	0xFDD
  5917                           plusw2	equ	0xFDB
  5918                           fsr2h	equ	0xFDA
  5919                           fsr2l	equ	0xFD9
  5920                           status	equ	0xFD8
  5921                           
  5922 ;; *************** function ___awtoft *****************
  5923 ;; Defined at:
  5924 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  c               2   26[COMRAM] int 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  sign            1   29[COMRAM] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  3   26[COMRAM] float 
  5931 ;; Registers used:
  5932 ;;		wreg, status,2, status,0, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5938 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;Total ram usage:        4 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    2
  5945 ;; This function calls:
  5946 ;;		___ftpack
  5947 ;; This function is called by:
  5948 ;;		_excerciseControl
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           	psect	text23
  5953  00309E                     __ptext23:
  5954                           	opt stack 0
  5955  00309E                     ___awtoft:
  5956                           	opt stack 27
  5957                           
  5958                           ;incstack = 0
  5959  00309E  0E00               	movlw	0
  5960  0030A0  6E1E               	movwf	___awtoft@sign,c
  5961  0030A2  AE1C               	btfss	___awtoft@c+1,7,c
  5962  0030A4  D006               	goto	l3244
  5963  0030A6  6C1B               	negf	___awtoft@c,c
  5964  0030A8  1E1C               	comf	___awtoft@c+1,f,c
  5965  0030AA  B0D8               	btfsc	status,0,c
  5966  0030AC  2A1C               	incf	___awtoft@c+1,f,c
  5967  0030AE  0E01               	movlw	1
  5968  0030B0  6E1E               	movwf	___awtoft@sign,c
  5969  0030B2                     l3244:
  5970  0030B2  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  5971  0030B6  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  5972  0030BA  6A15               	clrf	___ftpack@arg+2,c
  5973  0030BC  0E8E               	movlw	142
  5974  0030BE  6E16               	movwf	___ftpack@exp,c
  5975  0030C0  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  5976  0030C4  EC24  F015         	call	___ftpack	;wreg free
  5977  0030C8  C013  F01B         	movff	?___ftpack,?___awtoft
  5978  0030CC  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  5979  0030D0  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  5980  0030D4  0012               	return	
  5981  0030D6                     __end_of___awtoft:
  5982                           	opt stack 0
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           postdec1	equ	0xFE5
  5992                           fsr1l	equ	0xFE1
  5993                           postinc2	equ	0xFDE
  5994                           postdec2	equ	0xFDD
  5995                           plusw2	equ	0xFDB
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function _configureTimers *****************
  6001 ;; Defined at:
  6002 ;;		line 507 in file "main.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;		None
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;		None
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      void 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;Total ram usage:        0 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    1
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_main
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text24
  6031  002AF6                     __ptext24:
  6032                           	opt stack 0
  6033  002AF6                     _configureTimers:
  6034                           	opt stack 29
  6035                           
  6036                           ;main.c: 509: (INTCONbits.GIE = 0);
  6037                           
  6038                           ;incstack = 0
  6039  002AF6  9EF2               	bcf	intcon,7,c	;volatile
  6040                           
  6041                           ;main.c: 511: T1CON = 0;
  6042  002AF8  0E00               	movlw	0
  6043  002AFA  6ECD               	movwf	4045,c	;volatile
  6044                           
  6045                           ;main.c: 512: T1CONbits.TMR1CS = 0b00;
  6046  002AFC  0E3F               	movlw	-193
  6047  002AFE  16CD               	andwf	4045,f,c	;volatile
  6048                           
  6049                           ;main.c: 513: T1CONbits.T1CKPS = 0b10;
  6050  002B00  50CD               	movf	4045,w,c	;volatile
  6051  002B02  0BCF               	andlw	-49
  6052  002B04  0920               	iorlw	32
  6053  002B06  6ECD               	movwf	4045,c	;volatile
  6054                           
  6055                           ;main.c: 514: T5CON = 0;
  6056  002B08  0E00               	movlw	0
  6057  002B0A  010F               	movlb	15	; () banked
  6058  002B0C  6F4E               	movwf	78,b	;volatile
  6059                           
  6060                           ;main.c: 515: T5CONbits.TMR5CS = 0b00;
  6061  002B0E  0E3F               	movlw	-193
  6062  002B10  010F               	movlb	15	; () banked
  6063  002B12  174E               	andwf	78,f,b	;volatile
  6064                           
  6065                           ;main.c: 516: T5CONbits.T5CKPS = 0b10;
  6066  002B14  010F               	movlb	15	; () banked
  6067  002B16  514E               	movf	78,w,b	;volatile
  6068  002B18  0BCF               	andlw	-49
  6069  002B1A  0920               	iorlw	32
  6070  002B1C  6F4E               	movwf	78,b	;volatile
  6071                           
  6072                           ;main.c: 521: CCP3CON = 0;
  6073  002B1E  0E00               	movlw	0
  6074  002B20  010F               	movlb	15	; () banked
  6075  002B22  6F5D               	movwf	93,b	;volatile
  6076                           
  6077                           ;main.c: 522: CCP2CON = 0;
  6078  002B24  0E00               	movlw	0
  6079  002B26  6E66               	movwf	3942,c	;volatile
  6080                           
  6081                           ;main.c: 523: CCP3CONbits.CCP3M = 0b1010;
  6082  002B28  010F               	movlb	15	; () banked
  6083  002B2A  515D               	movf	93,w,b	;volatile
  6084  002B2C  0BF0               	andlw	-16
  6085  002B2E  090A               	iorlw	10
  6086  002B30  6F5D               	movwf	93,b	;volatile
  6087                           
  6088                           ;main.c: 524: CCP2CONbits.CCP2M = 0b1010;
  6089  002B32  5066               	movf	3942,w,c	;volatile
  6090  002B34  0BF0               	andlw	-16
  6091  002B36  090A               	iorlw	10
  6092  002B38  6E66               	movwf	3942,c	;volatile
  6093                           
  6094                           ;main.c: 531: CCPTMRS0bits.C3TSEL = 0;
  6095  002B3A  0E3F               	movlw	-193
  6096  002B3C  010F               	movlb	15	; () banked
  6097  002B3E  1749               	andwf	73,f,b	;volatile
  6098                           
  6099                           ;main.c: 532: CCPTMRS0bits.C2TSEL = 0b10;
  6100  002B40  010F               	movlb	15	; () banked
  6101  002B42  5149               	movf	73,w,b	;volatile
  6102  002B44  0BE7               	andlw	-25
  6103  002B46  0910               	iorlw	16
  6104  002B48  6F49               	movwf	73,b	;volatile
  6105                           
  6106                           ;main.c: 534: CCPR3 = 675;
  6107  002B4A  0E02               	movlw	2
  6108  002B4C  010F               	movlb	15	; () banked
  6109  002B4E  6F5F               	movwf	95,b	;volatile
  6110  002B50  0EA3               	movlw	163
  6111  002B52  6F5E               	movwf	94,b	;volatile
  6112                           
  6113                           ;main.c: 535: CCPR2 = 675;
  6114  002B54  0E02               	movlw	2
  6115  002B56  6E68               	movwf	3944,c	;volatile
  6116  002B58  0EA3               	movlw	163
  6117  002B5A  6E67               	movwf	3943,c	;volatile
  6118                           
  6119                           ; BSR set to: 15
  6120                           ;main.c: 537: CCP3IE = 1;
  6121  002B5C  807A               	bsf	3962,0,c	;volatile
  6122                           
  6123                           ; BSR set to: 15
  6124                           ;main.c: 538: CCP2IE = 1;
  6125  002B5E  80A0               	bsf	4000,0,c	;volatile
  6126                           
  6127                           ; BSR set to: 15
  6128                           ;main.c: 541: PIE1bits.TMR2IE = 1;
  6129  002B60  829D               	bsf	3997,1,c	;volatile
  6130                           
  6131                           ;main.c: 542: T2CON = 0;
  6132  002B62  0E00               	movlw	0
  6133  002B64  6EBA               	movwf	4026,c	;volatile
  6134                           
  6135                           ;main.c: 543: T2CONbits.T2CKPS = 0b10;
  6136  002B66  50BA               	movf	4026,w,c	;volatile
  6137  002B68  0BFC               	andlw	-4
  6138  002B6A  0902               	iorlw	2
  6139  002B6C  6EBA               	movwf	4026,c	;volatile
  6140                           
  6141                           ; BSR set to: 15
  6142                           ;main.c: 544: T2CONbits.TMR2ON = 1;
  6143  002B6E  84BA               	bsf	4026,2,c	;volatile
  6144                           
  6145                           ;main.c: 545: PR2 = 125;
  6146  002B70  0E7D               	movlw	125
  6147  002B72  6EBB               	movwf	4027,c	;volatile
  6148                           
  6149                           ; BSR set to: 15
  6150                           ;main.c: 551: INTCONbits.GIE = 1;
  6151  002B74  8EF2               	bsf	intcon,7,c	;volatile
  6152                           
  6153                           ; BSR set to: 15
  6154                           ;main.c: 552: INTCONbits.PEIE = 1;
  6155  002B76  8CF2               	bsf	intcon,6,c	;volatile
  6156                           
  6157                           ;main.c: 554: TMR1 = 0;
  6158  002B78  0E00               	movlw	0
  6159  002B7A  6ECF               	movwf	4047,c	;volatile
  6160  002B7C  0E00               	movlw	0
  6161  002B7E  6ECE               	movwf	4046,c	;volatile
  6162                           
  6163                           ;main.c: 555: TMR5 = 0;
  6164  002B80  0E00               	movlw	0
  6165  002B82  010F               	movlb	15	; () banked
  6166  002B84  6F50               	movwf	80,b	;volatile
  6167  002B86  0E00               	movlw	0
  6168  002B88  6F4F               	movwf	79,b	;volatile
  6169                           
  6170                           ; BSR set to: 15
  6171                           ;main.c: 556: TMR1ON = 1;
  6172  002B8A  80CD               	bsf	4045,0,c	;volatile
  6173                           
  6174                           ; BSR set to: 15
  6175                           ;main.c: 557: TMR5ON = 1;
  6176  002B8C  010F               	movlb	15	; () banked
  6177  002B8E  814E               	bsf	78,0,b	;volatile
  6178                           
  6179                           ; BSR set to: 15
  6180                           ;main.c: 559: (INTCONbits.GIE = 1);
  6181  002B90  8EF2               	bsf	intcon,7,c	;volatile
  6182                           
  6183                           ; BSR set to: 15
  6184                           ;main.c: 561: TRISDbits.TRISD0 = 0;
  6185  002B92  9095               	bcf	3989,0,c	;volatile
  6186                           
  6187                           ; BSR set to: 15
  6188                           ;main.c: 562: TRISDbits.TRISD1 = 0;
  6189  002B94  9295               	bcf	3989,1,c	;volatile
  6190                           
  6191                           ;main.c: 563: ANSELD = 0;
  6192  002B96  0E00               	movlw	0
  6193  002B98  010F               	movlb	15	; () banked
  6194  002B9A  6F3B               	movwf	59,b	;volatile
  6195                           
  6196                           ; BSR set to: 15
  6197  002B9C  0012               	return		;funcret
  6198  002B9E                     __end_of_configureTimers:
  6199                           	opt stack 0
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           postinc0	equ	0xFEE
  6208                           wreg	equ	0xFE8
  6209                           postdec1	equ	0xFE5
  6210                           fsr1l	equ	0xFE1
  6211                           postinc2	equ	0xFDE
  6212                           postdec2	equ	0xFDD
  6213                           plusw2	equ	0xFDB
  6214                           fsr2h	equ	0xFDA
  6215                           fsr2l	equ	0xFD9
  6216                           status	equ	0xFD8
  6217                           
  6218 ;; *************** function _configureComparators *****************
  6219 ;; Defined at:
  6220 ;;		line 567 in file "main.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;Total ram usage:        0 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    1
  6241 ;; This function calls:
  6242 ;;		Nothing
  6243 ;; This function is called by:
  6244 ;;		_main
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text25
  6249  002F72                     __ptext25:
  6250                           	opt stack 0
  6251  002F72                     _configureComparators:
  6252                           	opt stack 29
  6253                           
  6254                           ;main.c: 571: VREFCON0bits.FVREN=1;
  6255                           
  6256                           ; BSR set to: 15
  6257                           ;incstack = 0
  6258  002F72  010F               	movlb	15	; () banked
  6259  002F74  8F42               	bsf	66,7,b	;volatile
  6260                           
  6261                           ;main.c: 572: VREFCON0bits.FVRST=0;
  6262  002F76  010F               	movlb	15	; () banked
  6263  002F78  9D42               	bcf	66,6,b	;volatile
  6264                           
  6265                           ; BSR set to: 15
  6266                           ;main.c: 573: VREFCON0bits.FVRS=0b01;
  6267  002F7A  010F               	movlb	15	; () banked
  6268  002F7C  5142               	movf	66,w,b	;volatile
  6269  002F7E  0BCF               	andlw	-49
  6270  002F80  0910               	iorlw	16
  6271  002F82  6F42               	movwf	66,b	;volatile
  6272                           
  6273                           ; BSR set to: 15
  6274                           ;main.c: 575: TRISBbits.TRISB1 = 1;
  6275  002F84  8293               	bsf	3987,1,c	;volatile
  6276                           
  6277                           ; BSR set to: 15
  6278                           ;main.c: 576: ANSELBbits.ANSB1 = 1;
  6279  002F86  010F               	movlb	15	; () banked
  6280  002F88  8339               	bsf	57,1,b	;volatile
  6281                           
  6282                           ; BSR set to: 15
  6283                           ;main.c: 580: CM2CON0bits.C2ON = 1;
  6284  002F8A  8E78               	bsf	3960,7,c	;volatile
  6285                           
  6286                           ; BSR set to: 15
  6287                           ;main.c: 581: CM2CON0bits.C2OUT = 0;
  6288  002F8C  9C78               	bcf	3960,6,c	;volatile
  6289                           
  6290                           ; BSR set to: 15
  6291                           ;main.c: 582: CM2CON0bits.C2OE = 0;
  6292  002F8E  9A78               	bcf	3960,5,c	;volatile
  6293                           
  6294                           ; BSR set to: 15
  6295                           ;main.c: 583: CM2CON0bits.C2POL = 1;
  6296  002F90  8878               	bsf	3960,4,c	;volatile
  6297                           
  6298                           ; BSR set to: 15
  6299                           ;main.c: 584: CM2CON0bits.C2SP = 1;
  6300  002F92  8678               	bsf	3960,3,c	;volatile
  6301                           
  6302                           ; BSR set to: 15
  6303                           ;main.c: 585: CM2CON0bits.C2R = 1;
  6304  002F94  8478               	bsf	3960,2,c	;volatile
  6305                           
  6306                           ;main.c: 586: CM2CON0bits.C2CH = 0b11;
  6307  002F96  0E03               	movlw	3
  6308  002F98  1278               	iorwf	3960,f,c	;volatile
  6309                           
  6310                           ; BSR set to: 15
  6311                           ;main.c: 588: CM2CON1bits.C2RSEL = 1;
  6312  002F9A  8877               	bsf	3959,4,c	;volatile
  6313                           
  6314                           ; BSR set to: 15
  6315                           ;main.c: 589: CM2CON1bits.C2HYS = 0;
  6316  002F9C  9477               	bcf	3959,2,c	;volatile
  6317                           
  6318                           ; BSR set to: 15
  6319                           ;main.c: 590: CM2CON1bits.C2SYNC = 0;
  6320  002F9E  9077               	bcf	3959,0,c	;volatile
  6321                           
  6322                           ; BSR set to: 15
  6323                           ;main.c: 596: TRISBbits.TRISB3 = 1;
  6324  002FA0  8693               	bsf	3987,3,c	;volatile
  6325                           
  6326                           ; BSR set to: 15
  6327                           ;main.c: 597: ANSELBbits.ANSB3 = 1;
  6328  002FA2  010F               	movlb	15	; () banked
  6329  002FA4  8739               	bsf	57,3,b	;volatile
  6330                           
  6331                           ; BSR set to: 15
  6332                           ;main.c: 600: CM1CON0bits.C1ON = 1;
  6333  002FA6  8E79               	bsf	3961,7,c	;volatile
  6334                           
  6335                           ; BSR set to: 15
  6336                           ;main.c: 601: CM1CON0bits.C1OUT = 0;
  6337  002FA8  9C79               	bcf	3961,6,c	;volatile
  6338                           
  6339                           ; BSR set to: 15
  6340                           ;main.c: 602: CM1CON0bits.C1OE = 0;
  6341  002FAA  9A79               	bcf	3961,5,c	;volatile
  6342                           
  6343                           ; BSR set to: 15
  6344                           ;main.c: 603: CM1CON0bits.C1POL = 1;
  6345  002FAC  8879               	bsf	3961,4,c	;volatile
  6346                           
  6347                           ; BSR set to: 15
  6348                           ;main.c: 604: CM1CON0bits.C1SP = 1;
  6349  002FAE  8679               	bsf	3961,3,c	;volatile
  6350                           
  6351                           ; BSR set to: 15
  6352                           ;main.c: 605: CM1CON0bits.C1R = 1;
  6353  002FB0  8479               	bsf	3961,2,c	;volatile
  6354                           
  6355                           ;main.c: 606: CM1CON0bits.C1CH = 0b10;
  6356  002FB2  5079               	movf	3961,w,c	;volatile
  6357  002FB4  0BFC               	andlw	-4
  6358  002FB6  0902               	iorlw	2
  6359  002FB8  6E79               	movwf	3961,c	;volatile
  6360                           
  6361                           ; BSR set to: 15
  6362                           ;main.c: 608: CM2CON1bits.C1RSEL = 1;
  6363  002FBA  8A77               	bsf	3959,5,c	;volatile
  6364                           
  6365                           ; BSR set to: 15
  6366                           ;main.c: 609: CM2CON1bits.C1HYS = 0;
  6367  002FBC  9677               	bcf	3959,3,c	;volatile
  6368                           
  6369                           ; BSR set to: 15
  6370                           ;main.c: 610: CM2CON1bits.C1SYNC = 0;
  6371  002FBE  9277               	bcf	3959,1,c	;volatile
  6372                           
  6373                           ; BSR set to: 15
  6374                           ;main.c: 613: PIR2bits.C1IF = 0;
  6375  002FC0  9CA1               	bcf	4001,6,c	;volatile
  6376                           
  6377                           ; BSR set to: 15
  6378                           ;main.c: 614: PIR2bits.C2IF = 0;
  6379  002FC2  9AA1               	bcf	4001,5,c	;volatile
  6380                           
  6381                           ; BSR set to: 15
  6382                           ;main.c: 615: PIE2bits.C2IE = 1;
  6383  002FC4  8AA0               	bsf	4000,5,c	;volatile
  6384                           
  6385                           ; BSR set to: 15
  6386                           ;main.c: 616: PIE2bits.C1IE = 1;
  6387  002FC6  8CA0               	bsf	4000,6,c	;volatile
  6388                           
  6389                           ; BSR set to: 15
  6390  002FC8  0012               	return		;funcret
  6391  002FCA                     __end_of_configureComparators:
  6392                           	opt stack 0
  6393                           tblptru	equ	0xFF8
  6394                           tblptrh	equ	0xFF7
  6395                           tblptrl	equ	0xFF6
  6396                           tablat	equ	0xFF5
  6397                           prodh	equ	0xFF4
  6398                           prodl	equ	0xFF3
  6399                           intcon	equ	0xFF2
  6400                           postinc0	equ	0xFEE
  6401                           wreg	equ	0xFE8
  6402                           postdec1	equ	0xFE5
  6403                           fsr1l	equ	0xFE1
  6404                           postinc2	equ	0xFDE
  6405                           postdec2	equ	0xFDD
  6406                           plusw2	equ	0xFDB
  6407                           fsr2h	equ	0xFDA
  6408                           fsr2l	equ	0xFD9
  6409                           status	equ	0xFD8
  6410                           
  6411 ;; *************** function ___ftdiv *****************
  6412 ;; Defined at:
  6413 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  f1              3   50[COMRAM] float 
  6416 ;;  f2              3   53[COMRAM] float 
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;  f3              3   60[COMRAM] float 
  6419 ;;  sign            1   64[COMRAM] unsigned char 
  6420 ;;  exp             1   63[COMRAM] unsigned char 
  6421 ;;  cntr            1   59[COMRAM] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  3   50[COMRAM] float 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6431 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;Total ram usage:       15 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    2
  6438 ;; This function calls:
  6439 ;;		___ftpack
  6440 ;; This function is called by:
  6441 ;;		_main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text26
  6446  00289C                     __ptext26:
  6447                           	opt stack 0
  6448  00289C                     ___ftdiv:
  6449                           	opt stack 28
  6450                           
  6451                           ; BSR set to: 15
  6452                           ;incstack = 0
  6453  00289C  C035  F039         	movff	___ftdiv@f1+2,??___ftdiv
  6454  0028A0  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  6455  0028A2  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  6456  0028A4  3434               	rlcf	___ftdiv@f1+1,w,c
  6457  0028A6  3639               	rlcf	??___ftdiv& (0+255),f,c
  6458  0028A8  E301               	bnc	u3411
  6459  0028AA  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  6460  0028AC                     u3411:
  6461  0028AC  5039               	movf	??___ftdiv,w,c
  6462  0028AE  6E40               	movwf	___ftdiv@exp,c
  6463  0028B0  5040               	movf	___ftdiv@exp,w,c
  6464  0028B2  A4D8               	btfss	status,2,c
  6465  0028B4  D007               	goto	l3398
  6466  0028B6  0E00               	movlw	0
  6467  0028B8  6E33               	movwf	?___ftdiv,c
  6468  0028BA  0E00               	movlw	0
  6469  0028BC  6E34               	movwf	?___ftdiv+1,c
  6470  0028BE  0E00               	movlw	0
  6471  0028C0  6E35               	movwf	?___ftdiv+2,c
  6472  0028C2  0012               	return	
  6473  0028C4                     l3398:
  6474  0028C4  C038  F039         	movff	___ftdiv@f2+2,??___ftdiv
  6475  0028C8  6A3A               	clrf	(??___ftdiv+1)& (0+255),c
  6476  0028CA  6A3B               	clrf	(??___ftdiv+2)& (0+255),c
  6477  0028CC  3437               	rlcf	___ftdiv@f2+1,w,c
  6478  0028CE  3639               	rlcf	??___ftdiv& (0+255),f,c
  6479  0028D0  E301               	bnc	u3431
  6480  0028D2  803A               	bsf	(??___ftdiv+1)& (0+255),0,c
  6481  0028D4                     u3431:
  6482  0028D4  5039               	movf	??___ftdiv,w,c
  6483  0028D6  6E41               	movwf	___ftdiv@sign,c
  6484  0028D8  5041               	movf	___ftdiv@sign,w,c
  6485  0028DA  A4D8               	btfss	status,2,c
  6486  0028DC  D007               	goto	l3404
  6487  0028DE  0E00               	movlw	0
  6488  0028E0  6E33               	movwf	?___ftdiv,c
  6489  0028E2  0E00               	movlw	0
  6490  0028E4  6E34               	movwf	?___ftdiv+1,c
  6491  0028E6  0E00               	movlw	0
  6492  0028E8  6E35               	movwf	?___ftdiv+2,c
  6493  0028EA  0012               	return	
  6494  0028EC                     l3404:
  6495  0028EC  0E00               	movlw	0
  6496  0028EE  6E3D               	movwf	___ftdiv@f3,c
  6497  0028F0  0E00               	movlw	0
  6498  0028F2  6E3E               	movwf	___ftdiv@f3+1,c
  6499  0028F4  0E00               	movlw	0
  6500  0028F6  6E3F               	movwf	___ftdiv@f3+2,c
  6501  0028F8  5041               	movf	___ftdiv@sign,w,c
  6502  0028FA  0F89               	addlw	137
  6503  0028FC  5E40               	subwf	___ftdiv@exp,f,c
  6504  0028FE  C035  F041         	movff	___ftdiv@f1+2,___ftdiv@sign
  6505  002902  5038               	movf	___ftdiv@f2+2,w,c
  6506  002904  1A41               	xorwf	___ftdiv@sign,f,c
  6507  002906  0E80               	movlw	128
  6508  002908  1641               	andwf	___ftdiv@sign,f,c
  6509  00290A  8E34               	bsf	___ftdiv@f1+1,7,c
  6510  00290C  0EFF               	movlw	255
  6511  00290E  1633               	andwf	___ftdiv@f1,f,c
  6512  002910  0EFF               	movlw	255
  6513  002912  1634               	andwf	___ftdiv@f1+1,f,c
  6514  002914  0E00               	movlw	0
  6515  002916  1635               	andwf	___ftdiv@f1+2,f,c
  6516  002918  8E37               	bsf	___ftdiv@f2+1,7,c
  6517  00291A  0EFF               	movlw	255
  6518  00291C  1636               	andwf	___ftdiv@f2,f,c
  6519  00291E  0EFF               	movlw	255
  6520  002920  1637               	andwf	___ftdiv@f2+1,f,c
  6521  002922  0E00               	movlw	0
  6522  002924  1638               	andwf	___ftdiv@f2+2,f,c
  6523  002926  0E18               	movlw	24
  6524  002928  6E3C               	movwf	___ftdiv@cntr,c
  6525  00292A                     l3424:
  6526  00292A  90D8               	bcf	status,0,c
  6527  00292C  363D               	rlcf	___ftdiv@f3,f,c
  6528  00292E  363E               	rlcf	___ftdiv@f3+1,f,c
  6529  002930  363F               	rlcf	___ftdiv@f3+2,f,c
  6530  002932  5036               	movf	___ftdiv@f2,w,c
  6531  002934  5C33               	subwf	___ftdiv@f1,w,c
  6532  002936  5037               	movf	___ftdiv@f2+1,w,c
  6533  002938  5834               	subwfb	___ftdiv@f1+1,w,c
  6534  00293A  5038               	movf	___ftdiv@f2+2,w,c
  6535  00293C  5835               	subwfb	___ftdiv@f1+2,w,c
  6536  00293E  A0D8               	btfss	status,0,c
  6537  002940  D007               	goto	l593
  6538  002942  5036               	movf	___ftdiv@f2,w,c
  6539  002944  5E33               	subwf	___ftdiv@f1,f,c
  6540  002946  5037               	movf	___ftdiv@f2+1,w,c
  6541  002948  5A34               	subwfb	___ftdiv@f1+1,f,c
  6542  00294A  5038               	movf	___ftdiv@f2+2,w,c
  6543  00294C  5A35               	subwfb	___ftdiv@f1+2,f,c
  6544  00294E  803D               	bsf	___ftdiv@f3,0,c
  6545  002950                     l593:
  6546  002950  90D8               	bcf	status,0,c
  6547  002952  3633               	rlcf	___ftdiv@f1,f,c
  6548  002954  3634               	rlcf	___ftdiv@f1+1,f,c
  6549  002956  3635               	rlcf	___ftdiv@f1+2,f,c
  6550  002958  2E3C               	decfsz	___ftdiv@cntr,f,c
  6551  00295A  D7E7               	goto	l3424
  6552  00295C  C03D  F013         	movff	___ftdiv@f3,___ftpack@arg
  6553  002960  C03E  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6554  002964  C03F  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6555  002968  C040  F016         	movff	___ftdiv@exp,___ftpack@exp
  6556  00296C  C041  F017         	movff	___ftdiv@sign,___ftpack@sign
  6557  002970  EC24  F015         	call	___ftpack	;wreg free
  6558  002974  C013  F033         	movff	?___ftpack,?___ftdiv
  6559  002978  C014  F034         	movff	?___ftpack+1,?___ftdiv+1
  6560  00297C  C015  F035         	movff	?___ftpack+2,?___ftdiv+2
  6561  002980  0012               	return	
  6562  002982                     __end_of___ftdiv:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           postinc0	equ	0xFEE
  6572                           wreg	equ	0xFE8
  6573                           postdec1	equ	0xFE5
  6574                           fsr1l	equ	0xFE1
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           plusw2	equ	0xFDB
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function ___ftpack *****************
  6583 ;; Defined at:
  6584 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  arg             3   18[COMRAM] unsigned um
  6587 ;;  exp             1   21[COMRAM] unsigned char 
  6588 ;;  sign            1   22[COMRAM] unsigned char 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  3   18[COMRAM] float 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6600 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;Total ram usage:        8 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    1
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		___altoft
  6611 ;;		___awtoft
  6612 ;;		___ftadd
  6613 ;;		___ftdiv
  6614 ;;		___ftmul
  6615 ;;		___lltoft
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text27
  6620  002A48                     __ptext27:
  6621                           	opt stack 0
  6622  002A48                     ___ftpack:
  6623                           	opt stack 25
  6624                           
  6625                           ;incstack = 0
  6626  002A48  5016               	movf	___ftpack@exp,w,c
  6627  002A4A  B4D8               	btfsc	status,2,c
  6628  002A4C  D005               	goto	l2956
  6629  002A4E  5013               	movf	___ftpack@arg,w,c
  6630  002A50  1014               	iorwf	___ftpack@arg+1,w,c
  6631  002A52  1015               	iorwf	___ftpack@arg+2,w,c
  6632  002A54  A4D8               	btfss	status,2,c
  6633  002A56  D00C               	goto	l2962
  6634  002A58                     l2956:
  6635  002A58  0E00               	movlw	0
  6636  002A5A  6E13               	movwf	?___ftpack,c
  6637  002A5C  0E00               	movlw	0
  6638  002A5E  6E14               	movwf	?___ftpack+1,c
  6639  002A60  0E00               	movlw	0
  6640  002A62  6E15               	movwf	?___ftpack+2,c
  6641  002A64  0012               	return	
  6642  002A66                     l2960:
  6643  002A66  2A16               	incf	___ftpack@exp,f,c
  6644  002A68  90D8               	bcf	status,0,c
  6645  002A6A  3215               	rrcf	___ftpack@arg+2,f,c
  6646  002A6C  3214               	rrcf	___ftpack@arg+1,f,c
  6647  002A6E  3213               	rrcf	___ftpack@arg,f,c
  6648  002A70                     l2962:
  6649  002A70  0E00               	movlw	0
  6650  002A72  1413               	andwf	___ftpack@arg,w,c
  6651  002A74  6E18               	movwf	??___ftpack& (0+255),c
  6652  002A76  0E00               	movlw	0
  6653  002A78  1414               	andwf	___ftpack@arg+1,w,c
  6654  002A7A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6655  002A7C  0EFE               	movlw	254
  6656  002A7E  1415               	andwf	___ftpack@arg+2,w,c
  6657  002A80  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6658  002A82  5018               	movf	??___ftpack,w,c
  6659  002A84  1019               	iorwf	??___ftpack+1,w,c
  6660  002A86  101A               	iorwf	??___ftpack+2,w,c
  6661  002A88  B4D8               	btfsc	status,2,c
  6662  002A8A  D00C               	goto	l2968
  6663  002A8C  D7EC               	goto	l2960
  6664  002A8E                     l2964:
  6665  002A8E  2A16               	incf	___ftpack@exp,f,c
  6666  002A90  0E01               	movlw	1
  6667  002A92  2613               	addwf	___ftpack@arg,f,c
  6668  002A94  0E00               	movlw	0
  6669  002A96  2214               	addwfc	___ftpack@arg+1,f,c
  6670  002A98  0E00               	movlw	0
  6671  002A9A  2215               	addwfc	___ftpack@arg+2,f,c
  6672  002A9C  90D8               	bcf	status,0,c
  6673  002A9E  3215               	rrcf	___ftpack@arg+2,f,c
  6674  002AA0  3214               	rrcf	___ftpack@arg+1,f,c
  6675  002AA2  3213               	rrcf	___ftpack@arg,f,c
  6676  002AA4                     l2968:
  6677  002AA4  0E00               	movlw	0
  6678  002AA6  1413               	andwf	___ftpack@arg,w,c
  6679  002AA8  6E18               	movwf	??___ftpack& (0+255),c
  6680  002AAA  0E00               	movlw	0
  6681  002AAC  1414               	andwf	___ftpack@arg+1,w,c
  6682  002AAE  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6683  002AB0  0EFF               	movlw	255
  6684  002AB2  1415               	andwf	___ftpack@arg+2,w,c
  6685  002AB4  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6686  002AB6  5018               	movf	??___ftpack,w,c
  6687  002AB8  1019               	iorwf	??___ftpack+1,w,c
  6688  002ABA  101A               	iorwf	??___ftpack+2,w,c
  6689  002ABC  B4D8               	btfsc	status,2,c
  6690  002ABE  D006               	goto	l2972
  6691  002AC0  D7E6               	goto	l2964
  6692  002AC2                     l2970:
  6693  002AC2  0616               	decf	___ftpack@exp,f,c
  6694  002AC4  90D8               	bcf	status,0,c
  6695  002AC6  3613               	rlcf	___ftpack@arg,f,c
  6696  002AC8  3614               	rlcf	___ftpack@arg+1,f,c
  6697  002ACA  3615               	rlcf	___ftpack@arg+2,f,c
  6698  002ACC                     l2972:
  6699  002ACC  BE14               	btfsc	___ftpack@arg+1,7,c
  6700  002ACE  D003               	goto	l535
  6701  002AD0  0E02               	movlw	2
  6702  002AD2  6016               	cpfslt	___ftpack@exp,c
  6703  002AD4  D7F6               	goto	l2970
  6704  002AD6                     l535:
  6705  002AD6  A016               	btfss	___ftpack@exp,0,c
  6706  002AD8  9E14               	bcf	___ftpack@arg+1,7,c
  6707  002ADA  90D8               	bcf	status,0,c
  6708  002ADC  3216               	rrcf	___ftpack@exp,f,c
  6709  002ADE  5016               	movf	___ftpack@exp,w,c
  6710  002AE0  1215               	iorwf	___ftpack@arg+2,f,c
  6711  002AE2  5017               	movf	___ftpack@sign,w,c
  6712  002AE4  A4D8               	btfss	status,2,c
  6713  002AE6  8E15               	bsf	___ftpack@arg+2,7,c
  6714  002AE8  C013  F013         	movff	___ftpack@arg,?___ftpack
  6715  002AEC  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  6716  002AF0  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  6717  002AF4  0012               	return	
  6718  002AF6                     __end_of___ftpack:
  6719                           	opt stack 0
  6720                           tblptru	equ	0xFF8
  6721                           tblptrh	equ	0xFF7
  6722                           tblptrl	equ	0xFF6
  6723                           tablat	equ	0xFF5
  6724                           prodh	equ	0xFF4
  6725                           prodl	equ	0xFF3
  6726                           intcon	equ	0xFF2
  6727                           postinc0	equ	0xFEE
  6728                           wreg	equ	0xFE8
  6729                           postdec1	equ	0xFE5
  6730                           fsr1l	equ	0xFE1
  6731                           postinc2	equ	0xFDE
  6732                           postdec2	equ	0xFDD
  6733                           plusw2	equ	0xFDB
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function _LCDinit *****************
  6739 ;; Defined at:
  6740 ;;		line 60 in file "lcd.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;		None
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;		None
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  1    wreg      void 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;Total ram usage:        1 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    2
  6761 ;; This function calls:
  6762 ;;		_LCDcheckBF
  6763 ;;		_LCDcmd
  6764 ;; This function is called by:
  6765 ;;		_main
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text28
  6770  002982                     __ptext28:
  6771                           	opt stack 0
  6772  002982                     _LCDinit:
  6773                           	opt stack 28
  6774                           
  6775                           ;lcd.c: 63: TRISA = 0;
  6776                           
  6777                           ;incstack = 0
  6778  002982  0E00               	movlw	0
  6779  002984  6E92               	movwf	3986,c	;volatile
  6780                           
  6781                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  6782  002986  9096               	bcf	3990,0,c	;volatile
  6783                           
  6784                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  6785  002988  9296               	bcf	3990,1,c	;volatile
  6786                           
  6787                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  6788  00298A  9496               	bcf	3990,2,c	;volatile
  6789                           
  6790                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  6791  00298C  908D               	bcf	3981,0,c	;volatile
  6792                           
  6793                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  6794  00298E  928D               	bcf	3981,1,c	;volatile
  6795                           
  6796                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  6797  002990  848D               	bsf	3981,2,c	;volatile
  6798                           
  6799                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  6800  002992  0E21               	movlw	33
  6801  002994  6E14               	movwf	??_LCDinit& (0+255),c
  6802  002996  0E76               	movlw	118
  6803  002998                     u3517:
  6804  002998  2EE8               	decfsz	wreg,f,c
  6805  00299A  D7FE               	goto	u3517
  6806  00299C  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6807  00299E  D7FC               	goto	u3517
  6808  0029A0  D000               	nop2	
  6809                           
  6810                           ;lcd.c: 74: LCDcmd(0b00110000);
  6811  0029A2  0E30               	movlw	48
  6812  0029A4  ECC8  F018         	call	_LCDcmd
  6813                           
  6814                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  6815  0029A8  0E27               	movlw	39
  6816  0029AA  6E14               	movwf	??_LCDinit& (0+255),c
  6817  0029AC  0EF5               	movlw	245
  6818  0029AE                     u3527:
  6819  0029AE  2EE8               	decfsz	wreg,f,c
  6820  0029B0  D7FE               	goto	u3527
  6821  0029B2  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6822  0029B4  D7FC               	goto	u3527
  6823  0029B6  F000               	nop	
  6824                           
  6825                           ;lcd.c: 76: LCDcmd(0b00110000);
  6826  0029B8  0E30               	movlw	48
  6827  0029BA  ECC8  F018         	call	_LCDcmd
  6828                           
  6829                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  6830  0029BE  0E27               	movlw	39
  6831  0029C0  6E14               	movwf	??_LCDinit& (0+255),c
  6832  0029C2  0EF5               	movlw	245
  6833  0029C4                     u3537:
  6834  0029C4  2EE8               	decfsz	wreg,f,c
  6835  0029C6  D7FE               	goto	u3537
  6836  0029C8  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6837  0029CA  D7FC               	goto	u3537
  6838  0029CC  F000               	nop	
  6839                           
  6840                           ;lcd.c: 78: LCDcmd(0b00110000);
  6841  0029CE  0E30               	movlw	48
  6842  0029D0  ECC8  F018         	call	_LCDcmd
  6843                           
  6844                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  6845  0029D4  0E27               	movlw	39
  6846  0029D6  6E14               	movwf	??_LCDinit& (0+255),c
  6847  0029D8  0EF5               	movlw	245
  6848  0029DA                     u3547:
  6849  0029DA  2EE8               	decfsz	wreg,f,c
  6850  0029DC  D7FE               	goto	u3547
  6851  0029DE  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6852  0029E0  D7FC               	goto	u3547
  6853  0029E2  F000               	nop	
  6854                           
  6855                           ;lcd.c: 80: LCDcmd(0b00111000);
  6856  0029E4  0E38               	movlw	56
  6857  0029E6  ECC8  F018         	call	_LCDcmd
  6858                           
  6859                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  6860  0029EA  0E27               	movlw	39
  6861  0029EC  6E14               	movwf	??_LCDinit& (0+255),c
  6862  0029EE  0EF5               	movlw	245
  6863  0029F0                     u3557:
  6864  0029F0  2EE8               	decfsz	wreg,f,c
  6865  0029F2  D7FE               	goto	u3557
  6866  0029F4  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6867  0029F6  D7FC               	goto	u3557
  6868  0029F8  F000               	nop	
  6869                           
  6870                           ;lcd.c: 82: LCDcmd(0b00001000);
  6871  0029FA  0E08               	movlw	8
  6872  0029FC  ECC8  F018         	call	_LCDcmd
  6873                           
  6874                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  6875  002A00  0E27               	movlw	39
  6876  002A02  6E14               	movwf	??_LCDinit& (0+255),c
  6877  002A04  0EF5               	movlw	245
  6878  002A06                     u3567:
  6879  002A06  2EE8               	decfsz	wreg,f,c
  6880  002A08  D7FE               	goto	u3567
  6881  002A0A  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6882  002A0C  D7FC               	goto	u3567
  6883  002A0E  F000               	nop	
  6884                           
  6885                           ;lcd.c: 84: LCDcmd(0b00000001);
  6886  002A10  0E01               	movlw	1
  6887  002A12  ECC8  F018         	call	_LCDcmd
  6888                           
  6889                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  6890  002A16  0E27               	movlw	39
  6891  002A18  6E14               	movwf	??_LCDinit& (0+255),c
  6892  002A1A  0EF5               	movlw	245
  6893  002A1C                     u3577:
  6894  002A1C  2EE8               	decfsz	wreg,f,c
  6895  002A1E  D7FE               	goto	u3577
  6896  002A20  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6897  002A22  D7FC               	goto	u3577
  6898  002A24  F000               	nop	
  6899                           
  6900                           ;lcd.c: 86: LCDcmd(0b00000110);
  6901  002A26  0E06               	movlw	6
  6902  002A28  ECC8  F018         	call	_LCDcmd
  6903                           
  6904                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  6905  002A2C  0E27               	movlw	39
  6906  002A2E  6E14               	movwf	??_LCDinit& (0+255),c
  6907  002A30  0EF5               	movlw	245
  6908  002A32                     u3587:
  6909  002A32  2EE8               	decfsz	wreg,f,c
  6910  002A34  D7FE               	goto	u3587
  6911  002A36  2E14               	decfsz	??_LCDinit& (0+255),f,c
  6912  002A38  D7FC               	goto	u3587
  6913  002A3A  F000               	nop	
  6914                           
  6915                           ;lcd.c: 90: LCDcmd(0b00001111);
  6916  002A3C  0E0F               	movlw	15
  6917  002A3E  ECC8  F018         	call	_LCDcmd
  6918                           
  6919                           ;lcd.c: 91: LCDcheckBF();
  6920  002A42  ECA5  F018         	call	_LCDcheckBF	;wreg free
  6921  002A46  0012               	return		;funcret
  6922  002A48                     __end_of_LCDinit:
  6923                           	opt stack 0
  6924                           tblptru	equ	0xFF8
  6925                           tblptrh	equ	0xFF7
  6926                           tblptrl	equ	0xFF6
  6927                           tablat	equ	0xFF5
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           intcon	equ	0xFF2
  6931                           postinc0	equ	0xFEE
  6932                           wreg	equ	0xFE8
  6933                           postdec1	equ	0xFE5
  6934                           fsr1l	equ	0xFE1
  6935                           postinc2	equ	0xFDE
  6936                           postdec2	equ	0xFDD
  6937                           plusw2	equ	0xFDB
  6938                           fsr2h	equ	0xFDA
  6939                           fsr2l	equ	0xFD9
  6940                           status	equ	0xFD8
  6941                           
  6942 ;; *************** function _LCDgotoLineTwo *****************
  6943 ;; Defined at:
  6944 ;;		line 142 in file "lcd.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  1    wreg      void 
  6951 ;; Registers used:
  6952 ;;		wreg, cstack
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;Total ram usage:        0 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    2
  6965 ;; This function calls:
  6966 ;;		_LCDcheckBF
  6967 ;;		_LCDcmd
  6968 ;; This function is called by:
  6969 ;;		_main
  6970 ;;		_LCDputs
  6971 ;;		_LCDwriteLineTwo
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           	psect	text29
  6976  003170                     __ptext29:
  6977                           	opt stack 0
  6978  003170                     _LCDgotoLineTwo:
  6979                           	opt stack 28
  6980                           
  6981                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  6982                           
  6983                           ;incstack = 0
  6984  003170  908D               	bcf	3981,0,c	;volatile
  6985                           
  6986                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  6987  003172  928D               	bcf	3981,1,c	;volatile
  6988                           
  6989                           ;lcd.c: 146: LCDcmd(0b11000000);
  6990  003174  0EC0               	movlw	192
  6991  003176  ECC8  F018         	call	_LCDcmd
  6992                           
  6993                           ;lcd.c: 147: LCDcheckBF();
  6994  00317A  ECA5  F018         	call	_LCDcheckBF	;wreg free
  6995  00317E  0012               	return		;funcret
  6996  003180                     __end_of_LCDgotoLineTwo:
  6997                           	opt stack 0
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           intcon	equ	0xFF2
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           postdec1	equ	0xFE5
  7008                           fsr1l	equ	0xFE1
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           plusw2	equ	0xFDB
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function _LCDclear *****************
  7017 ;; Defined at:
  7018 ;;		line 126 in file "lcd.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;Total ram usage:        0 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    2
  7039 ;; This function calls:
  7040 ;;		_LCDcheckBF
  7041 ;;		_LCDcmd
  7042 ;; This function is called by:
  7043 ;;		_main
  7044 ;;		_LCDputs
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text30
  7049  003180                     __ptext30:
  7050                           	opt stack 0
  7051  003180                     _LCDclear:
  7052                           	opt stack 28
  7053                           
  7054                           ;lcd.c: 128: LATEbits.LATE0 = 0;
  7055                           
  7056                           ;incstack = 0
  7057  003180  908D               	bcf	3981,0,c	;volatile
  7058                           
  7059                           ;lcd.c: 129: LATEbits.LATE1 = 0;
  7060  003182  928D               	bcf	3981,1,c	;volatile
  7061                           
  7062                           ;lcd.c: 130: LCDcmd(0b00000001);
  7063  003184  0E01               	movlw	1
  7064  003186  ECC8  F018         	call	_LCDcmd
  7065                           
  7066                           ;lcd.c: 131: LCDcheckBF();
  7067  00318A  ECA5  F018         	call	_LCDcheckBF	;wreg free
  7068  00318E  0012               	return		;funcret
  7069  003190                     __end_of_LCDclear:
  7070                           	opt stack 0
  7071                           tblptru	equ	0xFF8
  7072                           tblptrh	equ	0xFF7
  7073                           tblptrl	equ	0xFF6
  7074                           tablat	equ	0xFF5
  7075                           prodh	equ	0xFF4
  7076                           prodl	equ	0xFF3
  7077                           intcon	equ	0xFF2
  7078                           postinc0	equ	0xFEE
  7079                           wreg	equ	0xFE8
  7080                           postdec1	equ	0xFE5
  7081                           fsr1l	equ	0xFE1
  7082                           postinc2	equ	0xFDE
  7083                           postdec2	equ	0xFDD
  7084                           plusw2	equ	0xFDB
  7085                           fsr2h	equ	0xFDA
  7086                           fsr2l	equ	0xFD9
  7087                           status	equ	0xFD8
  7088                           
  7089 ;; *************** function _LCDcmd *****************
  7090 ;; Defined at:
  7091 ;;		line 94 in file "lcd.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  command         1    wreg     unsigned char 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  command         1   18[COMRAM] unsigned char 
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  1    wreg      void 
  7098 ;; Registers used:
  7099 ;;		wreg
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;Total ram usage:        1 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    1
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		_LCDinit
  7116 ;;		_LCDwrite
  7117 ;;		_LCDclear
  7118 ;;		_LCDgotoLineTwo
  7119 ;;		_LCDgotoLineOne
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           	psect	text31
  7124  003190                     __ptext31:
  7125                           	opt stack 0
  7126  003190                     _LCDcmd:
  7127                           	opt stack 26
  7128                           
  7129                           ;incstack = 0
  7130                           ;LCDcmd@command stored from wreg
  7131  003190  6E13               	movwf	LCDcmd@command,c
  7132                           
  7133                           ;lcd.c: 96: LATA = command;
  7134  003192  C013  FF89         	movff	LCDcmd@command,3977	;volatile
  7135                           
  7136                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  7137  003196  948D               	bcf	3981,2,c	;volatile
  7138                           
  7139                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  7140  003198  848D               	bsf	3981,2,c	;volatile
  7141  00319A  0012               	return		;funcret
  7142  00319C                     __end_of_LCDcmd:
  7143                           	opt stack 0
  7144                           tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           intcon	equ	0xFF2
  7151                           postinc0	equ	0xFEE
  7152                           wreg	equ	0xFE8
  7153                           postdec1	equ	0xFE5
  7154                           fsr1l	equ	0xFE1
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           plusw2	equ	0xFDB
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _LCDcheckBF *****************
  7163 ;; Defined at:
  7164 ;;		line 101 in file "lcd.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;		None
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		None
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:        0 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    1
  7185 ;; This function calls:
  7186 ;;		Nothing
  7187 ;; This function is called by:
  7188 ;;		_LCDinit
  7189 ;;		_LCDwrite
  7190 ;;		_LCDclear
  7191 ;;		_LCDgotoLineTwo
  7192 ;;		_LCDgotoLineOne
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text32
  7197  00314A                     __ptext32:
  7198                           	opt stack 0
  7199  00314A                     _LCDcheckBF:
  7200                           	opt stack 26
  7201                           
  7202                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  7203                           
  7204                           ;incstack = 0
  7205  00314A  8E92               	bsf	3986,7,c	;volatile
  7206                           
  7207                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  7208  00314C  908D               	bcf	3981,0,c	;volatile
  7209                           
  7210                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  7211  00314E  828D               	bsf	3981,1,c	;volatile
  7212  003150                     l236:
  7213                           
  7214                           ;lcd.c: 110: {
  7215                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  7216  003150  948D               	bcf	3981,2,c	;volatile
  7217                           
  7218                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  7219  003152  848D               	bsf	3981,2,c	;volatile
  7220  003154  BE80               	btfsc	3968,7,c	;volatile
  7221  003156  D7FC               	goto	l236
  7222                           
  7223                           ;lcd.c: 113: }
  7224                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  7225  003158  848D               	bsf	3981,2,c	;volatile
  7226                           
  7227                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  7228  00315A  9E92               	bcf	3986,7,c	;volatile
  7229  00315C  0012               	return		;funcret
  7230  00315E                     __end_of_LCDcheckBF:
  7231                           	opt stack 0
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           intcon	equ	0xFF2
  7239                           postinc0	equ	0xFEE
  7240                           wreg	equ	0xFE8
  7241                           postdec1	equ	0xFE5
  7242                           fsr1l	equ	0xFE1
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           plusw2	equ	0xFDB
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function _ISR *****************
  7251 ;; Defined at:
  7252 ;;		line 263 in file "main.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;		None
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  dummy           1   17[COMRAM] unsigned char 
  7257 ;;  dummy           1   16[COMRAM] unsigned char 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      void 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:       18 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; This function calls:
  7274 ;;		Nothing
  7275 ;; This function is called by:
  7276 ;;		Interrupt level 2
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	intcode
  7281  000008                     __pintcode:
  7282                           	opt stack 0
  7283  000008                     _ISR:
  7284                           	opt stack 25
  7285                           
  7286                           ;incstack = 0
  7287  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7288  00000A  CFFA F003          	movff	pclath,??_ISR+2
  7289  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  7290  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  7291  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  7292  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  7293  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  7294  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  7295  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  7296  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  7297  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  7298  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  7299  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  7300  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  7301  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  7302                           
  7303                           ;main.c: 266: if (CCP2IE && CCP2IF)
  7304  000042  B0A0               	btfsc	4000,0,c	;volatile
  7305  000044  A0A1               	btfss	4001,0,c	;volatile
  7306  000046  D01E               	goto	i2l154
  7307                           
  7308                           ;main.c: 267: {
  7309                           ;main.c: 269: if(LATDbits.LATD1 == 1)
  7310  000048  A28C               	btfss	3980,1,c	;volatile
  7311  00004A  D010               	goto	i2l155
  7312                           
  7313                           ;main.c: 270: {
  7314                           ;main.c: 271: LATDbits.LATD1 = 0;
  7315  00004C  928C               	bcf	3980,1,c	;volatile
  7316                           
  7317                           ;main.c: 272: CCPR2 = 8000 - CCPR2;
  7318  00004E  CF67 F001          	movff	3943,??_ISR	;volatile
  7319  000052  CF68 F002          	movff	3944,??_ISR+1	;volatile
  7320  000056  1E01               	comf	??_ISR,f,c
  7321  000058  1E02               	comf	??_ISR+1,f,c
  7322  00005A  4A01               	infsnz	??_ISR,f,c
  7323  00005C  2A02               	incf	??_ISR+1,f,c
  7324  00005E  0E40               	movlw	64
  7325  000060  2401               	addwf	??_ISR,w,c
  7326  000062  6E67               	movwf	3943,c	;volatile
  7327  000064  0E1F               	movlw	31
  7328  000066  2002               	addwfc	??_ISR+1,w,c
  7329  000068  6E68               	movwf	3944,c	;volatile
  7330                           
  7331                           ;main.c: 273: }
  7332  00006A  D005               	goto	i2l2872
  7333  00006C                     i2l155:
  7334                           
  7335                           ;main.c: 274: else
  7336                           ;main.c: 275: {
  7337                           ;main.c: 276: LATDbits.LATD1 = 1;
  7338  00006C  828C               	bsf	3980,1,c	;volatile
  7339                           
  7340                           ;main.c: 277: CCPR2 = leftWheelCommandedPW;
  7341  00006E  C046  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  7342  000072  C047  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  7343  000076                     i2l2872:
  7344                           
  7345                           ;main.c: 278: }
  7346                           ;main.c: 279: TMR5 = 0;
  7347  000076  0E00               	movlw	0
  7348  000078  010F               	movlb	15	; () banked
  7349  00007A  6F50               	movwf	80,b	;volatile
  7350  00007C  0E00               	movlw	0
  7351  00007E  6F4F               	movwf	79,b	;volatile
  7352                           
  7353                           ; BSR set to: 15
  7354                           ;main.c: 280: CCP2IF = 0;
  7355  000080  90A1               	bcf	4001,0,c	;volatile
  7356                           
  7357                           ; BSR set to: 15
  7358                           ;main.c: 281: return;
  7359  000082  D047               	goto	i2l157
  7360  000084                     i2l154:
  7361                           
  7362                           ;main.c: 282: }
  7363                           ;main.c: 286: if (CCP3IE && CCP3IF)
  7364  000084  B07A               	btfsc	3962,0,c	;volatile
  7365  000086  A07B               	btfss	3963,0,c	;volatile
  7366  000088  D01F               	goto	i2l158
  7367                           
  7368                           ;main.c: 287: {
  7369                           ;main.c: 289: if(LATDbits.LATD0 == 1)
  7370  00008A  A08C               	btfss	3980,0,c	;volatile
  7371  00008C  D012               	goto	i2l159
  7372                           
  7373                           ;main.c: 290: {
  7374                           ;main.c: 291: LATDbits.LATD0 = 0;
  7375  00008E  908C               	bcf	3980,0,c	;volatile
  7376                           
  7377                           ;main.c: 292: CCPR3 = 8000 - CCPR3;
  7378  000090  CF5E F001          	movff	3934,??_ISR	;volatile
  7379  000094  CF5F F002          	movff	3935,??_ISR+1	;volatile
  7380  000098  1E01               	comf	??_ISR,f,c
  7381  00009A  1E02               	comf	??_ISR+1,f,c
  7382  00009C  4A01               	infsnz	??_ISR,f,c
  7383  00009E  2A02               	incf	??_ISR+1,f,c
  7384  0000A0  0E40               	movlw	64
  7385  0000A2  2401               	addwf	??_ISR,w,c
  7386  0000A4  010F               	movlb	15	; () banked
  7387  0000A6  6F5E               	movwf	94,b	;volatile
  7388  0000A8  0E1F               	movlw	31
  7389  0000AA  2002               	addwfc	??_ISR+1,w,c
  7390  0000AC  010F               	movlb	15	; () banked
  7391  0000AE  6F5F               	movwf	95,b	;volatile
  7392                           
  7393                           ;main.c: 293: }
  7394  0000B0  D005               	goto	i2l160
  7395  0000B2                     i2l159:
  7396                           
  7397                           ;main.c: 294: else
  7398                           ;main.c: 295: {
  7399                           ;main.c: 296: LATDbits.LATD0 = 1;
  7400  0000B2  808C               	bsf	3980,0,c	;volatile
  7401                           
  7402                           ;main.c: 297: CCPR3 = rightWheelCommandedPW;
  7403  0000B4  C048  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  7404  0000B8  C049  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  7405  0000BC                     i2l160:
  7406                           
  7407                           ;main.c: 298: }
  7408                           ;main.c: 299: CCP3IF = 0;
  7409  0000BC  907B               	bcf	3963,0,c	;volatile
  7410                           
  7411                           ;main.c: 300: TMR1 = 0;
  7412  0000BE  0E00               	movlw	0
  7413  0000C0  6ECF               	movwf	4047,c	;volatile
  7414  0000C2  0E00               	movlw	0
  7415  0000C4  6ECE               	movwf	4046,c	;volatile
  7416                           
  7417                           ;main.c: 302: return;
  7418  0000C6  D025               	goto	i2l157
  7419  0000C8                     i2l158:
  7420                           
  7421                           ;main.c: 305: }
  7422                           ;main.c: 310: if(C1IF && C1IE)
  7423  0000C8  BCA1               	btfsc	4001,6,c	;volatile
  7424  0000CA  ACA0               	btfss	4000,6,c	;volatile
  7425  0000CC  D00A               	goto	i2l2898
  7426                           
  7427                           ;main.c: 311: {
  7428                           ;main.c: 312: leftWheelCount++;
  7429  0000CE  0E01               	movlw	1
  7430  0000D0  0100               	movlb	0	; () banked
  7431  0000D2  27C0               	addwf	_leftWheelCount& (0+255),f,b
  7432  0000D4  0E00               	movlw	0
  7433  0000D6  23C1               	addwfc	(_leftWheelCount+1)& (0+255),f,b
  7434  0000D8  23C2               	addwfc	(_leftWheelCount+2)& (0+255),f,b
  7435  0000DA  23C3               	addwfc	(_leftWheelCount+3)& (0+255),f,b
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;main.c: 313: char dummy = CM1CON0;
  7439  0000DC  CF79 F011          	movff	3961,ISR@dummy	;volatile
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;main.c: 314: C1IF = 0;
  7443  0000E0  9CA1               	bcf	4001,6,c	;volatile
  7444  0000E2                     i2l2898:
  7445                           
  7446                           ;main.c: 315: }
  7447                           ;main.c: 316: if(C2IF && C2IE)
  7448  0000E2  BAA1               	btfsc	4001,5,c	;volatile
  7449  0000E4  AAA0               	btfss	4000,5,c	;volatile
  7450  0000E6  D00A               	goto	i2l2908
  7451                           
  7452                           ;main.c: 317: {
  7453                           ;main.c: 318: rightWheelCount++;
  7454  0000E8  0E01               	movlw	1
  7455  0000EA  0100               	movlb	0	; () banked
  7456  0000EC  27C4               	addwf	_rightWheelCount& (0+255),f,b
  7457  0000EE  0E00               	movlw	0
  7458  0000F0  23C5               	addwfc	(_rightWheelCount+1)& (0+255),f,b
  7459  0000F2  23C6               	addwfc	(_rightWheelCount+2)& (0+255),f,b
  7460  0000F4  23C7               	addwfc	(_rightWheelCount+3)& (0+255),f,b
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;main.c: 320: char dummy = CM2CON0;
  7464  0000F6  CF78 F012          	movff	3960,ISR@dummy_1019	;volatile
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;main.c: 321: C2IF = 0;
  7468  0000FA  9AA1               	bcf	4001,5,c	;volatile
  7469  0000FC                     i2l2908:
  7470                           
  7471                           ;main.c: 322: }
  7472                           ;main.c: 327: if (TMR2IE && TMR2IF)
  7473  0000FC  B29D               	btfsc	3997,1,c	;volatile
  7474  0000FE  A29E               	btfss	3998,1,c	;volatile
  7475  000100  D008               	goto	i2l157
  7476                           
  7477                           ;main.c: 328: {
  7478                           ;main.c: 329: elapsedMillis++;
  7479  000102  0E01               	movlw	1
  7480  000104  0100               	movlb	0	; () banked
  7481  000106  27BC               	addwf	_elapsedMillis& (0+255),f,b
  7482  000108  0E00               	movlw	0
  7483  00010A  23BD               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  7484  00010C  23BE               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  7485  00010E  23BF               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;main.c: 330: PIR1bits.TMR2IF = 0;
  7489  000110  929E               	bcf	3998,1,c	;volatile
  7490  000112                     i2l157:
  7491  000112  C010  FFF5         	movff	??_ISR+15,tablat
  7492  000116  C00F  FFF8         	movff	??_ISR+14,tblptru
  7493  00011A  C00E  FFF7         	movff	??_ISR+13,tblptrh
  7494  00011E  C00D  FFF6         	movff	??_ISR+12,tblptrl
  7495  000122  C00C  FFF4         	movff	??_ISR+11,prodh
  7496  000126  C00B  FFF3         	movff	??_ISR+10,prodl
  7497  00012A  C00A  FFDA         	movff	??_ISR+9,fsr2h
  7498  00012E  C009  FFD9         	movff	??_ISR+8,fsr2l
  7499  000132  C008  FFE2         	movff	??_ISR+7,fsr1h
  7500  000136  C007  FFE1         	movff	??_ISR+6,fsr1l
  7501  00013A  C006  FFEA         	movff	??_ISR+5,fsr0h
  7502  00013E  C005  FFE9         	movff	??_ISR+4,fsr0l
  7503  000142  C004  FFFB         	movff	??_ISR+3,pclatu
  7504  000146  C003  FFFA         	movff	??_ISR+2,pclath
  7505  00014A  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7506  00014C  0011               	retfie		f
  7507  00014E                     __end_of_ISR:
  7508                           	opt stack 0
  7509                           pclatu	equ	0xFFB
  7510                           pclath	equ	0xFFA
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           postinc0	equ	0xFEE
  7519                           fsr0h	equ	0xFEA
  7520                           fsr0l	equ	0xFE9
  7521                           wreg	equ	0xFE8
  7522                           postdec1	equ	0xFE5
  7523                           fsr1h	equ	0xFE2
  7524                           fsr1l	equ	0xFE1
  7525                           postinc2	equ	0xFDE
  7526                           postdec2	equ	0xFDD
  7527                           plusw2	equ	0xFDB
  7528                           fsr2h	equ	0xFDA
  7529                           fsr2l	equ	0xFD9
  7530                           status	equ	0xFD8
  7531                           pclatu	equ	0xFFB
  7532                           pclath	equ	0xFFA
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           postinc0	equ	0xFEE
  7541                           fsr0h	equ	0xFEA
  7542                           fsr0l	equ	0xFE9
  7543                           wreg	equ	0xFE8
  7544                           postdec1	equ	0xFE5
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           postinc2	equ	0xFDE
  7548                           postdec2	equ	0xFDD
  7549                           plusw2	equ	0xFDB
  7550                           fsr2h	equ	0xFDA
  7551                           fsr2l	equ	0xFD9
  7552                           status	equ	0xFD8
  7553                           
  7554                           	psect	rparam
  7555  0000                     pclatu	equ	0xFFB
  7556                           pclath	equ	0xFFA
  7557                           tblptru	equ	0xFF8
  7558                           tblptrh	equ	0xFF7
  7559                           tblptrl	equ	0xFF6
  7560                           tablat	equ	0xFF5
  7561                           prodh	equ	0xFF4
  7562                           prodl	equ	0xFF3
  7563                           intcon	equ	0xFF2
  7564                           postinc0	equ	0xFEE
  7565                           fsr0h	equ	0xFEA
  7566                           fsr0l	equ	0xFE9
  7567                           wreg	equ	0xFE8
  7568                           postdec1	equ	0xFE5
  7569                           fsr1h	equ	0xFE2
  7570                           fsr1l	equ	0xFE1
  7571                           postinc2	equ	0xFDE
  7572                           postdec2	equ	0xFDD
  7573                           plusw2	equ	0xFDB
  7574                           fsr2h	equ	0xFDA
  7575                           fsr2l	equ	0xFD9
  7576                           status	equ	0xFD8
  7577                           
  7578                           	psect	temp
  7579  00004C                     btemp:
  7580                           	opt stack 0
  7581  00004C                     	ds	1
  7582  0000                     int$flags	set	btemp
  7583                           pclatu	equ	0xFFB
  7584                           pclath	equ	0xFFA
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           intcon	equ	0xFF2
  7592                           postinc0	equ	0xFEE
  7593                           fsr0h	equ	0xFEA
  7594                           fsr0l	equ	0xFE9
  7595                           wreg	equ	0xFE8
  7596                           postdec1	equ	0xFE5
  7597                           fsr1h	equ	0xFE2
  7598                           fsr1l	equ	0xFE1
  7599                           postinc2	equ	0xFDE
  7600                           postdec2	equ	0xFDD
  7601                           plusw2	equ	0xFDB
  7602                           fsr2h	equ	0xFDA
  7603                           fsr2l	equ	0xFD9
  7604                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    10
    Data        8
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      75
    BANK0           160     92     115
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[8]), STR_3(CODE[8]), STR_2(CODE[10]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@speedCompensation	PTR int  size(2) Largest target is 2
		 -> speedCompensation(BANK0[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@rightWheelCommandedSpeed(BANK0[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> excerciseControl@leftWheelCommandedSpeed(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->___fttol
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    _excerciseControl->___fttol
    _sqrt->___ftge
    ___ftsub->___ftadd
    ___ftmul->___lltoft
    ___ftge->___ftmul
    _trunc->___fttol
    ___fttol->___ftdiv
    ___fttol->_sqrt
    ___altoft->___fttol
    ___ftadd->___lltoft
    ___lltoft->___ftpack
    ___awtoft->___ftpack
    ___ftdiv->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd
    _LCDclear->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_excerciseControl
    _excerciseControl->_round
    _round->___ftneg
    _trunc->___altoft
    ___fttol->_sqrt
    ___altoft->___fttol
    ___ftneg->_trunc

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   66763
                                             68 BANK0     24    24      0
                           _LCDclear
                     _LCDgotoLineTwo
                            _LCDinit
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
               _configureComparators
                    _configureTimers
                   _excerciseControl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              28    22      6    1890
                                             30 COMRAM    19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             20 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _excerciseControl                                    32    32      0   51734
                                             51 BANK0     17    17      0
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftsub
                            ___fttol
                           ___lltoft
                   _limitWheelSpeeds
                              _round
                               _sqrt
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (2) _wheelVelocity                                        7     3      4    3438
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   12095
                                             59 COMRAM     6     3      3
                                              0 BANK0     13    13      0
                             ___ftge
                            ___ftmul
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5981
                                             47 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4572
                                             35 COMRAM    15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     520
                                             50 COMRAM     9     3      6
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3   10242
                                             45 BANK0      6     3      3
                            ___ftadd
                             ___ftge (ARG)
                            ___ftmul (ARG)
                            ___ftneg
                           ___lltoft (ARG)
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    4663
                                             34 BANK0      8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     336
                                             18 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4    1064
                                             65 COMRAM     4     0      4
                                             13 BANK0     11    11      0
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2865
                                             24 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                             42 BANK0      3     0      3
                            ___ftadd (ARG)
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5155
                                             35 COMRAM    12     6      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _limitWheelSpeeds                                     8     2      6     840
                                             18 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3764
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3179
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _configureTimers                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureComparators                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3426
                                             50 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             19 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDclear                                             0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 18    18      0       2
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDclear
     _LCDcheckBF
     _LCDcmd
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftsub (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
     _sqrt (ARG)
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
   ___lltoft
     ___ftpack
   _configureComparators
   _configureTimers
   _excerciseControl
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftge
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftsub
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _sqrt (ARG)
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
     ___lltoft
       ___ftpack
     _limitWheelSpeeds
     _round
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftge (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         _trunc (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               _sqrt (ARG)
                 ___ftge
                   ___ftmul (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
             _sqrt (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
           _frexp (ARG)
       ___lltoft (ARG)
         ___ftpack
       _trunc (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
             _sqrt (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _sqrt (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___lltoft (ARG)
               ___ftpack
         _frexp (ARG)
     _sqrt
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___ftsub
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lltoft (ARG)
         ___ftpack
     _wheelVelocity
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      73       5       71.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4B       1       79.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BE      12        0.0%
DATA                 0      0      BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Mon Apr 25 11:51:22 2016

                            ___altoft@exp 0080                             ___altoft@sign 0081  
                     ___wmul@multiplicand 0015                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 002F  
                            ___ftadd@exp2 002E                     _excerciseControl$2063 009E  
                   _excerciseControl$2064 00A1                     _excerciseControl$2065 0097  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 002D  
                                     l236 3150                                       l149 2F3E  
                                     l535 2AD6                                       l615 30F8  
                                     l562 229A                                       l573 234A  
                                     l582 2366                                       l558 2270  
                                     l718 3012                                       l728 3054  
                                     l593 2950                                       l870 2412  
                                     l871 2404                              __CFG_CPB$OFF 000000  
                                     _PR2 000FBB                              __CFG_CPD$OFF 000000  
                                     _ISR 0008                               ?_LCDcheckBF 0001  
                                     wreg 000FE8                                      ?_ISR 0001  
                            ___ftdiv@cntr 003C                              ___ftdiv@sign 0041  
                                    _C1IE 007D06                                      _C1IF 007D0E  
                                    _C2IE 007D05                                      _C2IF 007D0D  
                                    l3012 227E                                      l3110 266C  
                                    l3102 2642                                      l2150 2E04  
                                    l2230 2C9C                                      l3040 22FA  
                                    l3112 2676                                      l3042 2304  
                                    l3034 22D8                                      l3018 22A8  
                                    l2226 2C6C                                      l3210 2472  
                                    l2410 304A                                      l2402 302A  
                                    l3060 2382                                      l3052 2338  
                                    l3044 230E                                      l3116 2692  
                                    l3108 265C                                      l2236 2CC8  
                                    l3132 27F8                                      l3300 13D6  
                                    l2404 3032                                      l2270 26FA  
                                    l3070 23B2                                      l3054 2342  
                                    l3046 2316                                      l3150 283A  
                                    l3126 27D0                                      l3310 141A  
                                    l2406 3036                                      l3080 25AC  
                                    l3160 2862                                      l3320 1498  
                                    l3304 13EC                                      l2344 3142  
                                    l3250 2EC4                                      l2282 277C  
                                    l2274 2726                                      l2266 26D0  
                                    l3146 282A                                      l3330 1630  
                                    l3322 14D2                                      l2610 21AA  
                                    l2602 2186                                      l3404 28EC  
                                    l3244 30B2                                      l3252 2ED0  
                                    l3156 2852                                      l3172 3074  
                                    l3308 1404                                      l3316 1464  
                                    l3260 1036                                      l2620 220A  
                                    l2604 218E                                      l2278 2750  
                                    l3334 1766                                      l3326 1522  
                                    l3318 1482                                      l3262 104C  
                                    l2382 2FE0                                      l2614 21BC  
                                    l2606 2196                                      l2550 2046  
                                    l2622 2212                                      l3424 292A  
                                    l3184 2D8C                                      l3352 183C  
                                    l3280 11F4                                      l2384 2FE8  
                                    l2616 21C2                                      l3098 262E  
                                    l3362 189E                                      l2394 3008  
                                    l2386 2FEC                                      l2546 2036  
                                    l3188 2DAA                                      l3372 1A50  
                                    l3364 18BC                                      l3348 1826  
                                    l3356 1854                                      l3284 132A  
                                    l3276 10E6                                      l3268 1084  
                                    l2580 211C                                      l2556 206E  
                                    l3452 1CC6                                      l3366 18D2  
                                    l3390 1C36                                      l2566 20CA  
                                    l3462 1D76                                      l3376 1B96  
                                    l3368 190A                                      l2592 2148  
                                    l2568 20F0                                      l3386 1C18  
                                    l2578 2118                                      l3468 1DD6  
                                    l3398 28C4                                      l2598 2162  
                                    l2960 2A66                           __end_of_LCDinit 2A48  
                                    l2970 2AC2                                      l2962 2A70  
                                    l2972 2ACC                                      l2964 2A8E  
                                    l2956 2A58                                      l2968 2AA4  
                                    l2996 2BCA                                      l2998 2BDA  
                                    STR_1 100B                                      STR_2 1016  
                                    STR_3 1020                                      STR_4 1028  
                                    u3001 258A                                      u3020 25D2  
                                    u3101 27E0                                      _LATA 000F89  
                                    u3025 25C8                                      u3300 14E8  
                                    u3220 109A                                      u3160 2D9C  
                                    u3400 1BB0                                      u3081 27B8  
                                    u3330 177E                                      u3250 1342  
                                    u3411 28AC                                      u1900 26C0  
                                    u3340 1796                                      u3260 135A  
                                    u3431 28D4                                      u1920 2716  
                                    u1760 2E2C                                      u2801 2250  
                                    u3507 1844                                      u1940 276C  
                                    u3517 2998                                      u3527 29AE  
                                    u1768 2E2E                                      u3537 29C4  
                                    u3547 29DA                                      u3557 29F0  
                                    u3567 2A06                                      u2791 223C  
                                    u3577 2A1C                                      u3497 13F4  
                                    u3587 2A32                                      _TMR1 000FCE  
                                    _TMR5 000F4F                          ?_configureTimers 0001  
                                    _main 1C50                              ___ftpack@arg 0013  
                            ___ftpack@exp 0016                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 004C  
                                    _sqrt 23D8                             __CFG_BORV$190 000000  
                                    pclat 000FFA                           ??_wheelVelocity 0017  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 014E                             __CFG_IESO$OFF 000000  
                            ___ftmul@cntr 0031                              ___param_bank 000010  
                            ___ftmul@sign 0032                                     ??_ISR 0001  
                            ___fttol@exp1 0077                         excerciseControl@i 009A  
                            ___fttol@lval 0073                          __end_of_LCDclear 3190  
                                   ?_main 0001                           __end_of___ftadd 23D8  
                                   _CCPR2 000F67                                     _CCPR3 000F5E  
                         __end_of___ftdiv 2982                           __end_of___ftneg 3106  
                                   ?_sqrt 003C                           __end_of___ftmul 289C  
                                   _T1CON 000FCD                           __end_of___ftsub 309E  
                         __end_of___fttol 26A4                                     _T2CON 000FBA  
                                   _T5CON 000F4E                           __end_of___lwdiv 301C  
                         __end_of___lwmod 305E                                     i2l160 00BC  
                                   i2l154 0084                                     i2l155 006C  
                                   i2l157 0112                                     i2l158 00C8  
                                   i2l159 00B2                          __end_of_LCDwrite 3170  
                                   _TRISA 000F92                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0023  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                  __end_of_limitWheelSpeeds 27A8  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 001E                           __end_of_dpowers 100B  
                                   _event 00CC                                     _frexp 2DE8  
                                   _errno 004A                           __end_of_isdigit 314A  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0017  
                                   _putch 319C                                     _round 2CCC  
                                   _trunc 2D5A                                     tablat 000FF5  
                                   plusw2 000FDB                                     sqrt@a 003C  
                                   sqrt@i 0066                                     sqrt@q 0067  
                                   sqrt@x 006A                                     sqrt@z 0063  
                                   status 000FD8                            __CFG_HFOFST$ON 000000  
                     __size_of_LCDcheckBF 0014                           __initialization 2E60  
                            __end_of_main 202C                              __end_of_sqrt 2576  
                                  ??_main 00A4                             ___fttol@sign1 0072  
                                  ??_sqrt 003F                             ISR@dummy_1019 0012  
                           __activetblptr 000002                                 ??_LCDinit 0014  
                     main@speedLastMillis 00B8                        wheelVelocity@speed 0013  
                      wheelVelocity@wheel 0019              __end_of_configureComparators 2FCA  
                                  _CCP2IE 007D00                                    _CCP2IF 007D08  
                                  _CCP3IE 007BD0                                    _CCP3IF 007BD8  
                                  ?_frexp 0013                          __end_of___altoft 2C3C  
                        __end_of___awtoft 30D6                                    ?_putch 0001  
                                  _ANSELD 000F3B                          __end_of___ftpack 2AF6  
                                  ?_round 008D                                    ?_trunc 0082  
                        __end_of___lltoft 2F1A                            __CFG_WDTEN$OFF 000000  
                                  i2l2908 00FC                                    i2l2872 0076  
                                  i2l2898 00E2                                    _LCDcmd 3190  
                                  _TMR2IE 007CE9                                    _TMR2IF 007CF1  
                                  _TMR1ON 007E68                                    _TMR5ON 007A70  
                       ?_excerciseControl 0001                            __CFG_PWRTEN$ON 000000  
                          __CFG_XINST$OFF 000000                        ??_excerciseControl 0093  
                            _CCPTMRS0bits 000F49                                    ___ftge 2C3C  
                                  ___wmul 3106                                 ??___ftadd 002A  
                          __CFG_STVREN$ON 000000                                 ??___ftdiv 0039  
                               ??___ftneg 0046                                 ??___ftmul 002A  
                               ??___ftsub 0036                                 ??___fttol 006D  
                               ??___lwdiv 0017                                 ??___lwmod 001E  
                          _leftWheelCount 00C0                                    clear_0 2E66  
                                  _printf 202C                     ___ftmul@f3_as_product 002E  
                            __pdataCOMRAM 0046                                 ??_isdigit 0013  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                                  round@f 0090                                    round@x 008D  
                                  sqrt@og 0060                                    trunc@i 0085  
                   main@controlLastMillis 00AC                                    trunc@x 0082  
       limitWheelSpeeds@speedCompensation 0017                                __accesstop 0060  
                 __end_of__initialization 2EB0                                ___altoft@c 0078  
                         __CFG_PBADEN$OFF 000000                                ___ftadd@f1 0024  
                              ___ftadd@f2 0027                                ___ftge@ff1 0033  
                              ___ftge@ff2 0036                                 ?_LCDclear 0001  
                           ___rparam_used 000001                                ___ftdiv@f1 0033  
                              ___ftdiv@f2 0036                                ___ftdiv@f3 003D  
                              ___ftneg@f1 008A                                ___awtoft@c 001B  
                 __size_of_LCDgotoLineTwo 0010                                 ?_LCDwrite 0001  
                              ___ftmul@f1 0024                                ___ftmul@f2 0027  
                              ___ftsub@f1 0030                                ___ftsub@f2 0033  
                              ___fttol@f1 0042                            __pcstackCOMRAM 0001  
                            __pidataBANK0 31AA                                ___lltoft@c 001B  
                           __end_of_frexp 2E60                             __end_of_putch 31A6  
                           __end_of_round 2D5A                             __end_of_trunc 2DE8  
                            ??_LCDcheckBF 0013                                   ??_frexp 0018  
                                 ??_putch 0015                                   ??_round 0046  
                                 ??_trunc 0046                                __pbssBANK0 00BC  
                                 ?_LCDcmd 0001                     _rightWheelCommandedPW 0048  
                         __CFG_PLLCFG$OFF 000000                                ??_LCDclear 0014  
                              ??_LCDwrite 0014                        __end_of_LCDcheckBF 315E  
                      __CFG_CCP2MX$PORTB3 000000                                   ?___ftge 0033  
          limitWheelSpeeds@leftWheelSpeed 0013                                   ?___wmul 0013  
                      __CFG_CCP3MX$PORTB5 000000                      main@leftCountTracker 00B4  
                    _configureComparators 2F72                                   _CM1CON0 000F79  
                                 _CM2CON0 000F78                                   _CCP2CON 000F66  
                                 _CCP3CON 000F5D                                 ?___altoft 0078  
                               ?___awtoft 001B                                 ?___ftpack 0013  
                                 ?_printf 001F                                 ?___lltoft 001B  
                                 _LCDinit 2982                         ?_limitWheelSpeeds 0013  
                      ??_limitWheelSpeeds 0019                           __size_of_LCDcmd 000C  
                                 __Hparam 0000                     __end_of_wheelVelocity 2F72  
                                 __Lparam 0000                  __size_of_configureTimers 00A8  
                         __size_of___ftge 0090                                   ___ftadd 222C  
                   ?_configureComparators 0001                                   ___ftdiv 289C  
                                 ___ftneg 30D6                           __size_of___wmul 0026  
                                 ___ftmul 27A8                                   ___ftsub 305E  
                                 ___fttol 2576                                   ___lwdiv 2FCA  
                                 ___lwmod 301C                              __psmallconst 1000  
                              ??___altoft 007C                                   __pcinit 2E60  
                              ??___awtoft 001E                                ??___ftpack 0018  
                                 __ramtop 1000                                ??___lltoft 001F  
                                 __ptext0 1C50                                   __ptext1 202C  
                                 __ptext2 319C                                   __ptext3 315E  
                                 __ptext4 312C                                   __ptext5 3106  
                                 __ptext6 301C                                   __ptext7 2FCA  
                                 __ptext8 1032                                   __ptext9 2F1A  
                         __size_of_printf 0200                              __size_of_ISR 0146  
                               _T1CONbits 000FCD                                   _dpowers 1001  
                               _T2CONbits 000FBA                    excerciseControl@i_1033 009C  
                                 _isdigit 312C                                 _T5CONbits 000F4E  
                    end_of_initialization 2EB0                             __Lmediumconst 0000  
                  _leftWheelMeasuredSpeed 00C8           limitWheelSpeeds@rightWheelSpeed 0015  
                          _LCDgotoLineTwo 3170                                   printf@c 0031  
                                 printf@f 001F                         main@lcdLastMillis 00B0  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                               _PORTAbits 000F80                 __size_of_excerciseControl 0C1E  
                               _TRISAbits 000F92                                 _TRISBbits 000F93  
                               _TRISDbits 000F95                                 _TRISEbits 000F96  
                           LCDcmd@command 0013                               _CM1CON0bits 000F79  
                  __end_of_LCDgotoLineTwo 3180                               _CM2CON0bits 000F78  
                             _CM2CON1bits 000F77                               ___ftdiv@exp 0040  
                          __end_of_LCDcmd 319C                               printf@width 002F  
                             _CCP2CONbits 000F66                               _CCP3CONbits 000F5D  
                       __size_of_LCDclear 0010                               ___ftmul@exp 002D  
                  ??_configureComparators 0013                         __size_of_LCDwrite 0012  
                 _rightWheelMeasuredSpeed 00CA                      _leftWheelCommandedPW 0046  
                          __end_of___ftge 2CCC                            __end_of___wmul 312C  
                           __pidataCOMRAM 31A6                         ??_configureTimers 0013  
                          __end_of_printf 222C                       start_initialization 2E60  
                             __end_of_ISR 014E                                  ??_LCDcmd 0013  
                              frexp@value 0013                           ?_LCDgotoLineTwo 0001  
                                ??___ftge 0039                                  ??___wmul 0017  
                             __pdataBANK0 00CF                           _rightWheelCount 00C4  
                                ??_printf 0025                         __size_of___altoft 009E  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                       __size_of___lltoft 005C                               __pbssCOMRAM 004A  
                                ?_LCDinit 0001                             __pcstackBANK0 0060  
                            _isdigit$1676 0014                                  ISR@dummy 0011  
                        ___lwdiv@dividend 0013                 __size_of_limitWheelSpeeds 0104  
                               __pintcode 0008                                  ?___ftadd 0024  
                                ?___ftdiv 0033                                  ?___ftneg 008A  
                                ?___ftmul 0024                                  ?___ftsub 0030  
                                ?___fttol 0042                                  ?___lwdiv 0013  
                                ?___lwmod 001A  excerciseControl@rightWheelCommandedSpeed 00D1  
                        __CFG_PRICLKEN$ON 000000                          _excerciseControl 1032  
                             __smallconst 1000                                  ?_isdigit 0001  
                        ___lwdiv@quotient 0017                            __size_of_frexp 0078  
                          __size_of_putch 000A                            __size_of_round 008E  
                          __size_of_trunc 008E                            ___wmul@product 0017  
                                _LATDbits 000F8C                                  _LATEbits 000F8D  
                                _LCDclear 3180                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                                  _LCDwrite 315E  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                        __CFG_WDTPS$32768 000000                         ___wmul@multiplier 0013  
                              printf@flag 002C                                printf@prec 002B  
                        __size_of_LCDinit 00C6                    __size_of_wheelVelocity 0058  
                               copy_data0 2E84                                 copy_data1 2EA4  
                               frexp@eptr 0016                                  __Hrparam 0000  
                         _configureTimers 2AF6                                  __Lrparam 0000  
                      __CFG_BOREN$SBORDIS 000000                     main@rightCountTracker 00B6  
                       __CFG_P2BMX$PORTD2 000000                          __size_of___ftadd 01AC  
                        __size_of___ftdiv 00E6                          __size_of___ftneg 0030  
                                ___altoft 2B9E                          __size_of___ftmul 00F4  
                        __size_of___ftsub 0040                          __size_of___fttol 012E  
                        __size_of___lwdiv 0052                          __size_of___lwmod 0042  
                                ___awtoft 309E                                  ___ftpack 2A48  
                                ___lltoft 2EBE                                _ANSELBbits 000F39  
                        __size_of_isdigit 001E                           ___lwdiv@divisor 0015  
                         ___lwdiv@counter 0019                                  __ptext10 23D8  
                                __ptext11 305E                                  __ptext20 222C  
                                __ptext12 27A8                                  __ptext21 26A4  
                                __ptext13 2C3C                                  __ptext30 3180  
                                __ptext22 2EBE                                  __ptext14 2CCC  
                                __ptext31 3190                                  __ptext23 309E  
                                __ptext15 2D5A                                  __ptext32 314A  
                                __ptext24 2AF6                                  __ptext16 2DE8  
                                __ptext25 2F72                                  __ptext17 2576  
                                __ptext26 289C                                  __ptext18 2B9E  
                                __ptext27 2A48                                  __ptext19 30D6  
                                __ptext28 2982                                  __ptext29 3170  
                        ??_LCDgotoLineTwo 0014                                trunc@expon 0088  
                           _elapsedMillis 00BC                             __size_of_main 03DC  
                           __size_of_sqrt 019E            wheelVelocity@speedCompensation 0015  
                        _limitWheelSpeeds 26A4                             _wheelVelocity 2F1A  
                                int$flags 004C             __size_of_configureComparators 0058  
                               printf@val 002D                         _speedCompensation 00CD  
                              _LCDcheckBF 314A                                 putch@data 0015  
                              _INTCONbits 000FF2                                  isdigit@c 0015  
                                intlevel2 0000                   __end_of_configureTimers 2B9E  
                        ___lwmod@dividend 001A                              _VREFCON0bits 000F42  
                __end_of_excerciseControl 1C50   excerciseControl@leftWheelCommandedSpeed 00CF  
                              _OSCCONbits 000FD3                            ?_wheelVelocity 0013  
                                printf@ap 0029                           ___lwmod@divisor 001C  
                         ___lwmod@counter 001E                         __CFG_T3CMX$PORTB5 000000  
                       __CFG_FOSC$INTIO67 000000                             LCDwrite@input 0014  

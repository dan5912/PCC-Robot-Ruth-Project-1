

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Apr 21 21:33:07 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           	psect	idataBANK0
    40  0022DE                     __pidataBANK0:
    41                           	opt stack 0
    42                           
    43                           ;initializer for _leftWheelCommandedPW
    44  0022DE  02A3               	dw	675
    45                           
    46                           ;initializer for _rightWheelCommandedPW
    47  0022E0  02B7               	dw	695
    48                           
    49                           	psect	smallconst
    50  001000                     __psmallconst:
    51                           	opt stack 0
    52  001000  00                 	db	0
    53  001001                     _dpowers:
    54                           	opt stack 0
    55  001001  0001               	dw	1
    56  001003  000A               	dw	10
    57  001005  0064               	dw	100
    58  001007  03E8               	dw	1000
    59  001009  2710               	dw	10000
    60  00100B                     __end_of_dpowers:
    61                           	opt stack 0
    62  0000                     _CCPR3	set	3934
    63  0000                     _TMR5	set	3919
    64  0000                     _ANSELBbits	set	3897
    65  0000                     _CCP3CON	set	3933
    66  0000                     _CCP3CONbits	set	3933
    67  0000                     _CCPR3H	set	3935
    68  0000                     _CCPR3L	set	3934
    69  0000                     _CCPTMRS0bits	set	3913
    70  0000                     _T5CON	set	3918
    71  0000                     _T5CONbits	set	3918
    72  0000                     _TMR5ON	set	31344
    73  0000                     _CCPR2	set	3943
    74  0000                     _TMR1	set	4046
    75  0000                     _TMR3	set	4018
    76  0000                     _CCP2CON	set	3942
    77  0000                     _CCP2CONbits	set	3942
    78  0000                     _CCPR1H	set	4031
    79  0000                     _CCPR1L	set	4030
    80  0000                     _INTCONbits	set	4082
    81  0000                     _LATA	set	3977
    82  0000                     _LATCbits	set	3979
    83  0000                     _LATEbits	set	3981
    84  0000                     _OSCCONbits	set	4051
    85  0000                     _PIE1bits	set	3997
    86  0000                     _PIR1bits	set	3998
    87  0000                     _PORTAbits	set	3968
    88  0000                     _PORTBbits	set	3969
    89  0000                     _T1CON	set	4045
    90  0000                     _T1CONbits	set	4045
    91  0000                     _T2CON	set	4026
    92  0000                     _T2CONbits	set	4026
    93  0000                     _TRISA	set	3986
    94  0000                     _TRISAbits	set	3986
    95  0000                     _TRISBbits	set	3987
    96  0000                     _TRISCbits	set	3988
    97  0000                     _TRISEbits	set	3990
    98  0000                     _CCP2IE	set	32000
    99  0000                     _CCP2IF	set	32008
   100  0000                     _CCP3IE	set	31696
   101  0000                     _CCP3IF	set	31704
   102  0000                     _TMR1ON	set	32360
   103  0000                     _TMR2IE	set	31977
   104  0000                     _TMR2IF	set	31985
   105  00100B                     STR_1:
   106  00100B  45                 	db	69	;'E'
   107  00100C  76                 	db	118	;'v'
   108  00100D  65                 	db	101	;'e'
   109  00100E  6E                 	db	110	;'n'
   110  00100F  74                 	db	116	;'t'
   111  001010  3A                 	db	58	;':'
   112  001011  20                 	db	32
   113  001012  25                 	db	37
   114  001013  33                 	db	51	;'3'
   115  001014  64                 	db	100	;'d'
   116  001015  00                 	db	0
   117  001016                     STR_2:
   118  001016  25                 	db	37
   119  001017  64                 	db	100	;'d'
   120  001018  00                 	db	0
   121                           
   122                           ; #config settings
   123  001019  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  0021D8                     __pcinit:
   127                           	opt stack 0
   128  0021D8                     start_initialization:
   129                           	opt stack 0
   130  0021D8                     __initialization:
   131                           	opt stack 0
   132                           
   133                           ; Clear objects allocated to BANK0 (12 bytes)
   134  0021D8  EE00  F07C         	lfsr	0,__pbssBANK0
   135  0021DC  0E0C               	movlw	12
   136  0021DE                     clear_0:
   137  0021DE  6AEE               	clrf	postinc0,c
   138  0021E0  06E8               	decf	wreg,f,c
   139  0021E2  E1FD               	bnz	clear_0
   140                           
   141                           ; Clear objects allocated to COMRAM (2 bytes)
   142  0021E4  6A4D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   143  0021E6  6A4C               	clrf	__pbssCOMRAM& (0+255),c
   144                           
   145                           ; Initialize objects allocated to BANK0 (4 bytes)
   146                           ; load TBLPTR registers with __pidataBANK0
   147  0021E8  0EDE               	movlw	low __pidataBANK0
   148  0021EA  6EF6               	movwf	tblptrl,c
   149  0021EC  0E22               	movlw	high __pidataBANK0
   150  0021EE  6EF7               	movwf	tblptrh,c
   151  0021F0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   152  0021F2  6EF8               	movwf	tblptru,c
   153  0021F4  EE00  F088         	lfsr	0,__pdataBANK0
   154  0021F8  EE10 F004          	lfsr	1,4
   155  0021FC                     copy_data0:
   156  0021FC  0009               	tblrd		*+
   157  0021FE  CFF5 FFEE          	movff	tablat,postinc0
   158  002202  50E5               	movf	postdec1,w,c
   159  002204  50E1               	movf	fsr1l,w,c
   160  002206  E1FA               	bnz	copy_data0
   161  002208                     end_of_initialization:
   162                           	opt stack 0
   163  002208                     __end_of__initialization:
   164                           	opt stack 0
   165  002208  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   166  00220A  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   167  00220C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   168  00220E  6EF8               	movwf	tblptru,c
   169  002210  0100               	movlb	0
   170  002212  EF0D  F008         	goto	_main	;jump to C main() function
   171                           tblptru	equ	0xFF8
   172                           tblptrh	equ	0xFF7
   173                           tblptrl	equ	0xFF6
   174                           tablat	equ	0xFF5
   175                           postinc0	equ	0xFEE
   176                           wreg	equ	0xFE8
   177                           postdec1	equ	0xFE5
   178                           fsr1l	equ	0xFE1
   179                           
   180                           	psect	bssCOMRAM
   181  00004C                     __pbssCOMRAM:
   182                           	opt stack 0
   183  00004C                     _rightWheelMeasuredSpeed:
   184                           	opt stack 0
   185  00004C                     	ds	2
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           postdec1	equ	0xFE5
   193                           fsr1l	equ	0xFE1
   194                           
   195                           	psect	bssBANK0
   196  00007C                     __pbssBANK0:
   197                           	opt stack 0
   198  00007C                     _elapsedMillis:
   199                           	opt stack 0
   200  00007C                     	ds	4
   201  000080                     _leftWheelCount:
   202                           	opt stack 0
   203  000080                     	ds	4
   204  000084                     _rightWheelCount:
   205                           	opt stack 0
   206  000084                     	ds	4
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	dataBANK0
   217  000088                     __pdataBANK0:
   218                           	opt stack 0
   219  000088                     _leftWheelCommandedPW:
   220                           	opt stack 0
   221  000088                     	ds	2
   222  00008A                     _rightWheelCommandedPW:
   223                           	opt stack 0
   224  00008A                     	ds	2
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           tblptrl	equ	0xFF6
   228                           tablat	equ	0xFF5
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           postdec1	equ	0xFE5
   232                           fsr1l	equ	0xFE1
   233                           
   234                           	psect	cstackBANK0
   235  000060                     __pcstackBANK0:
   236                           	opt stack 0
   237  000060                     wheelVelocity@speed:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x0
   241  000060                     	ds	2
   242  000062                     wheelVelocity@speedCompensation:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x2
   246  000062                     	ds	2
   247  000064                     wheelVelocity@temp:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x4
   251  000064                     	ds	2
   252  000066                     wheelVelocity@temp_836:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x6
   256  000066                     	ds	2
   257  000068                     wheelVelocity@wheel:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x8
   261  000068                     	ds	1
   262  000069                     ??_main:
   263                           
   264                           ; 1 bytes @ 0x9
   265  000069                     	ds	4
   266  00006D                     main@controlLastMillis:
   267                           	opt stack 0
   268                           
   269                           ; 4 bytes @ 0xD
   270  00006D                     	ds	4
   271  000071                     main@lcdLastMillis:
   272                           	opt stack 0
   273                           
   274                           ; 4 bytes @ 0x11
   275  000071                     	ds	4
   276  000075                     main@event:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0x15
   280  000075                     	ds	1
   281  000076                     main@rightWheelSpeed:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x16
   285  000076                     	ds	2
   286  000078                     main@leftWheelSpeed:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x18
   290  000078                     	ds	2
   291  00007A                     main@speedCompensation:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x1A
   295  00007A                     	ds	2
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	cstackCOMRAM
   306  000001                     __pcstackCOMRAM:
   307                           	opt stack 0
   308  000001                     ??_ISR:
   309  000001                     
   310                           ; 1 bytes @ 0x0
   311  000001                     	ds	16
   312  000011                     ??_isdigit:
   313  000011                     ?___wmul:
   314                           	opt stack 0
   315  000011                     ?___lwdiv:
   316                           	opt stack 0
   317  000011                     ?___ftpack:
   318                           	opt stack 0
   319  000011                     LCDcmd@command:
   320                           	opt stack 0
   321  000011                     limitWheelSpeeds@leftWheelSpeed:
   322                           	opt stack 0
   323  000011                     ___wmul@multiplier:
   324                           	opt stack 0
   325  000011                     ___lwdiv@dividend:
   326                           	opt stack 0
   327  000011                     ___ftpack@arg:
   328                           	opt stack 0
   329                           
   330                           ; 3 bytes @ 0x10
   331  000011                     	ds	1
   332  000012                     ??_LCDinit:
   333  000012                     LCDwrite@input:
   334                           	opt stack 0
   335  000012                     _isdigit$1408:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x11
   339  000012                     	ds	1
   340  000013                     putch@data:
   341                           	opt stack 0
   342  000013                     isdigit@c:
   343                           	opt stack 0
   344  000013                     limitWheelSpeeds@rightWheelSpeed:
   345                           	opt stack 0
   346  000013                     ___wmul@multiplicand:
   347                           	opt stack 0
   348  000013                     ___lwdiv@divisor:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x12
   352  000013                     	ds	1
   353  000014                     ___ftpack@exp:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x13
   357  000014                     	ds	1
   358  000015                     ___ftpack@sign:
   359                           	opt stack 0
   360  000015                     ___wmul@product:
   361                           	opt stack 0
   362  000015                     ___lwdiv@quotient:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x14
   366  000015                     	ds	1
   367  000016                     ??___ftpack:
   368                           
   369                           ; 1 bytes @ 0x15
   370  000016                     	ds	1
   371  000017                     ___lwdiv@counter:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x16
   375  000017                     	ds	1
   376  000018                     ?___lwmod:
   377                           	opt stack 0
   378  000018                     ___lwmod@dividend:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x17
   382  000018                     	ds	1
   383  000019                     ?___awtoft:
   384                           	opt stack 0
   385  000019                     ?___lltoft:
   386                           	opt stack 0
   387  000019                     ___awtoft@c:
   388                           	opt stack 0
   389  000019                     ___lltoft@c:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x18
   393  000019                     	ds	1
   394  00001A                     ___lwmod@divisor:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x19
   398  00001A                     	ds	2
   399  00001C                     ___awtoft@sign:
   400                           	opt stack 0
   401  00001C                     ___lwmod@counter:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x1B
   405  00001C                     	ds	1
   406  00001D                     ??___lltoft:
   407  00001D                     ?_printf:
   408                           	opt stack 0
   409  00001D                     printf@f:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x1C
   413  00001D                     	ds	4
   414  000021                     ??_printf:
   415  000021                     ___lltoft@exp:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x20
   419  000021                     	ds	1
   420  000022                     ?___ftmul:
   421                           	opt stack 0
   422  000022                     ___ftmul@f1:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x21
   426  000022                     	ds	3
   427  000025                     printf@ap:
   428                           	opt stack 0
   429  000025                     ___ftmul@f2:
   430                           	opt stack 0
   431                           
   432                           ; 3 bytes @ 0x24
   433  000025                     	ds	2
   434  000027                     printf@prec:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x26
   438  000027                     	ds	1
   439  000028                     ??___ftmul:
   440  000028                     printf@flag:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x27
   444  000028                     	ds	1
   445  000029                     printf@val:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x28
   449  000029                     	ds	2
   450  00002B                     ___ftmul@exp:
   451                           	opt stack 0
   452  00002B                     printf@width:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x2A
   456  00002B                     	ds	1
   457  00002C                     ___ftmul@f3_as_product:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0x2B
   461  00002C                     	ds	1
   462  00002D                     printf@c:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x2C
   466  00002D                     	ds	2
   467  00002F                     ___ftmul@cntr:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x2E
   471  00002F                     	ds	1
   472  000030                     ___ftmul@sign:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x2F
   476  000030                     	ds	1
   477  000031                     ?___ftadd:
   478                           	opt stack 0
   479  000031                     ___ftadd@f1:
   480                           	opt stack 0
   481  000031                     ___ftge@ff1:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x30
   485  000031                     	ds	3
   486  000034                     ___ftadd@f2:
   487                           	opt stack 0
   488  000034                     ___ftge@ff2:
   489                           	opt stack 0
   490                           
   491                           ; 3 bytes @ 0x33
   492  000034                     	ds	3
   493  000037                     ??___ftadd:
   494  000037                     ??___ftge:
   495                           
   496                           ; 1 bytes @ 0x36
   497  000037                     	ds	3
   498  00003A                     ___ftadd@sign:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x39
   502  00003A                     	ds	1
   503  00003B                     ___ftadd@exp2:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x3A
   507  00003B                     	ds	1
   508  00003C                     ___ftadd@exp1:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x3B
   512  00003C                     	ds	1
   513  00003D                     ?___fttol:
   514                           	opt stack 0
   515  00003D                     ___fttol@f1:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x3C
   519  00003D                     	ds	4
   520  000041                     ??___fttol:
   521                           
   522                           ; 1 bytes @ 0x40
   523  000041                     	ds	5
   524  000046                     ___fttol@sign1:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x45
   528  000046                     	ds	1
   529  000047                     ___fttol@lval:
   530                           	opt stack 0
   531                           
   532                           ; 4 bytes @ 0x46
   533  000047                     	ds	4
   534  00004B                     ___fttol@exp1:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x4A
   538  00004B                     	ds	1
   539  00004C                     tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           ; 1 bytes @ 0x4B
   549 ;;
   550 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   551 ;;
   552 ;; *************** function _main *****************
   553 ;; Defined at:
   554 ;;		line 102 in file "main.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;  lcdLastMilli    4   17[BANK0 ] unsigned long 
   559 ;;  controlLastM    4   13[BANK0 ] unsigned long 
   560 ;;  speedCompens    2   26[BANK0 ] int 
   561 ;;  leftWheelSpe    2   24[BANK0 ] int 
   562 ;;  rightWheelSp    2   22[BANK0 ] int 
   563 ;;  event           1   21[BANK0 ] unsigned char 
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      void 
   566 ;; Registers used:
   567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   574 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   576 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;Total ram usage:       19 bytes
   578 ;; Hardware stack levels required when called:    5
   579 ;; This function calls:
   580 ;;		_LCDgotoLineTwo
   581 ;;		_LCDinit
   582 ;;		___ftge
   583 ;;		___ftmul
   584 ;;		___lltoft
   585 ;;		_limitWheelSpeeds
   586 ;;		_printf
   587 ;;		_wheelVelocity
   588 ;; This function is called by:
   589 ;;		Startup code after reset
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text0
   594  00101A                     __ptext0:
   595                           	opt stack 0
   596  00101A                     _main:
   597                           	opt stack 26
   598                           
   599                           ;main.c: 104: OSCCONbits.IRCF = 0b100;
   600                           
   601                           ;incstack = 0
   602  00101A  50D3               	movf	4051,w,c	;volatile
   603  00101C  0B8F               	andlw	-113
   604  00101E  0940               	iorlw	64
   605  001020  6ED3               	movwf	4051,c	;volatile
   606                           
   607                           ;main.c: 106: (INTCONbits.GIE = 0);
   608  001022  9EF2               	bcf	intcon,7,c	;volatile
   609                           
   610                           ;main.c: 113: T1CON = 0;
   611  001024  0E00               	movlw	0
   612  001026  6ECD               	movwf	4045,c	;volatile
   613                           
   614                           ;main.c: 114: T1CONbits.TMR1CS = 0b00;
   615  001028  0E3F               	movlw	-193
   616  00102A  16CD               	andwf	4045,f,c	;volatile
   617                           
   618                           ;main.c: 115: T5CON = 0;
   619  00102C  0E00               	movlw	0
   620  00102E  010F               	movlb	15	; () banked
   621  001030  6F4E               	movwf	78,b	;volatile
   622                           
   623                           ;main.c: 116: T5CONbits.TMR5CS = 0b00;
   624  001032  0E3F               	movlw	-193
   625  001034  010F               	movlb	15	; () banked
   626  001036  174E               	andwf	78,f,b	;volatile
   627                           
   628                           ; BSR set to: 15
   629                           ;main.c: 117: T1CONbits.RD16 = 1;
   630  001038  82CD               	bsf	4045,1,c	;volatile
   631                           
   632                           ;main.c: 123: CCP3CON = 0;
   633  00103A  0E00               	movlw	0
   634  00103C  010F               	movlb	15	; () banked
   635  00103E  6F5D               	movwf	93,b	;volatile
   636                           
   637                           ;main.c: 124: CCP2CON = 0;
   638  001040  0E00               	movlw	0
   639  001042  6E66               	movwf	3942,c	;volatile
   640                           
   641                           ;main.c: 125: CCP3CONbits.CCP3M = 0b1010;
   642  001044  010F               	movlb	15	; () banked
   643  001046  515D               	movf	93,w,b	;volatile
   644  001048  0BF0               	andlw	-16
   645  00104A  090A               	iorlw	10
   646  00104C  6F5D               	movwf	93,b	;volatile
   647                           
   648                           ;main.c: 126: CCP2CONbits.CCP2M = 0b1010;
   649  00104E  5066               	movf	3942,w,c	;volatile
   650  001050  0BF0               	andlw	-16
   651  001052  090A               	iorlw	10
   652  001054  6E66               	movwf	3942,c	;volatile
   653                           
   654                           ; BSR set to: 15
   655                           ;main.c: 127: CCP3IE = 1;
   656  001056  807A               	bsf	3962,0,c	;volatile
   657                           
   658                           ; BSR set to: 15
   659                           ;main.c: 128: CCP2IE = 1;
   660  001058  80A0               	bsf	4000,0,c	;volatile
   661                           
   662                           ;main.c: 133: CCPTMRS0bits.C3TSEL = 0;
   663  00105A  0E3F               	movlw	-193
   664  00105C  010F               	movlb	15	; () banked
   665  00105E  1749               	andwf	73,f,b	;volatile
   666                           
   667                           ;main.c: 134: CCPTMRS0bits.C2TSEL = 2;
   668  001060  010F               	movlb	15	; () banked
   669  001062  5149               	movf	73,w,b	;volatile
   670  001064  0BE7               	andlw	-25
   671  001066  0910               	iorlw	16
   672  001068  6F49               	movwf	73,b	;volatile
   673                           
   674                           ;main.c: 136: CCPR3 = 325;
   675  00106A  0E01               	movlw	1
   676  00106C  010F               	movlb	15	; () banked
   677  00106E  6F5F               	movwf	95,b	;volatile
   678  001070  0E45               	movlw	69
   679  001072  6F5E               	movwf	94,b	;volatile
   680                           
   681                           ;main.c: 137: CCPR2 = 325;
   682  001074  0E01               	movlw	1
   683  001076  6E68               	movwf	3944,c	;volatile
   684  001078  0E45               	movlw	69
   685  00107A  6E67               	movwf	3943,c	;volatile
   686                           
   687                           ; BSR set to: 15
   688                           ;main.c: 141: PIE1bits.TMR2IE = 1;
   689  00107C  829D               	bsf	3997,1,c	;volatile
   690                           
   691                           ;main.c: 142: T2CON = 0;
   692  00107E  0E00               	movlw	0
   693  001080  6EBA               	movwf	4026,c	;volatile
   694                           
   695                           ;main.c: 143: T2CONbits.T2CKPS = 0b11;
   696  001082  0E03               	movlw	3
   697  001084  12BA               	iorwf	4026,f,c	;volatile
   698                           
   699                           ; BSR set to: 15
   700                           ;main.c: 144: T2CONbits.TMR2ON = 1;
   701  001086  84BA               	bsf	4026,2,c	;volatile
   702                           
   703                           ; BSR set to: 15
   704                           ;main.c: 150: INTCONbits.GIE = 1;
   705  001088  8EF2               	bsf	intcon,7,c	;volatile
   706                           
   707                           ; BSR set to: 15
   708                           ;main.c: 151: INTCONbits.PEIE = 1;
   709  00108A  8CF2               	bsf	intcon,6,c	;volatile
   710                           
   711                           ; BSR set to: 15
   712                           ;main.c: 153: TMR1ON = 1;
   713  00108C  80CD               	bsf	4045,0,c	;volatile
   714                           
   715                           ; BSR set to: 15
   716                           ;main.c: 154: TMR5ON = 1;
   717  00108E  010F               	movlb	15	; () banked
   718  001090  814E               	bsf	78,0,b	;volatile
   719                           
   720                           ; BSR set to: 15
   721                           ;main.c: 156: (INTCONbits.GIE = 1);
   722  001092  8EF2               	bsf	intcon,7,c	;volatile
   723                           
   724                           ; BSR set to: 15
   725                           ;main.c: 158: TRISCbits.TRISC0 = 0;
   726  001094  9094               	bcf	3988,0,c	;volatile
   727                           
   728                           ; BSR set to: 15
   729                           ;main.c: 159: TRISCbits.TRISC1 = 0;
   730  001096  9294               	bcf	3988,1,c	;volatile
   731                           
   732                           ; BSR set to: 15
   733                           ;main.c: 161: TRISBbits.TRISB4 = 1;
   734  001098  8893               	bsf	3987,4,c	;volatile
   735                           
   736                           ; BSR set to: 15
   737                           ;main.c: 162: ANSELBbits.ANSB4 = 0;
   738  00109A  010F               	movlb	15	; () banked
   739  00109C  9939               	bcf	57,4,b	;volatile
   740                           
   741                           ;main.c: 165: unsigned long controlLastMillis = 0;
   742  00109E  0E00               	movlw	0
   743  0010A0  0100               	movlb	0	; () banked
   744  0010A2  6F6D               	movwf	main@controlLastMillis& (0+255),b
   745  0010A4  0E00               	movlw	0
   746  0010A6  6F6E               	movwf	(main@controlLastMillis+1)& (0+255),b
   747  0010A8  0E00               	movlw	0
   748  0010AA  6F6F               	movwf	(main@controlLastMillis+2)& (0+255),b
   749  0010AC  0E00               	movlw	0
   750  0010AE  6F70               	movwf	(main@controlLastMillis+3)& (0+255),b
   751                           
   752                           ;main.c: 166: unsigned long lcdLastMillis = 0;
   753  0010B0  0E00               	movlw	0
   754  0010B2  0100               	movlb	0	; () banked
   755  0010B4  6F71               	movwf	main@lcdLastMillis& (0+255),b
   756  0010B6  0E00               	movlw	0
   757  0010B8  6F72               	movwf	(main@lcdLastMillis+1)& (0+255),b
   758  0010BA  0E00               	movlw	0
   759  0010BC  6F73               	movwf	(main@lcdLastMillis+2)& (0+255),b
   760  0010BE  0E00               	movlw	0
   761  0010C0  6F74               	movwf	(main@lcdLastMillis+3)& (0+255),b
   762                           
   763                           ;main.c: 168: unsigned char event = 0;
   764  0010C2  0E00               	movlw	0
   765  0010C4  0100               	movlb	0	; () banked
   766  0010C6  6F75               	movwf	main@event& (0+255),b
   767                           
   768                           ;main.c: 170: int speedCompensation = 0;
   769  0010C8  0E00               	movlw	0
   770  0010CA  0100               	movlb	0	; () banked
   771  0010CC  6F7B               	movwf	(main@speedCompensation+1)& (0+255),b
   772  0010CE  0E00               	movlw	0
   773  0010D0  6F7A               	movwf	main@speedCompensation& (0+255),b
   774                           
   775                           ;main.c: 171: int rightWheelSpeed = 0;
   776  0010D2  0E00               	movlw	0
   777  0010D4  0100               	movlb	0	; () banked
   778  0010D6  6F77               	movwf	(main@rightWheelSpeed+1)& (0+255),b
   779  0010D8  0E00               	movlw	0
   780  0010DA  6F76               	movwf	main@rightWheelSpeed& (0+255),b
   781                           
   782                           ;main.c: 172: int leftWheelSpeed = 0;
   783  0010DC  0E00               	movlw	0
   784  0010DE  0100               	movlb	0	; () banked
   785  0010E0  6F79               	movwf	(main@leftWheelSpeed+1)& (0+255),b
   786  0010E2  0E00               	movlw	0
   787  0010E4  6F78               	movwf	main@leftWheelSpeed& (0+255),b
   788                           
   789                           ; BSR set to: 0
   790                           ;main.c: 174: LCDinit();
   791  0010E6  EC1B  F00F         	call	_LCDinit	;wreg free
   792                           
   793                           ;main.c: 175: printf("Event: %3d", event);
   794  0010EA  0E0B               	movlw	low STR_1
   795  0010EC  6E1D               	movwf	printf@f,c
   796  0010EE  0E10               	movlw	high STR_1
   797  0010F0  6E1E               	movwf	printf@f+1,c
   798  0010F2  C075  F01F         	movff	main@event,?_printf+2
   799  0010F6  6A20               	clrf	?_printf+3,c
   800  0010F8  ECD3  F00B         	call	_printf	;wreg free
   801                           
   802                           ;main.c: 176: LCDgotoLineTwo();
   803  0010FC  EC5C  F011         	call	_LCDgotoLineTwo	;wreg free
   804                           
   805                           ;main.c: 177: printf("%d", TMR3);
   806  001100  0E16               	movlw	low STR_2
   807  001102  6E1D               	movwf	printf@f,c
   808  001104  0E10               	movlw	high STR_2
   809  001106  6E1E               	movwf	printf@f+1,c
   810  001108  CFB2 F01F          	movff	4018,?_printf+2	;volatile
   811  00110C  CFB3 F020          	movff	4019,?_printf+3	;volatile
   812  001110  ECD3  F00B         	call	_printf	;wreg free
   813  001114                     l2130:
   814                           
   815                           ;main.c: 182: {
   816                           ;main.c: 185: if(lcdLastMillis + 50 < elapsedMillis)
   817  001114  0E32               	movlw	50
   818  001116  0100               	movlb	0	; () banked
   819  001118  2571               	addwf	main@lcdLastMillis& (0+255),w,b
   820  00111A  0100               	movlb	0	; () banked
   821  00111C  6F69               	movwf	??_main& (0+255),b
   822  00111E  0E00               	movlw	0
   823  001120  0100               	movlb	0	; () banked
   824  001122  2172               	addwfc	(main@lcdLastMillis+1)& (0+255),w,b
   825  001124  0100               	movlb	0	; () banked
   826  001126  6F6A               	movwf	(??_main+1)& (0+255),b
   827  001128  0E00               	movlw	0
   828  00112A  0100               	movlb	0	; () banked
   829  00112C  2173               	addwfc	(main@lcdLastMillis+2)& (0+255),w,b
   830  00112E  0100               	movlb	0	; () banked
   831  001130  6F6B               	movwf	(??_main+2)& (0+255),b
   832  001132  0E00               	movlw	0
   833  001134  0100               	movlb	0	; () banked
   834  001136  2174               	addwfc	(main@lcdLastMillis+3)& (0+255),w,b
   835  001138  0100               	movlb	0	; () banked
   836  00113A  6F6C               	movwf	(??_main+3)& (0+255),b
   837  00113C  0100               	movlb	0	; () banked
   838  00113E  517C               	movf	_elapsedMillis& (0+255),w,b
   839  001140  0100               	movlb	0	; () banked
   840  001142  5D69               	subwf	??_main& (0+255),w,b
   841  001144  0100               	movlb	0	; () banked
   842  001146  517D               	movf	(_elapsedMillis+1)& (0+255),w,b
   843  001148  0100               	movlb	0	; () banked
   844  00114A  596A               	subwfb	(??_main+1)& (0+255),w,b
   845  00114C  0100               	movlb	0	; () banked
   846  00114E  517E               	movf	(_elapsedMillis+2)& (0+255),w,b
   847  001150  0100               	movlb	0	; () banked
   848  001152  596B               	subwfb	(??_main+2)& (0+255),w,b
   849  001154  0100               	movlb	0	; () banked
   850  001156  517F               	movf	(_elapsedMillis+3)& (0+255),w,b
   851  001158  0100               	movlb	0	; () banked
   852  00115A  596C               	subwfb	(??_main+3)& (0+255),w,b
   853  00115C  B0D8               	btfsc	status,0,c
   854  00115E  D00F               	goto	l2136
   855                           
   856                           ; BSR set to: 0
   857                           ;main.c: 186: {
   858                           ;main.c: 189: leftWheelCommandedPW--;
   859  001160  0100               	movlb	0	; () banked
   860  001162  0788               	decf	_leftWheelCommandedPW& (0+255),f,b
   861  001164  A0D8               	btfss	status,0,c
   862  001166  0789               	decf	(_leftWheelCommandedPW+1)& (0+255),f,b
   863                           
   864                           ;main.c: 190: rightWheelCommandedPW++;
   865  001168  0100               	movlb	0	; () banked
   866  00116A  4B8A               	infsnz	_rightWheelCommandedPW& (0+255),f,b
   867  00116C  2B8B               	incf	(_rightWheelCommandedPW+1)& (0+255),f,b
   868                           
   869                           ; BSR set to: 0
   870                           ;main.c: 191: lcdLastMillis = elapsedMillis;
   871  00116E  C07C  F071         	movff	_elapsedMillis,main@lcdLastMillis
   872  001172  C07D  F072         	movff	_elapsedMillis+1,main@lcdLastMillis+1
   873  001176  C07E  F073         	movff	_elapsedMillis+2,main@lcdLastMillis+2
   874  00117A  C07F  F074         	movff	_elapsedMillis+3,main@lcdLastMillis+3
   875  00117E                     l2136:
   876                           
   877                           ; BSR set to: 0
   878                           ;main.c: 192: }
   879                           ;main.c: 197: if(event == 1)
   880  00117E  0100               	movlb	0	; () banked
   881  001180  0575               	decf	main@event& (0+255),w,b
   882  001182  A4D8               	btfss	status,2,c
   883  001184  D7C7               	goto	l2130
   884                           
   885                           ; BSR set to: 0
   886                           ;main.c: 198: {
   887                           ;main.c: 199: controlLastMillis = 0;
   888  001186  0E00               	movlw	0
   889  001188  0100               	movlb	0	; () banked
   890  00118A  6F6D               	movwf	main@controlLastMillis& (0+255),b
   891  00118C  0E00               	movlw	0
   892  00118E  6F6E               	movwf	(main@controlLastMillis+1)& (0+255),b
   893  001190  0E00               	movlw	0
   894  001192  6F6F               	movwf	(main@controlLastMillis+2)& (0+255),b
   895  001194  0E00               	movlw	0
   896  001196  6F70               	movwf	(main@controlLastMillis+3)& (0+255),b
   897                           
   898                           ;main.c: 200: switch(event){
   899  001198  D2FA               	goto	l2232
   900  00119A                     l2140:
   901                           
   902                           ; BSR set to: 0
   903                           ;main.c: 202: if(rightWheelSpeed < 10)
   904  00119A  0100               	movlb	0	; () banked
   905  00119C  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
   906  00119E  D008               	goto	l2142
   907  0011A0  0100               	movlb	0	; () banked
   908  0011A2  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
   909  0011A4  E121               	bnz	l2144
   910  0011A6  0E0A               	movlw	10
   911  0011A8  0100               	movlb	0	; () banked
   912  0011AA  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
   913  0011AC  B0D8               	btfsc	status,0,c
   914  0011AE  D01C               	goto	l2144
   915  0011B0                     l2142:
   916                           
   917                           ; BSR set to: 0
   918                           ;main.c: 203: {
   919                           ;main.c: 204: wheelVelocity('r', ++rightWheelSpeed, speedCompensation);
   920  0011B0  0100               	movlb	0	; () banked
   921  0011B2  4B76               	infsnz	main@rightWheelSpeed& (0+255),f,b
   922  0011B4  2B77               	incf	(main@rightWheelSpeed+1)& (0+255),f,b
   923  0011B6  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
   924  0011BA  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
   925  0011BE  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   926  0011C2  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   927  0011C6  0E72               	movlw	114
   928  0011C8  ECA9  F00D         	call	_wheelVelocity
   929                           
   930                           ;main.c: 205: wheelVelocity('l', ++leftWheelSpeed, speedCompensation);
   931  0011CC  0100               	movlb	0	; () banked
   932  0011CE  4B78               	infsnz	main@leftWheelSpeed& (0+255),f,b
   933  0011D0  2B79               	incf	(main@leftWheelSpeed+1)& (0+255),f,b
   934  0011D2  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
   935  0011D6  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
   936  0011DA  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   937  0011DE  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   938  0011E2  0E6C               	movlw	108
   939  0011E4  ECA9  F00D         	call	_wheelVelocity
   940  0011E8                     l2144:
   941                           
   942                           ;main.c: 206: }
   943                           ;main.c: 207: if(rightWheelSpeed > 55)
   944  0011E8  0100               	movlb	0	; () banked
   945  0011EA  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
   946  0011EC  D026               	goto	l2148
   947  0011EE  0100               	movlb	0	; () banked
   948  0011F0  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
   949  0011F2  E105               	bnz	u1910
   950  0011F4  0E38               	movlw	56
   951  0011F6  0100               	movlb	0	; () banked
   952  0011F8  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
   953  0011FA  A0D8               	btfss	status,0,c
   954  0011FC  D01E               	goto	l2148
   955  0011FE                     u1910:
   956                           
   957                           ; BSR set to: 0
   958                           ;main.c: 208: {
   959                           ;main.c: 209: wheelVelocity('r', --rightWheelSpeed, speedCompensation);
   960  0011FE  0100               	movlb	0	; () banked
   961  001200  0776               	decf	main@rightWheelSpeed& (0+255),f,b
   962  001202  A0D8               	btfss	status,0,c
   963  001204  0777               	decf	(main@rightWheelSpeed+1)& (0+255),f,b
   964  001206  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
   965  00120A  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
   966  00120E  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   967  001212  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   968  001216  0E72               	movlw	114
   969  001218  ECA9  F00D         	call	_wheelVelocity
   970                           
   971                           ;main.c: 210: wheelVelocity('l', --leftWheelSpeed, speedCompensation);
   972  00121C  0100               	movlb	0	; () banked
   973  00121E  0778               	decf	main@leftWheelSpeed& (0+255),f,b
   974  001220  A0D8               	btfss	status,0,c
   975  001222  0779               	decf	(main@leftWheelSpeed+1)& (0+255),f,b
   976  001224  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
   977  001228  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
   978  00122C  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
   979  001230  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
   980  001234  0E6C               	movlw	108
   981  001236  ECA9  F00D         	call	_wheelVelocity
   982  00123A                     l2148:
   983                           
   984                           ;main.c: 211: }
   985                           ;main.c: 212: if(leftWheelCount > rightWheelCount + 2)
   986  00123A  0E02               	movlw	2
   987  00123C  0100               	movlb	0	; () banked
   988  00123E  2584               	addwf	_rightWheelCount& (0+255),w,b
   989  001240  0100               	movlb	0	; () banked
   990  001242  6F69               	movwf	??_main& (0+255),b
   991  001244  0E00               	movlw	0
   992  001246  0100               	movlb	0	; () banked
   993  001248  2185               	addwfc	(_rightWheelCount+1)& (0+255),w,b
   994  00124A  0100               	movlb	0	; () banked
   995  00124C  6F6A               	movwf	(??_main+1)& (0+255),b
   996  00124E  0E00               	movlw	0
   997  001250  0100               	movlb	0	; () banked
   998  001252  2186               	addwfc	(_rightWheelCount+2)& (0+255),w,b
   999  001254  0100               	movlb	0	; () banked
  1000  001256  6F6B               	movwf	(??_main+2)& (0+255),b
  1001  001258  0E00               	movlw	0
  1002  00125A  0100               	movlb	0	; () banked
  1003  00125C  2187               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  1004  00125E  0100               	movlb	0	; () banked
  1005  001260  6F6C               	movwf	(??_main+3)& (0+255),b
  1006  001262  0100               	movlb	0	; () banked
  1007  001264  5180               	movf	_leftWheelCount& (0+255),w,b
  1008  001266  0100               	movlb	0	; () banked
  1009  001268  5D69               	subwf	??_main& (0+255),w,b
  1010  00126A  0100               	movlb	0	; () banked
  1011  00126C  5181               	movf	(_leftWheelCount+1)& (0+255),w,b
  1012  00126E  0100               	movlb	0	; () banked
  1013  001270  596A               	subwfb	(??_main+1)& (0+255),w,b
  1014  001272  0100               	movlb	0	; () banked
  1015  001274  5182               	movf	(_leftWheelCount+2)& (0+255),w,b
  1016  001276  0100               	movlb	0	; () banked
  1017  001278  596B               	subwfb	(??_main+2)& (0+255),w,b
  1018  00127A  0100               	movlb	0	; () banked
  1019  00127C  5183               	movf	(_leftWheelCount+3)& (0+255),w,b
  1020  00127E  0100               	movlb	0	; () banked
  1021  001280  596C               	subwfb	(??_main+3)& (0+255),w,b
  1022  001282  B0D8               	btfsc	status,0,c
  1023  001284  D00F               	goto	l2154
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;main.c: 214: {
  1027                           ;main.c: 215: speedCompensation--;
  1028  001286  0100               	movlb	0	; () banked
  1029  001288  077A               	decf	main@speedCompensation& (0+255),f,b
  1030  00128A  A0D8               	btfss	status,0,c
  1031  00128C  077B               	decf	(main@speedCompensation+1)& (0+255),f,b
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;main.c: 216: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1035  00128E  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1036  001292  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1037  001296  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1038  00129A  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1039  00129E  0E6C               	movlw	108
  1040  0012A0  ECA9  F00D         	call	_wheelVelocity
  1041  0012A4                     l2154:
  1042                           
  1043                           ;main.c: 217: }
  1044                           ;main.c: 218: if(rightWheelCount > leftWheelCount + 2)
  1045  0012A4  0E02               	movlw	2
  1046  0012A6  0100               	movlb	0	; () banked
  1047  0012A8  2580               	addwf	_leftWheelCount& (0+255),w,b
  1048  0012AA  0100               	movlb	0	; () banked
  1049  0012AC  6F69               	movwf	??_main& (0+255),b
  1050  0012AE  0E00               	movlw	0
  1051  0012B0  0100               	movlb	0	; () banked
  1052  0012B2  2181               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  1053  0012B4  0100               	movlb	0	; () banked
  1054  0012B6  6F6A               	movwf	(??_main+1)& (0+255),b
  1055  0012B8  0E00               	movlw	0
  1056  0012BA  0100               	movlb	0	; () banked
  1057  0012BC  2182               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  1058  0012BE  0100               	movlb	0	; () banked
  1059  0012C0  6F6B               	movwf	(??_main+2)& (0+255),b
  1060  0012C2  0E00               	movlw	0
  1061  0012C4  0100               	movlb	0	; () banked
  1062  0012C6  2183               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  1063  0012C8  0100               	movlb	0	; () banked
  1064  0012CA  6F6C               	movwf	(??_main+3)& (0+255),b
  1065  0012CC  0100               	movlb	0	; () banked
  1066  0012CE  5184               	movf	_rightWheelCount& (0+255),w,b
  1067  0012D0  0100               	movlb	0	; () banked
  1068  0012D2  5D69               	subwf	??_main& (0+255),w,b
  1069  0012D4  0100               	movlb	0	; () banked
  1070  0012D6  5185               	movf	(_rightWheelCount+1)& (0+255),w,b
  1071  0012D8  0100               	movlb	0	; () banked
  1072  0012DA  596A               	subwfb	(??_main+1)& (0+255),w,b
  1073  0012DC  0100               	movlb	0	; () banked
  1074  0012DE  5186               	movf	(_rightWheelCount+2)& (0+255),w,b
  1075  0012E0  0100               	movlb	0	; () banked
  1076  0012E2  596B               	subwfb	(??_main+2)& (0+255),w,b
  1077  0012E4  0100               	movlb	0	; () banked
  1078  0012E6  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1079  0012E8  0100               	movlb	0	; () banked
  1080  0012EA  596C               	subwfb	(??_main+3)& (0+255),w,b
  1081  0012EC  B0D8               	btfsc	status,0,c
  1082  0012EE  D00E               	goto	l2160
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;main.c: 220: {
  1086                           ;main.c: 221: speedCompensation++;
  1087  0012F0  0100               	movlb	0	; () banked
  1088  0012F2  4B7A               	infsnz	main@speedCompensation& (0+255),f,b
  1089  0012F4  2B7B               	incf	(main@speedCompensation+1)& (0+255),f,b
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 222: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1093  0012F6  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1094  0012FA  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1095  0012FE  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1096  001302  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1097  001306  0E6C               	movlw	108
  1098  001308  ECA9  F00D         	call	_wheelVelocity
  1099  00130C                     l2160:
  1100                           
  1101                           ;main.c: 223: }
  1102                           ;main.c: 224: if(rightWheelCount >= 113)
  1103  00130C  0100               	movlb	0	; () banked
  1104  00130E  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1105  001310  0100               	movlb	0	; () banked
  1106  001312  1186               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  1107  001314  0100               	movlb	0	; () banked
  1108  001316  1185               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  1109  001318  E105               	bnz	u1940
  1110  00131A  0E71               	movlw	113
  1111  00131C  0100               	movlb	0	; () banked
  1112  00131E  5D84               	subwf	_rightWheelCount& (0+255),w,b
  1113  001320  A0D8               	btfss	status,0,c
  1114  001322  D02E               	goto	l2170
  1115  001324                     u1940:
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 225: {
  1119                           ;main.c: 226: rightWheelCount = 0;
  1120  001324  0E00               	movlw	0
  1121  001326  0100               	movlb	0	; () banked
  1122  001328  6F84               	movwf	_rightWheelCount& (0+255),b
  1123  00132A  0E00               	movlw	0
  1124  00132C  6F85               	movwf	(_rightWheelCount+1)& (0+255),b
  1125  00132E  0E00               	movlw	0
  1126  001330  6F86               	movwf	(_rightWheelCount+2)& (0+255),b
  1127  001332  0E00               	movlw	0
  1128  001334  6F87               	movwf	(_rightWheelCount+3)& (0+255),b
  1129                           
  1130                           ;main.c: 227: leftWheelCount = 0;
  1131  001336  0E00               	movlw	0
  1132  001338  0100               	movlb	0	; () banked
  1133  00133A  6F80               	movwf	_leftWheelCount& (0+255),b
  1134  00133C  0E00               	movlw	0
  1135  00133E  6F81               	movwf	(_leftWheelCount+1)& (0+255),b
  1136  001340  0E00               	movlw	0
  1137  001342  6F82               	movwf	(_leftWheelCount+2)& (0+255),b
  1138  001344  0E00               	movlw	0
  1139  001346  6F83               	movwf	(_leftWheelCount+3)& (0+255),b
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;main.c: 228: wheelVelocity('r', 0, speedCompensation);
  1143  001348  0E00               	movlw	0
  1144  00134A  0100               	movlb	0	; () banked
  1145  00134C  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1146  00134E  0E00               	movlw	0
  1147  001350  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1148  001352  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1149  001356  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1150  00135A  0E72               	movlw	114
  1151  00135C  ECA9  F00D         	call	_wheelVelocity
  1152                           
  1153                           ;main.c: 229: wheelVelocity('l', 0, speedCompensation);
  1154  001360  0E00               	movlw	0
  1155  001362  0100               	movlb	0	; () banked
  1156  001364  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1157  001366  0E00               	movlw	0
  1158  001368  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1159  00136A  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1160  00136E  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1161  001372  0E6C               	movlw	108
  1162  001374  ECA9  F00D         	call	_wheelVelocity
  1163  001378                     l109:
  1164  001378  B081               	btfsc	3969,0,c	;volatile
  1165  00137A  D7FE               	goto	l109
  1166                           
  1167                           ;main.c: 233: }
  1168                           ;main.c: 234: event++;
  1169  00137C  0100               	movlb	0	; () banked
  1170  00137E  2B75               	incf	main@event& (0+255),f,b
  1171  001380                     l2170:
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;main.c: 235: }
  1175                           ;main.c: 236: limitWheelSpeeds(&leftWheelSpeed, &rightWheelSpeed);
  1176  001380  0E78               	movlw	low main@leftWheelSpeed
  1177  001382  6E11               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  1178  001384  0E00               	movlw	high main@leftWheelSpeed
  1179  001386  6E12               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  1180  001388  0E76               	movlw	low main@rightWheelSpeed
  1181  00138A  6E13               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  1182  00138C  0E00               	movlw	high main@rightWheelSpeed
  1183  00138E  6E14               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  1184  001390  EC7E  F00F         	call	_limitWheelSpeeds	;wreg free
  1185                           
  1186                           ;main.c: 237: break;
  1187  001394  D6BF               	goto	l2130
  1188  001396                     l2172:
  1189                           
  1190                           ;main.c: 241: if(rightWheelSpeed < 10)
  1191  001396  0100               	movlb	0	; () banked
  1192  001398  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
  1193  00139A  D008               	goto	l2174
  1194  00139C  0100               	movlb	0	; () banked
  1195  00139E  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
  1196  0013A0  E122               	bnz	l2176
  1197  0013A2  0E0A               	movlw	10
  1198  0013A4  0100               	movlb	0	; () banked
  1199  0013A6  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
  1200  0013A8  B0D8               	btfsc	status,0,c
  1201  0013AA  D01D               	goto	l2176
  1202  0013AC                     l2174:
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;main.c: 242: {
  1206                           ;main.c: 243: wheelVelocity('r', ++rightWheelSpeed, speedCompensation);
  1207  0013AC  0100               	movlb	0	; () banked
  1208  0013AE  4B76               	infsnz	main@rightWheelSpeed& (0+255),f,b
  1209  0013B0  2B77               	incf	(main@rightWheelSpeed+1)& (0+255),f,b
  1210  0013B2  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
  1211  0013B6  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
  1212  0013BA  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1213  0013BE  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1214  0013C2  0E72               	movlw	114
  1215  0013C4  ECA9  F00D         	call	_wheelVelocity
  1216                           
  1217                           ;main.c: 244: wheelVelocity('l', --leftWheelSpeed, speedCompensation);
  1218  0013C8  0100               	movlb	0	; () banked
  1219  0013CA  0778               	decf	main@leftWheelSpeed& (0+255),f,b
  1220  0013CC  A0D8               	btfss	status,0,c
  1221  0013CE  0779               	decf	(main@leftWheelSpeed+1)& (0+255),f,b
  1222  0013D0  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1223  0013D4  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1224  0013D8  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1225  0013DC  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1226  0013E0  0E6C               	movlw	108
  1227  0013E2  ECA9  F00D         	call	_wheelVelocity
  1228  0013E6                     l2176:
  1229                           
  1230                           ;main.c: 245: }
  1231                           ;main.c: 246: if(rightWheelSpeed > 12)
  1232  0013E6  0100               	movlb	0	; () banked
  1233  0013E8  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
  1234  0013EA  D025               	goto	l2180
  1235  0013EC  0100               	movlb	0	; () banked
  1236  0013EE  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
  1237  0013F0  E105               	bnz	u1970
  1238  0013F2  0E0D               	movlw	13
  1239  0013F4  0100               	movlb	0	; () banked
  1240  0013F6  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
  1241  0013F8  A0D8               	btfss	status,0,c
  1242  0013FA  D01D               	goto	l2180
  1243  0013FC                     u1970:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 247: {
  1247                           ;main.c: 248: wheelVelocity('r', --rightWheelSpeed, speedCompensation);
  1248  0013FC  0100               	movlb	0	; () banked
  1249  0013FE  0776               	decf	main@rightWheelSpeed& (0+255),f,b
  1250  001400  A0D8               	btfss	status,0,c
  1251  001402  0777               	decf	(main@rightWheelSpeed+1)& (0+255),f,b
  1252  001404  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
  1253  001408  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
  1254  00140C  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1255  001410  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1256  001414  0E72               	movlw	114
  1257  001416  ECA9  F00D         	call	_wheelVelocity
  1258                           
  1259                           ;main.c: 249: wheelVelocity('l', ++leftWheelSpeed, speedCompensation);
  1260  00141A  0100               	movlb	0	; () banked
  1261  00141C  4B78               	infsnz	main@leftWheelSpeed& (0+255),f,b
  1262  00141E  2B79               	incf	(main@leftWheelSpeed+1)& (0+255),f,b
  1263  001420  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1264  001424  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1265  001428  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1266  00142C  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1267  001430  0E6C               	movlw	108
  1268  001432  ECA9  F00D         	call	_wheelVelocity
  1269  001436                     l2180:
  1270                           
  1271                           ;main.c: 250: }
  1272                           ;main.c: 251: if(leftWheelCount > (rightWheelCount + 2))
  1273  001436  0E02               	movlw	2
  1274  001438  0100               	movlb	0	; () banked
  1275  00143A  2584               	addwf	_rightWheelCount& (0+255),w,b
  1276  00143C  0100               	movlb	0	; () banked
  1277  00143E  6F69               	movwf	??_main& (0+255),b
  1278  001440  0E00               	movlw	0
  1279  001442  0100               	movlb	0	; () banked
  1280  001444  2185               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  1281  001446  0100               	movlb	0	; () banked
  1282  001448  6F6A               	movwf	(??_main+1)& (0+255),b
  1283  00144A  0E00               	movlw	0
  1284  00144C  0100               	movlb	0	; () banked
  1285  00144E  2186               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  1286  001450  0100               	movlb	0	; () banked
  1287  001452  6F6B               	movwf	(??_main+2)& (0+255),b
  1288  001454  0E00               	movlw	0
  1289  001456  0100               	movlb	0	; () banked
  1290  001458  2187               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  1291  00145A  0100               	movlb	0	; () banked
  1292  00145C  6F6C               	movwf	(??_main+3)& (0+255),b
  1293  00145E  0100               	movlb	0	; () banked
  1294  001460  5180               	movf	_leftWheelCount& (0+255),w,b
  1295  001462  0100               	movlb	0	; () banked
  1296  001464  5D69               	subwf	??_main& (0+255),w,b
  1297  001466  0100               	movlb	0	; () banked
  1298  001468  5181               	movf	(_leftWheelCount+1)& (0+255),w,b
  1299  00146A  0100               	movlb	0	; () banked
  1300  00146C  596A               	subwfb	(??_main+1)& (0+255),w,b
  1301  00146E  0100               	movlb	0	; () banked
  1302  001470  5182               	movf	(_leftWheelCount+2)& (0+255),w,b
  1303  001472  0100               	movlb	0	; () banked
  1304  001474  596B               	subwfb	(??_main+2)& (0+255),w,b
  1305  001476  0100               	movlb	0	; () banked
  1306  001478  5183               	movf	(_leftWheelCount+3)& (0+255),w,b
  1307  00147A  0100               	movlb	0	; () banked
  1308  00147C  596C               	subwfb	(??_main+3)& (0+255),w,b
  1309  00147E  B0D8               	btfsc	status,0,c
  1310  001480  D00E               	goto	l2186
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 253: {
  1314                           ;main.c: 254: speedCompensation++;
  1315  001482  0100               	movlb	0	; () banked
  1316  001484  4B7A               	infsnz	main@speedCompensation& (0+255),f,b
  1317  001486  2B7B               	incf	(main@speedCompensation+1)& (0+255),f,b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;main.c: 255: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1321  001488  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1322  00148C  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1323  001490  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1324  001494  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1325  001498  0E6C               	movlw	108
  1326  00149A  ECA9  F00D         	call	_wheelVelocity
  1327  00149E                     l2186:
  1328                           
  1329                           ;main.c: 256: }
  1330                           ;main.c: 257: if(rightWheelCount > leftWheelCount + 2)
  1331  00149E  0E02               	movlw	2
  1332  0014A0  0100               	movlb	0	; () banked
  1333  0014A2  2580               	addwf	_leftWheelCount& (0+255),w,b
  1334  0014A4  0100               	movlb	0	; () banked
  1335  0014A6  6F69               	movwf	??_main& (0+255),b
  1336  0014A8  0E00               	movlw	0
  1337  0014AA  0100               	movlb	0	; () banked
  1338  0014AC  2181               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  1339  0014AE  0100               	movlb	0	; () banked
  1340  0014B0  6F6A               	movwf	(??_main+1)& (0+255),b
  1341  0014B2  0E00               	movlw	0
  1342  0014B4  0100               	movlb	0	; () banked
  1343  0014B6  2182               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  1344  0014B8  0100               	movlb	0	; () banked
  1345  0014BA  6F6B               	movwf	(??_main+2)& (0+255),b
  1346  0014BC  0E00               	movlw	0
  1347  0014BE  0100               	movlb	0	; () banked
  1348  0014C0  2183               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  1349  0014C2  0100               	movlb	0	; () banked
  1350  0014C4  6F6C               	movwf	(??_main+3)& (0+255),b
  1351  0014C6  0100               	movlb	0	; () banked
  1352  0014C8  5184               	movf	_rightWheelCount& (0+255),w,b
  1353  0014CA  0100               	movlb	0	; () banked
  1354  0014CC  5D69               	subwf	??_main& (0+255),w,b
  1355  0014CE  0100               	movlb	0	; () banked
  1356  0014D0  5185               	movf	(_rightWheelCount+1)& (0+255),w,b
  1357  0014D2  0100               	movlb	0	; () banked
  1358  0014D4  596A               	subwfb	(??_main+1)& (0+255),w,b
  1359  0014D6  0100               	movlb	0	; () banked
  1360  0014D8  5186               	movf	(_rightWheelCount+2)& (0+255),w,b
  1361  0014DA  0100               	movlb	0	; () banked
  1362  0014DC  596B               	subwfb	(??_main+2)& (0+255),w,b
  1363  0014DE  0100               	movlb	0	; () banked
  1364  0014E0  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1365  0014E2  0100               	movlb	0	; () banked
  1366  0014E4  596C               	subwfb	(??_main+3)& (0+255),w,b
  1367  0014E6  B0D8               	btfsc	status,0,c
  1368  0014E8  D00F               	goto	l2192
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;main.c: 259: {
  1372                           ;main.c: 260: speedCompensation--;
  1373  0014EA  0100               	movlb	0	; () banked
  1374  0014EC  077A               	decf	main@speedCompensation& (0+255),f,b
  1375  0014EE  A0D8               	btfss	status,0,c
  1376  0014F0  077B               	decf	(main@speedCompensation+1)& (0+255),f,b
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 261: wheelVelocity('l', leftWheelSpeed,speedCompensation);
  1380  0014F2  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1381  0014F6  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1382  0014FA  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1383  0014FE  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1384  001502  0E6C               	movlw	108
  1385  001504  ECA9  F00D         	call	_wheelVelocity
  1386  001508                     l2192:
  1387                           
  1388                           ;main.c: 262: }
  1389                           ;main.c: 264: if(rightWheelCount >= 25)
  1390  001508  0100               	movlb	0	; () banked
  1391  00150A  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1392  00150C  0100               	movlb	0	; () banked
  1393  00150E  1186               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  1394  001510  0100               	movlb	0	; () banked
  1395  001512  1185               	iorwf	(_rightWheelCount+1)& (0+255),w,b
  1396  001514  E105               	bnz	u2000
  1397  001516  0E19               	movlw	25
  1398  001518  0100               	movlb	0	; () banked
  1399  00151A  5D84               	subwf	_rightWheelCount& (0+255),w,b
  1400  00151C  A0D8               	btfss	status,0,c
  1401  00151E  D02E               	goto	l2202
  1402  001520                     u2000:
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 265: {
  1406                           ;main.c: 266: rightWheelCount = 0;
  1407  001520  0E00               	movlw	0
  1408  001522  0100               	movlb	0	; () banked
  1409  001524  6F84               	movwf	_rightWheelCount& (0+255),b
  1410  001526  0E00               	movlw	0
  1411  001528  6F85               	movwf	(_rightWheelCount+1)& (0+255),b
  1412  00152A  0E00               	movlw	0
  1413  00152C  6F86               	movwf	(_rightWheelCount+2)& (0+255),b
  1414  00152E  0E00               	movlw	0
  1415  001530  6F87               	movwf	(_rightWheelCount+3)& (0+255),b
  1416                           
  1417                           ;main.c: 267: leftWheelCount = 0;
  1418  001532  0E00               	movlw	0
  1419  001534  0100               	movlb	0	; () banked
  1420  001536  6F80               	movwf	_leftWheelCount& (0+255),b
  1421  001538  0E00               	movlw	0
  1422  00153A  6F81               	movwf	(_leftWheelCount+1)& (0+255),b
  1423  00153C  0E00               	movlw	0
  1424  00153E  6F82               	movwf	(_leftWheelCount+2)& (0+255),b
  1425  001540  0E00               	movlw	0
  1426  001542  6F83               	movwf	(_leftWheelCount+3)& (0+255),b
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;main.c: 268: wheelVelocity('r', 0, speedCompensation);
  1430  001544  0E00               	movlw	0
  1431  001546  0100               	movlb	0	; () banked
  1432  001548  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1433  00154A  0E00               	movlw	0
  1434  00154C  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1435  00154E  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1436  001552  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1437  001556  0E72               	movlw	114
  1438  001558  ECA9  F00D         	call	_wheelVelocity
  1439                           
  1440                           ;main.c: 269: wheelVelocity('l', 0, speedCompensation);
  1441  00155C  0E00               	movlw	0
  1442  00155E  0100               	movlb	0	; () banked
  1443  001560  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1444  001562  0E00               	movlw	0
  1445  001564  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1446  001566  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1447  00156A  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1448  00156E  0E6C               	movlw	108
  1449  001570  ECA9  F00D         	call	_wheelVelocity
  1450  001574                     l119:
  1451  001574  B081               	btfsc	3969,0,c	;volatile
  1452  001576  D7FE               	goto	l119
  1453                           
  1454                           ;main.c: 273: }
  1455                           ;main.c: 274: event++;
  1456  001578  0100               	movlb	0	; () banked
  1457  00157A  2B75               	incf	main@event& (0+255),f,b
  1458  00157C                     l2202:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;main.c: 275: }
  1462                           ;main.c: 276: limitWheelSpeeds(&leftWheelSpeed, &rightWheelSpeed);
  1463  00157C  0E78               	movlw	low main@leftWheelSpeed
  1464  00157E  6E11               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  1465  001580  0E00               	movlw	high main@leftWheelSpeed
  1466  001582  6E12               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  1467  001584  0E76               	movlw	low main@rightWheelSpeed
  1468  001586  6E13               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  1469  001588  0E00               	movlw	high main@rightWheelSpeed
  1470  00158A  6E14               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  1471  00158C  EC7E  F00F         	call	_limitWheelSpeeds	;wreg free
  1472                           
  1473                           ;main.c: 277: break;
  1474  001590  D5C1               	goto	l2130
  1475  001592                     l2204:
  1476                           
  1477                           ;main.c: 280: if(rightWheelSpeed < 30)
  1478  001592  0100               	movlb	0	; () banked
  1479  001594  BF77               	btfsc	(main@rightWheelSpeed+1)& (0+255),7,b
  1480  001596  D008               	goto	l2206
  1481  001598  0100               	movlb	0	; () banked
  1482  00159A  5177               	movf	(main@rightWheelSpeed+1)& (0+255),w,b
  1483  00159C  E121               	bnz	l123
  1484  00159E  0E1E               	movlw	30
  1485  0015A0  0100               	movlb	0	; () banked
  1486  0015A2  5D76               	subwf	main@rightWheelSpeed& (0+255),w,b
  1487  0015A4  B0D8               	btfsc	status,0,c
  1488  0015A6  D01C               	goto	l123
  1489  0015A8                     l2206:
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;main.c: 281: {
  1493                           ;main.c: 282: wheelVelocity('r', ++rightWheelSpeed, speedCompensation);
  1494  0015A8  0100               	movlb	0	; () banked
  1495  0015AA  4B76               	infsnz	main@rightWheelSpeed& (0+255),f,b
  1496  0015AC  2B77               	incf	(main@rightWheelSpeed+1)& (0+255),f,b
  1497  0015AE  C076  F060         	movff	main@rightWheelSpeed,wheelVelocity@speed
  1498  0015B2  C077  F061         	movff	main@rightWheelSpeed+1,wheelVelocity@speed+1
  1499  0015B6  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1500  0015BA  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1501  0015BE  0E72               	movlw	114
  1502  0015C0  ECA9  F00D         	call	_wheelVelocity
  1503                           
  1504                           ;main.c: 283: wheelVelocity('l', ++leftWheelSpeed, speedCompensation);
  1505  0015C4  0100               	movlb	0	; () banked
  1506  0015C6  4B78               	infsnz	main@leftWheelSpeed& (0+255),f,b
  1507  0015C8  2B79               	incf	(main@leftWheelSpeed+1)& (0+255),f,b
  1508  0015CA  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1509  0015CE  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1510  0015D2  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1511  0015D6  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1512  0015DA  0E6C               	movlw	108
  1513  0015DC  ECA9  F00D         	call	_wheelVelocity
  1514  0015E0                     l123:
  1515                           
  1516                           ;main.c: 284: }
  1517                           ;main.c: 285: if((leftWheelCount * 1.25f) > (rightWheelCount + 2) )
  1518  0015E0  0E02               	movlw	2
  1519  0015E2  0100               	movlb	0	; () banked
  1520  0015E4  2584               	addwf	_rightWheelCount& (0+255),w,b
  1521  0015E6  6E19               	movwf	___lltoft@c,c
  1522  0015E8  0E00               	movlw	0
  1523  0015EA  0100               	movlb	0	; () banked
  1524  0015EC  2185               	addwfc	(_rightWheelCount+1)& (0+255),w,b
  1525  0015EE  6E1A               	movwf	___lltoft@c+1,c
  1526  0015F0  0E00               	movlw	0
  1527  0015F2  0100               	movlb	0	; () banked
  1528  0015F4  2186               	addwfc	(_rightWheelCount+2)& (0+255),w,b
  1529  0015F6  6E1B               	movwf	___lltoft@c+2,c
  1530  0015F8  0E00               	movlw	0
  1531  0015FA  0100               	movlb	0	; () banked
  1532  0015FC  2187               	addwfc	(_rightWheelCount+3)& (0+255),w,b
  1533  0015FE  6E1C               	movwf	___lltoft@c+3,c
  1534  001600  EC74  F010         	call	___lltoft	;wreg free
  1535  001604  C019  F031         	movff	?___lltoft,___ftge@ff1
  1536  001608  C01A  F032         	movff	?___lltoft+1,___ftge@ff1+1
  1537  00160C  C01B  F033         	movff	?___lltoft+2,___ftge@ff1+2
  1538  001610  0E00               	movlw	0
  1539  001612  6E25               	movwf	___ftmul@f2,c
  1540  001614  0EA0               	movlw	160
  1541  001616  6E26               	movwf	___ftmul@f2+1,c
  1542  001618  0E3F               	movlw	63
  1543  00161A  6E27               	movwf	___ftmul@f2+2,c
  1544  00161C  C080  F019         	movff	_leftWheelCount,___lltoft@c
  1545  001620  C081  F01A         	movff	_leftWheelCount+1,___lltoft@c+1
  1546  001624  C082  F01B         	movff	_leftWheelCount+2,___lltoft@c+2
  1547  001628  C083  F01C         	movff	_leftWheelCount+3,___lltoft@c+3
  1548  00162C  EC74  F010         	call	___lltoft	;wreg free
  1549  001630  C019  F022         	movff	?___lltoft,___ftmul@f1
  1550  001634  C01A  F023         	movff	?___lltoft+1,___ftmul@f1+1
  1551  001638  C01B  F024         	movff	?___lltoft+2,___ftmul@f1+2
  1552  00163C  ECA1  F00E         	call	___ftmul	;wreg free
  1553  001640  C022  F034         	movff	?___ftmul,___ftge@ff2
  1554  001644  C023  F035         	movff	?___ftmul+1,___ftge@ff2+1
  1555  001648  C024  F036         	movff	?___ftmul+2,___ftge@ff2+2
  1556  00164C  EC2C  F010         	call	___ftge	;wreg free
  1557  001650  B0D8               	btfsc	status,0,c
  1558  001652  D00F               	goto	l2212
  1559                           
  1560                           ;main.c: 287: {
  1561                           ;main.c: 288: speedCompensation--;
  1562  001654  0100               	movlb	0	; () banked
  1563  001656  077A               	decf	main@speedCompensation& (0+255),f,b
  1564  001658  A0D8               	btfss	status,0,c
  1565  00165A  077B               	decf	(main@speedCompensation+1)& (0+255),f,b
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 289: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1569  00165C  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1570  001660  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1571  001664  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1572  001668  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1573  00166C  0E6C               	movlw	108
  1574  00166E  ECA9  F00D         	call	_wheelVelocity
  1575  001672                     l2212:
  1576                           
  1577                           ;main.c: 290: }
  1578                           ;main.c: 291: if(rightWheelCount > ((leftWheelCount + 2)*1.25f))
  1579  001672  0E00               	movlw	0
  1580  001674  6E25               	movwf	___ftmul@f2,c
  1581  001676  0EA0               	movlw	160
  1582  001678  6E26               	movwf	___ftmul@f2+1,c
  1583  00167A  0E3F               	movlw	63
  1584  00167C  6E27               	movwf	___ftmul@f2+2,c
  1585  00167E  0E02               	movlw	2
  1586  001680  0100               	movlb	0	; () banked
  1587  001682  2580               	addwf	_leftWheelCount& (0+255),w,b
  1588  001684  6E19               	movwf	___lltoft@c,c
  1589  001686  0E00               	movlw	0
  1590  001688  0100               	movlb	0	; () banked
  1591  00168A  2181               	addwfc	(_leftWheelCount+1)& (0+255),w,b
  1592  00168C  6E1A               	movwf	___lltoft@c+1,c
  1593  00168E  0E00               	movlw	0
  1594  001690  0100               	movlb	0	; () banked
  1595  001692  2182               	addwfc	(_leftWheelCount+2)& (0+255),w,b
  1596  001694  6E1B               	movwf	___lltoft@c+2,c
  1597  001696  0E00               	movlw	0
  1598  001698  0100               	movlb	0	; () banked
  1599  00169A  2183               	addwfc	(_leftWheelCount+3)& (0+255),w,b
  1600  00169C  6E1C               	movwf	___lltoft@c+3,c
  1601  00169E  EC74  F010         	call	___lltoft	;wreg free
  1602  0016A2  C019  F022         	movff	?___lltoft,___ftmul@f1
  1603  0016A6  C01A  F023         	movff	?___lltoft+1,___ftmul@f1+1
  1604  0016AA  C01B  F024         	movff	?___lltoft+2,___ftmul@f1+2
  1605  0016AE  ECA1  F00E         	call	___ftmul	;wreg free
  1606  0016B2  C022  F031         	movff	?___ftmul,___ftge@ff1
  1607  0016B6  C023  F032         	movff	?___ftmul+1,___ftge@ff1+1
  1608  0016BA  C024  F033         	movff	?___ftmul+2,___ftge@ff1+2
  1609  0016BE  C084  F019         	movff	_rightWheelCount,___lltoft@c
  1610  0016C2  C085  F01A         	movff	_rightWheelCount+1,___lltoft@c+1
  1611  0016C6  C086  F01B         	movff	_rightWheelCount+2,___lltoft@c+2
  1612  0016CA  C087  F01C         	movff	_rightWheelCount+3,___lltoft@c+3
  1613  0016CE  EC74  F010         	call	___lltoft	;wreg free
  1614  0016D2  C019  F034         	movff	?___lltoft,___ftge@ff2
  1615  0016D6  C01A  F035         	movff	?___lltoft+1,___ftge@ff2+1
  1616  0016DA  C01B  F036         	movff	?___lltoft+2,___ftge@ff2+2
  1617  0016DE  EC2C  F010         	call	___ftge	;wreg free
  1618  0016E2  B0D8               	btfsc	status,0,c
  1619  0016E4  D00E               	goto	l2218
  1620                           
  1621                           ;main.c: 293: {
  1622                           ;main.c: 294: speedCompensation++;
  1623  0016E6  0100               	movlb	0	; () banked
  1624  0016E8  4B7A               	infsnz	main@speedCompensation& (0+255),f,b
  1625  0016EA  2B7B               	incf	(main@speedCompensation+1)& (0+255),f,b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 295: wheelVelocity('l', leftWheelSpeed, speedCompensation);
  1629  0016EC  C078  F060         	movff	main@leftWheelSpeed,wheelVelocity@speed
  1630  0016F0  C079  F061         	movff	main@leftWheelSpeed+1,wheelVelocity@speed+1
  1631  0016F4  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1632  0016F8  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1633  0016FC  0E6C               	movlw	108
  1634  0016FE  ECA9  F00D         	call	_wheelVelocity
  1635  001702                     l2218:
  1636                           
  1637                           ;main.c: 296: }
  1638                           ;main.c: 297: if(rightWheelCount >= 500)
  1639  001702  0100               	movlb	0	; () banked
  1640  001704  5187               	movf	(_rightWheelCount+3)& (0+255),w,b
  1641  001706  0100               	movlb	0	; () banked
  1642  001708  1186               	iorwf	(_rightWheelCount+2)& (0+255),w,b
  1643  00170A  E108               	bnz	u2050
  1644  00170C  0EF4               	movlw	244
  1645  00170E  0100               	movlb	0	; () banked
  1646  001710  5D84               	subwf	_rightWheelCount& (0+255),w,b
  1647  001712  0E01               	movlw	1
  1648  001714  0100               	movlb	0	; () banked
  1649  001716  5985               	subwfb	(_rightWheelCount+1)& (0+255),w,b
  1650  001718  A0D8               	btfss	status,0,c
  1651  00171A  D02E               	goto	l2228
  1652  00171C                     u2050:
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;main.c: 298: {
  1656                           ;main.c: 299: rightWheelCount = 0;
  1657  00171C  0E00               	movlw	0
  1658  00171E  0100               	movlb	0	; () banked
  1659  001720  6F84               	movwf	_rightWheelCount& (0+255),b
  1660  001722  0E00               	movlw	0
  1661  001724  6F85               	movwf	(_rightWheelCount+1)& (0+255),b
  1662  001726  0E00               	movlw	0
  1663  001728  6F86               	movwf	(_rightWheelCount+2)& (0+255),b
  1664  00172A  0E00               	movlw	0
  1665  00172C  6F87               	movwf	(_rightWheelCount+3)& (0+255),b
  1666                           
  1667                           ;main.c: 300: leftWheelCount = 0;
  1668  00172E  0E00               	movlw	0
  1669  001730  0100               	movlb	0	; () banked
  1670  001732  6F80               	movwf	_leftWheelCount& (0+255),b
  1671  001734  0E00               	movlw	0
  1672  001736  6F81               	movwf	(_leftWheelCount+1)& (0+255),b
  1673  001738  0E00               	movlw	0
  1674  00173A  6F82               	movwf	(_leftWheelCount+2)& (0+255),b
  1675  00173C  0E00               	movlw	0
  1676  00173E  6F83               	movwf	(_leftWheelCount+3)& (0+255),b
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;main.c: 301: wheelVelocity('r', 0, speedCompensation);
  1680  001740  0E00               	movlw	0
  1681  001742  0100               	movlb	0	; () banked
  1682  001744  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1683  001746  0E00               	movlw	0
  1684  001748  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1685  00174A  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1686  00174E  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1687  001752  0E72               	movlw	114
  1688  001754  ECA9  F00D         	call	_wheelVelocity
  1689                           
  1690                           ;main.c: 302: wheelVelocity('l', 0, speedCompensation);
  1691  001758  0E00               	movlw	0
  1692  00175A  0100               	movlb	0	; () banked
  1693  00175C  6F61               	movwf	(wheelVelocity@speed+1)& (0+255),b
  1694  00175E  0E00               	movlw	0
  1695  001760  6F60               	movwf	wheelVelocity@speed& (0+255),b
  1696  001762  C07A  F062         	movff	main@speedCompensation,wheelVelocity@speedCompensation
  1697  001766  C07B  F063         	movff	main@speedCompensation+1,wheelVelocity@speedCompensation+1
  1698  00176A  0E6C               	movlw	108
  1699  00176C  ECA9  F00D         	call	_wheelVelocity
  1700  001770                     l127:
  1701  001770  B081               	btfsc	3969,0,c	;volatile
  1702  001772  D7FE               	goto	l127
  1703                           
  1704                           ;main.c: 306: }
  1705                           ;main.c: 307: event++;
  1706  001774  0100               	movlb	0	; () banked
  1707  001776  2B75               	incf	main@event& (0+255),f,b
  1708  001778                     l2228:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 308: }
  1712                           ;main.c: 309: limitWheelSpeeds(&leftWheelSpeed, &rightWheelSpeed);
  1713  001778  0E78               	movlw	low main@leftWheelSpeed
  1714  00177A  6E11               	movwf	limitWheelSpeeds@leftWheelSpeed,c
  1715  00177C  0E00               	movlw	high main@leftWheelSpeed
  1716  00177E  6E12               	movwf	limitWheelSpeeds@leftWheelSpeed+1,c
  1717  001780  0E76               	movlw	low main@rightWheelSpeed
  1718  001782  6E13               	movwf	limitWheelSpeeds@rightWheelSpeed,c
  1719  001784  0E00               	movlw	high main@rightWheelSpeed
  1720  001786  6E14               	movwf	limitWheelSpeeds@rightWheelSpeed+1,c
  1721  001788  EC7E  F00F         	call	_limitWheelSpeeds	;wreg free
  1722                           
  1723                           ;main.c: 311: }
  1724                           
  1725                           ;main.c: 310: break;
  1726  00178C  D4C3               	goto	l2130
  1727  00178E                     l2232:
  1728  00178E  0100               	movlb	0	; () banked
  1729  001790  5175               	movf	main@event& (0+255),w,b
  1730                           
  1731                           ; Switch size 1, requested type "space"
  1732                           ; Number of cases is 3, Range of values is 0 to 2
  1733                           ; switch strategies available:
  1734                           ; Name         Instructions Cycles
  1735                           ; simple_byte           10     6 (average)
  1736                           ;	Chosen strategy is simple_byte
  1737  001792  0A00               	xorlw	0	; case 0
  1738  001794  B4D8               	btfsc	status,2,c
  1739  001796  D501               	goto	l2140
  1740  001798  0A01               	xorlw	1	; case 1
  1741  00179A  B4D8               	btfsc	status,2,c
  1742  00179C  D5FC               	goto	l2172
  1743  00179E  0A03               	xorlw	3	; case 2
  1744  0017A0  B4D8               	btfsc	status,2,c
  1745  0017A2  D6F7               	goto	l2204
  1746                           
  1747                           ; BSR set to: 0
  1748                           
  1749                           ; BSR set to: 0
  1750                           
  1751                           ; BSR set to: 0
  1752  0017A4  D4B7               	goto	l2130
  1753  0017A6                     __end_of_main:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           intcon	equ	0xFF2
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1l	equ	0xFE1
  1764                           status	equ	0xFD8
  1765                           
  1766 ;; *************** function _wheelVelocity *****************
  1767 ;; Defined at:
  1768 ;;		line 345 in file "main.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;  wheel           1    wreg     unsigned char 
  1771 ;;  speed           2    0[BANK0 ] int 
  1772 ;;  speedCompens    2    2[BANK0 ] int 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  wheel           1    8[BANK0 ] unsigned char 
  1775 ;;  temp            2    6[BANK0 ] int 
  1776 ;;  temp            2    4[BANK0 ] int 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2, status,0, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1786 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;Total ram usage:        9 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    3
  1793 ;; This function calls:
  1794 ;;		___awtoft
  1795 ;;		___ftadd
  1796 ;;		___ftmul
  1797 ;;		___fttol
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text1
  1804  001B52                     __ptext1:
  1805                           	opt stack 0
  1806  001B52                     _wheelVelocity:
  1807                           	opt stack 27
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;incstack = 0
  1811                           ;wheelVelocity@wheel stored from wreg
  1812  001B52  0100               	movlb	0	; () banked
  1813  001B54  6F68               	movwf	wheelVelocity@wheel& (0+255),b
  1814                           
  1815                           ;main.c: 347: if(wheel == 'r')
  1816  001B56  0E72               	movlw	114
  1817  001B58  0100               	movlb	0	; () banked
  1818  001B5A  1968               	xorwf	wheelVelocity@wheel& (0+255),w,b
  1819  001B5C  A4D8               	btfss	status,2,c
  1820  001B5E  D033               	goto	l2026
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 348: {
  1824                           ;main.c: 351: int temp = (int) (750 + speed * 1.25);
  1825  001B60  0E80               	movlw	128
  1826  001B62  6E34               	movwf	___ftadd@f2,c
  1827  001B64  0E3B               	movlw	59
  1828  001B66  6E35               	movwf	___ftadd@f2+1,c
  1829  001B68  0E44               	movlw	68
  1830  001B6A  6E36               	movwf	___ftadd@f2+2,c
  1831  001B6C  0E00               	movlw	0
  1832  001B6E  6E25               	movwf	___ftmul@f2,c
  1833  001B70  0EA0               	movlw	160
  1834  001B72  6E26               	movwf	___ftmul@f2+1,c
  1835  001B74  0E3F               	movlw	63
  1836  001B76  6E27               	movwf	___ftmul@f2+2,c
  1837  001B78  C060  F019         	movff	wheelVelocity@speed,___awtoft@c
  1838  001B7C  C061  F01A         	movff	wheelVelocity@speed+1,___awtoft@c+1
  1839  001B80  EC0B  F011         	call	___awtoft	;wreg free
  1840  001B84  C019  F022         	movff	?___awtoft,___ftmul@f1
  1841  001B88  C01A  F023         	movff	?___awtoft+1,___ftmul@f1+1
  1842  001B8C  C01B  F024         	movff	?___awtoft+2,___ftmul@f1+2
  1843  001B90  ECA1  F00E         	call	___ftmul	;wreg free
  1844  001B94  C022  F031         	movff	?___ftmul,___ftadd@f1
  1845  001B98  C023  F032         	movff	?___ftmul+1,___ftadd@f1+1
  1846  001B9C  C024  F033         	movff	?___ftmul+2,___ftadd@f1+2
  1847  001BA0  ECD3  F00C         	call	___ftadd	;wreg free
  1848  001BA4  C031  F03D         	movff	?___ftadd,___fttol@f1
  1849  001BA8  C032  F03E         	movff	?___ftadd+1,___fttol@f1+1
  1850  001BAC  C033  F03F         	movff	?___ftadd+2,___fttol@f1+2
  1851  001BB0  EC27  F00E         	call	___fttol	;wreg free
  1852  001BB4  C03D  F064         	movff	?___fttol,wheelVelocity@temp
  1853  001BB8  C03E  F065         	movff	?___fttol+1,wheelVelocity@temp+1
  1854                           
  1855                           ;main.c: 352: CCPR1H = (temp >> 8) & 0xFF;
  1856  001BBC  0100               	movlb	0	; () banked
  1857  001BBE  5165               	movf	(wheelVelocity@temp+1)& (0+255),w,b
  1858  001BC0  6EBF               	movwf	4031,c	;volatile
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 353: CCPR1L = temp & 0xFF;
  1862  001BC2  C064  FFBE         	movff	wheelVelocity@temp,4030	;volatile
  1863  001BC6                     l2026:
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;main.c: 354: }
  1867                           ;main.c: 356: if(wheel == 'l')
  1868  001BC6  0E6C               	movlw	108
  1869  001BC8  0100               	movlb	0	; () banked
  1870  001BCA  1968               	xorwf	wheelVelocity@wheel& (0+255),w,b
  1871  001BCC  A4D8               	btfss	status,2,c
  1872  001BCE  0012               	return	
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;main.c: 357: {
  1876                           ;main.c: 360: int temp = (int) (750 + speedCompensation + speed * 1.25);
  1877  001BD0  0E00               	movlw	0
  1878  001BD2  6E25               	movwf	___ftmul@f2,c
  1879  001BD4  0EA0               	movlw	160
  1880  001BD6  6E26               	movwf	___ftmul@f2+1,c
  1881  001BD8  0E3F               	movlw	63
  1882  001BDA  6E27               	movwf	___ftmul@f2+2,c
  1883  001BDC  C060  F019         	movff	wheelVelocity@speed,___awtoft@c
  1884  001BE0  C061  F01A         	movff	wheelVelocity@speed+1,___awtoft@c+1
  1885  001BE4  EC0B  F011         	call	___awtoft	;wreg free
  1886  001BE8  C019  F022         	movff	?___awtoft,___ftmul@f1
  1887  001BEC  C01A  F023         	movff	?___awtoft+1,___ftmul@f1+1
  1888  001BF0  C01B  F024         	movff	?___awtoft+2,___ftmul@f1+2
  1889  001BF4  ECA1  F00E         	call	___ftmul	;wreg free
  1890  001BF8  C022  F034         	movff	?___ftmul,___ftadd@f2
  1891  001BFC  C023  F035         	movff	?___ftmul+1,___ftadd@f2+1
  1892  001C00  C024  F036         	movff	?___ftmul+2,___ftadd@f2+2
  1893  001C04  0EEE               	movlw	238
  1894  001C06  0100               	movlb	0	; () banked
  1895  001C08  2562               	addwf	wheelVelocity@speedCompensation& (0+255),w,b
  1896  001C0A  6E19               	movwf	___awtoft@c,c
  1897  001C0C  0E02               	movlw	2
  1898  001C0E  0100               	movlb	0	; () banked
  1899  001C10  2163               	addwfc	(wheelVelocity@speedCompensation+1)& (0+255),w,b
  1900  001C12  6E1A               	movwf	___awtoft@c+1,c
  1901  001C14  EC0B  F011         	call	___awtoft	;wreg free
  1902  001C18  C019  F031         	movff	?___awtoft,___ftadd@f1
  1903  001C1C  C01A  F032         	movff	?___awtoft+1,___ftadd@f1+1
  1904  001C20  C01B  F033         	movff	?___awtoft+2,___ftadd@f1+2
  1905  001C24  ECD3  F00C         	call	___ftadd	;wreg free
  1906  001C28  C031  F03D         	movff	?___ftadd,___fttol@f1
  1907  001C2C  C032  F03E         	movff	?___ftadd+1,___fttol@f1+1
  1908  001C30  C033  F03F         	movff	?___ftadd+2,___fttol@f1+2
  1909  001C34  EC27  F00E         	call	___fttol	;wreg free
  1910  001C38  C03D  F066         	movff	?___fttol,wheelVelocity@temp_836
  1911  001C3C  C03E  F067         	movff	?___fttol+1,wheelVelocity@temp_836+1
  1912                           
  1913                           ;main.c: 361: CCPR3H = (temp >> 8) & 0xFF;
  1914  001C40  0100               	movlb	0	; () banked
  1915  001C42  5167               	movf	(wheelVelocity@temp_836+1)& (0+255),w,b
  1916  001C44  010F               	movlb	15	; () banked
  1917  001C46  6F5F               	movwf	95,b	;volatile
  1918                           
  1919                           ; BSR set to: 15
  1920                           ;main.c: 362: CCPR3L = temp & 0xFF;
  1921  001C48  C066  FF5E         	movff	wheelVelocity@temp_836,3934	;volatile
  1922  001C4C  0012               	return	
  1923  001C4E                     __end_of_wheelVelocity:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           intcon	equ	0xFF2
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           fsr1l	equ	0xFE1
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function ___fttol *****************
  1937 ;; Defined at:
  1938 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  f1              3   60[COMRAM] float 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  lval            4   70[COMRAM] unsigned long 
  1943 ;;  exp1            1   74[COMRAM] unsigned char 
  1944 ;;  sign1           1   69[COMRAM] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  4   60[COMRAM] long 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1954 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;Total ram usage:       15 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_wheelVelocity
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text2
  1969  001C4E                     __ptext2:
  1970                           	opt stack 0
  1971  001C4E                     ___fttol:
  1972                           	opt stack 28
  1973                           
  1974                           ;incstack = 0
  1975  001C4E  C03F  F041         	movff	___fttol@f1+2,??___fttol
  1976  001C52  6A42               	clrf	(??___fttol+1)& (0+255),c
  1977  001C54  6A43               	clrf	(??___fttol+2)& (0+255),c
  1978  001C56  343E               	rlcf	___fttol@f1+1,w,c
  1979  001C58  3641               	rlcf	??___fttol& (0+255),f,c
  1980  001C5A  E301               	bnc	u1491
  1981  001C5C  8042               	bsf	(??___fttol+1)& (0+255),0,c
  1982  001C5E                     u1491:
  1983  001C5E  5041               	movf	??___fttol,w,c
  1984  001C60  6E4B               	movwf	___fttol@exp1,c
  1985  001C62  504B               	movf	___fttol@exp1,w,c
  1986  001C64  A4D8               	btfss	status,2,c
  1987  001C66  D009               	goto	l1806
  1988  001C68  0E00               	movlw	0
  1989  001C6A  6E3D               	movwf	?___fttol,c
  1990  001C6C  0E00               	movlw	0
  1991  001C6E  6E3E               	movwf	?___fttol+1,c
  1992  001C70  0E00               	movlw	0
  1993  001C72  6E3F               	movwf	?___fttol+2,c
  1994  001C74  0E00               	movlw	0
  1995  001C76  6E40               	movwf	?___fttol+3,c
  1996  001C78  0012               	return	
  1997  001C7A                     l1806:
  1998  001C7A  0E17               	movlw	23
  1999  001C7C  6E41               	movwf	??___fttol& (0+255),c
  2000  001C7E  C03D  F042         	movff	___fttol@f1,??___fttol+1
  2001  001C82  C03E  F043         	movff	___fttol@f1+1,??___fttol+2
  2002  001C86  C03F  F044         	movff	___fttol@f1+2,??___fttol+3
  2003  001C8A  2841               	incf	??___fttol,w,c
  2004  001C8C  6E45               	movwf	(??___fttol+4)& (0+255),c
  2005  001C8E  D004               	goto	u1510
  2006  001C90                     u1515:
  2007  001C90  90D8               	bcf	status,0,c
  2008  001C92  3244               	rrcf	??___fttol+3,f,c
  2009  001C94  3243               	rrcf	??___fttol+2,f,c
  2010  001C96  3242               	rrcf	??___fttol+1,f,c
  2011  001C98                     u1510:
  2012  001C98  2E45               	decfsz	(??___fttol+4)& (0+255),f,c
  2013  001C9A  D7FA               	goto	u1515
  2014  001C9C  5042               	movf	??___fttol+1,w,c
  2015  001C9E  6E46               	movwf	___fttol@sign1,c
  2016  001CA0  8E3E               	bsf	___fttol@f1+1,7,c
  2017  001CA2  0EFF               	movlw	255
  2018  001CA4  163D               	andwf	___fttol@f1,f,c
  2019  001CA6  0EFF               	movlw	255
  2020  001CA8  163E               	andwf	___fttol@f1+1,f,c
  2021  001CAA  0E00               	movlw	0
  2022  001CAC  163F               	andwf	___fttol@f1+2,f,c
  2023  001CAE  503D               	movf	___fttol@f1,w,c
  2024  001CB0  6E47               	movwf	___fttol@lval,c
  2025  001CB2  503E               	movf	___fttol@f1+1,w,c
  2026  001CB4  6E48               	movwf	___fttol@lval+1,c
  2027  001CB6  503F               	movf	___fttol@f1+2,w,c
  2028  001CB8  6E49               	movwf	___fttol@lval+2,c
  2029  001CBA  6A4A               	clrf	___fttol@lval+3,c
  2030  001CBC  0E8E               	movlw	142
  2031  001CBE  5E4B               	subwf	___fttol@exp1,f,c
  2032  001CC0  AE4B               	btfss	___fttol@exp1,7,c
  2033  001CC2  D016               	goto	l1828
  2034  001CC4  504B               	movf	___fttol@exp1,w,c
  2035  001CC6  0A80               	xorlw	128
  2036  001CC8  0F8F               	addlw	143
  2037  001CCA  B0D8               	btfsc	status,0,c
  2038  001CCC  D009               	goto	l1824
  2039  001CCE  0E00               	movlw	0
  2040  001CD0  6E3D               	movwf	?___fttol,c
  2041  001CD2  0E00               	movlw	0
  2042  001CD4  6E3E               	movwf	?___fttol+1,c
  2043  001CD6  0E00               	movlw	0
  2044  001CD8  6E3F               	movwf	?___fttol+2,c
  2045  001CDA  0E00               	movlw	0
  2046  001CDC  6E40               	movwf	?___fttol+3,c
  2047  001CDE  0012               	return	
  2048  001CE0                     l1824:
  2049  001CE0  90D8               	bcf	status,0,c
  2050  001CE2  324A               	rrcf	___fttol@lval+3,f,c
  2051  001CE4  3249               	rrcf	___fttol@lval+2,f,c
  2052  001CE6  3248               	rrcf	___fttol@lval+1,f,c
  2053  001CE8  3247               	rrcf	___fttol@lval,f,c
  2054  001CEA  3E4B               	incfsz	___fttol@exp1,f,c
  2055  001CEC  D7F9               	goto	l1824
  2056  001CEE  D015               	goto	l1838
  2057  001CF0                     l1828:
  2058  001CF0  0E17               	movlw	23
  2059  001CF2  644B               	cpfsgt	___fttol@exp1,c
  2060  001CF4  D00F               	goto	l1836
  2061  001CF6  0E00               	movlw	0
  2062  001CF8  6E3D               	movwf	?___fttol,c
  2063  001CFA  0E00               	movlw	0
  2064  001CFC  6E3E               	movwf	?___fttol+1,c
  2065  001CFE  0E00               	movlw	0
  2066  001D00  6E3F               	movwf	?___fttol+2,c
  2067  001D02  0E00               	movlw	0
  2068  001D04  6E40               	movwf	?___fttol+3,c
  2069  001D06  0012               	return	
  2070  001D08                     l1834:
  2071  001D08  90D8               	bcf	status,0,c
  2072  001D0A  3647               	rlcf	___fttol@lval,f,c
  2073  001D0C  3648               	rlcf	___fttol@lval+1,f,c
  2074  001D0E  3649               	rlcf	___fttol@lval+2,f,c
  2075  001D10  364A               	rlcf	___fttol@lval+3,f,c
  2076  001D12  064B               	decf	___fttol@exp1,f,c
  2077  001D14                     l1836:
  2078  001D14  504B               	movf	___fttol@exp1,w,c
  2079  001D16  A4D8               	btfss	status,2,c
  2080  001D18  D7F7               	goto	l1834
  2081  001D1A                     l1838:
  2082  001D1A  5046               	movf	___fttol@sign1,w,c
  2083  001D1C  B4D8               	btfsc	status,2,c
  2084  001D1E  D008               	goto	l1842
  2085  001D20  1E4A               	comf	___fttol@lval+3,f,c
  2086  001D22  1E49               	comf	___fttol@lval+2,f,c
  2087  001D24  1E48               	comf	___fttol@lval+1,f,c
  2088  001D26  6C47               	negf	___fttol@lval,c
  2089  001D28  0E00               	movlw	0
  2090  001D2A  2248               	addwfc	___fttol@lval+1,f,c
  2091  001D2C  2249               	addwfc	___fttol@lval+2,f,c
  2092  001D2E  224A               	addwfc	___fttol@lval+3,f,c
  2093  001D30                     l1842:
  2094  001D30  C047  F03D         	movff	___fttol@lval,?___fttol
  2095  001D34  C048  F03E         	movff	___fttol@lval+1,?___fttol+1
  2096  001D38  C049  F03F         	movff	___fttol@lval+2,?___fttol+2
  2097  001D3C  C04A  F040         	movff	___fttol@lval+3,?___fttol+3
  2098  001D40  0012               	return	
  2099  001D42                     __end_of___fttol:
  2100                           	opt stack 0
  2101                           tblptru	equ	0xFF8
  2102                           tblptrh	equ	0xFF7
  2103                           tblptrl	equ	0xFF6
  2104                           tablat	equ	0xFF5
  2105                           intcon	equ	0xFF2
  2106                           postinc0	equ	0xFEE
  2107                           wreg	equ	0xFE8
  2108                           postdec1	equ	0xFE5
  2109                           fsr1l	equ	0xFE1
  2110                           status	equ	0xFD8
  2111                           
  2112 ;; *************** function ___ftmul *****************
  2113 ;; Defined at:
  2114 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  f1              3   33[COMRAM] float 
  2117 ;;  f2              3   36[COMRAM] float 
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  f3_as_produc    3   43[COMRAM] unsigned um
  2120 ;;  sign            1   47[COMRAM] unsigned char 
  2121 ;;  cntr            1   46[COMRAM] unsigned char 
  2122 ;;  exp             1   42[COMRAM] unsigned char 
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  3   33[COMRAM] float 
  2125 ;; Registers used:
  2126 ;;		wreg, status,2, status,0, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2132 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;Total ram usage:       15 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    2
  2139 ;; This function calls:
  2140 ;;		___ftpack
  2141 ;; This function is called by:
  2142 ;;		_main
  2143 ;;		_wheelVelocity
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text3
  2148  001D42                     __ptext3:
  2149                           	opt stack 0
  2150  001D42                     ___ftmul:
  2151                           	opt stack 27
  2152                           
  2153                           ;incstack = 0
  2154  001D42  C024  F028         	movff	___ftmul@f1+2,??___ftmul
  2155  001D46  6A29               	clrf	(??___ftmul+1)& (0+255),c
  2156  001D48  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  2157  001D4A  3423               	rlcf	___ftmul@f1+1,w,c
  2158  001D4C  3628               	rlcf	??___ftmul& (0+255),f,c
  2159  001D4E  E301               	bnc	u1421
  2160  001D50  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  2161  001D52                     u1421:
  2162  001D52  5028               	movf	??___ftmul,w,c
  2163  001D54  6E2B               	movwf	___ftmul@exp,c
  2164  001D56  502B               	movf	___ftmul@exp,w,c
  2165  001D58  A4D8               	btfss	status,2,c
  2166  001D5A  D007               	goto	l1746
  2167  001D5C  0E00               	movlw	0
  2168  001D5E  6E22               	movwf	?___ftmul,c
  2169  001D60  0E00               	movlw	0
  2170  001D62  6E23               	movwf	?___ftmul+1,c
  2171  001D64  0E00               	movlw	0
  2172  001D66  6E24               	movwf	?___ftmul+2,c
  2173  001D68  0012               	return	
  2174  001D6A                     l1746:
  2175  001D6A  C027  F028         	movff	___ftmul@f2+2,??___ftmul
  2176  001D6E  6A29               	clrf	(??___ftmul+1)& (0+255),c
  2177  001D70  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  2178  001D72  3426               	rlcf	___ftmul@f2+1,w,c
  2179  001D74  3628               	rlcf	??___ftmul& (0+255),f,c
  2180  001D76  E301               	bnc	u1441
  2181  001D78  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  2182  001D7A                     u1441:
  2183  001D7A  5028               	movf	??___ftmul,w,c
  2184  001D7C  6E30               	movwf	___ftmul@sign,c
  2185  001D7E  5030               	movf	___ftmul@sign,w,c
  2186  001D80  A4D8               	btfss	status,2,c
  2187  001D82  D007               	goto	l1752
  2188  001D84  0E00               	movlw	0
  2189  001D86  6E22               	movwf	?___ftmul,c
  2190  001D88  0E00               	movlw	0
  2191  001D8A  6E23               	movwf	?___ftmul+1,c
  2192  001D8C  0E00               	movlw	0
  2193  001D8E  6E24               	movwf	?___ftmul+2,c
  2194  001D90  0012               	return	
  2195  001D92                     l1752:
  2196  001D92  5030               	movf	___ftmul@sign,w,c
  2197  001D94  0F7B               	addlw	123
  2198  001D96  262B               	addwf	___ftmul@exp,f,c
  2199  001D98  C024  F030         	movff	___ftmul@f1+2,___ftmul@sign
  2200  001D9C  5027               	movf	___ftmul@f2+2,w,c
  2201  001D9E  1A30               	xorwf	___ftmul@sign,f,c
  2202  001DA0  0E80               	movlw	128
  2203  001DA2  1630               	andwf	___ftmul@sign,f,c
  2204  001DA4  8E23               	bsf	___ftmul@f1+1,7,c
  2205  001DA6  8E26               	bsf	___ftmul@f2+1,7,c
  2206  001DA8  0EFF               	movlw	255
  2207  001DAA  1625               	andwf	___ftmul@f2,f,c
  2208  001DAC  0EFF               	movlw	255
  2209  001DAE  1626               	andwf	___ftmul@f2+1,f,c
  2210  001DB0  0E00               	movlw	0
  2211  001DB2  1627               	andwf	___ftmul@f2+2,f,c
  2212  001DB4  0E00               	movlw	0
  2213  001DB6  6E2C               	movwf	___ftmul@f3_as_product,c
  2214  001DB8  0E00               	movlw	0
  2215  001DBA  6E2D               	movwf	___ftmul@f3_as_product+1,c
  2216  001DBC  0E00               	movlw	0
  2217  001DBE  6E2E               	movwf	___ftmul@f3_as_product+2,c
  2218  001DC0  0E07               	movlw	7
  2219  001DC2  6E2F               	movwf	___ftmul@cntr,c
  2220  001DC4                     l1766:
  2221  001DC4  A022               	btfss	___ftmul@f1,0,c
  2222  001DC6  D006               	goto	l1770
  2223  001DC8  5025               	movf	___ftmul@f2,w,c
  2224  001DCA  262C               	addwf	___ftmul@f3_as_product,f,c
  2225  001DCC  5026               	movf	___ftmul@f2+1,w,c
  2226  001DCE  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  2227  001DD0  5027               	movf	___ftmul@f2+2,w,c
  2228  001DD2  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  2229  001DD4                     l1770:
  2230  001DD4  90D8               	bcf	status,0,c
  2231  001DD6  3224               	rrcf	___ftmul@f1+2,f,c
  2232  001DD8  3223               	rrcf	___ftmul@f1+1,f,c
  2233  001DDA  3222               	rrcf	___ftmul@f1,f,c
  2234  001DDC  90D8               	bcf	status,0,c
  2235  001DDE  3625               	rlcf	___ftmul@f2,f,c
  2236  001DE0  3626               	rlcf	___ftmul@f2+1,f,c
  2237  001DE2  3627               	rlcf	___ftmul@f2+2,f,c
  2238  001DE4  2E2F               	decfsz	___ftmul@cntr,f,c
  2239  001DE6  D7EE               	goto	l1766
  2240  001DE8  0E09               	movlw	9
  2241  001DEA  6E2F               	movwf	___ftmul@cntr,c
  2242  001DEC                     l1776:
  2243  001DEC  A022               	btfss	___ftmul@f1,0,c
  2244  001DEE  D006               	goto	l1780
  2245  001DF0  5025               	movf	___ftmul@f2,w,c
  2246  001DF2  262C               	addwf	___ftmul@f3_as_product,f,c
  2247  001DF4  5026               	movf	___ftmul@f2+1,w,c
  2248  001DF6  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  2249  001DF8  5027               	movf	___ftmul@f2+2,w,c
  2250  001DFA  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  2251  001DFC                     l1780:
  2252  001DFC  90D8               	bcf	status,0,c
  2253  001DFE  3224               	rrcf	___ftmul@f1+2,f,c
  2254  001E00  3223               	rrcf	___ftmul@f1+1,f,c
  2255  001E02  3222               	rrcf	___ftmul@f1,f,c
  2256  001E04  90D8               	bcf	status,0,c
  2257  001E06  322E               	rrcf	___ftmul@f3_as_product+2,f,c
  2258  001E08  322D               	rrcf	___ftmul@f3_as_product+1,f,c
  2259  001E0A  322C               	rrcf	___ftmul@f3_as_product,f,c
  2260  001E0C  2E2F               	decfsz	___ftmul@cntr,f,c
  2261  001E0E  D7EE               	goto	l1776
  2262  001E10  C02C  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  2263  001E14  C02D  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2264  001E18  C02E  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2265  001E1C  C02B  F014         	movff	___ftmul@exp,___ftpack@exp
  2266  001E20  C030  F015         	movff	___ftmul@sign,___ftpack@sign
  2267  001E24  ECD5  F00F         	call	___ftpack	;wreg free
  2268  001E28  C011  F022         	movff	?___ftpack,?___ftmul
  2269  001E2C  C012  F023         	movff	?___ftpack+1,?___ftmul+1
  2270  001E30  C013  F024         	movff	?___ftpack+2,?___ftmul+2
  2271  001E34  0012               	return	
  2272  001E36                     __end_of___ftmul:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           intcon	equ	0xFF2
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           postdec1	equ	0xFE5
  2282                           fsr1l	equ	0xFE1
  2283                           status	equ	0xFD8
  2284                           
  2285 ;; *************** function ___ftadd *****************
  2286 ;; Defined at:
  2287 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  f1              3   48[COMRAM] float 
  2290 ;;  f2              3   51[COMRAM] float 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  exp1            1   59[COMRAM] unsigned char 
  2293 ;;  exp2            1   58[COMRAM] unsigned char 
  2294 ;;  sign            1   57[COMRAM] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  3   48[COMRAM] float 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2304 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;Total ram usage:       12 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    2
  2311 ;; This function calls:
  2312 ;;		___ftpack
  2313 ;; This function is called by:
  2314 ;;		_wheelVelocity
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text4
  2319  0019A6                     __ptext4:
  2320                           	opt stack 0
  2321  0019A6                     ___ftadd:
  2322                           	opt stack 27
  2323                           
  2324                           ;incstack = 0
  2325  0019A6  C033  F037         	movff	___ftadd@f1+2,??___ftadd
  2326  0019AA  6A38               	clrf	(??___ftadd+1)& (0+255),c
  2327  0019AC  6A39               	clrf	(??___ftadd+2)& (0+255),c
  2328  0019AE  3432               	rlcf	___ftadd@f1+1,w,c
  2329  0019B0  3637               	rlcf	??___ftadd& (0+255),f,c
  2330  0019B2  E301               	bnc	u1211
  2331  0019B4  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  2332  0019B6                     u1211:
  2333  0019B6  5037               	movf	??___ftadd,w,c
  2334  0019B8  6E3C               	movwf	___ftadd@exp1,c
  2335  0019BA  C036  F037         	movff	___ftadd@f2+2,??___ftadd
  2336  0019BE  6A38               	clrf	(??___ftadd+1)& (0+255),c
  2337  0019C0  6A39               	clrf	(??___ftadd+2)& (0+255),c
  2338  0019C2  3435               	rlcf	___ftadd@f2+1,w,c
  2339  0019C4  3637               	rlcf	??___ftadd& (0+255),f,c
  2340  0019C6  E301               	bnc	u1221
  2341  0019C8  8038               	bsf	(??___ftadd+1)& (0+255),0,c
  2342  0019CA                     u1221:
  2343  0019CA  5037               	movf	??___ftadd,w,c
  2344  0019CC  6E3B               	movwf	___ftadd@exp2,c
  2345  0019CE  503C               	movf	___ftadd@exp1,w,c
  2346  0019D0  B4D8               	btfsc	status,2,c
  2347  0019D2  D00B               	goto	l509
  2348  0019D4  503B               	movf	___ftadd@exp2,w,c
  2349  0019D6  5C3C               	subwf	___ftadd@exp1,w,c
  2350  0019D8  B0D8               	btfsc	status,0,c
  2351  0019DA  D00E               	goto	l1678
  2352  0019DC  503C               	movf	___ftadd@exp1,w,c
  2353  0019DE  0800               	sublw	0
  2354  0019E0  243B               	addwf	___ftadd@exp2,w,c
  2355  0019E2  6E37               	movwf	??___ftadd& (0+255),c
  2356  0019E4  0E18               	movlw	24
  2357  0019E6  6437               	cpfsgt	??___ftadd,c
  2358  0019E8  D007               	goto	l1678
  2359  0019EA                     l509:
  2360  0019EA  C034  F031         	movff	___ftadd@f2,?___ftadd
  2361  0019EE  C035  F032         	movff	___ftadd@f2+1,?___ftadd+1
  2362  0019F2  C036  F033         	movff	___ftadd@f2+2,?___ftadd+2
  2363  0019F6  0012               	return	
  2364  0019F8                     l1678:
  2365  0019F8  503B               	movf	___ftadd@exp2,w,c
  2366  0019FA  B4D8               	btfsc	status,2,c
  2367  0019FC  D00B               	goto	l513
  2368  0019FE  503C               	movf	___ftadd@exp1,w,c
  2369  001A00  5C3B               	subwf	___ftadd@exp2,w,c
  2370  001A02  B0D8               	btfsc	status,0,c
  2371  001A04  D00E               	goto	l1684
  2372  001A06  503B               	movf	___ftadd@exp2,w,c
  2373  001A08  0800               	sublw	0
  2374  001A0A  243C               	addwf	___ftadd@exp1,w,c
  2375  001A0C  6E37               	movwf	??___ftadd& (0+255),c
  2376  001A0E  0E18               	movlw	24
  2377  001A10  6437               	cpfsgt	??___ftadd,c
  2378  001A12  D007               	goto	l1684
  2379  001A14                     l513:
  2380  001A14  C031  F031         	movff	___ftadd@f1,?___ftadd
  2381  001A18  C032  F032         	movff	___ftadd@f1+1,?___ftadd+1
  2382  001A1C  C033  F033         	movff	___ftadd@f1+2,?___ftadd+2
  2383  001A20  0012               	return	
  2384  001A22                     l1684:
  2385  001A22  0E06               	movlw	6
  2386  001A24  6E3A               	movwf	___ftadd@sign,c
  2387  001A26  BE33               	btfsc	___ftadd@f1+2,7,c
  2388  001A28  8E3A               	bsf	___ftadd@sign,7,c
  2389  001A2A  BE36               	btfsc	___ftadd@f2+2,7,c
  2390  001A2C  8C3A               	bsf	___ftadd@sign,6,c
  2391  001A2E  8E32               	bsf	___ftadd@f1+1,7,c
  2392  001A30  0EFF               	movlw	255
  2393  001A32  1631               	andwf	___ftadd@f1,f,c
  2394  001A34  0EFF               	movlw	255
  2395  001A36  1632               	andwf	___ftadd@f1+1,f,c
  2396  001A38  0E00               	movlw	0
  2397  001A3A  1633               	andwf	___ftadd@f1+2,f,c
  2398  001A3C  8E35               	bsf	___ftadd@f2+1,7,c
  2399  001A3E  0EFF               	movlw	255
  2400  001A40  1634               	andwf	___ftadd@f2,f,c
  2401  001A42  0EFF               	movlw	255
  2402  001A44  1635               	andwf	___ftadd@f2+1,f,c
  2403  001A46  0E00               	movlw	0
  2404  001A48  1636               	andwf	___ftadd@f2+2,f,c
  2405  001A4A  503B               	movf	___ftadd@exp2,w,c
  2406  001A4C  5C3C               	subwf	___ftadd@exp1,w,c
  2407  001A4E  B0D8               	btfsc	status,0,c
  2408  001A50  D01B               	goto	l1710
  2409  001A52                     l1700:
  2410  001A52  90D8               	bcf	status,0,c
  2411  001A54  3634               	rlcf	___ftadd@f2,f,c
  2412  001A56  3635               	rlcf	___ftadd@f2+1,f,c
  2413  001A58  3636               	rlcf	___ftadd@f2+2,f,c
  2414  001A5A  063B               	decf	___ftadd@exp2,f,c
  2415  001A5C  503C               	movf	___ftadd@exp1,w,c
  2416  001A5E  183B               	xorwf	___ftadd@exp2,w,c
  2417  001A60  B4D8               	btfsc	status,2,c
  2418  001A62  D00D               	goto	l1708
  2419  001A64  063A               	decf	___ftadd@sign,f,c
  2420  001A66  C03A  F037         	movff	___ftadd@sign,??___ftadd
  2421  001A6A  0E07               	movlw	7
  2422  001A6C  1637               	andwf	??___ftadd,f,c
  2423  001A6E  B4D8               	btfsc	status,2,c
  2424  001A70  D006               	goto	l1708
  2425  001A72  D7EF               	goto	l1700
  2426  001A74                     l1706:
  2427  001A74  90D8               	bcf	status,0,c
  2428  001A76  3233               	rrcf	___ftadd@f1+2,f,c
  2429  001A78  3232               	rrcf	___ftadd@f1+1,f,c
  2430  001A7A  3231               	rrcf	___ftadd@f1,f,c
  2431  001A7C  2A3C               	incf	___ftadd@exp1,f,c
  2432  001A7E                     l1708:
  2433  001A7E  503B               	movf	___ftadd@exp2,w,c
  2434  001A80  183C               	xorwf	___ftadd@exp1,w,c
  2435  001A82  B4D8               	btfsc	status,2,c
  2436  001A84  D01F               	goto	l524
  2437  001A86  D7F6               	goto	l1706
  2438  001A88                     l1710:
  2439  001A88  503C               	movf	___ftadd@exp1,w,c
  2440  001A8A  5C3B               	subwf	___ftadd@exp2,w,c
  2441  001A8C  B0D8               	btfsc	status,0,c
  2442  001A8E  D01A               	goto	l524
  2443  001A90                     l1712:
  2444  001A90  90D8               	bcf	status,0,c
  2445  001A92  3631               	rlcf	___ftadd@f1,f,c
  2446  001A94  3632               	rlcf	___ftadd@f1+1,f,c
  2447  001A96  3633               	rlcf	___ftadd@f1+2,f,c
  2448  001A98  063C               	decf	___ftadd@exp1,f,c
  2449  001A9A  503C               	movf	___ftadd@exp1,w,c
  2450  001A9C  183B               	xorwf	___ftadd@exp2,w,c
  2451  001A9E  B4D8               	btfsc	status,2,c
  2452  001AA0  D00D               	goto	l1720
  2453  001AA2  063A               	decf	___ftadd@sign,f,c
  2454  001AA4  C03A  F037         	movff	___ftadd@sign,??___ftadd
  2455  001AA8  0E07               	movlw	7
  2456  001AAA  1637               	andwf	??___ftadd,f,c
  2457  001AAC  B4D8               	btfsc	status,2,c
  2458  001AAE  D006               	goto	l1720
  2459  001AB0  D7EF               	goto	l1712
  2460  001AB2                     l1718:
  2461  001AB2  90D8               	bcf	status,0,c
  2462  001AB4  3236               	rrcf	___ftadd@f2+2,f,c
  2463  001AB6  3235               	rrcf	___ftadd@f2+1,f,c
  2464  001AB8  3234               	rrcf	___ftadd@f2,f,c
  2465  001ABA  2A3B               	incf	___ftadd@exp2,f,c
  2466  001ABC                     l1720:
  2467  001ABC  503B               	movf	___ftadd@exp2,w,c
  2468  001ABE  183C               	xorwf	___ftadd@exp1,w,c
  2469  001AC0  A4D8               	btfss	status,2,c
  2470  001AC2  D7F7               	goto	l1718
  2471  001AC4                     l524:
  2472  001AC4  AE3A               	btfss	___ftadd@sign,7,c
  2473  001AC6  D00C               	goto	l533
  2474  001AC8  0EFF               	movlw	255
  2475  001ACA  1A31               	xorwf	___ftadd@f1,f,c
  2476  001ACC  0EFF               	movlw	255
  2477  001ACE  1A32               	xorwf	___ftadd@f1+1,f,c
  2478  001AD0  0EFF               	movlw	255
  2479  001AD2  1A33               	xorwf	___ftadd@f1+2,f,c
  2480  001AD4  0E01               	movlw	1
  2481  001AD6  2631               	addwf	___ftadd@f1,f,c
  2482  001AD8  0E00               	movlw	0
  2483  001ADA  2232               	addwfc	___ftadd@f1+1,f,c
  2484  001ADC  0E00               	movlw	0
  2485  001ADE  2233               	addwfc	___ftadd@f1+2,f,c
  2486  001AE0                     l533:
  2487  001AE0  AC3A               	btfss	___ftadd@sign,6,c
  2488  001AE2  D00C               	goto	l1726
  2489  001AE4  0EFF               	movlw	255
  2490  001AE6  1A34               	xorwf	___ftadd@f2,f,c
  2491  001AE8  0EFF               	movlw	255
  2492  001AEA  1A35               	xorwf	___ftadd@f2+1,f,c
  2493  001AEC  0EFF               	movlw	255
  2494  001AEE  1A36               	xorwf	___ftadd@f2+2,f,c
  2495  001AF0  0E01               	movlw	1
  2496  001AF2  2634               	addwf	___ftadd@f2,f,c
  2497  001AF4  0E00               	movlw	0
  2498  001AF6  2235               	addwfc	___ftadd@f2+1,f,c
  2499  001AF8  0E00               	movlw	0
  2500  001AFA  2236               	addwfc	___ftadd@f2+2,f,c
  2501  001AFC                     l1726:
  2502  001AFC  0E00               	movlw	0
  2503  001AFE  6E3A               	movwf	___ftadd@sign,c
  2504  001B00  5031               	movf	___ftadd@f1,w,c
  2505  001B02  2634               	addwf	___ftadd@f2,f,c
  2506  001B04  5032               	movf	___ftadd@f1+1,w,c
  2507  001B06  2235               	addwfc	___ftadd@f2+1,f,c
  2508  001B08  5033               	movf	___ftadd@f1+2,w,c
  2509  001B0A  2236               	addwfc	___ftadd@f2+2,f,c
  2510  001B0C  AE36               	btfss	___ftadd@f2+2,7,c
  2511  001B0E  D00E               	goto	l1736
  2512  001B10  0EFF               	movlw	255
  2513  001B12  1A34               	xorwf	___ftadd@f2,f,c
  2514  001B14  0EFF               	movlw	255
  2515  001B16  1A35               	xorwf	___ftadd@f2+1,f,c
  2516  001B18  0EFF               	movlw	255
  2517  001B1A  1A36               	xorwf	___ftadd@f2+2,f,c
  2518  001B1C  0E01               	movlw	1
  2519  001B1E  2634               	addwf	___ftadd@f2,f,c
  2520  001B20  0E00               	movlw	0
  2521  001B22  2235               	addwfc	___ftadd@f2+1,f,c
  2522  001B24  0E00               	movlw	0
  2523  001B26  2236               	addwfc	___ftadd@f2+2,f,c
  2524  001B28  0E01               	movlw	1
  2525  001B2A  6E3A               	movwf	___ftadd@sign,c
  2526  001B2C                     l1736:
  2527  001B2C  C034  F011         	movff	___ftadd@f2,___ftpack@arg
  2528  001B30  C035  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
  2529  001B34  C036  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
  2530  001B38  C03C  F014         	movff	___ftadd@exp1,___ftpack@exp
  2531  001B3C  C03A  F015         	movff	___ftadd@sign,___ftpack@sign
  2532  001B40  ECD5  F00F         	call	___ftpack	;wreg free
  2533  001B44  C011  F031         	movff	?___ftpack,?___ftadd
  2534  001B48  C012  F032         	movff	?___ftpack+1,?___ftadd+1
  2535  001B4C  C013  F033         	movff	?___ftpack+2,?___ftadd+2
  2536  001B50  0012               	return	
  2537  001B52                     __end_of___ftadd:
  2538                           	opt stack 0
  2539                           tblptru	equ	0xFF8
  2540                           tblptrh	equ	0xFF7
  2541                           tblptrl	equ	0xFF6
  2542                           tablat	equ	0xFF5
  2543                           intcon	equ	0xFF2
  2544                           postinc0	equ	0xFEE
  2545                           wreg	equ	0xFE8
  2546                           postdec1	equ	0xFE5
  2547                           fsr1l	equ	0xFE1
  2548                           status	equ	0xFD8
  2549                           
  2550 ;; *************** function ___awtoft *****************
  2551 ;; Defined at:
  2552 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  c               2   24[COMRAM] int 
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;  sign            1   27[COMRAM] unsigned char 
  2557 ;; Return value:  Size  Location     Type
  2558 ;;                  3   24[COMRAM] float 
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0, cstack
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2566 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;Total ram usage:        4 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    2
  2573 ;; This function calls:
  2574 ;;		___ftpack
  2575 ;; This function is called by:
  2576 ;;		_wheelVelocity
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text5
  2581  002216                     __ptext5:
  2582                           	opt stack 0
  2583  002216                     ___awtoft:
  2584                           	opt stack 27
  2585                           
  2586                           ;incstack = 0
  2587  002216  0E00               	movlw	0
  2588  002218  6E1C               	movwf	___awtoft@sign,c
  2589  00221A  AE1A               	btfss	___awtoft@c+1,7,c
  2590  00221C  D006               	goto	l1796
  2591  00221E  6C19               	negf	___awtoft@c,c
  2592  002220  1E1A               	comf	___awtoft@c+1,f,c
  2593  002222  B0D8               	btfsc	status,0,c
  2594  002224  2A1A               	incf	___awtoft@c+1,f,c
  2595  002226  0E01               	movlw	1
  2596  002228  6E1C               	movwf	___awtoft@sign,c
  2597  00222A                     l1796:
  2598  00222A  C019  F011         	movff	___awtoft@c,___ftpack@arg
  2599  00222E  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  2600  002232  6A13               	clrf	___ftpack@arg+2,c
  2601  002234  0E8E               	movlw	142
  2602  002236  6E14               	movwf	___ftpack@exp,c
  2603  002238  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  2604  00223C  ECD5  F00F         	call	___ftpack	;wreg free
  2605  002240  C011  F019         	movff	?___ftpack,?___awtoft
  2606  002244  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  2607  002248  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  2608  00224C  0012               	return	
  2609  00224E                     __end_of___awtoft:
  2610                           	opt stack 0
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           intcon	equ	0xFF2
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           postdec1	equ	0xFE5
  2619                           fsr1l	equ	0xFE1
  2620                           status	equ	0xFD8
  2621                           
  2622 ;; *************** function _printf *****************
  2623 ;; Defined at:
  2624 ;;		line 464 in file "/Applications/microchip/xc8/v1.36/sources/common/doprnt.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2627 ;;		 -> STR_2(3), STR_1(11), 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  tmpval          4    0        struct .
  2630 ;;  cp              3    0        PTR const unsigned char 
  2631 ;;  width           2   42[COMRAM] int 
  2632 ;;  val             2   40[COMRAM] unsigned int 
  2633 ;;  ap              2   36[COMRAM] PTR void [1]
  2634 ;;		 -> ?_printf(2), 
  2635 ;;  len             2    0        unsigned int 
  2636 ;;  c               1   44[COMRAM] char 
  2637 ;;  flag            1   39[COMRAM] unsigned char 
  2638 ;;  prec            1   38[COMRAM] char 
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  2   28[COMRAM] int 
  2641 ;; Registers used:
  2642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2648 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;Total ram usage:       17 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    4
  2655 ;; This function calls:
  2656 ;;		___lwdiv
  2657 ;;		___lwmod
  2658 ;;		___wmul
  2659 ;;		_isdigit
  2660 ;;		_putch
  2661 ;; This function is called by:
  2662 ;;		_main
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text6
  2667  0017A6                     __ptext6:
  2668                           	opt stack 0
  2669  0017A6                     _printf:
  2670                           	opt stack 26
  2671                           
  2672                           ;doprnt.c: 466: va_list ap;
  2673                           ;doprnt.c: 499: signed char c;
  2674                           ;doprnt.c: 501: int width;
  2675                           ;doprnt.c: 506: signed char prec;
  2676                           ;doprnt.c: 508: unsigned char flag;
  2677                           ;doprnt.c: 523: union {
  2678                           ;doprnt.c: 524: unsigned long vd;
  2679                           ;doprnt.c: 525: double integ;
  2680                           ;doprnt.c: 526: } tmpval;
  2681                           ;doprnt.c: 528: unsigned int val;
  2682                           ;doprnt.c: 529: unsigned len;
  2683                           ;doprnt.c: 530: const char * cp;
  2684                           ;doprnt.c: 533: *ap = __va_start();
  2685                           
  2686                           ;incstack = 0
  2687  0017A6  0E1F               	movlw	low (?_printf+2)
  2688  0017A8  6E25               	movwf	printf@ap,c
  2689  0017AA  0E00               	movlw	high (?_printf+2)
  2690  0017AC  6E26               	movwf	printf@ap+1,c
  2691                           
  2692                           ;doprnt.c: 536: while(c = *f++) {
  2693  0017AE  D0EE               	goto	l2010
  2694  0017B0                     l1934:
  2695                           
  2696                           ;doprnt.c: 538: if(c != '%')
  2697  0017B0  0E25               	movlw	37
  2698  0017B2  182D               	xorwf	printf@c,w,c
  2699  0017B4  B4D8               	btfsc	status,2,c
  2700  0017B6  D004               	goto	l1938
  2701                           
  2702                           ;doprnt.c: 540: {
  2703                           ;doprnt.c: 541: (putch(c) );
  2704  0017B8  502D               	movf	printf@c,w,c
  2705  0017BA  EC6A  F011         	call	_putch
  2706                           
  2707                           ;doprnt.c: 542: continue;
  2708  0017BE  D0E6               	goto	l2010
  2709  0017C0                     l1938:
  2710                           
  2711                           ;doprnt.c: 543: }
  2712                           ;doprnt.c: 546: width = 0;
  2713  0017C0  0E00               	movlw	0
  2714  0017C2  6E2C               	movwf	printf@width+1,c
  2715  0017C4  0E00               	movlw	0
  2716  0017C6  6E2B               	movwf	printf@width,c
  2717                           
  2718                           ;doprnt.c: 548: flag = 0;
  2719  0017C8  0E00               	movlw	0
  2720  0017CA  6E28               	movwf	printf@flag,c
  2721                           
  2722                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2723  0017CC  C01D  FFF6         	movff	printf@f,tblptrl
  2724  0017D0  C01E  FFF7         	movff	printf@f+1,tblptrh
  2725  0017D4                     	if	0	;tblptru may be non-zero
  2726  0017D4                     	endif
  2727  0017D4                     	if	0	;tblptru may be non-zero
  2728  0017D4                     	endif
  2729  0017D4  0008               	tblrd		*
  2730  0017D6  50F5               	movf	tablat,w,c
  2731  0017D8  EC3A  F011         	call	_isdigit
  2732  0017DC  A0D8               	btfss	status,0,c
  2733  0017DE  D032               	goto	l1954
  2734                           
  2735                           ;doprnt.c: 598: width = 0;
  2736  0017E0  0E00               	movlw	0
  2737  0017E2  6E2C               	movwf	printf@width+1,c
  2738  0017E4  0E00               	movlw	0
  2739  0017E6  6E2B               	movwf	printf@width,c
  2740  0017E8                     l1944:
  2741                           
  2742                           ;doprnt.c: 600: width *= 10;
  2743  0017E8  C02B  F011         	movff	printf@width,___wmul@multiplier
  2744  0017EC  C02C  F012         	movff	printf@width+1,___wmul@multiplier+1
  2745  0017F0  0E00               	movlw	0
  2746  0017F2  6E14               	movwf	___wmul@multiplicand+1,c
  2747  0017F4  0E0A               	movlw	10
  2748  0017F6  6E13               	movwf	___wmul@multiplicand,c
  2749  0017F8  EC27  F011         	call	___wmul	;wreg free
  2750  0017FC  C011  F02B         	movff	?___wmul,printf@width
  2751  001800  C012  F02C         	movff	?___wmul+1,printf@width+1
  2752                           
  2753                           ;doprnt.c: 601: width += *f++ - '0';
  2754  001804  0ED0               	movlw	208
  2755  001806  6E21               	movwf	??_printf& (0+255),c
  2756  001808  0EFF               	movlw	255
  2757  00180A  6E22               	movwf	(??_printf+1)& (0+255),c
  2758  00180C  C01D  FFF6         	movff	printf@f,tblptrl
  2759  001810  C01E  FFF7         	movff	printf@f+1,tblptrh
  2760  001814                     	if	0	;tblptru may be non-zero
  2761  001814                     	endif
  2762  001814                     	if	0	;tblptru may be non-zero
  2763  001814                     	endif
  2764  001814  0008               	tblrd		*
  2765  001816  50F5               	movf	tablat,w,c
  2766  001818  6E23               	movwf	(??_printf+2)& (0+255),c
  2767  00181A  6A24               	clrf	(??_printf+3)& (0+255),c
  2768  00181C  5021               	movf	??_printf,w,c
  2769  00181E  2623               	addwf	??_printf+2,f,c
  2770  001820  5022               	movf	??_printf+1,w,c
  2771  001822  2224               	addwfc	??_printf+3,f,c
  2772  001824  5023               	movf	??_printf+2,w,c
  2773  001826  262B               	addwf	printf@width,f,c
  2774  001828  5024               	movf	??_printf+3,w,c
  2775  00182A  222C               	addwfc	printf@width+1,f,c
  2776  00182C  4A1D               	infsnz	printf@f,f,c
  2777  00182E  2A1E               	incf	printf@f+1,f,c
  2778                           
  2779                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2780  001830  C01D  FFF6         	movff	printf@f,tblptrl
  2781  001834  C01E  FFF7         	movff	printf@f+1,tblptrh
  2782  001838                     	if	0	;tblptru may be non-zero
  2783  001838                     	endif
  2784  001838                     	if	0	;tblptru may be non-zero
  2785  001838                     	endif
  2786  001838  0008               	tblrd		*
  2787  00183A  50F5               	movf	tablat,w,c
  2788  00183C  EC3A  F011         	call	_isdigit
  2789  001840  B0D8               	btfsc	status,0,c
  2790  001842  D7D2               	goto	l1944
  2791  001844                     l1954:
  2792  001844  C01D  FFF6         	movff	printf@f,tblptrl
  2793  001848  C01E  FFF7         	movff	printf@f+1,tblptrh
  2794  00184C  4A1D               	infsnz	printf@f,f,c
  2795  00184E  2A1E               	incf	printf@f+1,f,c
  2796  001850                     	if	0	;tblptru may be non-zero
  2797  001850                     	endif
  2798  001850                     	if	0	;tblptru may be non-zero
  2799  001850                     	endif
  2800  001850  0008               	tblrd		*
  2801  001852  CFF5 F02D          	movff	tablat,printf@c
  2802  001856  502D               	movf	printf@c,w,c
  2803                           
  2804                           ; Switch size 1, requested type "space"
  2805                           ; Number of cases is 3, Range of values is 0 to 105
  2806                           ; switch strategies available:
  2807                           ; Name         Instructions Cycles
  2808                           ; simple_byte           10     6 (average)
  2809                           ;	Chosen strategy is simple_byte
  2810  001858  0A00               	xorlw	0	; case 0
  2811  00185A  B4D8               	btfsc	status,2,c
  2812  00185C  0012               	return	
  2813  00185E  0A64               	xorlw	100	; case 100
  2814  001860  B4D8               	btfsc	status,2,c
  2815  001862  D003               	goto	l1956
  2816  001864  0A0D               	xorlw	13	; case 105
  2817  001866  A4D8               	btfss	status,2,c
  2818  001868  D091               	goto	l2010
  2819  00186A                     l1956:
  2820                           
  2821                           ;doprnt.c: 1253: {
  2822                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2823  00186A  C025  FFD9         	movff	printf@ap,fsr2l
  2824  00186E  C026  FFDA         	movff	printf@ap+1,fsr2h
  2825  001872  CFDE F029          	movff	postinc2,printf@val
  2826  001876  CFDD F02A          	movff	postdec2,printf@val+1
  2827  00187A  0E02               	movlw	2
  2828  00187C  2625               	addwf	printf@ap,f,c
  2829  00187E  0E00               	movlw	0
  2830  001880  2226               	addwfc	printf@ap+1,f,c
  2831                           
  2832                           ;doprnt.c: 1261: if((int)val < 0) {
  2833  001882  AE2A               	btfss	printf@val+1,7,c
  2834  001884  D006               	goto	l1966
  2835                           
  2836                           ;doprnt.c: 1262: flag |= 0x03;
  2837  001886  0E03               	movlw	3
  2838  001888  1228               	iorwf	printf@flag,f,c
  2839                           
  2840                           ;doprnt.c: 1263: val = -val;
  2841  00188A  6C29               	negf	printf@val,c
  2842  00188C  1E2A               	comf	printf@val+1,f,c
  2843  00188E  B0D8               	btfsc	status,0,c
  2844  001890  2A2A               	incf	printf@val+1,f,c
  2845  001892                     l1966:
  2846                           
  2847                           ;doprnt.c: 1264: }
  2848                           ;doprnt.c: 1266: }
  2849                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2850  001892  0E01               	movlw	1
  2851  001894  6E2D               	movwf	printf@c,c
  2852  001896                     l1968:
  2853  001896  0E05               	movlw	5
  2854  001898  182D               	xorwf	printf@c,w,c
  2855  00189A  B4D8               	btfsc	status,2,c
  2856  00189C  D012               	goto	l1980
  2857                           
  2858                           ;doprnt.c: 1306: if(val < dpowers[c])
  2859  00189E  502D               	movf	printf@c,w,c
  2860  0018A0  0D02               	mullw	2
  2861  0018A2  0E01               	movlw	low _dpowers
  2862  0018A4  24F3               	addwf	prodl,w,c
  2863  0018A6  6EF6               	movwf	tblptrl,c
  2864  0018A8  0E10               	movlw	high _dpowers
  2865  0018AA  20F4               	addwfc	prodh,w,c
  2866  0018AC  6EF7               	movwf	tblptrh,c
  2867  0018AE                     	if	0	;There are less than 3 active tblptr bytes
  2868  0018AE                     	endif
  2869  0018AE  0009               	tblrd		*+
  2870  0018B0  50F5               	movf	tablat,w,c
  2871  0018B2  5C29               	subwf	printf@val,w,c
  2872  0018B4  0009               	tblrd		*+
  2873  0018B6  50F5               	movf	tablat,w,c
  2874  0018B8  582A               	subwfb	printf@val+1,w,c
  2875  0018BA  A0D8               	btfss	status,0,c
  2876  0018BC  D002               	goto	l1980
  2877                           
  2878                           ;doprnt.c: 1307: break;
  2879  0018BE  2A2D               	incf	printf@c,f,c
  2880  0018C0  D7EA               	goto	l1968
  2881  0018C2                     l1980:
  2882                           
  2883                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2884  0018C2  502B               	movf	printf@width,w,c
  2885  0018C4  102C               	iorwf	printf@width+1,w,c
  2886  0018C6  B4D8               	btfsc	status,2,c
  2887  0018C8  D009               	goto	l1986
  2888  0018CA  C028  F021         	movff	printf@flag,??_printf
  2889  0018CE  0E03               	movlw	3
  2890  0018D0  1621               	andwf	??_printf,f,c
  2891  0018D2  B4D8               	btfsc	status,2,c
  2892  0018D4  D003               	goto	l1986
  2893                           
  2894                           ;doprnt.c: 1346: width--;
  2895  0018D6  062B               	decf	printf@width,f,c
  2896  0018D8  A0D8               	btfss	status,0,c
  2897  0018DA  062C               	decf	printf@width+1,f,c
  2898  0018DC                     l1986:
  2899                           
  2900                           ;doprnt.c: 1381: if(width > c)
  2901  0018DC  0E80               	movlw	128
  2902  0018DE  BE2D               	btfsc	printf@c,7,c
  2903  0018E0  0E7F               	movlw	127
  2904  0018E2  6E21               	movwf	??_printf& (0+255),c
  2905  0018E4  502B               	movf	printf@width,w,c
  2906  0018E6  5C2D               	subwf	printf@c,w,c
  2907  0018E8  502C               	movf	printf@width+1,w,c
  2908  0018EA  0A80               	xorlw	128
  2909  0018EC  5821               	subwfb	??_printf& (0+255),w,c
  2910  0018EE  B0D8               	btfsc	status,0,c
  2911  0018F0  D007               	goto	l1990
  2912                           
  2913                           ;doprnt.c: 1382: width -= c;
  2914  0018F2  502D               	movf	printf@c,w,c
  2915  0018F4  5E2B               	subwf	printf@width,f,c
  2916  0018F6  0E00               	movlw	0
  2917  0018F8  BE2D               	btfsc	printf@c,7,c
  2918  0018FA  0EFF               	movlw	255
  2919  0018FC  5A2C               	subwfb	printf@width+1,f,c
  2920  0018FE  D004               	goto	l1992
  2921  001900                     l1990:
  2922                           
  2923                           ;doprnt.c: 1383: else
  2924                           ;doprnt.c: 1384: width = 0;
  2925  001900  0E00               	movlw	0
  2926  001902  6E2C               	movwf	printf@width+1,c
  2927  001904  0E00               	movlw	0
  2928  001906  6E2B               	movwf	printf@width,c
  2929  001908                     l1992:
  2930                           
  2931                           ;doprnt.c: 1422: {
  2932                           ;doprnt.c: 1424: if(width
  2933                           ;doprnt.c: 1428: )
  2934  001908  502B               	movf	printf@width,w,c
  2935  00190A  102C               	iorwf	printf@width+1,w,c
  2936  00190C  B4D8               	btfsc	status,2,c
  2937  00190E  D00A               	goto	l1998
  2938  001910                     l1994:
  2939                           
  2940                           ;doprnt.c: 1430: (putch(' ') );
  2941  001910  0E20               	movlw	32
  2942  001912  EC6A  F011         	call	_putch
  2943                           
  2944                           ;doprnt.c: 1431: while(--width);
  2945  001916  062B               	decf	printf@width,f,c
  2946  001918  A0D8               	btfss	status,0,c
  2947  00191A  062C               	decf	printf@width+1,f,c
  2948  00191C  502B               	movf	printf@width,w,c
  2949  00191E  102C               	iorwf	printf@width+1,w,c
  2950  001920  A4D8               	btfss	status,2,c
  2951  001922  D7F6               	goto	l1994
  2952  001924                     l1998:
  2953                           
  2954                           ;doprnt.c: 1438: if(flag & 0x03)
  2955  001924  C028  F021         	movff	printf@flag,??_printf
  2956  001928  0E03               	movlw	3
  2957  00192A  1621               	andwf	??_printf,f,c
  2958  00192C  B4D8               	btfsc	status,2,c
  2959  00192E  D003               	goto	l2002
  2960                           
  2961                           ;doprnt.c: 1439: (putch('-') );
  2962  001930  0E2D               	movlw	45
  2963  001932  EC6A  F011         	call	_putch
  2964  001936                     l2002:
  2965                           
  2966                           ;doprnt.c: 1469: }
  2967                           ;doprnt.c: 1472: prec = c;
  2968  001936  C02D  F027         	movff	printf@c,printf@prec
  2969                           
  2970                           ;doprnt.c: 1474: while(prec--) {
  2971  00193A  D024               	goto	l2008
  2972  00193C                     l2004:
  2973                           
  2974                           ;doprnt.c: 1478: {
  2975                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2976  00193C  5027               	movf	printf@prec,w,c
  2977  00193E  0D02               	mullw	2
  2978  001940  0E01               	movlw	low _dpowers
  2979  001942  24F3               	addwf	prodl,w,c
  2980  001944  6EF6               	movwf	tblptrl,c
  2981  001946  0E10               	movlw	high _dpowers
  2982  001948  20F4               	addwfc	prodh,w,c
  2983  00194A  6EF7               	movwf	tblptrh,c
  2984  00194C                     	if	0	;There are less than 3 active tblptr bytes
  2985  00194C                     	endif
  2986  00194C  0009               	tblrd		*+
  2987  00194E  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2988  001952  000A               	tblrd		*-
  2989  001954  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2990  001958  C029  F011         	movff	printf@val,___lwdiv@dividend
  2991  00195C  C02A  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2992  001960  ECA2  F010         	call	___lwdiv	;wreg free
  2993  001964  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2994  001968  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2995  00196C  0E00               	movlw	0
  2996  00196E  6E1B               	movwf	___lwmod@divisor+1,c
  2997  001970  0E0A               	movlw	10
  2998  001972  6E1A               	movwf	___lwmod@divisor,c
  2999  001974  ECCB  F010         	call	___lwmod	;wreg free
  3000  001978  5018               	movf	?___lwmod,w,c
  3001  00197A  0F30               	addlw	48
  3002  00197C  6E2D               	movwf	printf@c,c
  3003                           
  3004                           ;doprnt.c: 1523: }
  3005                           ;doprnt.c: 1524: (putch(c) );
  3006  00197E  502D               	movf	printf@c,w,c
  3007  001980  EC6A  F011         	call	_putch
  3008  001984                     l2008:
  3009  001984  0627               	decf	printf@prec,f,c
  3010  001986  2827               	incf	printf@prec,w,c
  3011  001988  A4D8               	btfss	status,2,c
  3012  00198A  D7D8               	goto	l2004
  3013  00198C                     l2010:
  3014  00198C  C01D  FFF6         	movff	printf@f,tblptrl
  3015  001990  C01E  FFF7         	movff	printf@f+1,tblptrh
  3016  001994  4A1D               	infsnz	printf@f,f,c
  3017  001996  2A1E               	incf	printf@f+1,f,c
  3018  001998                     	if	0	;tblptru may be non-zero
  3019  001998                     	endif
  3020  001998                     	if	0	;tblptru may be non-zero
  3021  001998                     	endif
  3022  001998  0008               	tblrd		*
  3023  00199A  CFF5 F02D          	movff	tablat,printf@c
  3024  00199E  502D               	movf	printf@c,w,c
  3025  0019A0  B4D8               	btfsc	status,2,c
  3026  0019A2  0012               	return	
  3027  0019A4  D705               	goto	l1934
  3028  0019A6                     __end_of_printf:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           postinc0	equ	0xFEE
  3038                           wreg	equ	0xFE8
  3039                           postdec1	equ	0xFE5
  3040                           fsr1l	equ	0xFE1
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _putch *****************
  3048 ;; Defined at:
  3049 ;;		line 12 in file "printfLib.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  data            1    wreg     unsigned char 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  data            1   18[COMRAM] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;Total ram usage:        1 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    3
  3070 ;; This function calls:
  3071 ;;		_LCDwrite
  3072 ;; This function is called by:
  3073 ;;		_printf
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text7
  3078  0022D4                     __ptext7:
  3079                           	opt stack 0
  3080  0022D4                     _putch:
  3081                           	opt stack 26
  3082                           
  3083                           ;incstack = 0
  3084                           ;putch@data stored from wreg
  3085  0022D4  6E13               	movwf	putch@data,c
  3086                           
  3087                           ;printfLib.c: 13: LCDwrite(data);
  3088  0022D6  5013               	movf	putch@data,w,c
  3089  0022D8  EC53  F011         	call	_LCDwrite
  3090  0022DC  0012               	return		;funcret
  3091  0022DE                     __end_of_putch:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           intcon	equ	0xFF2
  3100                           postinc0	equ	0xFEE
  3101                           wreg	equ	0xFE8
  3102                           postdec1	equ	0xFE5
  3103                           fsr1l	equ	0xFE1
  3104                           postinc2	equ	0xFDE
  3105                           postdec2	equ	0xFDD
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function _LCDwrite *****************
  3111 ;; Defined at:
  3112 ;;		line 118 in file "lcd.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  input           1    wreg     unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  input           1   17[COMRAM] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;Total ram usage:        1 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    2
  3133 ;; This function calls:
  3134 ;;		_LCDcheckBF
  3135 ;;		_LCDcmd
  3136 ;; This function is called by:
  3137 ;;		_putch
  3138 ;;		_LCDputs
  3139 ;;		_LCDwriteLineOne
  3140 ;;		_LCDwriteLineTwo
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text8
  3145  0022A6                     __ptext8:
  3146                           	opt stack 0
  3147  0022A6                     _LCDwrite:
  3148                           	opt stack 26
  3149                           
  3150                           ;incstack = 0
  3151                           ;LCDwrite@input stored from wreg
  3152  0022A6  6E12               	movwf	LCDwrite@input,c
  3153                           
  3154                           ;lcd.c: 120: LATEbits.LATE0 = 1;
  3155  0022A8  808D               	bsf	3981,0,c	;volatile
  3156                           
  3157                           ;lcd.c: 121: LATEbits.LATE1 = 0;
  3158  0022AA  928D               	bcf	3981,1,c	;volatile
  3159                           
  3160                           ;lcd.c: 122: LCDcmd(input);
  3161  0022AC  5012               	movf	LCDwrite@input,w,c
  3162  0022AE  EC64  F011         	call	_LCDcmd
  3163                           
  3164                           ;lcd.c: 123: LCDcheckBF();
  3165  0022B2  EC49  F011         	call	_LCDcheckBF	;wreg free
  3166  0022B6  0012               	return		;funcret
  3167  0022B8                     __end_of_LCDwrite:
  3168                           	opt stack 0
  3169                           tblptru	equ	0xFF8
  3170                           tblptrh	equ	0xFF7
  3171                           tblptrl	equ	0xFF6
  3172                           tablat	equ	0xFF5
  3173                           prodh	equ	0xFF4
  3174                           prodl	equ	0xFF3
  3175                           intcon	equ	0xFF2
  3176                           postinc0	equ	0xFEE
  3177                           wreg	equ	0xFE8
  3178                           postdec1	equ	0xFE5
  3179                           fsr1l	equ	0xFE1
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _isdigit *****************
  3187 ;; Defined at:
  3188 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/isdigit.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  c               1    wreg     unsigned char 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  c               1   18[COMRAM] unsigned char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;		None               void
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        3 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    1
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_printf
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text9
  3217  002274                     __ptext9:
  3218                           	opt stack 0
  3219  002274                     _isdigit:
  3220                           	opt stack 28
  3221                           
  3222                           ;incstack = 0
  3223                           ;isdigit@c stored from wreg
  3224  002274  6E13               	movwf	isdigit@c,c
  3225  002276  0E00               	movlw	0
  3226  002278  6E12               	movwf	_isdigit$1408,c
  3227  00227A  0E3A               	movlw	58
  3228  00227C  6013               	cpfslt	isdigit@c,c
  3229  00227E  D005               	goto	l1660
  3230  002280  0E2F               	movlw	47
  3231  002282  6413               	cpfsgt	isdigit@c,c
  3232  002284  D002               	goto	l1660
  3233  002286  0E01               	movlw	1
  3234  002288  6E12               	movwf	_isdigit$1408,c
  3235  00228A                     l1660:
  3236  00228A  C012  F011         	movff	_isdigit$1408,??_isdigit
  3237  00228E  3011               	rrcf	??_isdigit,w,c
  3238  002290  0012               	return	
  3239  002292                     __end_of_isdigit:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1l	equ	0xFE1
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258 ;; *************** function ___wmul *****************
  3259 ;; Defined at:
  3260 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  multiplier      2   16[COMRAM] unsigned int 
  3263 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  product         2   20[COMRAM] unsigned int 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  2   16[COMRAM] unsigned int 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0, prodl, prodh
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;Total ram usage:        6 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    1
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_printf
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text10
  3290  00224E                     __ptext10:
  3291                           	opt stack 0
  3292  00224E                     ___wmul:
  3293                           	opt stack 28
  3294                           
  3295                           ;incstack = 0
  3296  00224E  5011               	movf	___wmul@multiplier,w,c
  3297  002250  0213               	mulwf	___wmul@multiplicand,c
  3298  002252  CFF3 F015          	movff	prodl,___wmul@product
  3299  002256  CFF4 F016          	movff	prodh,___wmul@product+1
  3300  00225A  5011               	movf	___wmul@multiplier,w,c
  3301  00225C  0214               	mulwf	___wmul@multiplicand+1,c
  3302  00225E  50F3               	movf	prodl,w,c
  3303  002260  2616               	addwf	___wmul@product+1,f,c
  3304  002262  5012               	movf	___wmul@multiplier+1,w,c
  3305  002264  0213               	mulwf	___wmul@multiplicand,c
  3306  002266  50F3               	movf	prodl,w,c
  3307  002268  2616               	addwf	___wmul@product+1,f,c
  3308  00226A  C015  F011         	movff	___wmul@product,?___wmul
  3309  00226E  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3310  002272  0012               	return	
  3311  002274                     __end_of___wmul:
  3312                           	opt stack 0
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           intcon	equ	0xFF2
  3320                           postinc0	equ	0xFEE
  3321                           wreg	equ	0xFE8
  3322                           postdec1	equ	0xFE5
  3323                           fsr1l	equ	0xFE1
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function ___lwmod *****************
  3331 ;; Defined at:
  3332 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  dividend        2   23[COMRAM] unsigned int 
  3335 ;;  divisor         2   25[COMRAM] unsigned int 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;  counter         1   27[COMRAM] unsigned char 
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  2   23[COMRAM] unsigned int 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2, status,0
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;Total ram usage:        5 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    1
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_printf
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text11
  3362  002196                     __ptext11:
  3363                           	opt stack 0
  3364  002196                     ___lwmod:
  3365                           	opt stack 28
  3366                           
  3367                           ;incstack = 0
  3368  002196  501A               	movf	___lwmod@divisor,w,c
  3369  002198  101B               	iorwf	___lwmod@divisor+1,w,c
  3370  00219A  B4D8               	btfsc	status,2,c
  3371  00219C  D018               	goto	l679
  3372  00219E  0E01               	movlw	1
  3373  0021A0  6E1C               	movwf	___lwmod@counter,c
  3374  0021A2  D004               	goto	l1874
  3375  0021A4                     l1872:
  3376  0021A4  90D8               	bcf	status,0,c
  3377  0021A6  361A               	rlcf	___lwmod@divisor,f,c
  3378  0021A8  361B               	rlcf	___lwmod@divisor+1,f,c
  3379  0021AA  2A1C               	incf	___lwmod@counter,f,c
  3380  0021AC                     l1874:
  3381  0021AC  AE1B               	btfss	___lwmod@divisor+1,7,c
  3382  0021AE  D7FA               	goto	l1872
  3383  0021B0                     l1876:
  3384  0021B0  501A               	movf	___lwmod@divisor,w,c
  3385  0021B2  5C18               	subwf	___lwmod@dividend,w,c
  3386  0021B4  501B               	movf	___lwmod@divisor+1,w,c
  3387  0021B6  5819               	subwfb	___lwmod@dividend+1,w,c
  3388  0021B8  A0D8               	btfss	status,0,c
  3389  0021BA  D004               	goto	l1880
  3390  0021BC  501A               	movf	___lwmod@divisor,w,c
  3391  0021BE  5E18               	subwf	___lwmod@dividend,f,c
  3392  0021C0  501B               	movf	___lwmod@divisor+1,w,c
  3393  0021C2  5A19               	subwfb	___lwmod@dividend+1,f,c
  3394  0021C4                     l1880:
  3395  0021C4  90D8               	bcf	status,0,c
  3396  0021C6  321B               	rrcf	___lwmod@divisor+1,f,c
  3397  0021C8  321A               	rrcf	___lwmod@divisor,f,c
  3398  0021CA  2E1C               	decfsz	___lwmod@counter,f,c
  3399  0021CC  D7F1               	goto	l1876
  3400  0021CE                     l679:
  3401  0021CE  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3402  0021D2  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3403  0021D6  0012               	return		;funcret
  3404  0021D8                     __end_of___lwmod:
  3405                           	opt stack 0
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           intcon	equ	0xFF2
  3413                           postinc0	equ	0xFEE
  3414                           wreg	equ	0xFE8
  3415                           postdec1	equ	0xFE5
  3416                           fsr1l	equ	0xFE1
  3417                           postinc2	equ	0xFDE
  3418                           postdec2	equ	0xFDD
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function ___lwdiv *****************
  3424 ;; Defined at:
  3425 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  dividend        2   16[COMRAM] unsigned int 
  3428 ;;  divisor         2   18[COMRAM] unsigned int 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  quotient        2   20[COMRAM] unsigned int 
  3431 ;;  counter         1   22[COMRAM] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  2   16[COMRAM] unsigned int 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3441 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;Total ram usage:        7 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    1
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_printf
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text12
  3456  002144                     __ptext12:
  3457                           	opt stack 0
  3458  002144                     ___lwdiv:
  3459                           	opt stack 28
  3460                           
  3461                           ;incstack = 0
  3462  002144  0E00               	movlw	0
  3463  002146  6E16               	movwf	___lwdiv@quotient+1,c
  3464  002148  0E00               	movlw	0
  3465  00214A  6E15               	movwf	___lwdiv@quotient,c
  3466  00214C  5013               	movf	___lwdiv@divisor,w,c
  3467  00214E  1014               	iorwf	___lwdiv@divisor+1,w,c
  3468  002150  B4D8               	btfsc	status,2,c
  3469  002152  D01C               	goto	l669
  3470  002154  0E01               	movlw	1
  3471  002156  6E17               	movwf	___lwdiv@counter,c
  3472  002158  D004               	goto	l1854
  3473  00215A                     l1852:
  3474  00215A  90D8               	bcf	status,0,c
  3475  00215C  3613               	rlcf	___lwdiv@divisor,f,c
  3476  00215E  3614               	rlcf	___lwdiv@divisor+1,f,c
  3477  002160  2A17               	incf	___lwdiv@counter,f,c
  3478  002162                     l1854:
  3479  002162  AE14               	btfss	___lwdiv@divisor+1,7,c
  3480  002164  D7FA               	goto	l1852
  3481  002166                     l1856:
  3482  002166  90D8               	bcf	status,0,c
  3483  002168  3615               	rlcf	___lwdiv@quotient,f,c
  3484  00216A  3616               	rlcf	___lwdiv@quotient+1,f,c
  3485  00216C  5013               	movf	___lwdiv@divisor,w,c
  3486  00216E  5C11               	subwf	___lwdiv@dividend,w,c
  3487  002170  5014               	movf	___lwdiv@divisor+1,w,c
  3488  002172  5812               	subwfb	___lwdiv@dividend+1,w,c
  3489  002174  A0D8               	btfss	status,0,c
  3490  002176  D005               	goto	l1864
  3491  002178  5013               	movf	___lwdiv@divisor,w,c
  3492  00217A  5E11               	subwf	___lwdiv@dividend,f,c
  3493  00217C  5014               	movf	___lwdiv@divisor+1,w,c
  3494  00217E  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3495  002180  8015               	bsf	___lwdiv@quotient,0,c
  3496  002182                     l1864:
  3497  002182  90D8               	bcf	status,0,c
  3498  002184  3214               	rrcf	___lwdiv@divisor+1,f,c
  3499  002186  3213               	rrcf	___lwdiv@divisor,f,c
  3500  002188  2E17               	decfsz	___lwdiv@counter,f,c
  3501  00218A  D7ED               	goto	l1856
  3502  00218C                     l669:
  3503  00218C  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  3504  002190  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3505  002194  0012               	return		;funcret
  3506  002196                     __end_of___lwdiv:
  3507                           	opt stack 0
  3508                           tblptru	equ	0xFF8
  3509                           tblptrh	equ	0xFF7
  3510                           tblptrl	equ	0xFF6
  3511                           tablat	equ	0xFF5
  3512                           prodh	equ	0xFF4
  3513                           prodl	equ	0xFF3
  3514                           intcon	equ	0xFF2
  3515                           postinc0	equ	0xFEE
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1l	equ	0xFE1
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _limitWheelSpeeds *****************
  3526 ;; Defined at:
  3527 ;;		line 321 in file "main.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  leftWheelSpe    2   16[COMRAM] PTR int 
  3530 ;;		 -> main@leftWheelSpeed(2), 
  3531 ;;  rightWheelSp    2   18[COMRAM] PTR int 
  3532 ;;		 -> main@rightWheelSpeed(2), 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;Total ram usage:        6 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    1
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text13
  3559  001EFC                     __ptext13:
  3560                           	opt stack 0
  3561  001EFC                     _limitWheelSpeeds:
  3562                           	opt stack 29
  3563                           
  3564                           ;main.c: 326: if (*leftWheelSpeed >= 100)
  3565                           
  3566                           ;incstack = 0
  3567  001EFC  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3568  001F00  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3569  001F04  0E01               	movlw	1
  3570  001F06  BEDB               	btfsc	plusw2,7,c
  3571  001F08  D00F               	goto	l2038
  3572  001F0A  0E01               	movlw	1
  3573  001F0C  50DB               	movf	plusw2,w,c
  3574  001F0E  E104               	bnz	u1800
  3575  001F10  0E64               	movlw	100
  3576  001F12  5CDE               	subwf	postinc2,w,c
  3577  001F14  A0D8               	btfss	status,0,c
  3578  001F16  D008               	goto	l2038
  3579  001F18                     u1800:
  3580                           
  3581                           ;main.c: 327: {
  3582                           ;main.c: 328: *leftWheelSpeed = 100;
  3583  001F18  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3584  001F1C  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3585  001F20  0E64               	movlw	100
  3586  001F22  6EDE               	movwf	postinc2,c
  3587  001F24  0E00               	movlw	0
  3588  001F26  6EDD               	movwf	postdec2,c
  3589  001F28                     l2038:
  3590                           
  3591                           ;main.c: 329: }
  3592                           ;main.c: 330: if (*leftWheelSpeed <= -100)
  3593  001F28  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3594  001F2C  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3595  001F30  0E01               	movlw	1
  3596  001F32  AEDB               	btfss	plusw2,7,c
  3597  001F34  D00E               	goto	l2042
  3598  001F36  0E9D               	movlw	157
  3599  001F38  5CDE               	subwf	postinc2,w,c
  3600  001F3A  0EFF               	movlw	255
  3601  001F3C  58DE               	subwfb	postinc2,w,c
  3602  001F3E  B0D8               	btfsc	status,0,c
  3603  001F40  D008               	goto	l2042
  3604                           
  3605                           ;main.c: 331: {
  3606                           ;main.c: 332: *leftWheelSpeed = -100;
  3607  001F42  C011  FFD9         	movff	limitWheelSpeeds@leftWheelSpeed,fsr2l
  3608  001F46  C012  FFDA         	movff	limitWheelSpeeds@leftWheelSpeed+1,fsr2h
  3609  001F4A  0E9C               	movlw	156
  3610  001F4C  6EDE               	movwf	postinc2,c
  3611  001F4E  0EFF               	movlw	255
  3612  001F50  6EDD               	movwf	postdec2,c
  3613  001F52                     l2042:
  3614                           
  3615                           ;main.c: 333: }
  3616                           ;main.c: 335: if (*rightWheelSpeed >= 80)
  3617  001F52  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3618  001F56  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3619  001F5A  0E01               	movlw	1
  3620  001F5C  BEDB               	btfsc	plusw2,7,c
  3621  001F5E  D00F               	goto	l2046
  3622  001F60  0E01               	movlw	1
  3623  001F62  50DB               	movf	plusw2,w,c
  3624  001F64  E104               	bnz	u1820
  3625  001F66  0E50               	movlw	80
  3626  001F68  5CDE               	subwf	postinc2,w,c
  3627  001F6A  A0D8               	btfss	status,0,c
  3628  001F6C  D008               	goto	l2046
  3629  001F6E                     u1820:
  3630                           
  3631                           ;main.c: 336: {
  3632                           ;main.c: 337: *rightWheelSpeed = 80;
  3633  001F6E  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3634  001F72  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3635  001F76  0E50               	movlw	80
  3636  001F78  6EDE               	movwf	postinc2,c
  3637  001F7A  0E00               	movlw	0
  3638  001F7C  6EDD               	movwf	postdec2,c
  3639  001F7E                     l2046:
  3640                           
  3641                           ;main.c: 338: }
  3642                           ;main.c: 339: if (*rightWheelSpeed <= -80)
  3643  001F7E  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3644  001F82  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3645  001F86  0E01               	movlw	1
  3646  001F88  AEDB               	btfss	plusw2,7,c
  3647  001F8A  0012               	return	
  3648  001F8C  0EB1               	movlw	177
  3649  001F8E  5CDE               	subwf	postinc2,w,c
  3650  001F90  0EFF               	movlw	255
  3651  001F92  58DE               	subwfb	postinc2,w,c
  3652  001F94  B0D8               	btfsc	status,0,c
  3653  001F96  0012               	return	
  3654                           
  3655                           ;main.c: 340: {
  3656                           ;main.c: 341: *rightWheelSpeed = -80;
  3657  001F98  C013  FFD9         	movff	limitWheelSpeeds@rightWheelSpeed,fsr2l
  3658  001F9C  C014  FFDA         	movff	limitWheelSpeeds@rightWheelSpeed+1,fsr2h
  3659  001FA0  0EB0               	movlw	176
  3660  001FA2  6EDE               	movwf	postinc2,c
  3661  001FA4  0EFF               	movlw	255
  3662  001FA6  6EDD               	movwf	postdec2,c
  3663  001FA8  0012               	return	
  3664  001FAA                     __end_of_limitWheelSpeeds:
  3665                           	opt stack 0
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           postdec1	equ	0xFE5
  3676                           fsr1l	equ	0xFE1
  3677                           postinc2	equ	0xFDE
  3678                           postdec2	equ	0xFDD
  3679                           plusw2	equ	0xFDB
  3680                           fsr2h	equ	0xFDA
  3681                           fsr2l	equ	0xFD9
  3682                           status	equ	0xFD8
  3683                           
  3684 ;; *************** function ___lltoft *****************
  3685 ;; Defined at:
  3686 ;;		line 35 in file "/Applications/microchip/xc8/v1.36/sources/common/lltoft.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  c               4   24[COMRAM] unsigned long 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  exp             1   32[COMRAM] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  3   24[COMRAM] float 
  3693 ;; Registers used:
  3694 ;;		wreg, status,2, status,0, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;Total ram usage:        9 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    2
  3707 ;; This function calls:
  3708 ;;		___ftpack
  3709 ;; This function is called by:
  3710 ;;		_main
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text14
  3715  0020E8                     __ptext14:
  3716                           	opt stack 0
  3717  0020E8                     ___lltoft:
  3718                           	opt stack 28
  3719                           
  3720                           ;incstack = 0
  3721  0020E8  0E8E               	movlw	142
  3722  0020EA  6E21               	movwf	___lltoft@exp,c
  3723  0020EC  D006               	goto	l2084
  3724  0020EE                     l2082:
  3725  0020EE  90D8               	bcf	status,0,c
  3726  0020F0  321C               	rrcf	___lltoft@c+3,f,c
  3727  0020F2  321B               	rrcf	___lltoft@c+2,f,c
  3728  0020F4  321A               	rrcf	___lltoft@c+1,f,c
  3729  0020F6  3219               	rrcf	___lltoft@c,f,c
  3730  0020F8  2A21               	incf	___lltoft@exp,f,c
  3731  0020FA                     l2084:
  3732  0020FA  0E00               	movlw	0
  3733  0020FC  1419               	andwf	___lltoft@c,w,c
  3734  0020FE  6E1D               	movwf	??___lltoft& (0+255),c
  3735  002100  0E00               	movlw	0
  3736  002102  141A               	andwf	___lltoft@c+1,w,c
  3737  002104  6E1E               	movwf	(??___lltoft+1)& (0+255),c
  3738  002106  0E00               	movlw	0
  3739  002108  141B               	andwf	___lltoft@c+2,w,c
  3740  00210A  6E1F               	movwf	(??___lltoft+2)& (0+255),c
  3741  00210C  0EFF               	movlw	255
  3742  00210E  141C               	andwf	___lltoft@c+3,w,c
  3743  002110  6E20               	movwf	(??___lltoft+3)& (0+255),c
  3744  002112  501D               	movf	??___lltoft,w,c
  3745  002114  101E               	iorwf	??___lltoft+1,w,c
  3746  002116  101F               	iorwf	??___lltoft+2,w,c
  3747  002118  1020               	iorwf	??___lltoft+3,w,c
  3748  00211A  A4D8               	btfss	status,2,c
  3749  00211C  D7E8               	goto	l2082
  3750  00211E  C019  F011         	movff	___lltoft@c,___ftpack@arg
  3751  002122  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
  3752  002126  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
  3753  00212A  C021  F014         	movff	___lltoft@exp,___ftpack@exp
  3754  00212E  0E00               	movlw	0
  3755  002130  6E15               	movwf	___ftpack@sign,c
  3756  002132  ECD5  F00F         	call	___ftpack	;wreg free
  3757  002136  C011  F019         	movff	?___ftpack,?___lltoft
  3758  00213A  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
  3759  00213E  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
  3760  002142  0012               	return	
  3761  002144                     __end_of___lltoft:
  3762                           	opt stack 0
  3763                           tblptru	equ	0xFF8
  3764                           tblptrh	equ	0xFF7
  3765                           tblptrl	equ	0xFF6
  3766                           tablat	equ	0xFF5
  3767                           prodh	equ	0xFF4
  3768                           prodl	equ	0xFF3
  3769                           intcon	equ	0xFF2
  3770                           postinc0	equ	0xFEE
  3771                           wreg	equ	0xFE8
  3772                           postdec1	equ	0xFE5
  3773                           fsr1l	equ	0xFE1
  3774                           postinc2	equ	0xFDE
  3775                           postdec2	equ	0xFDD
  3776                           plusw2	equ	0xFDB
  3777                           fsr2h	equ	0xFDA
  3778                           fsr2l	equ	0xFD9
  3779                           status	equ	0xFD8
  3780                           
  3781 ;; *************** function ___ftpack *****************
  3782 ;; Defined at:
  3783 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;  arg             3   16[COMRAM] unsigned um
  3786 ;;  exp             1   19[COMRAM] unsigned char 
  3787 ;;  sign            1   20[COMRAM] unsigned char 
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  3   16[COMRAM] float 
  3792 ;; Registers used:
  3793 ;;		wreg, status,2, status,0
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3799 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;Total ram usage:        8 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    1
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		___awtoft
  3810 ;;		___ftadd
  3811 ;;		___ftmul
  3812 ;;		___lltoft
  3813 ;; This function uses a non-reentrant model
  3814 ;;
  3815                           
  3816                           	psect	text15
  3817  001FAA                     __ptext15:
  3818                           	opt stack 0
  3819  001FAA                     ___ftpack:
  3820                           	opt stack 27
  3821                           
  3822                           ;incstack = 0
  3823  001FAA  5014               	movf	___ftpack@exp,w,c
  3824  001FAC  B4D8               	btfsc	status,2,c
  3825  001FAE  D005               	goto	l1618
  3826  001FB0  5011               	movf	___ftpack@arg,w,c
  3827  001FB2  1012               	iorwf	___ftpack@arg+1,w,c
  3828  001FB4  1013               	iorwf	___ftpack@arg+2,w,c
  3829  001FB6  A4D8               	btfss	status,2,c
  3830  001FB8  D00C               	goto	l1624
  3831  001FBA                     l1618:
  3832  001FBA  0E00               	movlw	0
  3833  001FBC  6E11               	movwf	?___ftpack,c
  3834  001FBE  0E00               	movlw	0
  3835  001FC0  6E12               	movwf	?___ftpack+1,c
  3836  001FC2  0E00               	movlw	0
  3837  001FC4  6E13               	movwf	?___ftpack+2,c
  3838  001FC6  0012               	return	
  3839  001FC8                     l1622:
  3840  001FC8  2A14               	incf	___ftpack@exp,f,c
  3841  001FCA  90D8               	bcf	status,0,c
  3842  001FCC  3213               	rrcf	___ftpack@arg+2,f,c
  3843  001FCE  3212               	rrcf	___ftpack@arg+1,f,c
  3844  001FD0  3211               	rrcf	___ftpack@arg,f,c
  3845  001FD2                     l1624:
  3846  001FD2  0E00               	movlw	0
  3847  001FD4  1411               	andwf	___ftpack@arg,w,c
  3848  001FD6  6E16               	movwf	??___ftpack& (0+255),c
  3849  001FD8  0E00               	movlw	0
  3850  001FDA  1412               	andwf	___ftpack@arg+1,w,c
  3851  001FDC  6E17               	movwf	(??___ftpack+1)& (0+255),c
  3852  001FDE  0EFE               	movlw	254
  3853  001FE0  1413               	andwf	___ftpack@arg+2,w,c
  3854  001FE2  6E18               	movwf	(??___ftpack+2)& (0+255),c
  3855  001FE4  5016               	movf	??___ftpack,w,c
  3856  001FE6  1017               	iorwf	??___ftpack+1,w,c
  3857  001FE8  1018               	iorwf	??___ftpack+2,w,c
  3858  001FEA  B4D8               	btfsc	status,2,c
  3859  001FEC  D00C               	goto	l1630
  3860  001FEE  D7EC               	goto	l1622
  3861  001FF0                     l1626:
  3862  001FF0  2A14               	incf	___ftpack@exp,f,c
  3863  001FF2  0E01               	movlw	1
  3864  001FF4  2611               	addwf	___ftpack@arg,f,c
  3865  001FF6  0E00               	movlw	0
  3866  001FF8  2212               	addwfc	___ftpack@arg+1,f,c
  3867  001FFA  0E00               	movlw	0
  3868  001FFC  2213               	addwfc	___ftpack@arg+2,f,c
  3869  001FFE  90D8               	bcf	status,0,c
  3870  002000  3213               	rrcf	___ftpack@arg+2,f,c
  3871  002002  3212               	rrcf	___ftpack@arg+1,f,c
  3872  002004  3211               	rrcf	___ftpack@arg,f,c
  3873  002006                     l1630:
  3874  002006  0E00               	movlw	0
  3875  002008  1411               	andwf	___ftpack@arg,w,c
  3876  00200A  6E16               	movwf	??___ftpack& (0+255),c
  3877  00200C  0E00               	movlw	0
  3878  00200E  1412               	andwf	___ftpack@arg+1,w,c
  3879  002010  6E17               	movwf	(??___ftpack+1)& (0+255),c
  3880  002012  0EFF               	movlw	255
  3881  002014  1413               	andwf	___ftpack@arg+2,w,c
  3882  002016  6E18               	movwf	(??___ftpack+2)& (0+255),c
  3883  002018  5016               	movf	??___ftpack,w,c
  3884  00201A  1017               	iorwf	??___ftpack+1,w,c
  3885  00201C  1018               	iorwf	??___ftpack+2,w,c
  3886  00201E  B4D8               	btfsc	status,2,c
  3887  002020  D006               	goto	l1634
  3888  002022  D7E6               	goto	l1626
  3889  002024                     l1632:
  3890  002024  0614               	decf	___ftpack@exp,f,c
  3891  002026  90D8               	bcf	status,0,c
  3892  002028  3611               	rlcf	___ftpack@arg,f,c
  3893  00202A  3612               	rlcf	___ftpack@arg+1,f,c
  3894  00202C  3613               	rlcf	___ftpack@arg+2,f,c
  3895  00202E                     l1634:
  3896  00202E  BE12               	btfsc	___ftpack@arg+1,7,c
  3897  002030  D003               	goto	l486
  3898  002032  0E02               	movlw	2
  3899  002034  6014               	cpfslt	___ftpack@exp,c
  3900  002036  D7F6               	goto	l1632
  3901  002038                     l486:
  3902  002038  A014               	btfss	___ftpack@exp,0,c
  3903  00203A  9E12               	bcf	___ftpack@arg+1,7,c
  3904  00203C  90D8               	bcf	status,0,c
  3905  00203E  3214               	rrcf	___ftpack@exp,f,c
  3906  002040  5014               	movf	___ftpack@exp,w,c
  3907  002042  1213               	iorwf	___ftpack@arg+2,f,c
  3908  002044  5015               	movf	___ftpack@sign,w,c
  3909  002046  A4D8               	btfss	status,2,c
  3910  002048  8E13               	bsf	___ftpack@arg+2,7,c
  3911  00204A  C011  F011         	movff	___ftpack@arg,?___ftpack
  3912  00204E  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  3913  002052  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  3914  002056  0012               	return	
  3915  002058                     __end_of___ftpack:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           postdec1	equ	0xFE5
  3927                           fsr1l	equ	0xFE1
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           plusw2	equ	0xFDB
  3931                           fsr2h	equ	0xFDA
  3932                           fsr2l	equ	0xFD9
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function ___ftge *****************
  3936 ;; Defined at:
  3937 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  ff1             3   48[COMRAM] float 
  3940 ;;  ff2             3   51[COMRAM] float 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;		None               void
  3945 ;; Registers used:
  3946 ;;		wreg, status,2, status,0
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3952 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;Total ram usage:        9 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text16
  3967  002058                     __ptext16:
  3968                           	opt stack 0
  3969  002058                     ___ftge:
  3970                           	opt stack 29
  3971                           
  3972                           ;incstack = 0
  3973  002058  AE33               	btfss	___ftge@ff1+2,7,c
  3974  00205A  D016               	goto	l2066
  3975  00205C  C031  F037         	movff	___ftge@ff1,??___ftge
  3976  002060  C032  F038         	movff	___ftge@ff1+1,??___ftge+1
  3977  002064  C033  F039         	movff	___ftge@ff1+2,??___ftge+2
  3978  002068  1E37               	comf	??___ftge,f,c
  3979  00206A  1E38               	comf	??___ftge+1,f,c
  3980  00206C  1E39               	comf	??___ftge+2,f,c
  3981  00206E  2A37               	incf	??___ftge,f,c
  3982  002070  0E00               	movlw	0
  3983  002072  2238               	addwfc	??___ftge+1,f,c
  3984  002074  2239               	addwfc	??___ftge+2,f,c
  3985  002076  0E00               	movlw	0
  3986  002078  2437               	addwf	??___ftge,w,c
  3987  00207A  6E31               	movwf	___ftge@ff1,c
  3988  00207C  0E00               	movlw	0
  3989  00207E  2038               	addwfc	??___ftge+1,w,c
  3990  002080  6E32               	movwf	___ftge@ff1+1,c
  3991  002082  0E80               	movlw	128
  3992  002084  2039               	addwfc	??___ftge+2,w,c
  3993  002086  6E33               	movwf	___ftge@ff1+2,c
  3994  002088                     l2066:
  3995  002088  AE36               	btfss	___ftge@ff2+2,7,c
  3996  00208A  D016               	goto	l2070
  3997  00208C  C034  F037         	movff	___ftge@ff2,??___ftge
  3998  002090  C035  F038         	movff	___ftge@ff2+1,??___ftge+1
  3999  002094  C036  F039         	movff	___ftge@ff2+2,??___ftge+2
  4000  002098  1E37               	comf	??___ftge,f,c
  4001  00209A  1E38               	comf	??___ftge+1,f,c
  4002  00209C  1E39               	comf	??___ftge+2,f,c
  4003  00209E  2A37               	incf	??___ftge,f,c
  4004  0020A0  0E00               	movlw	0
  4005  0020A2  2238               	addwfc	??___ftge+1,f,c
  4006  0020A4  2239               	addwfc	??___ftge+2,f,c
  4007  0020A6  0E00               	movlw	0
  4008  0020A8  2437               	addwf	??___ftge,w,c
  4009  0020AA  6E34               	movwf	___ftge@ff2,c
  4010  0020AC  0E00               	movlw	0
  4011  0020AE  2038               	addwfc	??___ftge+1,w,c
  4012  0020B0  6E35               	movwf	___ftge@ff2+1,c
  4013  0020B2  0E80               	movlw	128
  4014  0020B4  2039               	addwfc	??___ftge+2,w,c
  4015  0020B6  6E36               	movwf	___ftge@ff2+2,c
  4016  0020B8                     l2070:
  4017  0020B8  0E00               	movlw	0
  4018  0020BA  1A31               	xorwf	___ftge@ff1,f,c
  4019  0020BC  0E00               	movlw	0
  4020  0020BE  1A32               	xorwf	___ftge@ff1+1,f,c
  4021  0020C0  0E80               	movlw	128
  4022  0020C2  1A33               	xorwf	___ftge@ff1+2,f,c
  4023  0020C4  0E00               	movlw	0
  4024  0020C6  1A34               	xorwf	___ftge@ff2,f,c
  4025  0020C8  0E00               	movlw	0
  4026  0020CA  1A35               	xorwf	___ftge@ff2+1,f,c
  4027  0020CC  0E80               	movlw	128
  4028  0020CE  1A36               	xorwf	___ftge@ff2+2,f,c
  4029  0020D0  5034               	movf	___ftge@ff2,w,c
  4030  0020D2  5C31               	subwf	___ftge@ff1,w,c
  4031  0020D4  5035               	movf	___ftge@ff2+1,w,c
  4032  0020D6  5832               	subwfb	___ftge@ff1+1,w,c
  4033  0020D8  5036               	movf	___ftge@ff2+2,w,c
  4034  0020DA  5833               	subwfb	___ftge@ff1+2,w,c
  4035  0020DC  B0D8               	btfsc	status,0,c
  4036  0020DE  D002               	goto	l2076
  4037  0020E0  90D8               	bcf	status,0,c
  4038  0020E2  0012               	return	
  4039  0020E4                     l2076:
  4040  0020E4  80D8               	bsf	status,0,c
  4041  0020E6  0012               	return	
  4042  0020E8                     __end_of___ftge:
  4043                           	opt stack 0
  4044                           tblptru	equ	0xFF8
  4045                           tblptrh	equ	0xFF7
  4046                           tblptrl	equ	0xFF6
  4047                           tablat	equ	0xFF5
  4048                           prodh	equ	0xFF4
  4049                           prodl	equ	0xFF3
  4050                           intcon	equ	0xFF2
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1l	equ	0xFE1
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           plusw2	equ	0xFDB
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _LCDinit *****************
  4063 ;; Defined at:
  4064 ;;		line 60 in file "lcd.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;		None
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      void 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, cstack
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;Total ram usage:        1 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    2
  4085 ;; This function calls:
  4086 ;;		_LCDcheckBF
  4087 ;;		_LCDcmd
  4088 ;; This function is called by:
  4089 ;;		_main
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text17
  4094  001E36                     __ptext17:
  4095                           	opt stack 0
  4096  001E36                     _LCDinit:
  4097                           	opt stack 28
  4098                           
  4099                           ;lcd.c: 63: TRISA = 0;
  4100                           
  4101                           ;incstack = 0
  4102  001E36  0E00               	movlw	0
  4103  001E38  6E92               	movwf	3986,c	;volatile
  4104                           
  4105                           ;lcd.c: 64: TRISEbits.RE0 = 0;
  4106  001E3A  9096               	bcf	3990,0,c	;volatile
  4107                           
  4108                           ;lcd.c: 65: TRISEbits.RE1 = 0;
  4109  001E3C  9296               	bcf	3990,1,c	;volatile
  4110                           
  4111                           ;lcd.c: 66: TRISEbits.RE2 = 0;
  4112  001E3E  9496               	bcf	3990,2,c	;volatile
  4113                           
  4114                           ;lcd.c: 69: LATEbits.LATE0 = 0;
  4115  001E40  908D               	bcf	3981,0,c	;volatile
  4116                           
  4117                           ;lcd.c: 70: LATEbits.LATE1 = 0;
  4118  001E42  928D               	bcf	3981,1,c	;volatile
  4119                           
  4120                           ;lcd.c: 71: LATEbits.LATE2 = 1;
  4121  001E44  848D               	bsf	3981,2,c	;volatile
  4122                           
  4123                           ;lcd.c: 73: _delay((unsigned long)((50)*(2000000/4000.0)));
  4124  001E46  0E21               	movlw	33
  4125  001E48  6E12               	movwf	??_LCDinit& (0+255),c
  4126  001E4A  0E76               	movlw	118
  4127  001E4C                     u2197:
  4128  001E4C  2EE8               	decfsz	wreg,f,c
  4129  001E4E  D7FE               	goto	u2197
  4130  001E50  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4131  001E52  D7FC               	goto	u2197
  4132  001E54  D000               	nop2	
  4133                           
  4134                           ;lcd.c: 74: LCDcmd(0b00110000);
  4135  001E56  0E30               	movlw	48
  4136  001E58  EC64  F011         	call	_LCDcmd
  4137                           
  4138                           ;lcd.c: 75: _delay((unsigned long)((60)*(2000000/4000.0)));
  4139  001E5C  0E27               	movlw	39
  4140  001E5E  6E12               	movwf	??_LCDinit& (0+255),c
  4141  001E60  0EF5               	movlw	245
  4142  001E62                     u2207:
  4143  001E62  2EE8               	decfsz	wreg,f,c
  4144  001E64  D7FE               	goto	u2207
  4145  001E66  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4146  001E68  D7FC               	goto	u2207
  4147  001E6A  F000               	nop	
  4148                           
  4149                           ;lcd.c: 76: LCDcmd(0b00110000);
  4150  001E6C  0E30               	movlw	48
  4151  001E6E  EC64  F011         	call	_LCDcmd
  4152                           
  4153                           ;lcd.c: 77: _delay((unsigned long)((60)*(2000000/4000.0)));
  4154  001E72  0E27               	movlw	39
  4155  001E74  6E12               	movwf	??_LCDinit& (0+255),c
  4156  001E76  0EF5               	movlw	245
  4157  001E78                     u2217:
  4158  001E78  2EE8               	decfsz	wreg,f,c
  4159  001E7A  D7FE               	goto	u2217
  4160  001E7C  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4161  001E7E  D7FC               	goto	u2217
  4162  001E80  F000               	nop	
  4163                           
  4164                           ;lcd.c: 78: LCDcmd(0b00110000);
  4165  001E82  0E30               	movlw	48
  4166  001E84  EC64  F011         	call	_LCDcmd
  4167                           
  4168                           ;lcd.c: 79: _delay((unsigned long)((60)*(2000000/4000.0)));
  4169  001E88  0E27               	movlw	39
  4170  001E8A  6E12               	movwf	??_LCDinit& (0+255),c
  4171  001E8C  0EF5               	movlw	245
  4172  001E8E                     u2227:
  4173  001E8E  2EE8               	decfsz	wreg,f,c
  4174  001E90  D7FE               	goto	u2227
  4175  001E92  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4176  001E94  D7FC               	goto	u2227
  4177  001E96  F000               	nop	
  4178                           
  4179                           ;lcd.c: 80: LCDcmd(0b00111000);
  4180  001E98  0E38               	movlw	56
  4181  001E9A  EC64  F011         	call	_LCDcmd
  4182                           
  4183                           ;lcd.c: 81: _delay((unsigned long)((60)*(2000000/4000.0)));
  4184  001E9E  0E27               	movlw	39
  4185  001EA0  6E12               	movwf	??_LCDinit& (0+255),c
  4186  001EA2  0EF5               	movlw	245
  4187  001EA4                     u2237:
  4188  001EA4  2EE8               	decfsz	wreg,f,c
  4189  001EA6  D7FE               	goto	u2237
  4190  001EA8  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4191  001EAA  D7FC               	goto	u2237
  4192  001EAC  F000               	nop	
  4193                           
  4194                           ;lcd.c: 82: LCDcmd(0b00001000);
  4195  001EAE  0E08               	movlw	8
  4196  001EB0  EC64  F011         	call	_LCDcmd
  4197                           
  4198                           ;lcd.c: 83: _delay((unsigned long)((60)*(2000000/4000.0)));
  4199  001EB4  0E27               	movlw	39
  4200  001EB6  6E12               	movwf	??_LCDinit& (0+255),c
  4201  001EB8  0EF5               	movlw	245
  4202  001EBA                     u2247:
  4203  001EBA  2EE8               	decfsz	wreg,f,c
  4204  001EBC  D7FE               	goto	u2247
  4205  001EBE  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4206  001EC0  D7FC               	goto	u2247
  4207  001EC2  F000               	nop	
  4208                           
  4209                           ;lcd.c: 84: LCDcmd(0b00000001);
  4210  001EC4  0E01               	movlw	1
  4211  001EC6  EC64  F011         	call	_LCDcmd
  4212                           
  4213                           ;lcd.c: 85: _delay((unsigned long)((60)*(2000000/4000.0)));
  4214  001ECA  0E27               	movlw	39
  4215  001ECC  6E12               	movwf	??_LCDinit& (0+255),c
  4216  001ECE  0EF5               	movlw	245
  4217  001ED0                     u2257:
  4218  001ED0  2EE8               	decfsz	wreg,f,c
  4219  001ED2  D7FE               	goto	u2257
  4220  001ED4  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4221  001ED6  D7FC               	goto	u2257
  4222  001ED8  F000               	nop	
  4223                           
  4224                           ;lcd.c: 86: LCDcmd(0b00000110);
  4225  001EDA  0E06               	movlw	6
  4226  001EDC  EC64  F011         	call	_LCDcmd
  4227                           
  4228                           ;lcd.c: 87: _delay((unsigned long)((60)*(2000000/4000.0)));
  4229  001EE0  0E27               	movlw	39
  4230  001EE2  6E12               	movwf	??_LCDinit& (0+255),c
  4231  001EE4  0EF5               	movlw	245
  4232  001EE6                     u2267:
  4233  001EE6  2EE8               	decfsz	wreg,f,c
  4234  001EE8  D7FE               	goto	u2267
  4235  001EEA  2E12               	decfsz	??_LCDinit& (0+255),f,c
  4236  001EEC  D7FC               	goto	u2267
  4237  001EEE  F000               	nop	
  4238                           
  4239                           ;lcd.c: 90: LCDcmd(0b00001111);
  4240  001EF0  0E0F               	movlw	15
  4241  001EF2  EC64  F011         	call	_LCDcmd
  4242                           
  4243                           ;lcd.c: 91: LCDcheckBF();
  4244  001EF6  EC49  F011         	call	_LCDcheckBF	;wreg free
  4245  001EFA  0012               	return		;funcret
  4246  001EFC                     __end_of_LCDinit:
  4247                           	opt stack 0
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           intcon	equ	0xFF2
  4255                           postinc0	equ	0xFEE
  4256                           wreg	equ	0xFE8
  4257                           postdec1	equ	0xFE5
  4258                           fsr1l	equ	0xFE1
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           plusw2	equ	0xFDB
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function _LCDgotoLineTwo *****************
  4267 ;; Defined at:
  4268 ;;		line 142 in file "lcd.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;Total ram usage:        0 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    2
  4289 ;; This function calls:
  4290 ;;		_LCDcheckBF
  4291 ;;		_LCDcmd
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;;		_LCDputs
  4295 ;;		_LCDwriteLineTwo
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           	psect	text18
  4300  0022B8                     __ptext18:
  4301                           	opt stack 0
  4302  0022B8                     _LCDgotoLineTwo:
  4303                           	opt stack 28
  4304                           
  4305                           ;lcd.c: 144: LATEbits.LATE0 = 0;
  4306                           
  4307                           ;incstack = 0
  4308  0022B8  908D               	bcf	3981,0,c	;volatile
  4309                           
  4310                           ;lcd.c: 145: LATEbits.LATE1 = 0;
  4311  0022BA  928D               	bcf	3981,1,c	;volatile
  4312                           
  4313                           ;lcd.c: 146: LCDcmd(0b11000000);
  4314  0022BC  0EC0               	movlw	192
  4315  0022BE  EC64  F011         	call	_LCDcmd
  4316                           
  4317                           ;lcd.c: 147: LCDcheckBF();
  4318  0022C2  EC49  F011         	call	_LCDcheckBF	;wreg free
  4319  0022C6  0012               	return		;funcret
  4320  0022C8                     __end_of_LCDgotoLineTwo:
  4321                           	opt stack 0
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           postdec1	equ	0xFE5
  4332                           fsr1l	equ	0xFE1
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           plusw2	equ	0xFDB
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function _LCDcmd *****************
  4341 ;; Defined at:
  4342 ;;		line 94 in file "lcd.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  command         1    wreg     unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  command         1   16[COMRAM] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      void 
  4349 ;; Registers used:
  4350 ;;		wreg
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;Total ram usage:        1 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    1
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_LCDinit
  4367 ;;		_LCDwrite
  4368 ;;		_LCDgotoLineTwo
  4369 ;;		_LCDclear
  4370 ;;		_LCDgotoLineOne
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text19
  4375  0022C8                     __ptext19:
  4376                           	opt stack 0
  4377  0022C8                     _LCDcmd:
  4378                           	opt stack 26
  4379                           
  4380                           ;incstack = 0
  4381                           ;LCDcmd@command stored from wreg
  4382  0022C8  6E11               	movwf	LCDcmd@command,c
  4383                           
  4384                           ;lcd.c: 96: LATA = command;
  4385  0022CA  C011  FF89         	movff	LCDcmd@command,3977	;volatile
  4386                           
  4387                           ;lcd.c: 97: LATEbits.LATE2 = 0;
  4388  0022CE  948D               	bcf	3981,2,c	;volatile
  4389                           
  4390                           ;lcd.c: 98: LATEbits.LATE2 = 1;
  4391  0022D0  848D               	bsf	3981,2,c	;volatile
  4392  0022D2  0012               	return		;funcret
  4393  0022D4                     __end_of_LCDcmd:
  4394                           	opt stack 0
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           postdec1	equ	0xFE5
  4405                           fsr1l	equ	0xFE1
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           plusw2	equ	0xFDB
  4409                           fsr2h	equ	0xFDA
  4410                           fsr2l	equ	0xFD9
  4411                           status	equ	0xFD8
  4412                           
  4413 ;; *************** function _LCDcheckBF *****************
  4414 ;; Defined at:
  4415 ;;		line 101 in file "lcd.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1    wreg      void 
  4422 ;; Registers used:
  4423 ;;		None
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    1
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_LCDinit
  4440 ;;		_LCDwrite
  4441 ;;		_LCDgotoLineTwo
  4442 ;;		_LCDclear
  4443 ;;		_LCDgotoLineOne
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text20
  4448  002292                     __ptext20:
  4449                           	opt stack 0
  4450  002292                     _LCDcheckBF:
  4451                           	opt stack 26
  4452                           
  4453                           ;lcd.c: 103: TRISAbits.TRISA7 = 1;
  4454                           
  4455                           ;incstack = 0
  4456  002292  8E92               	bsf	3986,7,c	;volatile
  4457                           
  4458                           ;lcd.c: 104: LATEbits.LATE0 = 0;
  4459  002294  908D               	bcf	3981,0,c	;volatile
  4460                           
  4461                           ;lcd.c: 105: LATEbits.LATE1 = 1;
  4462  002296  828D               	bsf	3981,1,c	;volatile
  4463  002298                     l187:
  4464                           
  4465                           ;lcd.c: 110: {
  4466                           ;lcd.c: 111: LATEbits.LATE2 = 0;
  4467  002298  948D               	bcf	3981,2,c	;volatile
  4468                           
  4469                           ;lcd.c: 112: LATEbits.LATE2 = 1;
  4470  00229A  848D               	bsf	3981,2,c	;volatile
  4471  00229C  BE80               	btfsc	3968,7,c	;volatile
  4472  00229E  D7FC               	goto	l187
  4473                           
  4474                           ;lcd.c: 113: }
  4475                           ;lcd.c: 114: LATEbits.LATE2 = 1;
  4476  0022A0  848D               	bsf	3981,2,c	;volatile
  4477                           
  4478                           ;lcd.c: 115: TRISAbits.TRISA7 = 0;
  4479  0022A2  9E92               	bcf	3986,7,c	;volatile
  4480  0022A4  0012               	return		;funcret
  4481  0022A6                     __end_of_LCDcheckBF:
  4482                           	opt stack 0
  4483                           tblptru	equ	0xFF8
  4484                           tblptrh	equ	0xFF7
  4485                           tblptrl	equ	0xFF6
  4486                           tablat	equ	0xFF5
  4487                           prodh	equ	0xFF4
  4488                           prodl	equ	0xFF3
  4489                           intcon	equ	0xFF2
  4490                           postinc0	equ	0xFEE
  4491                           wreg	equ	0xFE8
  4492                           postdec1	equ	0xFE5
  4493                           fsr1l	equ	0xFE1
  4494                           postinc2	equ	0xFDE
  4495                           postdec2	equ	0xFDD
  4496                           plusw2	equ	0xFDB
  4497                           fsr2h	equ	0xFDA
  4498                           fsr2l	equ	0xFD9
  4499                           status	equ	0xFD8
  4500                           
  4501 ;; *************** function _ISR *****************
  4502 ;; Defined at:
  4503 ;;		line 367 in file "main.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;		None
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      void 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0
  4512 ;; Tracked objects:
  4513 ;;		On entry : 0/0
  4514 ;;		On exit  : 0/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;Total ram usage:       16 bytes
  4522 ;; Hardware stack levels used:    1
  4523 ;; This function calls:
  4524 ;;		Nothing
  4525 ;; This function is called by:
  4526 ;;		Interrupt level 2
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	intcode
  4531  000008                     __pintcode:
  4532                           	opt stack 0
  4533  000008                     _ISR:
  4534                           	opt stack 26
  4535                           
  4536                           ;incstack = 0
  4537  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4538  00000A  CFFA F003          	movff	pclath,??_ISR+2
  4539  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  4540  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  4541  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  4542  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  4543  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  4544  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  4545  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  4546  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  4547  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  4548  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  4549  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  4550  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  4551  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  4552                           
  4553                           ;main.c: 369: if (CCP2IE && CCP2IF)
  4554  000042  B0A0               	btfsc	4000,0,c	;volatile
  4555  000044  A0A1               	btfss	4001,0,c	;volatile
  4556  000046  D021               	goto	i2l2248
  4557                           
  4558                           ;main.c: 370: {
  4559                           ;main.c: 372: if(CCPR2 < 2000)
  4560  000048  0ED0               	movlw	208
  4561  00004A  5C67               	subwf	3943,w,c	;volatile
  4562  00004C  0E07               	movlw	7
  4563  00004E  5868               	subwfb	3944,w,c	;volatile
  4564  000050  B0D8               	btfsc	status,0,c
  4565  000052  D010               	goto	i2l148
  4566                           
  4567                           ;main.c: 373: {
  4568                           ;main.c: 374: LATCbits.LATC1 = 0;
  4569  000054  928B               	bcf	3979,1,c	;volatile
  4570                           
  4571                           ;main.c: 375: CCPR2 = 8000 - CCPR2;
  4572  000056  CF67 F001          	movff	3943,??_ISR	;volatile
  4573  00005A  CF68 F002          	movff	3944,??_ISR+1	;volatile
  4574  00005E  1E01               	comf	??_ISR,f,c
  4575  000060  1E02               	comf	??_ISR+1,f,c
  4576  000062  4A01               	infsnz	??_ISR,f,c
  4577  000064  2A02               	incf	??_ISR+1,f,c
  4578  000066  0E40               	movlw	64
  4579  000068  2401               	addwf	??_ISR,w,c
  4580  00006A  6E67               	movwf	3943,c	;volatile
  4581  00006C  0E1F               	movlw	31
  4582  00006E  2002               	addwfc	??_ISR+1,w,c
  4583  000070  6E68               	movwf	3944,c	;volatile
  4584                           
  4585                           ;main.c: 376: }
  4586  000072  D005               	goto	i2l2244
  4587  000074                     i2l148:
  4588                           
  4589                           ;main.c: 377: else
  4590                           ;main.c: 378: {
  4591                           ;main.c: 379: LATCbits.LATC1 = 1;
  4592  000074  828B               	bsf	3979,1,c	;volatile
  4593                           
  4594                           ;main.c: 380: CCPR2 = leftWheelCommandedPW;
  4595  000076  C088  FF67         	movff	_leftWheelCommandedPW,3943	;volatile
  4596  00007A  C089  FF68         	movff	_leftWheelCommandedPW+1,3944	;volatile
  4597  00007E                     i2l2244:
  4598                           
  4599                           ;main.c: 381: }
  4600                           ;main.c: 382: TMR5 = 0;
  4601  00007E  0E00               	movlw	0
  4602  000080  010F               	movlb	15	; () banked
  4603  000082  6F50               	movwf	80,b	;volatile
  4604  000084  0E00               	movlw	0
  4605  000086  6F4F               	movwf	79,b	;volatile
  4606                           
  4607                           ; BSR set to: 15
  4608                           ;main.c: 383: CCP2IF = 0;
  4609  000088  90A1               	bcf	4001,0,c	;volatile
  4610  00008A                     i2l2248:
  4611                           
  4612                           ;main.c: 385: }
  4613                           ;main.c: 387: if (CCP3IE && CCP3IF)
  4614  00008A  B07A               	btfsc	3962,0,c	;volatile
  4615  00008C  A07B               	btfss	3963,0,c	;volatile
  4616  00008E  D024               	goto	i2l2262
  4617                           
  4618                           ;main.c: 388: {
  4619                           ;main.c: 390: if(CCPR3 < 2000)
  4620  000090  0ED0               	movlw	208
  4621  000092  010F               	movlb	15	; () banked
  4622  000094  5D5E               	subwf	94,w,b	;volatile
  4623  000096  0E07               	movlw	7
  4624  000098  010F               	movlb	15	; () banked
  4625  00009A  595F               	subwfb	95,w,b	;volatile
  4626  00009C  B0D8               	btfsc	status,0,c
  4627  00009E  D012               	goto	i2l151
  4628                           
  4629                           ; BSR set to: 15
  4630                           ;main.c: 391: {
  4631                           ;main.c: 392: LATCbits.LATC0 = 0;
  4632  0000A0  908B               	bcf	3979,0,c	;volatile
  4633                           
  4634                           ; BSR set to: 15
  4635                           ;main.c: 393: CCPR3 = 8000 - CCPR3;
  4636  0000A2  CF5E F001          	movff	3934,??_ISR	;volatile
  4637  0000A6  CF5F F002          	movff	3935,??_ISR+1	;volatile
  4638  0000AA  1E01               	comf	??_ISR,f,c
  4639  0000AC  1E02               	comf	??_ISR+1,f,c
  4640  0000AE  4A01               	infsnz	??_ISR,f,c
  4641  0000B0  2A02               	incf	??_ISR+1,f,c
  4642  0000B2  0E40               	movlw	64
  4643  0000B4  2401               	addwf	??_ISR,w,c
  4644  0000B6  010F               	movlb	15	; () banked
  4645  0000B8  6F5E               	movwf	94,b	;volatile
  4646  0000BA  0E1F               	movlw	31
  4647  0000BC  2002               	addwfc	??_ISR+1,w,c
  4648  0000BE  010F               	movlb	15	; () banked
  4649  0000C0  6F5F               	movwf	95,b	;volatile
  4650                           
  4651                           ;main.c: 394: }
  4652  0000C2  D005               	goto	i2l2258
  4653  0000C4                     i2l151:
  4654                           
  4655                           ; BSR set to: 15
  4656                           ;main.c: 395: else
  4657                           ;main.c: 396: {
  4658                           ;main.c: 397: LATCbits.LATC0 = 1;
  4659  0000C4  808B               	bsf	3979,0,c	;volatile
  4660                           
  4661                           ;main.c: 398: CCPR3 = rightWheelCommandedPW;
  4662  0000C6  C08A  FF5E         	movff	_rightWheelCommandedPW,3934	;volatile
  4663  0000CA  C08B  FF5F         	movff	_rightWheelCommandedPW+1,3935	;volatile
  4664  0000CE                     i2l2258:
  4665                           
  4666                           ; BSR set to: 15
  4667                           ;main.c: 399: }
  4668                           ;main.c: 400: TMR1 = 0;
  4669  0000CE  0E00               	movlw	0
  4670  0000D0  6ECF               	movwf	4047,c	;volatile
  4671  0000D2  0E00               	movlw	0
  4672  0000D4  6ECE               	movwf	4046,c	;volatile
  4673                           
  4674                           ; BSR set to: 15
  4675                           ;main.c: 401: CCP3IF = 0;
  4676  0000D6  907B               	bcf	3963,0,c	;volatile
  4677  0000D8                     i2l2262:
  4678                           
  4679                           ;main.c: 403: }
  4680                           ;main.c: 406: if (TMR2IE && TMR2IF)
  4681  0000D8  B29D               	btfsc	3997,1,c	;volatile
  4682  0000DA  A29E               	btfss	3998,1,c	;volatile
  4683  0000DC  D008               	goto	i2l154
  4684                           
  4685                           ;main.c: 407: {
  4686                           ;main.c: 408: elapsedMillis++;
  4687  0000DE  0E01               	movlw	1
  4688  0000E0  0100               	movlb	0	; () banked
  4689  0000E2  277C               	addwf	_elapsedMillis& (0+255),f,b
  4690  0000E4  0E00               	movlw	0
  4691  0000E6  237D               	addwfc	(_elapsedMillis+1)& (0+255),f,b
  4692  0000E8  237E               	addwfc	(_elapsedMillis+2)& (0+255),f,b
  4693  0000EA  237F               	addwfc	(_elapsedMillis+3)& (0+255),f,b
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;main.c: 409: PIR1bits.TMR2IF = 0;
  4697  0000EC  929E               	bcf	3998,1,c	;volatile
  4698  0000EE                     i2l154:
  4699  0000EE  C010  FFF5         	movff	??_ISR+15,tablat
  4700  0000F2  C00F  FFF8         	movff	??_ISR+14,tblptru
  4701  0000F6  C00E  FFF7         	movff	??_ISR+13,tblptrh
  4702  0000FA  C00D  FFF6         	movff	??_ISR+12,tblptrl
  4703  0000FE  C00C  FFF4         	movff	??_ISR+11,prodh
  4704  000102  C00B  FFF3         	movff	??_ISR+10,prodl
  4705  000106  C00A  FFDA         	movff	??_ISR+9,fsr2h
  4706  00010A  C009  FFD9         	movff	??_ISR+8,fsr2l
  4707  00010E  C008  FFE2         	movff	??_ISR+7,fsr1h
  4708  000112  C007  FFE1         	movff	??_ISR+6,fsr1l
  4709  000116  C006  FFEA         	movff	??_ISR+5,fsr0h
  4710  00011A  C005  FFE9         	movff	??_ISR+4,fsr0l
  4711  00011E  C004  FFFB         	movff	??_ISR+3,pclatu
  4712  000122  C003  FFFA         	movff	??_ISR+2,pclath
  4713  000126  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4714  000128  0011               	retfie		f
  4715  00012A                     __end_of_ISR:
  4716                           	opt stack 0
  4717                           pclatu	equ	0xFFB
  4718                           pclath	equ	0xFFA
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           postdec1	equ	0xFE5
  4731                           fsr1h	equ	0xFE2
  4732                           fsr1l	equ	0xFE1
  4733                           postinc2	equ	0xFDE
  4734                           postdec2	equ	0xFDD
  4735                           plusw2	equ	0xFDB
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           pclatu	equ	0xFFB
  4740                           pclath	equ	0xFFA
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           postinc0	equ	0xFEE
  4749                           fsr0h	equ	0xFEA
  4750                           fsr0l	equ	0xFE9
  4751                           wreg	equ	0xFE8
  4752                           postdec1	equ	0xFE5
  4753                           fsr1h	equ	0xFE2
  4754                           fsr1l	equ	0xFE1
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           plusw2	equ	0xFDB
  4758                           fsr2h	equ	0xFDA
  4759                           fsr2l	equ	0xFD9
  4760                           status	equ	0xFD8
  4761                           
  4762                           	psect	rparam
  4763  0000                     pclatu	equ	0xFFB
  4764                           pclath	equ	0xFFA
  4765                           tblptru	equ	0xFF8
  4766                           tblptrh	equ	0xFF7
  4767                           tblptrl	equ	0xFF6
  4768                           tablat	equ	0xFF5
  4769                           prodh	equ	0xFF4
  4770                           prodl	equ	0xFF3
  4771                           intcon	equ	0xFF2
  4772                           postinc0	equ	0xFEE
  4773                           fsr0h	equ	0xFEA
  4774                           fsr0l	equ	0xFE9
  4775                           wreg	equ	0xFE8
  4776                           postdec1	equ	0xFE5
  4777                           fsr1h	equ	0xFE2
  4778                           fsr1l	equ	0xFE1
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           plusw2	equ	0xFDB
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786                           	psect	temp
  4787  00004E                     btemp:
  4788                           	opt stack 0
  4789  00004E                     	ds	1
  4790  0000                     int$flags	set	btemp
  4791                           pclatu	equ	0xFFB
  4792                           pclath	equ	0xFFA
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           fsr0h	equ	0xFEA
  4802                           fsr0l	equ	0xFE9
  4803                           wreg	equ	0xFE8
  4804                           postdec1	equ	0xFE5
  4805                           fsr1h	equ	0xFE2
  4806                           fsr1l	equ	0xFE1
  4807                           postinc2	equ	0xFDE
  4808                           postdec2	equ	0xFDD
  4809                           plusw2	equ	0xFDB
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    10
    Data        4
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     75      77
    BANK0           160     28      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[3]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    limitWheelSpeeds@rightWheelSpeed	PTR int  size(2) Largest target is 2
		 -> main@rightWheelSpeed(BANK0[2]), 

    limitWheelSpeeds@leftWheelSpeed	PTR int  size(2) Largest target is 2
		 -> main@leftWheelSpeed(BANK0[2]), 


Critical Paths under _main in COMRAM

    _wheelVelocity->___fttol
    ___fttol->___ftadd
    ___ftmul->___lltoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _printf->___lwmod
    _putch->_LCDwrite
    _LCDwrite->_LCDcmd
    ___lwmod->___lwdiv
    ___lltoft->___ftpack
    ___ftge->___ftmul
    _LCDinit->_LCDcmd
    _LCDgotoLineTwo->_LCDcmd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_wheelVelocity

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   21487
                                              9 BANK0     19    19      0
                     _LCDgotoLineTwo
                            _LCDinit
                             ___ftge
                            ___ftmul
                           ___lltoft
                   _limitWheelSpeeds
                             _printf
                      _wheelVelocity
 ---------------------------------------------------------------------------------
 (1) _wheelVelocity                                        9     5      4   12129
                                              0 BANK0      9     5      4
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     380
                                             60 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3010
                                             33 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3370
                                             48 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2353
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    22      4    1762
                                             28 COMRAM    17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                             18 COMRAM     1     1      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             1     1      0      44
                                             17 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _limitWheelSpeeds                                     6     2      4     560
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lltoft                                             9     5      4    2395
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2070
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     392
                                             48 COMRAM     9     3      6
                            ___ftmul (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCDinit                                              1     1      0      22
                                             17 COMRAM     1     1      0
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (1) _LCDgotoLineTwo                                       0     0      0      22
                         _LCDcheckBF
                             _LCDcmd
 ---------------------------------------------------------------------------------
 (4) _LCDcmd                                               1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDcheckBF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDgotoLineTwo
     _LCDcheckBF
     _LCDcmd
   _LCDinit
     _LCDcheckBF
     _LCDcmd
   ___ftge
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___lltoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lltoft
     ___ftpack
   _limitWheelSpeeds
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _LCDwrite
         _LCDcheckBF
         _LCDcmd
   _wheelVelocity
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1C      2C       5       27.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4B      4D       1       81.9%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      79      12        0.0%
DATA                 0      0      79       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Apr 21 21:33:07 2016

            ___wmul@multiplicand 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                     ___ftadd@exp1 003C  
                   ___ftadd@exp2 003B                      __CFG_LVP$ON 000000  
                   ___ftadd@sign 003A                              l123 15E0  
                            l109 1378                              l127 1770  
                            l119 1574                              l513 1A14  
                            l187 2298                              l524 1AC4  
                            l533 1AE0                              l509 19EA  
                            l486 2038                              l669 218C  
                            l679 21CE                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _ISR 0008  
                    ?_LCDcheckBF 0001                              wreg 000FE8  
                           ?_ISR 0001                             l2002 1936  
                           l2010 198C                             l2004 193C  
                           l2008 1984                             l2042 1F52  
                           l2026 1BC6                             l2202 157C  
                           l2130 1114                             l2212 1672  
                           l2204 1592                             l2140 119A  
                           l2070 20B8                             l2046 1F7E  
                           l2038 1F28                             l2206 15A8  
                           l2142 11B0                             l2160 130C  
                           l2144 11E8                             l2232 178E  
                           l2136 117E                             l2066 2088  
                           l2082 20EE                             l2218 1702  
                           l2170 1380                             l2154 12A4  
                           l2076 20E4                             l2084 20FA  
                           l1700 1A52                             l2228 1778  
                           l2180 1436                             l2172 1396  
                           l2148 123A                             l1630 2006  
                           l1622 1FC8                             l1710 1A88  
                           l2174 13AC                             l1632 2024  
                           l1624 1FD2                             l1720 1ABC  
                           l1712 1A90                             l2192 1508  
                           l2176 13E6                             l1634 202E  
                           l1626 1FF0                             l1618 1FBA  
                           l1706 1A74                             l2186 149E  
                           l1660 228A                             l1708 1A7E  
                           l1726 1AFC                             l1718 1AB2  
                           l1806 1C7A                             l1736 1B2C  
                           l1752 1D92                             l1824 1CE0  
                           l1770 1DD4                             l1746 1D6A  
                           l1842 1D30                             l1834 1D08  
                           l1852 215A                             l1684 1A22  
                           l1780 1DFC                             l1836 1D14  
                           l1828 1CF0                             l1854 2162  
                           l1934 17B0                             l1678 19F8  
                           l1766 1DC4                             l1838 1D1A  
                           l1864 2182                             l1856 2166  
                           l1880 21C4                             l1872 21A4  
                           l1944 17E8                             l1776 1DEC  
                           l1874 21AC                             l1954 1844  
                           l1938 17C0                             l1876 21B0  
                           l1980 18C2                             l1956 186A  
                           l1796 222A                             l1990 1900  
                           l1966 1892                             l1992 1908  
                           l1968 1896                  __end_of_LCDinit 1EFC  
                           l1994 1910                             l1986 18DC  
                           l1998 1924                             STR_1 100B  
                           STR_2 1016                             u2000 1520  
                           u1211 19B6                             u1221 19CA  
                           u2050 171C                             u1421 1D52  
                           _LATA 000F89                             u1510 1C98  
                           u2207 1E62                             u2217 1E78  
                           u1441 1D7A                             u2227 1E8E  
                           u1515 1C90                             u2237 1EA4  
                           u2247 1EBA                             u1800 1F18  
                           u2257 1ED0                             u2267 1EE6  
                           u1491 1C5E                             u1820 1F6E  
                           u2197 1E4C                             u1910 11FE  
                           u1940 1324                             u1970 13FC  
                           _TMR1 000FCE                             _TMR3 000FB2  
                           _TMR5 000F4F                             _main 101A  
                   ___ftpack@arg 0011                     ___ftpack@exp 0014  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr0l 000FE9                             fsr2h 000FDA  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 004E                    __CFG_BORV$190 000000  
                           pclat 000FFA                  ??_wheelVelocity 004C  
                           prodh 000FF4                             prodl 000FF3  
                           start 012A                    __CFG_IESO$OFF 000000  
                   ___ftmul@cntr 002F                     ___param_bank 000010  
                   ___ftmul@sign 0030                            ??_ISR 0001  
                   ___fttol@exp1 004B                     ___fttol@lval 0047  
              wheelVelocity@temp 0064                            ?_main 0001  
                __end_of___ftadd 1B52                            _CCPR2 000F67  
                          _CCPR3 000F5E                  __end_of___ftmul 1E36  
                          _T1CON 000FCD                  __end_of___fttol 1D42  
                          _T2CON 000FBA                            _T5CON 000F4E  
                __end_of___lwdiv 2196                  __end_of___lwmod 21D8  
                          i2l151 00C4                            i2l154 00EE  
                          i2l148 0074                 __end_of_LCDwrite 22B8  
                          _TRISA 000F92                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                     ___lltoft@exp 0021  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000         __end_of_limitWheelSpeeds 1FAA  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                  ___awtoft@sign 001C                  __end_of_dpowers 100B  
                __end_of_isdigit 2292               __CFG_MCLRE$EXTMCLR 000000  
                  ___ftpack@sign 0015                            _putch 22D4  
                          tablat 000FF5                            plusw2 000FDB  
                          status 000FD8                   __CFG_HFOFST$ON 000000  
            __size_of_LCDcheckBF 0014                  __initialization 21D8  
                   __end_of_main 17A6                           ??_main 0069  
                  ___fttol@sign1 0046                    __activetblptr 000002  
                      ??_LCDinit 0012               wheelVelocity@speed 0060  
             wheelVelocity@wheel 0068                           _CCP2IE 007D00  
                         _CCP2IF 007D08                           _CCP3IE 007BD0  
                         _CCP3IF 007BD8                           _CCPR1H 000FBF  
                         _CCPR1L 000FBE                           _CCPR3H 000F5F  
                         _CCPR3L 000F5E                 __end_of___awtoft 224E  
                         ?_putch 0001                 __end_of___ftpack 2058  
               __end_of___lltoft 2144                           i2l2244 007E  
                         i2l2262 00D8                           i2l2248 008A  
                         i2l2258 00CE                   __CFG_WDTEN$OFF 000000  
                         _LCDcmd 22C8                           _TMR2IE 007CE9  
                         _TMR2IF 007CF1                           _TMR1ON 007E68  
                         _TMR5ON 007A70                   __CFG_PWRTEN$ON 000000  
                 __CFG_XINST$OFF 000000                     _CCPTMRS0bits 000F49  
                         ___ftge 2058                           ___wmul 224E  
                      ??___ftadd 0037                   __CFG_STVREN$ON 000000  
                      ??___ftmul 0028                        ??___fttol 0041  
                      ??___lwdiv 0015                        ??___lwmod 001C  
                 _leftWheelCount 0080                           clear_0 21DE  
                         _printf 17A6            ___ftmul@f3_as_product 002C  
                      ??_isdigit 0011                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8            main@controlLastMillis 006D  
                     __accesstop 0060          __end_of__initialization 2208  
                __CFG_PBADEN$OFF 000000                       ___ftadd@f1 0031  
                     ___ftadd@f2 0034                       ___ftge@ff1 0031  
                     ___ftge@ff2 0034                    ___rparam_used 000001  
                     ___awtoft@c 0019          __size_of_LCDgotoLineTwo 0010  
                      ?_LCDwrite 0001                       ___ftmul@f1 0022  
                     ___ftmul@f2 0025                       ___fttol@f1 003D  
                 __pcstackCOMRAM 0001                     __pidataBANK0 22DE  
                     ___lltoft@c 0019                    __end_of_putch 22DE  
                   ??_LCDcheckBF 0011                          ??_putch 0013  
                     __pbssBANK0 007C                          ?_LCDcmd 0001  
          _rightWheelCommandedPW 008A                  __CFG_PLLCFG$OFF 000000  
                     ??_LCDwrite 0012               __end_of_LCDcheckBF 22A6  
             __CFG_CCP2MX$PORTB3 000000                          ?___ftge 0031  
 limitWheelSpeeds@leftWheelSpeed 0011                          ?___wmul 0011  
             __CFG_CCP3MX$PORTB5 000000                          _CCP2CON 000F66  
                        _CCP3CON 000F5D                        ?___awtoft 0019  
                      ?___ftpack 0011                          ?_printf 001D  
                      ?___lltoft 0019            wheelVelocity@temp_836 0066  
                        _LCDinit 1E36                ?_limitWheelSpeeds 0011  
             ??_limitWheelSpeeds 0015                  __size_of_LCDcmd 000C  
                        __Hparam 0000            __end_of_wheelVelocity 1C4E  
                        __Lparam 0000                  __size_of___ftge 0090  
                        ___ftadd 19A6                  __size_of___wmul 0026  
                        ___ftmul 1D42                          ___fttol 1C4E  
                        ___lwdiv 2144                          ___lwmod 2196  
                   __psmallconst 1000                          __pcinit 21D8  
                     ??___awtoft 001C                       ??___ftpack 0016  
                        __ramtop 1000                       ??___lltoft 001D  
                        __ptext0 101A                          __ptext1 1B52  
                        __ptext2 1C4E                          __ptext3 1D42  
                        __ptext4 19A6                          __ptext5 2216  
                        __ptext6 17A6                          __ptext7 22D4  
                        __ptext8 22A6                          __ptext9 2274  
                __size_of_printf 0200                     __size_of_ISR 0122  
                      _T1CONbits 000FCD                          _dpowers 1001  
                      _T2CONbits 000FBA                          _isdigit 2274  
                      _T5CONbits 000F4E             end_of_initialization 2208  
                  __Lmediumconst 0000  limitWheelSpeeds@rightWheelSpeed 0013  
                 _LCDgotoLineTwo 22B8                          printf@c 002D  
                        printf@f 001D                main@lcdLastMillis 0071  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                      _PORTAbits 000F80                        _PORTBbits 000F81  
                      _TRISAbits 000F92                        _TRISBbits 000F93  
                      _TRISCbits 000F94                        _TRISEbits 000F96  
                  LCDcmd@command 0011           __end_of_LCDgotoLineTwo 22C8  
                 __end_of_LCDcmd 22D4                      printf@width 002B  
                    _CCP2CONbits 000F66                      _CCP3CONbits 000F5D  
                    ___ftmul@exp 002B                __size_of_LCDwrite 0012  
            main@rightWheelSpeed 0076          _rightWheelMeasuredSpeed 004C  
           _leftWheelCommandedPW 0088                   __end_of___ftge 20E8  
                 __end_of___wmul 2274                   __end_of_printf 19A6  
            start_initialization 21D8                      __end_of_ISR 012A  
                       ??_LCDcmd 0011            main@speedCompensation 007A  
                ?_LCDgotoLineTwo 0001                         ??___ftge 0037  
                       ??___wmul 0015                      __pdataBANK0 0088  
                _rightWheelCount 0084                         ??_printf 0021  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
              __size_of___lltoft 005C                      __pbssCOMRAM 004C  
                       ?_LCDinit 0001                    __pcstackBANK0 0060  
                   _isdigit$1408 0012                 ___lwdiv@dividend 0011  
      __size_of_limitWheelSpeeds 00AE                        __pintcode 0008  
                       ?___ftadd 0031                         ?___ftmul 0022  
                       ?___fttol 003D                         ?___lwdiv 0011  
                       ?___lwmod 0018               main@leftWheelSpeed 0078  
               __CFG_PRICLKEN$ON 000000                      __smallconst 1000  
                       ?_isdigit 0001                 ___lwdiv@quotient 0015  
                 __size_of_putch 000A                   ___wmul@product 0015  
                       _LATCbits 000F8B                         _LATEbits 000F8D  
                       _PIE1bits 000F9D                         _LCDwrite 22A6  
                       _PIR1bits 000F9E                 __CFG_WDTPS$32768 000000  
              ___wmul@multiplier 0011                       printf@flag 0028  
                     printf@prec 0027                        main@event 0075  
               __size_of_LCDinit 00C6           __size_of_wheelVelocity 00FC  
                      copy_data0 21FC                         __Hrparam 0000  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTD2 000000                 __size_of___ftadd 01AC  
               __size_of___ftmul 00F4                 __size_of___fttol 00F4  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                       ___awtoft 2216                         ___ftpack 1FAA  
                       ___lltoft 20E8                       _ANSELBbits 000F39  
               __size_of_isdigit 001E                  ___lwdiv@divisor 0013  
                ___lwdiv@counter 0017                         __ptext10 224E  
                       __ptext11 2196                         __ptext20 2292  
                       __ptext12 2144                         __ptext13 1EFC  
                       __ptext14 20E8                         __ptext15 1FAA  
                       __ptext16 2058                         __ptext17 1E36  
                       __ptext18 22B8                         __ptext19 22C8  
               ??_LCDgotoLineTwo 0012                    _elapsedMillis 007C  
                  __size_of_main 078C   wheelVelocity@speedCompensation 0062  
               _limitWheelSpeeds 1EFC                    _wheelVelocity 1B52  
                       int$flags 004E                        printf@val 0029  
                     _LCDcheckBF 2292                        putch@data 0013  
                     _INTCONbits 000FF2                         isdigit@c 0013  
                       intlevel2 0000                 ___lwmod@dividend 0018  
                     _OSCCONbits 000FD3                   ?_wheelVelocity 0060  
                       printf@ap 0025                  ___lwmod@divisor 001A  
                ___lwmod@counter 001C                __CFG_T3CMX$PORTB5 000000  
              __CFG_FOSC$INTIO67 000000                    LCDwrite@input 0012  
